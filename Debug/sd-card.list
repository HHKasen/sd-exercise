
sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c314  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c4e4  0800c4e4  0001c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c954  0800c954  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c954  0800c954  0001c954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c95c  0800c95c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c95c  0800c95c  0001c95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c960  0800c960  0001c960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004680  20000094  0800c9f8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004714  0800c9f8  00024714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002148d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000462e  00000000  00000000  00041551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00045b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  000476d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000750b  00000000  00000000  00049068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002496c  00000000  00000000  00050573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d76  00000000  00000000  00074edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd8  00000000  00000000  00156ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c4cc 	.word	0x0800c4cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800c4cc 	.word	0x0800c4cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <xCommandTest>:
  "FreeRTOS command server.\r\nType Help to view a list of registered commands.\r\n";

BaseType_t xCommandTest(char *pcWriteBuffer,
		size_t xWriteBufferLen,
		const char *pcCommandString)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
//	printf("I am a dummy command\r\n");

	//assumbe buffer is big enough
	memset(pcWriteBuffer,'\0',xWriteBufferLen);
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	2100      	movs	r1, #0
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f00a fc43 	bl	800ae60 <memset>
	//vTaskList(pcWriteBuffer);
	//vTaskGetRunTimeStats
	 long int xx =  __HAL_TIM_GET_COUNTER(&htim2);
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <xCommandTest+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e0:	617b      	str	r3, [r7, #20]
	 printf("timer:%u\r\n",xx);
 80005e2:	6979      	ldr	r1, [r7, #20]
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <xCommandTest+0x48>)
 80005e6:	f00a fc43 	bl	800ae70 <iprintf>

	 printf("timer:%u\r\n",portGET_RUN_TIME_COUNTER_VALUE());
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <xCommandTest+0x44>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <xCommandTest+0x48>)
 80005f4:	f00a fc3c 	bl	800ae70 <iprintf>

	 vTaskGetRunTimeStats(pcWriteBuffer);
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f009 ffbb 	bl	800a574 <vTaskGetRunTimeStats>
//      for( x = 0; x < uxArraySize; x++ )
//      {
//    	  printf("%s\r\n",pxTaskStatusArray[ x ].pcTaskName);
//    	  printf("task time:%lu\r\n",pxTaskStatusArray[ x ].ulRunTimeCounter);
//      }
	return pdFALSE;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000011c 	.word	0x2000011c
 800060c:	0800c540 	.word	0x0800c540

08000610 <vCommandConsoleTask>:

}


void vCommandConsoleTask( void *pvParameters )
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
////	Peripheral_Descriptor_t xConsole;
	int8_t cRxedChar, cInputIndex = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]
//	//xConsole = ( Peripheral_Descriptor_t ) pvParameters;

//	/* Send a welcome message to the user knows they are connected. */
//	FreeRTOS_write( xConsole, pcWelcomeMessage, strlen( pcWelcomeMessage ) );

	printf(pcWelcomeMessage);
 800061c:	482f      	ldr	r0, [pc, #188]	; (80006dc <vCommandConsoleTask+0xcc>)
 800061e:	f00a fcc3 	bl	800afa8 <puts>
	for( ;; )
	{
		vTaskDelay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f009 f8bc 	bl	80097a0 <vTaskDelay>

//		/* This implementation reads a single character at a time.  Wait in the
//        Blocked state until a character is received. */
//		FreeRTOS_read( xConsole, &cRxedChar, sizeof( cRxedChar ) );

		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <vCommandConsoleTask+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000630:	4618      	mov	r0, r3
 8000632:	f008 fc41 	bl	8008eb8 <xQueueSemaphoreTake>

		cRxedChar = _char; //getchar();
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <vCommandConsoleTask+0xd4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, (uint8_t *)&_char, 1, HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000640:	2201      	movs	r2, #1
 8000642:	4928      	ldr	r1, [pc, #160]	; (80006e4 <vCommandConsoleTask+0xd4>)
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <vCommandConsoleTask+0xd8>)
 8000646:	f003 fc76 	bl	8003f36 <HAL_UART_Transmit>

		if( cRxedChar == '\r' )
 800064a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d11b      	bne.n	800068a <vCommandConsoleTask+0x7a>
//			printf("aah\r\n");
			/* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
			//FreeRTOS_write( xConsole, "\r\n", strlen( "\r\n" );
			putchar('\r');
 8000652:	200d      	movs	r0, #13
 8000654:	f00a fc24 	bl	800aea0 <putchar>
			putchar('\n');
 8000658:	200a      	movs	r0, #10
 800065a:	f00a fc21 	bl	800aea0 <putchar>
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
				//printf("The command str:\r\n");
				//printf(pcInputString);
				//printf("\r\n---\r\n");
				xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 800065e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000662:	4922      	ldr	r1, [pc, #136]	; (80006ec <vCommandConsoleTask+0xdc>)
 8000664:	4822      	ldr	r0, [pc, #136]	; (80006f0 <vCommandConsoleTask+0xe0>)
 8000666:	f007 ff57 	bl	8008518 <FreeRTOS_CLIProcessCommand>
 800066a:	60b8      	str	r0, [r7, #8]
								MAX_OUTPUT_LENGTH/* The size of the output buffer. */
						);

				/* Write the output generated by the command interpreter to the
                console. */
				printf(pcOutputString);
 800066c:	481f      	ldr	r0, [pc, #124]	; (80006ec <vCommandConsoleTask+0xdc>)
 800066e:	f00a fbff 	bl	800ae70 <iprintf>
				//FreeRTOS_write( xConsole, pcOutputString, strlen( pcOutputString ) );

			} while( xMoreDataToFollow != pdFALSE );
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f2      	bne.n	800065e <vCommandConsoleTask+0x4e>


			/* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
			cInputIndex = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
			memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 800067c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000680:	2100      	movs	r1, #0
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <vCommandConsoleTask+0xe0>)
 8000684:	f00a fbec 	bl	800ae60 <memset>
 8000688:	e022      	b.n	80006d0 <vCommandConsoleTask+0xc0>
		{
			/* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

			if( cRxedChar == '\n' )
 800068a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800068e:	2b0a      	cmp	r3, #10
 8000690:	d01e      	beq.n	80006d0 <vCommandConsoleTask+0xc0>
			{
				/* Ignore carriage returns. */
				//printf("oh?\r\n");
			}
			else if( cRxedChar == '\b' )
 8000692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000696:	2b08      	cmp	r3, #8
 8000698:	d10f      	bne.n	80006ba <vCommandConsoleTask+0xaa>
			{
				/* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
				if( cInputIndex > 0 )
 800069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dd16      	ble.n	80006d0 <vCommandConsoleTask+0xc0>
				{
					cInputIndex--;
 80006a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	3b01      	subs	r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73fb      	strb	r3, [r7, #15]
					pcInputString[ cInputIndex ] = '\0';
 80006ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <vCommandConsoleTask+0xe0>)
 80006b4:	2100      	movs	r1, #0
 80006b6:	54d1      	strb	r1, [r2, r3]
 80006b8:	e00a      	b.n	80006d0 <vCommandConsoleTask+0xc0>
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
				if( cInputIndex < MAX_INPUT_LENGTH )
				{
					pcInputString[ cInputIndex ] = cRxedChar;
 80006ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <vCommandConsoleTask+0xe0>)
 80006c0:	7bba      	ldrb	r2, [r7, #14]
 80006c2:	54ca      	strb	r2, [r1, r3]
					cInputIndex++;
 80006c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3301      	adds	r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	73fb      	strb	r3, [r7, #15]
				}
			}
		}

		//after processing char, rearm interrupt
		HAL_UART_Receive_IT(&huart2, (uint8_t *)&_char, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	4904      	ldr	r1, [pc, #16]	; (80006e4 <vCommandConsoleTask+0xd4>)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <vCommandConsoleTask+0xd8>)
 80006d6:	f003 fd62 	bl	800419e <HAL_UART_Receive_IT>
		vTaskDelay(1);
 80006da:	e7a2      	b.n	8000622 <vCommandConsoleTask+0x12>
 80006dc:	0800c570 	.word	0x0800c570
 80006e0:	200001a8 	.word	0x200001a8
 80006e4:	200001ac 	.word	0x200001ac
 80006e8:	20000164 	.word	0x20000164
 80006ec:	200002dc 	.word	0x200002dc
 80006f0:	200001b0 	.word	0x200001b0

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	f6ad 0dd4 	subw	sp, sp, #2260	; 0x8d4
 80006fa:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80006fc:	4ba4      	ldr	r3, [pc, #656]	; (8000990 <main+0x29c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6858      	ldr	r0, [r3, #4]
 8000702:	2300      	movs	r3, #0
 8000704:	2202      	movs	r2, #2
 8000706:	2100      	movs	r1, #0
 8000708:	f00a fc56 	bl	800afb8 <setvbuf>
	xBinarySemaphore = xSemaphoreCreateBinary();
 800070c:	2203      	movs	r2, #3
 800070e:	2100      	movs	r1, #0
 8000710:	2001      	movs	r0, #1
 8000712:	f008 f97d 	bl	8008a10 <xQueueGenericCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a9e      	ldr	r2, [pc, #632]	; (8000994 <main+0x2a0>)
 800071a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fe62 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f95a 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 facc 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000728:	f000 faa0 	bl	8000c6c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800072c:	f000 f9f8 	bl	8000b20 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000730:	f004 fcd4 	bl	80050dc <MX_FATFS_Init>
  MX_TIM2_Init();
 8000734:	f000 fa2a 	bl	8000b8c <MX_TIM2_Init>
  MX_DAC_Init();
 8000738:	f000 f9c8 	bl	8000acc <MX_DAC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800073c:	f000 f9ba 	bl	8000ab4 <MX_NVIC_Init>
//  printf("about to make fs...\r\n");
//  res = f_mkfs("0",FM_ANY,0, work, sizeof work);
//  printf("mkfs res:%u\r\n",res);

  /* Register work area */
  res = f_mount(&fs, "", 0);
 8000740:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8000744:	2200      	movs	r2, #0
 8000746:	4994      	ldr	r1, [pc, #592]	; (8000998 <main+0x2a4>)
 8000748:	4618      	mov	r0, r3
 800074a:	f006 ffe5 	bl	8007718 <f_mount>
 800074e:	4603      	mov	r3, r0
 8000750:	f887 38c3 	strb.w	r3, [r7, #2243]	; 0x8c3
  printf("mnt res:%u\r\n",res);
 8000754:	f897 38c3 	ldrb.w	r3, [r7, #2243]	; 0x8c3
 8000758:	4619      	mov	r1, r3
 800075a:	4890      	ldr	r0, [pc, #576]	; (800099c <main+0x2a8>)
 800075c:	f00a fb88 	bl	800ae70 <iprintf>

  /* Create a file as new */
  res = f_open(&fil, "hello.txt", FA_CREATE_NEW | FA_WRITE);
 8000760:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8000764:	2206      	movs	r2, #6
 8000766:	498e      	ldr	r1, [pc, #568]	; (80009a0 <main+0x2ac>)
 8000768:	4618      	mov	r0, r3
 800076a:	f007 f839 	bl	80077e0 <f_open>
 800076e:	4603      	mov	r3, r0
 8000770:	f887 38c3 	strb.w	r3, [r7, #2243]	; 0x8c3
  printf("open res:%u\r\n",res);
 8000774:	f897 38c3 	ldrb.w	r3, [r7, #2243]	; 0x8c3
 8000778:	4619      	mov	r1, r3
 800077a:	488a      	ldr	r0, [pc, #552]	; (80009a4 <main+0x2b0>)
 800077c:	f00a fb78 	bl	800ae70 <iprintf>

  /* Write a message */
  res = f_write(&fil, "Hello, World!\r\n", 15, &bw);
 8000780:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000784:	f207 4054 	addw	r0, r7, #1108	; 0x454
 8000788:	220f      	movs	r2, #15
 800078a:	4987      	ldr	r1, [pc, #540]	; (80009a8 <main+0x2b4>)
 800078c:	f007 f9ed 	bl	8007b6a <f_write>
 8000790:	4603      	mov	r3, r0
 8000792:	f887 38c3 	strb.w	r3, [r7, #2243]	; 0x8c3
  printf("write res:%u\r\n",res);
 8000796:	f897 38c3 	ldrb.w	r3, [r7, #2243]	; 0x8c3
 800079a:	4619      	mov	r1, r3
 800079c:	4883      	ldr	r0, [pc, #524]	; (80009ac <main+0x2b8>)
 800079e:	f00a fb67 	bl	800ae70 <iprintf>

  /* Close the file */
  f_close(&fil);
 80007a2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fc0c 	bl	8007fc4 <f_close>

  FRESULT fr;
  FILINFO fno;
  const char *fname = "hello.txt";
 80007ac:	4b7c      	ldr	r3, [pc, #496]	; (80009a0 <main+0x2ac>)
 80007ae:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc


  printf("Test for \"%s\"...\r\n", fname);
 80007b2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80007b6:	487e      	ldr	r0, [pc, #504]	; (80009b0 <main+0x2bc>)
 80007b8:	f00a fb5a 	bl	800ae70 <iprintf>

  fr = f_stat(fname, &fno);
 80007bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c0:	4619      	mov	r1, r3
 80007c2:	f8d7 08bc 	ldr.w	r0, [r7, #2236]	; 0x8bc
 80007c6:	f007 fc2c 	bl	8008022 <f_stat>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 38bb 	strb.w	r3, [r7, #2235]	; 0x8bb
  switch (fr) {
 80007d0:	f897 38bb 	ldrb.w	r3, [r7, #2235]	; 0x8bb
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <main+0xea>
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d07d      	beq.n	80008d8 <main+0x1e4>
 80007dc:	e082      	b.n	80008e4 <main+0x1f0>

  case FR_OK:
      printf("Size: %lu\r\n", fno.fsize);
 80007de:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80007e2:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4872      	ldr	r0, [pc, #456]	; (80009b4 <main+0x2c0>)
 80007ec:	f00a fb40 	bl	800ae70 <iprintf>
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80007f0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80007f4:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 80007f8:	889b      	ldrh	r3, [r3, #4]
 80007fa:	0a5b      	lsrs	r3, r3, #9
 80007fc:	b29b      	uxth	r3, r3
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80007fe:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8000802:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8000806:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 800080a:	889b      	ldrh	r3, [r3, #4]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	b29b      	uxth	r3, r3
 8000810:	f003 020f 	and.w	r2, r3, #15
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8000814:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8000818:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 800081c:	889b      	ldrh	r3, [r3, #4]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 800081e:	f003 001f 	and.w	r0, r3, #31
             fno.ftime >> 11, fno.ftime >> 5 & 63);
 8000822:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8000826:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 800082a:	88db      	ldrh	r3, [r3, #6]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 800082c:	0adb      	lsrs	r3, r3, #11
 800082e:	b29b      	uxth	r3, r3
 8000830:	461c      	mov	r4, r3
             fno.ftime >> 11, fno.ftime >> 5 & 63);
 8000832:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8000836:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 800083a:	88db      	ldrh	r3, [r3, #6]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 800083c:	095b      	lsrs	r3, r3, #5
 800083e:	b29b      	uxth	r3, r3
 8000840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	9400      	str	r4, [sp, #0]
 8000848:	4603      	mov	r3, r0
 800084a:	485b      	ldr	r0, [pc, #364]	; (80009b8 <main+0x2c4>)
 800084c:	f00a fb10 	bl	800ae70 <iprintf>
      printf("Attributes: %c%c%c%c%c\r\n",
             (fno.fattrib & AM_DIR) ? 'D' : '-',
 8000850:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8000854:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8000858:	7a1b      	ldrb	r3, [r3, #8]
 800085a:	f003 0310 	and.w	r3, r3, #16
      printf("Attributes: %c%c%c%c%c\r\n",
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <main+0x172>
 8000862:	2144      	movs	r1, #68	; 0x44
 8000864:	e000      	b.n	8000868 <main+0x174>
 8000866:	212d      	movs	r1, #45	; 0x2d
             (fno.fattrib & AM_RDO) ? 'R' : '-',
 8000868:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800086c:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8000870:	7a1b      	ldrb	r3, [r3, #8]
 8000872:	f003 0301 	and.w	r3, r3, #1
      printf("Attributes: %c%c%c%c%c\r\n",
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <main+0x18a>
 800087a:	2052      	movs	r0, #82	; 0x52
 800087c:	e000      	b.n	8000880 <main+0x18c>
 800087e:	202d      	movs	r0, #45	; 0x2d
             (fno.fattrib & AM_HID) ? 'H' : '-',
 8000880:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8000884:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8000888:	7a1b      	ldrb	r3, [r3, #8]
 800088a:	f003 0302 	and.w	r3, r3, #2
      printf("Attributes: %c%c%c%c%c\r\n",
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <main+0x1a2>
 8000892:	2448      	movs	r4, #72	; 0x48
 8000894:	e000      	b.n	8000898 <main+0x1a4>
 8000896:	242d      	movs	r4, #45	; 0x2d
             (fno.fattrib & AM_SYS) ? 'S' : '-',
 8000898:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800089c:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 80008a0:	7a1b      	ldrb	r3, [r3, #8]
 80008a2:	f003 0304 	and.w	r3, r3, #4
      printf("Attributes: %c%c%c%c%c\r\n",
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <main+0x1ba>
 80008aa:	2353      	movs	r3, #83	; 0x53
 80008ac:	e000      	b.n	80008b0 <main+0x1bc>
 80008ae:	232d      	movs	r3, #45	; 0x2d
             (fno.fattrib & AM_ARC) ? 'A' : '-');
 80008b0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80008b4:	f5a2 6209 	sub.w	r2, r2, #2192	; 0x890
 80008b8:	7a12      	ldrb	r2, [r2, #8]
 80008ba:	f002 0220 	and.w	r2, r2, #32
      printf("Attributes: %c%c%c%c%c\r\n",
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d001      	beq.n	80008c6 <main+0x1d2>
 80008c2:	2241      	movs	r2, #65	; 0x41
 80008c4:	e000      	b.n	80008c8 <main+0x1d4>
 80008c6:	222d      	movs	r2, #45	; 0x2d
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4623      	mov	r3, r4
 80008ce:	4602      	mov	r2, r0
 80008d0:	483a      	ldr	r0, [pc, #232]	; (80009bc <main+0x2c8>)
 80008d2:	f00a facd 	bl	800ae70 <iprintf>
      break;
 80008d6:	e00b      	b.n	80008f0 <main+0x1fc>

  case FR_NO_FILE:
      printf("\"%s\" is not exist.\r\n", fname);
 80008d8:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80008dc:	4838      	ldr	r0, [pc, #224]	; (80009c0 <main+0x2cc>)
 80008de:	f00a fac7 	bl	800ae70 <iprintf>
      break;
 80008e2:	e005      	b.n	80008f0 <main+0x1fc>

  default:
      printf("An error occured. (%d)\n", fr);
 80008e4:	f897 38bb 	ldrb.w	r3, [r7, #2235]	; 0x8bb
 80008e8:	4619      	mov	r1, r3
 80008ea:	4836      	ldr	r0, [pc, #216]	; (80009c4 <main+0x2d0>)
 80008ec:	f00a fac0 	bl	800ae70 <iprintf>
  }


  /* Unregister work area */
  f_mount(0, "", 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	4929      	ldr	r1, [pc, #164]	; (8000998 <main+0x2a4>)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f006 ff0f 	bl	8007718 <f_mount>
//              "Toggle 1",   // Name of task
//              1024,         // Stack size (bytes in ESP32, words in FreeRTOS)
//              NULL,         // Parameter to pass to function
//              1,            // Task priority (0 to configMAX_PRIORITIES - 1)
//              NULL);         // Task handle
  xTaskCreate(  // Use xTaskCreate() in vanilla FreeRTOS
 80008fa:	2300      	movs	r3, #0
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	2302      	movs	r3, #2
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2300      	movs	r3, #0
 8000904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000908:	492f      	ldr	r1, [pc, #188]	; (80009c8 <main+0x2d4>)
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <main+0x2d8>)
 800090c:	f008 fe00 	bl	8009510 <xTaskCreate>
//              128,         // Stack size (bytes in ESP32, words in FreeRTOS)
//              NULL,         // Parameter to pass to function
//              1,            // Task priority (0 to configMAX_PRIORITIES - 1)
//              NULL);         // Task handle

  FreeRTOS_CLIRegisterCommand( (const) &xTestCmd);
 8000910:	482f      	ldr	r0, [pc, #188]	; (80009d0 <main+0x2dc>)
 8000912:	f007 fdbd 	bl	8008490 <FreeRTOS_CLIRegisterCommand>

  uint16_t dac_value=0;
 8000916:	2300      	movs	r3, #0
 8000918:	f8a7 38b8 	strh.w	r3, [r7, #2232]	; 0x8b8
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800091c:	2100      	movs	r1, #0
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <main+0x2e0>)
 8000920:	f000 feca 	bl	80016b8 <HAL_DAC_Start>

  while(1){
	  for(uint16_t i =1800; i<3200; i=i+100){
 8000924:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000928:	f8a7 38c6 	strh.w	r3, [r7, #2246]	; 0x8c6
 800092c:	e00e      	b.n	800094c <main+0x258>
		  //dac_value = (dac_value+100)%4096;
		  HAL_Delay(50);
 800092e:	2032      	movs	r0, #50	; 0x32
 8000930:	f000 fd9a 	bl	8001468 <HAL_Delay>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i);
 8000934:	f8b7 38c6 	ldrh.w	r3, [r7, #2246]	; 0x8c6
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <main+0x2e0>)
 800093e:	f000 ff0d 	bl	800175c <HAL_DAC_SetValue>
	  for(uint16_t i =1800; i<3200; i=i+100){
 8000942:	f8b7 38c6 	ldrh.w	r3, [r7, #2246]	; 0x8c6
 8000946:	3364      	adds	r3, #100	; 0x64
 8000948:	f8a7 38c6 	strh.w	r3, [r7, #2246]	; 0x8c6
 800094c:	f8b7 38c6 	ldrh.w	r3, [r7, #2246]	; 0x8c6
 8000950:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000954:	d3eb      	bcc.n	800092e <main+0x23a>
	  }
	  for(uint16_t i =1800; i<3200; i=i+100){
 8000956:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800095a:	f8a7 38c4 	strh.w	r3, [r7, #2244]	; 0x8c4
 800095e:	e011      	b.n	8000984 <main+0x290>
		  //dac_value = (dac_value+100)%4096;
		  HAL_Delay(50);
 8000960:	2032      	movs	r0, #50	; 0x32
 8000962:	f000 fd81 	bl	8001468 <HAL_Delay>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 5000-i);
 8000966:	f8b7 38c4 	ldrh.w	r3, [r7, #2244]	; 0x8c4
 800096a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800096e:	3308      	adds	r3, #8
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	4817      	ldr	r0, [pc, #92]	; (80009d4 <main+0x2e0>)
 8000976:	f000 fef1 	bl	800175c <HAL_DAC_SetValue>
	  for(uint16_t i =1800; i<3200; i=i+100){
 800097a:	f8b7 38c4 	ldrh.w	r3, [r7, #2244]	; 0x8c4
 800097e:	3364      	adds	r3, #100	; 0x64
 8000980:	f8a7 38c4 	strh.w	r3, [r7, #2244]	; 0x8c4
 8000984:	f8b7 38c4 	ldrh.w	r3, [r7, #2244]	; 0x8c4
 8000988:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800098c:	d3e8      	bcc.n	8000960 <main+0x26c>
	  for(uint16_t i =1800; i<3200; i=i+100){
 800098e:	e7c9      	b.n	8000924 <main+0x230>
 8000990:	20000030 	.word	0x20000030
 8000994:	200001a8 	.word	0x200001a8
 8000998:	0800c5bc 	.word	0x0800c5bc
 800099c:	0800c5c0 	.word	0x0800c5c0
 80009a0:	0800c5d0 	.word	0x0800c5d0
 80009a4:	0800c5dc 	.word	0x0800c5dc
 80009a8:	0800c5ec 	.word	0x0800c5ec
 80009ac:	0800c5fc 	.word	0x0800c5fc
 80009b0:	0800c60c 	.word	0x0800c60c
 80009b4:	0800c620 	.word	0x0800c620
 80009b8:	0800c62c 	.word	0x0800c62c
 80009bc:	0800c654 	.word	0x0800c654
 80009c0:	0800c670 	.word	0x0800c670
 80009c4:	0800c688 	.word	0x0800c688
 80009c8:	0800c6a0 	.word	0x0800c6a0
 80009cc:	08000611 	.word	0x08000611
 80009d0:	0800c804 	.word	0x0800c804
 80009d4:	200000b0 	.word	0x200000b0

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2234      	movs	r2, #52	; 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00a fa3a 	bl	800ae60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <SystemClock_Config+0xd4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a29      	ldr	r2, [pc, #164]	; (8000aac <SystemClock_Config+0xd4>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <SystemClock_Config+0xd4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	2310      	movs	r3, #16
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fca8 	bl	80023bc <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a72:	f000 f9df 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f916 	bl	8001cc4 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a9e:	f000 f9c9 	bl	8000e34 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f000 fdaf 	bl	8001620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac2:	2026      	movs	r0, #38	; 0x26
 8000ac4:	f000 fdc8 	bl	8001658 <HAL_NVIC_EnableIRQ>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_DAC_Init+0x4c>)
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <MX_DAC_Init+0x50>)
 8000ade:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_DAC_Init+0x4c>)
 8000ae2:	f000 fdc7 	bl	8001674 <HAL_DAC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000aec:	f000 f9a2 	bl	8000e34 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_DAC_Init+0x4c>)
 8000b00:	f000 fe51 	bl	80017a6 <HAL_DAC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b0a:	f000 f993 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000b0 	.word	0x200000b0
 8000b1c:	40007400 	.word	0x40007400

08000b20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <MX_SPI2_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b54:	2230      	movs	r2, #48	; 0x30
 8000b56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_SPI2_Init+0x64>)
 8000b72:	f001 fec1 	bl	80028f8 <HAL_SPI_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b7c:	f000 f95a 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000c4 	.word	0x200000c4
 8000b88:	40003800 	.word	0x40003800

08000b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000be0:	f002 fabc 	bl	800315c <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000bea:	f000 f923 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481b      	ldr	r0, [pc, #108]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000bfc:	f002 fd6b 	bl	80036d6 <HAL_TIM_ConfigClockSource>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 f915 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000c0c:	f002 fb66 	bl	80032dc <HAL_TIM_IC_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f000 f90d 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000c2a:	f003 f8a7 	bl	8003d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000c34:	f000 f8fe 	bl	8000e34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_TIM2_Init+0xdc>)
 8000c50:	f002 fca5 	bl	800359e <HAL_TIM_IC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000c5a:	f000 f8eb 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000011c 	.word	0x2000011c

08000c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART2_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f003 f8fa 	bl	8003e9c <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f8c1 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000164 	.word	0x20000164
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_GPIO_Init+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a33      	ldr	r2, [pc, #204]	; (8000dac <MX_GPIO_Init+0xec>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_GPIO_Init+0xec>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_GPIO_Init+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a2c      	ldr	r2, [pc, #176]	; (8000dac <MX_GPIO_Init+0xec>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_GPIO_Init+0xec>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4819      	ldr	r0, [pc, #100]	; (8000db0 <MX_GPIO_Init+0xf0>)
 8000d4c:	f000 ffa0 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_GPIO_Init+0xf4>)
 8000d68:	f000 fdfe 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <MX_GPIO_Init+0xf0>)
 8000d84:	f000 fdf0 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_GPIO_Init+0xf8>)
 8000da0:	f000 fde2 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020000 	.word	0x40020000

08000dbc <__io_putchar>:
//}



PUTCHAR_PROTOTYPE
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000dc4:	1d39      	adds	r1, r7, #4
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <__io_putchar+0x20>)
 8000dce:	f003 f8b2 	bl	8003f36 <HAL_UART_Transmit>

  return ch;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000164 	.word	0x20000164

08000de0 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	//__HAL_UART_CLEAR_OREFLAG(&huart2);

	uint8_t _char;

	HAL_UART_Receive(&huart2, (uint8_t *)&_char, 1, HAL_MAX_DELAY);
 8000de6:	1df9      	adds	r1, r7, #7
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dec:	2201      	movs	r2, #1
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <__io_getchar+0x2c>)
 8000df0:	f003 f933 	bl	800405a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&_char, 1, HAL_MAX_DELAY);
 8000df4:	1df9      	adds	r1, r7, #7
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <__io_getchar+0x2c>)
 8000dfe:	f003 f89a 	bl	8003f36 <HAL_UART_Transmit>
	//if (_char == '\r') {
	//	unsigned char repl = '\n';
	//	HAL_UART_Transmit(&huart2, &repl, 1, HAL_MAX_DELAY);
	//}

	return _char;
 8000e02:	79fb      	ldrb	r3, [r7, #7]

}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000164 	.word	0x20000164

08000e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e22:	f000 fb01 	bl	8001428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010000 	.word	0x40010000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x54>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <HAL_MspInit+0x54>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x54>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_MspInit+0x54>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_MspInit+0x54>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_MspInit+0x54>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	f06f 0001 	mvn.w	r0, #1
 8000e86:	f000 fbcb 	bl	8001620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_DAC_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d127      	bne.n	8000f0a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_DAC_MspInit+0x80>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <HAL_DAC_MspInit+0x80>)
 8000ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_DAC_MspInit+0x80>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_DAC_MspInit+0x80>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_DAC_MspInit+0x80>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_DAC_MspInit+0x80>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_DAC_MspInit+0x84>)
 8000f06:	f000 fd2f 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40007400 	.word	0x40007400
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_SPI_MspInit+0x84>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12c      	bne.n	8000f9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_SPI_MspInit+0x88>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <HAL_SPI_MspInit+0x88>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_SPI_MspInit+0x88>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_SPI_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <HAL_SPI_MspInit+0x88>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_SPI_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_SPI_MspInit+0x8c>)
 8000f98:	f000 fce6 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40003800 	.word	0x40003800
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020400 	.word	0x40020400

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd0:	d133      	bne.n	800103a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800101a:	2301      	movs	r3, #1
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8001026:	f000 fc9f 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800102a:	2026      	movs	r0, #38	; 0x26
 800102c:	f000 fb14 	bl	8001658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
    //configMAX_SYSCALL_INTERRUPT_PRIORITY is 80, hardcoded as a test

    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2106      	movs	r1, #6
 8001034:	2026      	movs	r0, #38	; 0x26
 8001036:	f000 faf3 	bl	8001620 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_UART_MspInit+0x94>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d133      	bne.n	80010d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x98>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_UART_MspInit+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a6:	230c      	movs	r3, #12
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b6:	2307      	movs	r3, #7
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_UART_MspInit+0x9c>)
 80010c2:	f000 fc51 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2026      	movs	r0, #38	; 0x26
 80010cc:	f000 faa8 	bl	8001620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d0:	2026      	movs	r0, #38	; 0x26
 80010d2:	f000 fac1 	bl	8001658 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004400 	.word	0x40004400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	2019      	movs	r0, #25
 8001102:	f000 fa8d 	bl	8001620 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001106:	2019      	movs	r0, #25
 8001108:	f000 faa6 	bl	8001658 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_InitTick+0xa0>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_InitTick+0xa0>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6453      	str	r3, [r2, #68]	; 0x44
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_InitTick+0xa0>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001128:	f107 0210 	add.w	r2, r7, #16
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fee0 	bl	8001ef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001138:	f000 feca 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 800113c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_InitTick+0xa4>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3b01      	subs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_InitTick+0xa8>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_InitTick+0xac>)
 8001150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_InitTick+0xa8>)
 8001154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_InitTick+0xa8>)
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_InitTick+0xa8>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_InitTick+0xa8>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <HAL_InitTick+0xa8>)
 800116e:	f001 fff5 	bl	800315c <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d104      	bne.n	8001182 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <HAL_InitTick+0xa8>)
 800117a:	f002 f83f 	bl	80031fc <HAL_TIM_Base_Start_IT>
 800117e:	4603      	mov	r3, r0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	431bde83 	.word	0x431bde83
 8001194:	20000408 	.word	0x20000408
 8001198:	40010000 	.word	0x40010000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011ce:	f002 f8de 	bl	800338e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000408 	.word	0x20000408

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <USART2_IRQHandler+0x3c>)
 80011e4:	f003 f80c 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  	BaseType_t xHigherPriorityTaskWoken;


  	xHigherPriorityTaskWoken = pdFALSE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]

  	//printf("about to give semaphore\r\n");
  	xSemaphoreGiveFromISR( xBinarySemaphore, &xHigherPriorityTaskWoken );
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <USART2_IRQHandler+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1d3a      	adds	r2, r7, #4
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 fdd1 	bl	8008d9c <xQueueGiveFromISR>

  	//printf("gave semaphore\r\n");
  	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <USART2_IRQHandler+0x34>
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <USART2_IRQHandler+0x44>)
 8001202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	f3bf 8f4f 	dsb	sy
 800120c:	f3bf 8f6f 	isb	sy

  /* USER CODE END USART2_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000164 	.word	0x20000164
 800121c:	200001a8 	.word	0x200001a8
 8001220:	e000ed04 	.word	0xe000ed04

08001224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001236:	f7ff fdd3 	bl	8000de0 <__io_getchar>
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
  }

  return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fd9f 	bl	8000dbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
  }
  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012be:	605a      	str	r2, [r3, #4]
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f009 fd5e 	bl	800adf0 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20020000 	.word	0x20020000
 8001360:	00000400 	.word	0x00000400
 8001364:	20000450 	.word	0x20000450
 8001368:	20004718 	.word	0x20004718

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ba:	f7ff ffd7 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f009 fd1d 	bl	800adfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff f997 	bl	80006f4 <main>
  bx  lr    
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013d4:	0800c964 	.word	0x0800c964
  ldr r2, =_sbss
 80013d8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013dc:	20004714 	.word	0x20004714

080013e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_Init+0x40>)
 80013ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_Init+0x40>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x40>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f8fc 	bl	800160a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fe6a 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fd12 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000454 	.word	0x20000454

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000454 	.word	0x20000454

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff4c 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001632:	f7ff ff61 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001636:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	6978      	ldr	r0, [r7, #20]
 800163e:	f7ff ffb1 	bl	80015a4 <NVIC_EncodePriority>
 8001642:	4602      	mov	r2, r0
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff80 	bl	8001550 <__NVIC_SetPriority>
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff54 	bl	8001514 <__NVIC_EnableIRQ>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e014      	b.n	80016b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fbfe 	bl	8000e98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	795b      	ldrb	r3, [r3, #5]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_DAC_Start+0x16>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e040      	b.n	8001750 <HAL_DAC_Start+0x98>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2201      	movs	r2, #1
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10f      	bne.n	8001718 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001702:	2b3c      	cmp	r3, #60	; 0x3c
 8001704:	d11d      	bne.n	8001742 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	e014      	b.n	8001742 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	213c      	movs	r1, #60	; 0x3c
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	429a      	cmp	r2, r3
 8001730:	d107      	bne.n	8001742 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0202 	orr.w	r2, r2, #2
 8001740:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	3308      	adds	r3, #8
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e004      	b.n	8001790 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	3314      	adds	r3, #20
 800178e:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b087      	sub	sp, #28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	795b      	ldrb	r3, [r3, #5]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_DAC_ConfigChannel+0x18>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e03c      	b.n	8001838 <HAL_DAC_ConfigChannel+0x92>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2202      	movs	r2, #2
 80017c8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	22c0      	movs	r2, #192	; 0xc0
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001852:	f7ff fdfd 	bl	8001450 <HAL_GetTick>
 8001856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d008      	beq.n	8001876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e052      	b.n	800191c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0216 	bic.w	r2, r2, #22
 8001884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <HAL_DMA_Abort+0x62>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0208 	bic.w	r2, r2, #8
 80018b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c6:	e013      	b.n	80018f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c8:	f7ff fdc2 	bl	8001450 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d90c      	bls.n	80018f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e015      	b.n	800191c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1e4      	bne.n	80018c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	223f      	movs	r2, #63	; 0x3f
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d004      	beq.n	8001942 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00c      	b.n	800195c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2205      	movs	r2, #5
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e165      	b.n	8001c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8154 	bne.w	8001c4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80ae 	beq.w	8001c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_GPIO_Init+0x300>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a5c      	ldr	r2, [pc, #368]	; (8001c68 <HAL_GPIO_Init+0x300>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <HAL_GPIO_Init+0x300>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_GPIO_Init+0x304>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_GPIO_Init+0x308>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d025      	beq.n	8001b82 <HAL_GPIO_Init+0x21a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01f      	beq.n	8001b7e <HAL_GPIO_Init+0x216>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4d      	ldr	r2, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x310>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d019      	beq.n	8001b7a <HAL_GPIO_Init+0x212>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <HAL_GPIO_Init+0x314>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0x20e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4b      	ldr	r2, [pc, #300]	; (8001c80 <HAL_GPIO_Init+0x318>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_GPIO_Init+0x20a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4a      	ldr	r2, [pc, #296]	; (8001c84 <HAL_GPIO_Init+0x31c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x206>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a49      	ldr	r2, [pc, #292]	; (8001c88 <HAL_GPIO_Init+0x320>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_GPIO_Init+0x202>
 8001b66:	2306      	movs	r3, #6
 8001b68:	e00c      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00a      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b6e:	2305      	movs	r3, #5
 8001b70:	e008      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b72:	2304      	movs	r3, #4
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b76:	2303      	movs	r3, #3
 8001b78:	e004      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x21c>
 8001b82:	2300      	movs	r3, #0
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f002 0203 	and.w	r2, r2, #3
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b94:	4935      	ldr	r1, [pc, #212]	; (8001c6c <HAL_GPIO_Init+0x304>)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc6:	4a31      	ldr	r2, [pc, #196]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf0:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b0f      	cmp	r3, #15
 8001c54:	f67f ae96 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	40020c00 	.word	0x40020c00
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40021400 	.word	0x40021400
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0cc      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d90c      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d044      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e067      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4934      	ldr	r1, [pc, #208]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7ff fb4c 	bl	8001450 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff fb48 	bl	8001450 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e04f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d20c      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f887 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	490a      	ldr	r1, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	5ccb      	ldrb	r3, [r1, r3]
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f93e 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00
 8001e80:	40023800 	.word	0x40023800
 8001e84:	0800c814 	.word	0x0800c814
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a9b      	lsrs	r3, r3, #10
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	0800c824 	.word	0x0800c824

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f7ff ffdc 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0b5b      	lsrs	r3, r3, #13
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	0800c824 	.word	0x0800c824

08001ef8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	220f      	movs	r2, #15
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_RCC_GetClockConfig+0x60>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 020f 	and.w	r2, r3, #15
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b0ae      	sub	sp, #184	; 0xb8
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4bcb      	ldr	r3, [pc, #812]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	f200 8206 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x440>
 8001f90:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fcd 	.word	0x08001fcd
 8001f9c:	0800239d 	.word	0x0800239d
 8001fa0:	0800239d 	.word	0x0800239d
 8001fa4:	0800239d 	.word	0x0800239d
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	0800239d 	.word	0x0800239d
 8001fb0:	0800239d 	.word	0x0800239d
 8001fb4:	0800239d 	.word	0x0800239d
 8001fb8:	08001fdd 	.word	0x08001fdd
 8001fbc:	0800239d 	.word	0x0800239d
 8001fc0:	0800239d 	.word	0x0800239d
 8001fc4:	0800239d 	.word	0x0800239d
 8001fc8:	080021cd 	.word	0x080021cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4bb9      	ldr	r3, [pc, #740]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001fd2:	e1e7      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd4:	4bb8      	ldr	r3, [pc, #736]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fda:	e1e3      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4bb4      	ldr	r3, [pc, #720]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe8:	4bb1      	ldr	r3, [pc, #708]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d071      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff4:	4bae      	ldr	r3, [pc, #696]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002000:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4621      	mov	r1, r4
 8002034:	1a51      	subs	r1, r2, r1
 8002036:	6439      	str	r1, [r7, #64]	; 0x40
 8002038:	4629      	mov	r1, r5
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800204c:	4649      	mov	r1, r9
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002056:	4641      	mov	r1, r8
 8002058:	018a      	lsls	r2, r1, #6
 800205a:	4641      	mov	r1, r8
 800205c:	1a51      	subs	r1, r2, r1
 800205e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002060:	4649      	mov	r1, r9
 8002062:	eb63 0301 	sbc.w	r3, r3, r1
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002074:	4649      	mov	r1, r9
 8002076:	00cb      	lsls	r3, r1, #3
 8002078:	4641      	mov	r1, r8
 800207a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800207e:	4641      	mov	r1, r8
 8002080:	00ca      	lsls	r2, r1, #3
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	4603      	mov	r3, r0
 8002088:	4622      	mov	r2, r4
 800208a:	189b      	adds	r3, r3, r2
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
 800208e:	462b      	mov	r3, r5
 8002090:	460a      	mov	r2, r1
 8002092:	eb42 0303 	adc.w	r3, r2, r3
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020a4:	4629      	mov	r1, r5
 80020a6:	024b      	lsls	r3, r1, #9
 80020a8:	4621      	mov	r1, r4
 80020aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ae:	4621      	mov	r1, r4
 80020b0:	024a      	lsls	r2, r1, #9
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80020c8:	f7fe f8fa 	bl	80002c0 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020d6:	e067      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80020e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020f2:	2300      	movs	r3, #0
 80020f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80020fa:	4622      	mov	r2, r4
 80020fc:	462b      	mov	r3, r5
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210c:	0150      	lsls	r0, r2, #5
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4621      	mov	r1, r4
 8002114:	1a51      	subs	r1, r2, r1
 8002116:	62b9      	str	r1, [r7, #40]	; 0x28
 8002118:	4629      	mov	r1, r5
 800211a:	eb63 0301 	sbc.w	r3, r3, r1
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800212c:	4649      	mov	r1, r9
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	4641      	mov	r1, r8
 8002132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002136:	4641      	mov	r1, r8
 8002138:	018a      	lsls	r2, r1, #6
 800213a:	4641      	mov	r1, r8
 800213c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002140:	4649      	mov	r1, r9
 8002142:	eb63 0b01 	sbc.w	fp, r3, r1
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002152:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800215a:	4692      	mov	sl, r2
 800215c:	469b      	mov	fp, r3
 800215e:	4623      	mov	r3, r4
 8002160:	eb1a 0303 	adds.w	r3, sl, r3
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	462b      	mov	r3, r5
 8002168:	eb4b 0303 	adc.w	r3, fp, r3
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800217a:	4629      	mov	r1, r5
 800217c:	028b      	lsls	r3, r1, #10
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002184:	4621      	mov	r1, r4
 8002186:	028a      	lsls	r2, r1, #10
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002190:	2200      	movs	r2, #0
 8002192:	673b      	str	r3, [r7, #112]	; 0x70
 8002194:	677a      	str	r2, [r7, #116]	; 0x74
 8002196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800219a:	f7fe f891 	bl	80002c0 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4613      	mov	r3, r2
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021a8:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80021ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ca:	e0eb      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d8:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d06b      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	2200      	movs	r2, #0
 80021ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f6:	663b      	str	r3, [r7, #96]	; 0x60
 80021f8:	2300      	movs	r3, #0
 80021fa:	667b      	str	r3, [r7, #100]	; 0x64
 80021fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002200:	4622      	mov	r2, r4
 8002202:	462b      	mov	r3, r5
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	0159      	lsls	r1, r3, #5
 800220e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002212:	0150      	lsls	r0, r2, #5
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4621      	mov	r1, r4
 800221a:	1a51      	subs	r1, r2, r1
 800221c:	61b9      	str	r1, [r7, #24]
 800221e:	4629      	mov	r1, r5
 8002220:	eb63 0301 	sbc.w	r3, r3, r1
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002232:	4659      	mov	r1, fp
 8002234:	018b      	lsls	r3, r1, #6
 8002236:	4651      	mov	r1, sl
 8002238:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223c:	4651      	mov	r1, sl
 800223e:	018a      	lsls	r2, r1, #6
 8002240:	4651      	mov	r1, sl
 8002242:	ebb2 0801 	subs.w	r8, r2, r1
 8002246:	4659      	mov	r1, fp
 8002248:	eb63 0901 	sbc.w	r9, r3, r1
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800225c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	4623      	mov	r3, r4
 8002266:	eb18 0303 	adds.w	r3, r8, r3
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	462b      	mov	r3, r5
 800226e:	eb49 0303 	adc.w	r3, r9, r3
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002280:	4629      	mov	r1, r5
 8002282:	024b      	lsls	r3, r1, #9
 8002284:	4621      	mov	r1, r4
 8002286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800228a:	4621      	mov	r1, r4
 800228c:	024a      	lsls	r2, r1, #9
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002296:	2200      	movs	r2, #0
 8002298:	65bb      	str	r3, [r7, #88]	; 0x58
 800229a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800229c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022a0:	f7fe f80e 	bl	80002c0 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022ae:	e065      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x420>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	2200      	movs	r2, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	4611      	mov	r1, r2
 80022c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022cc:	653b      	str	r3, [r7, #80]	; 0x50
 80022ce:	2300      	movs	r3, #0
 80022d0:	657b      	str	r3, [r7, #84]	; 0x54
 80022d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80022d6:	4642      	mov	r2, r8
 80022d8:	464b      	mov	r3, r9
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	0159      	lsls	r1, r3, #5
 80022e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e8:	0150      	lsls	r0, r2, #5
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4641      	mov	r1, r8
 80022f0:	1a51      	subs	r1, r2, r1
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	4649      	mov	r1, r9
 80022f6:	eb63 0301 	sbc.w	r3, r3, r1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002308:	4659      	mov	r1, fp
 800230a:	018b      	lsls	r3, r1, #6
 800230c:	4651      	mov	r1, sl
 800230e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002312:	4651      	mov	r1, sl
 8002314:	018a      	lsls	r2, r1, #6
 8002316:	4651      	mov	r1, sl
 8002318:	1a54      	subs	r4, r2, r1
 800231a:	4659      	mov	r1, fp
 800231c:	eb63 0501 	sbc.w	r5, r3, r1
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002364:	2200      	movs	r2, #0
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
 8002368:	64fa      	str	r2, [r7, #76]	; 0x4c
 800236a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800236e:	f7fd ffa7 	bl	80002c0 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4613      	mov	r3, r2
 8002378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0f1b      	lsrs	r3, r3, #28
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800238a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800238e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800239a:	e003      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	37b8      	adds	r7, #184	; 0xb8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	00f42400 	.word	0x00f42400

080023bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e28d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8083 	beq.w	80024e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d019      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023e8:	4b91      	ldr	r3, [pc, #580]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023f4:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x124>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e25a      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x90>
 800243e:	4b7c      	ldr	r3, [pc, #496]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7b      	ldr	r2, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xb4>
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b73      	ldr	r3, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6c      	ldr	r3, [pc, #432]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6b      	ldr	r2, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe ffde 	bl	8001450 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe ffda 	bl	8001450 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e21f      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xdc>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe ffca 	bl	8001450 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe ffc6 	bl	8001450 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e20b      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x104>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06f      	beq.n	80025ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d017      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024fa:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002506:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1d3      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4937      	ldr	r1, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_OscConfig+0x278>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe ff73 	bl	8001450 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256e:	f7fe ff6f 	bl	8001450 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1b4      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4925      	ldr	r1, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x278>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe ff52 	bl	8001450 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b0:	f7fe ff4e 	bl	8001450 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e193      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe ff32 	bl	8001450 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fe ff2e 	bl	8001450 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e173      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x234>
 800260e:	e01b      	b.n	8002648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x27c>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe ff1b 	bl	8001450 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	e00e      	b.n	800263c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe ff17 	bl	8001450 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d907      	bls.n	800263c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e15c      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002630:	40023800 	.word	0x40023800
 8002634:	42470000 	.word	0x42470000
 8002638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b8a      	ldr	r3, [pc, #552]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ea      	bne.n	800261e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8097 	beq.w	8002784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b83      	ldr	r3, [pc, #524]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b7f      	ldr	r3, [pc, #508]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a7e      	ldr	r2, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b7c      	ldr	r3, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b79      	ldr	r3, [pc, #484]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe fed7 	bl	8001450 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe fed3 	bl	8001450 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e118      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b6c      	ldr	r3, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x4b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x31e>
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x340>
 80026e2:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a60      	ldr	r2, [pc, #384]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a5d      	ldr	r2, [pc, #372]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026fc:	4b5a      	ldr	r3, [pc, #360]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	4b57      	ldr	r3, [pc, #348]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fe98 	bl	8001450 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fe94 	bl	8001450 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0d7      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x368>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fe82 	bl	8001450 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fe7e 	bl	8001450 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0c1      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	4b40      	ldr	r3, [pc, #256]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80ad 	beq.w	80028e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d060      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d145      	bne.n	800282e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_RCC_OscConfig+0x4b4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fe52 	bl	8001450 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fe4e 	bl	8001450 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e093      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fe23 	bl	8001450 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fe1f 	bl	8001450 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e064      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x452>
 800282c:	e05c      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fe0c 	bl	8001450 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fe08 	bl	8001450 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
 800285a:	e045      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e040      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_RCC_OscConfig+0x538>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d030      	beq.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d129      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d122      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d119      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10f      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07b      	b.n	8002a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291a:	d009      	beq.n	8002930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
 8002922:	e005      	b.n	8002930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fae8 	bl	8000f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	ea42 0103 	orr.w	r1, r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f003 0104 	and.w	r1, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f003 0210 	and.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_SPI_Transmit+0x22>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e126      	b.n	8002c7a <HAL_SPI_Transmit+0x270>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a34:	f7fe fd0c 	bl	8001450 <HAL_GetTick>
 8002a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a4e:	e10b      	b.n	8002c68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_Transmit+0x52>
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a60:	e102      	b.n	8002c68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa8:	d10f      	bne.n	8002aca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d007      	beq.n	8002ae8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af0:	d14b      	bne.n	8002b8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Transmit+0xf6>
 8002afa:	8afb      	ldrh	r3, [r7, #22]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d13e      	bne.n	8002b7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	881a      	ldrh	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	1c9a      	adds	r2, r3, #2
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b24:	e02b      	b.n	8002b7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d112      	bne.n	8002b5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c9a      	adds	r2, r3, #2
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b58:	e011      	b.n	8002b7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5a:	f7fe fc79 	bl	8001450 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d803      	bhi.n	8002b72 <HAL_SPI_Transmit+0x168>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b70:	d102      	bne.n	8002b78 <HAL_SPI_Transmit+0x16e>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b7c:	e074      	b.n	8002c68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ce      	bne.n	8002b26 <HAL_SPI_Transmit+0x11c>
 8002b88:	e04c      	b.n	8002c24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0x18e>
 8002b92:	8afb      	ldrh	r3, [r7, #22]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d140      	bne.n	8002c1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bbe:	e02c      	b.n	8002c1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d113      	bne.n	8002bf6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bf4:	e011      	b.n	8002c1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf6:	f7fe fc2b 	bl	8001450 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d803      	bhi.n	8002c0e <HAL_SPI_Transmit+0x204>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d102      	bne.n	8002c14 <HAL_SPI_Transmit+0x20a>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c18:	e026      	b.n	8002c68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1cd      	bne.n	8002bc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fa55 	bl	80030d8 <SPI_EndRxTxTransaction>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e000      	b.n	8002c68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b08c      	sub	sp, #48	; 0x30
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c90:	2301      	movs	r3, #1
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x26>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e18a      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x33c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb0:	f7fe fbce 	bl	8001450 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d00f      	beq.n	8002cf2 <HAL_SPI_TransmitReceive+0x70>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd8:	d107      	bne.n	8002cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <HAL_SPI_TransmitReceive+0x68>
 8002ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d003      	beq.n	8002cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cf0:	e15b      	b.n	8002faa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x82>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x82>
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d0a:	e14e      	b.n	8002faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d003      	beq.n	8002d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	887a      	ldrh	r2, [r7, #2]
 8002d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	887a      	ldrh	r2, [r7, #2]
 8002d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d007      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7c:	d178      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x10a>
 8002d86:	8b7b      	ldrh	r3, [r7, #26]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d166      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db0:	e053      	b.n	8002e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d11b      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x176>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x176>
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d113      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d119      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x1b8>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d014      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	1c9a      	adds	r2, r3, #2
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e36:	2301      	movs	r3, #1
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e3a:	f7fe fb09 	bl	8001450 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d807      	bhi.n	8002e5a <HAL_SPI_TransmitReceive+0x1d8>
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e50:	d003      	beq.n	8002e5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e58:	e0a7      	b.n	8002faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1a6      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x130>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1a1      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x130>
 8002e6e:	e07c      	b.n	8002f6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x1fc>
 8002e78:	8b7b      	ldrh	r3, [r7, #26]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d16b      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea4:	e057      	b.n	8002f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d11c      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x26c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d017      	beq.n	8002eee <HAL_SPI_TransmitReceive+0x26c>
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d114      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d119      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x2ae>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d014      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f30:	f7fe fa8e 	bl	8001450 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d803      	bhi.n	8002f48 <HAL_SPI_TransmitReceive+0x2c6>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f46:	d102      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x2cc>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f54:	e029      	b.n	8002faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1a2      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x224>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d19d      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f8b2 	bl	80030d8 <SPI_EndRxTxTransaction>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f86:	e010      	b.n	8002faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	e000      	b.n	8002faa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3730      	adds	r7, #48	; 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fd8:	f7fe fa3a 	bl	8001450 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fe8:	f7fe fa32 	bl	8001450 <HAL_GetTick>
 8002fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	015b      	lsls	r3, r3, #5
 8002ff4:	0d1b      	lsrs	r3, r3, #20
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ffe:	e054      	b.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003006:	d050      	beq.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003008:	f7fe fa22 	bl	8001450 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	d902      	bls.n	800301e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d13d      	bne.n	800309a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800302c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003036:	d111      	bne.n	800305c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003040:	d004      	beq.n	800304c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304a:	d107      	bne.n	800305c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003064:	d10f      	bne.n	8003086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e017      	b.n	80030ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d19b      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000000 	.word	0x20000000

080030d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <SPI_EndRxTxTransaction+0x7c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <SPI_EndRxTxTransaction+0x80>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0d5b      	lsrs	r3, r3, #21
 80030f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003102:	d112      	bne.n	800312a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2200      	movs	r2, #0
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff ff5a 	bl	8002fc8 <SPI_WaitFlagStateUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00f      	b.n	800314a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3b01      	subs	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d0f2      	beq.n	800312a <SPI_EndRxTxTransaction+0x52>
 8003144:	e000      	b.n	8003148 <SPI_EndRxTxTransaction+0x70>
        break;
 8003146:	bf00      	nop
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000
 8003158:	165e9f81 	.word	0x165e9f81

0800315c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e041      	b.n	80031f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd ff14 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 fb8a 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d001      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e04e      	b.n	80032b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d01d      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d018      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <HAL_TIM_Base_Start_IT+0xd0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x80>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d111      	bne.n	80032a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b06      	cmp	r3, #6
 800328c:	d010      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	e007      	b.n	80032b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40010400 	.word	0x40010400
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40001800 	.word	0x40001800

080032dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e041      	b.n	8003372 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f839 	bl	800337a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f000 faca 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d122      	bne.n	80033ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d11b      	bne.n	80033ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f06f 0202 	mvn.w	r2, #2
 80033ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa51 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 80033d6:	e005      	b.n	80033e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fa43 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa54 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d122      	bne.n	800343e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b04      	cmp	r3, #4
 8003404:	d11b      	bne.n	800343e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0204 	mvn.w	r2, #4
 800340e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa27 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 800342a:	e005      	b.n	8003438 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa19 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa2a 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d122      	bne.n	8003492 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11b      	bne.n	8003492 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0208 	mvn.w	r2, #8
 8003462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2204      	movs	r2, #4
 8003468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f9fd 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 800347e:	e005      	b.n	800348c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9ef 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa00 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	d122      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d11b      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0210 	mvn.w	r2, #16
 80034b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2208      	movs	r2, #8
 80034bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f9d3 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 80034d2:	e005      	b.n	80034e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f9c5 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9d6 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10e      	bne.n	8003512 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0201 	mvn.w	r2, #1
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fd fc7f 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fca5 	bl	8003e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d10e      	bne.n	800356a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d107      	bne.n	800356a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f99b 	bl	80038a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d10e      	bne.n	8003596 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d107      	bne.n	8003596 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 0220 	mvn.w	r2, #32
 800358e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fc6f 	bl	8003e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e088      	b.n	80036ce <HAL_TIM_IC_ConfigChannel+0x130>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11b      	bne.n	8003602 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f000 fa0b 	bl	80039f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 020c 	bic.w	r2, r2, #12
 80035ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6999      	ldr	r1, [r3, #24]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	619a      	str	r2, [r3, #24]
 8003600:	e060      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11c      	bne.n	8003642 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f000 fa8f 	bl	8003b3a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800362a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6999      	ldr	r1, [r3, #24]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	021a      	lsls	r2, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	619a      	str	r2, [r3, #24]
 8003640:	e040      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f000 fadc 	bl	8003c14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020c 	bic.w	r2, r2, #12
 800366a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69d9      	ldr	r1, [r3, #28]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	61da      	str	r2, [r3, #28]
 800367e:	e021      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d11c      	bne.n	80036c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f000 faf9 	bl	8003c8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69d9      	ldr	r1, [r3, #28]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	021a      	lsls	r2, r3, #8
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	61da      	str	r2, [r3, #28]
 80036be:	e001      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_ConfigClockSource+0x1c>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0b4      	b.n	800385c <HAL_TIM_ConfigClockSource+0x186>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003710:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003718:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d03e      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0xd4>
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	f200 8087 	bhi.w	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	f000 8086 	beq.w	8003848 <HAL_TIM_ConfigClockSource+0x172>
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d87f      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 8003742:	2b70      	cmp	r3, #112	; 0x70
 8003744:	d01a      	beq.n	800377c <HAL_TIM_ConfigClockSource+0xa6>
 8003746:	2b70      	cmp	r3, #112	; 0x70
 8003748:	d87b      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 800374a:	2b60      	cmp	r3, #96	; 0x60
 800374c:	d050      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x11a>
 800374e:	2b60      	cmp	r3, #96	; 0x60
 8003750:	d877      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 8003752:	2b50      	cmp	r3, #80	; 0x50
 8003754:	d03c      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0xfa>
 8003756:	2b50      	cmp	r3, #80	; 0x50
 8003758:	d873      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d058      	beq.n	8003810 <HAL_TIM_ConfigClockSource+0x13a>
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d86f      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 8003762:	2b30      	cmp	r3, #48	; 0x30
 8003764:	d064      	beq.n	8003830 <HAL_TIM_ConfigClockSource+0x15a>
 8003766:	2b30      	cmp	r3, #48	; 0x30
 8003768:	d86b      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 800376a:	2b20      	cmp	r3, #32
 800376c:	d060      	beq.n	8003830 <HAL_TIM_ConfigClockSource+0x15a>
 800376e:	2b20      	cmp	r3, #32
 8003770:	d867      	bhi.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d05c      	beq.n	8003830 <HAL_TIM_ConfigClockSource+0x15a>
 8003776:	2b10      	cmp	r3, #16
 8003778:	d05a      	beq.n	8003830 <HAL_TIM_ConfigClockSource+0x15a>
 800377a:	e062      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f000 fad6 	bl	8003d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800379e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
      break;
 80037a8:	e04f      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f000 fabf 	bl	8003d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037cc:	609a      	str	r2, [r3, #8]
      break;
 80037ce:	e03c      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	461a      	mov	r2, r3
 80037de:	f000 f97d 	bl	8003adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2150      	movs	r1, #80	; 0x50
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fa8c 	bl	8003d06 <TIM_ITRx_SetConfig>
      break;
 80037ee:	e02c      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	461a      	mov	r2, r3
 80037fe:	f000 f9d9 	bl	8003bb4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2160      	movs	r1, #96	; 0x60
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fa7c 	bl	8003d06 <TIM_ITRx_SetConfig>
      break;
 800380e:	e01c      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	461a      	mov	r2, r3
 800381e:	f000 f95d 	bl	8003adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2140      	movs	r1, #64	; 0x40
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fa6c 	bl	8003d06 <TIM_ITRx_SetConfig>
      break;
 800382e:	e00c      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f000 fa63 	bl	8003d06 <TIM_ITRx_SetConfig>
      break;
 8003840:	e003      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      break;
 8003846:	e000      	b.n	800384a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003848:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d00f      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3d      	ldr	r2, [pc, #244]	; (80039cc <TIM_Base_SetConfig+0x118>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00b      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <TIM_Base_SetConfig+0x11c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <TIM_Base_SetConfig+0x120>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d108      	bne.n	8003906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d027      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <TIM_Base_SetConfig+0x118>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d023      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <TIM_Base_SetConfig+0x11c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <TIM_Base_SetConfig+0x120>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d017      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a28      	ldr	r2, [pc, #160]	; (80039dc <TIM_Base_SetConfig+0x128>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <TIM_Base_SetConfig+0x12c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <TIM_Base_SetConfig+0x130>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <TIM_Base_SetConfig+0x134>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <TIM_Base_SetConfig+0x138>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <TIM_Base_SetConfig+0x13c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_Base_SetConfig+0xf8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d103      	bne.n	80039b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	615a      	str	r2, [r3, #20]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800
 80039e8:	40001800 	.word	0x40001800
 80039ec:	40001c00 	.word	0x40001c00
 80039f0:	40002000 	.word	0x40002000

080039f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <TIM_TI1_SetConfig+0xcc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01b      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d017      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_TI1_SetConfig+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <TIM_TI1_SetConfig+0xd4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <TIM_TI1_SetConfig+0xd8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <TIM_TI1_SetConfig+0xdc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <TIM_TI1_SetConfig+0xe0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_TI1_SetConfig+0x66>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <TIM_TI1_SetConfig+0xe4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <TIM_TI1_SetConfig+0x6a>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <TIM_TI1_SetConfig+0x6c>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	e003      	b.n	8003a7e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f023 030a 	bic.w	r3, r3, #10
 8003a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 030a 	and.w	r3, r3, #10
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0201 	bic.w	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f023 030a 	bic.w	r3, r3, #10
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b087      	sub	sp, #28
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 0210 	bic.w	r2, r3, #16
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	031b      	lsls	r3, r3, #12
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 0210 	bic.w	r2, r3, #16
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	031b      	lsls	r3, r3, #12
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 0303 	bic.w	r3, r3, #3
 8003c40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	031b      	lsls	r3, r3, #12
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	031b      	lsls	r3, r3, #12
 8003ce4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f043 0307 	orr.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	021a      	lsls	r2, r3, #8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	609a      	str	r2, [r3, #8]
}
 8003d70:	bf00      	nop
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e05a      	b.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d01d      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10c      	bne.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40001800 	.word	0x40001800

08003e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e03f      	b.n	8003f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd f8c2 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fe87 	bl	8004bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08a      	sub	sp, #40	; 0x28
 8003f3a:	af02      	add	r7, sp, #8
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d17c      	bne.n	8004050 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_UART_Transmit+0x2c>
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e075      	b.n	8004052 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Transmit+0x3e>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e06e      	b.n	8004052 <HAL_UART_Transmit+0x11c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2221      	movs	r2, #33	; 0x21
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd fa61 	bl	8001450 <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Transmit+0x82>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fc8:	e02a      	b.n	8004020 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fbcb 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e036      	b.n	8004052 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	e007      	b.n	8004012 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	3301      	adds	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1cf      	bne.n	8003fca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb9b 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e006      	b.n	8004052 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	; 0x28
 800405e:	af02      	add	r7, sp, #8
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 808c 	bne.w	8004194 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Receive+0x2e>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e084      	b.n	8004196 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_UART_Receive+0x40>
 8004096:	2302      	movs	r3, #2
 8004098:	e07d      	b.n	8004196 <HAL_UART_Receive+0x13c>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2222      	movs	r2, #34	; 0x22
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fd f9cb 	bl	8001450 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d108      	bne.n	80040e4 <HAL_UART_Receive+0x8a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e003      	b.n	80040ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040f4:	e043      	b.n	800417e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2120      	movs	r1, #32
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fb35 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e042      	b.n	8004196 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10c      	bne.n	8004130 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	b29a      	uxth	r2, r3
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	3302      	adds	r3, #2
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e01f      	b.n	8004170 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	d007      	beq.n	800414a <HAL_UART_Receive+0xf0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <HAL_UART_Receive+0xfe>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e008      	b.n	800416a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004164:	b2da      	uxtb	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1b6      	bne.n	80040f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	4613      	mov	r3, r2
 80041aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d11d      	bne.n	80041f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_UART_Receive_IT+0x26>
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e016      	b.n	80041f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Receive_IT+0x38>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e00f      	b.n	80041f6 <HAL_UART_Receive_IT+0x58>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fb2e 	bl	800484c <UART_Start_Receive_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e000      	b.n	80041f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0ba      	sub	sp, #232	; 0xe8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800423e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc0d 	bl	8004a7e <UART_Receive_IT>
      return;
 8004264:	e256      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80de 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80d1 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0201 	orr.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 81ed 	beq.w	800470a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb98 	bl	8004a7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_UART_IRQHandler+0x17a>
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04f      	beq.n	800441a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 faa0 	bl	80048c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d141      	bne.n	8004412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1d9      	bne.n	800438e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d013      	beq.n	800440a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	4a7d      	ldr	r2, [pc, #500]	; (80045dc <HAL_UART_IRQHandler+0x3dc>)
 80043e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd fa98 	bl	8001924 <HAL_DMA_Abort_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e00e      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f99a 	bl	8004744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e00a      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f996 	bl	8004744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e006      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f992 	bl	8004744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004426:	e170      	b.n	800470a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	bf00      	nop
    return;
 800442a:	e16e      	b.n	800470a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 814a 	bne.w	80046ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8143 	beq.w	80046ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 813c 	beq.w	80046ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	f040 80b4 	bne.w	80045e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8140 	beq.w	800470e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004496:	429a      	cmp	r2, r3
 8004498:	f080 8139 	bcs.w	800470e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	f000 8088 	beq.w	80045c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d9      	bne.n	80044b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800450e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800452a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e1      	bne.n	80044fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800455e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800456c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e3      	bne.n	8004580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd f941 	bl	8001844 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8c0 	bl	8004758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045d8:	e099      	b.n	800470e <HAL_UART_IRQHandler+0x50e>
 80045da:	bf00      	nop
 80045dc:	08004987 	.word	0x08004987
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 808b 	beq.w	8004712 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8086 	beq.w	8004712 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800461c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800462a:	647a      	str	r2, [r7, #68]	; 0x44
 800462c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e3      	bne.n	8004606 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	623b      	str	r3, [r7, #32]
   return(result);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3314      	adds	r3, #20
 800465e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004662:	633a      	str	r2, [r7, #48]	; 0x30
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e3      	bne.n	800463e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	60fb      	str	r3, [r7, #12]
   return(result);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0310 	bic.w	r3, r3, #16
 800469a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046a8:	61fa      	str	r2, [r7, #28]
 80046aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	617b      	str	r3, [r7, #20]
   return(result);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e3      	bne.n	8004684 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f848 	bl	8004758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c8:	e023      	b.n	8004712 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_UART_IRQHandler+0x4ea>
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f963 	bl	80049ae <UART_Transmit_IT>
    return;
 80046e8:	e014      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00e      	beq.n	8004714 <HAL_UART_IRQHandler+0x514>
 80046f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9a3 	bl	8004a4e <UART_EndTransmit_IT>
    return;
 8004708:	e004      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
    return;
 800470a:	bf00      	nop
 800470c:	e002      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
      return;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
      return;
 8004712:	bf00      	nop
  }
}
 8004714:	37e8      	adds	r7, #232	; 0xe8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop

0800471c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b090      	sub	sp, #64	; 0x40
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004780:	e050      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004788:	d04c      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004790:	f7fc fe5e 	bl	8001450 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479c:	429a      	cmp	r2, r3
 800479e:	d241      	bcs.n	8004824 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c0:	637a      	str	r2, [r7, #52]	; 0x34
 80047c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	613b      	str	r3, [r7, #16]
   return(result);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047f4:	623a      	str	r2, [r7, #32]
 80047f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	69f9      	ldr	r1, [r7, #28]
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	61bb      	str	r3, [r7, #24]
   return(result);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e00f      	b.n	8004844 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	429a      	cmp	r2, r3
 8004840:	d09f      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3740      	adds	r7, #64	; 0x40
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2222      	movs	r2, #34	; 0x22
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004890:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0220 	orr.w	r2, r2, #32
 80048b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b095      	sub	sp, #84	; 0x54
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e8:	643a      	str	r2, [r7, #64]	; 0x40
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	61fb      	str	r3, [r7, #28]
   return(result);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	64bb      	str	r3, [r7, #72]	; 0x48
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	2b01      	cmp	r3, #1
 8004936:	d119      	bne.n	800496c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	60bb      	str	r3, [r7, #8]
   return(result);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f023 0310 	bic.w	r3, r3, #16
 800494e:	647b      	str	r3, [r7, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004958:	61ba      	str	r2, [r7, #24]
 800495a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6979      	ldr	r1, [r7, #20]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	613b      	str	r3, [r7, #16]
   return(result);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
}
 800497a:	bf00      	nop
 800497c:	3754      	adds	r7, #84	; 0x54
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff fecf 	bl	8004744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b21      	cmp	r3, #33	; 0x21
 80049c0:	d13e      	bne.n	8004a40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ca:	d114      	bne.n	80049f6 <UART_Transmit_IT+0x48>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d110      	bne.n	80049f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	621a      	str	r2, [r3, #32]
 80049f4:	e008      	b.n	8004a08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6211      	str	r1, [r2, #32]
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4619      	mov	r1, r3
 8004a16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fe54 	bl	800471c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b08c      	sub	sp, #48	; 0x30
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b22      	cmp	r3, #34	; 0x22
 8004a90:	f040 80ab 	bne.w	8004bea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	d117      	bne.n	8004ace <UART_Receive_IT+0x50>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d113      	bne.n	8004ace <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
 8004acc:	e026      	b.n	8004b1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d007      	beq.n	8004af2 <UART_Receive_IT+0x74>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <UART_Receive_IT+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e008      	b.n	8004b12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d15a      	bne.n	8004be6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0220 	bic.w	r2, r2, #32
 8004b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d135      	bne.n	8004bdc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	613b      	str	r3, [r7, #16]
   return(result);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f023 0310 	bic.w	r3, r3, #16
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	623a      	str	r2, [r7, #32]
 8004b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	69f9      	ldr	r1, [r7, #28]
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d10a      	bne.n	8004bce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fdbf 	bl	8004758 <HAL_UARTEx_RxEventCallback>
 8004bda:	e002      	b.n	8004be2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fda7 	bl	8004730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e002      	b.n	8004bec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3730      	adds	r7, #48	; 0x30
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf8:	b0c0      	sub	sp, #256	; 0x100
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	68d9      	ldr	r1, [r3, #12]
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	ea40 0301 	orr.w	r3, r0, r1
 8004c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c4c:	f021 010c 	bic.w	r1, r1, #12
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	6999      	ldr	r1, [r3, #24]
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	ea40 0301 	orr.w	r3, r0, r1
 8004c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b8f      	ldr	r3, [pc, #572]	; (8004ec0 <UART_SetConfig+0x2cc>)
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d005      	beq.n	8004c94 <UART_SetConfig+0xa0>
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b8d      	ldr	r3, [pc, #564]	; (8004ec4 <UART_SetConfig+0x2d0>)
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d104      	bne.n	8004c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c94:	f7fd f91c 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8004c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c9c:	e003      	b.n	8004ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c9e:	f7fd f903 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8004ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb0:	f040 810c 	bne.w	8004ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	1891      	adds	r1, r2, r2
 8004ccc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	eb12 0801 	adds.w	r8, r2, r1
 8004cdc:	4629      	mov	r1, r5
 8004cde:	eb43 0901 	adc.w	r9, r3, r1
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf6:	4690      	mov	r8, r2
 8004cf8:	4699      	mov	r9, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	eb18 0303 	adds.w	r3, r8, r3
 8004d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d04:	462b      	mov	r3, r5
 8004d06:	eb49 0303 	adc.w	r3, r9, r3
 8004d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d22:	460b      	mov	r3, r1
 8004d24:	18db      	adds	r3, r3, r3
 8004d26:	653b      	str	r3, [r7, #80]	; 0x50
 8004d28:	4613      	mov	r3, r2
 8004d2a:	eb42 0303 	adc.w	r3, r2, r3
 8004d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d38:	f7fb fac2 	bl	80002c0 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <UART_SetConfig+0x2d4>)
 8004d42:	fba3 2302 	umull	r2, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	011c      	lsls	r4, r3, #4
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d64:	415b      	adcs	r3, r3
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d72:	4649      	mov	r1, r9
 8004d74:	eb43 0b01 	adc.w	fp, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d8c:	4692      	mov	sl, r2
 8004d8e:	469b      	mov	fp, r3
 8004d90:	4643      	mov	r3, r8
 8004d92:	eb1a 0303 	adds.w	r3, sl, r3
 8004d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004db0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004db8:	460b      	mov	r3, r1
 8004dba:	18db      	adds	r3, r3, r3
 8004dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	eb42 0303 	adc.w	r3, r2, r3
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dce:	f7fb fa77 	bl	80002c0 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <UART_SetConfig+0x2d4>)
 8004dda:	fba3 2301 	umull	r2, r3, r3, r1
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	2264      	movs	r2, #100	; 0x64
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	1acb      	subs	r3, r1, r3
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <UART_SetConfig+0x2d4>)
 8004df0:	fba3 2302 	umull	r2, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dfc:	441c      	add	r4, r3
 8004dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	1891      	adds	r1, r2, r2
 8004e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e18:	415b      	adcs	r3, r3
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e20:	4641      	mov	r1, r8
 8004e22:	1851      	adds	r1, r2, r1
 8004e24:	6339      	str	r1, [r7, #48]	; 0x30
 8004e26:	4649      	mov	r1, r9
 8004e28:	414b      	adcs	r3, r1
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e38:	4659      	mov	r1, fp
 8004e3a:	00cb      	lsls	r3, r1, #3
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e42:	4651      	mov	r1, sl
 8004e44:	00ca      	lsls	r2, r1, #3
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e54:	464b      	mov	r3, r9
 8004e56:	460a      	mov	r2, r1
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e74:	460b      	mov	r3, r1
 8004e76:	18db      	adds	r3, r3, r3
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e8a:	f7fb fa19 	bl	80002c0 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <UART_SetConfig+0x2d4>)
 8004e94:	fba3 1302 	umull	r1, r3, r3, r2
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	2164      	movs	r1, #100	; 0x64
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	3332      	adds	r3, #50	; 0x32
 8004ea6:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <UART_SetConfig+0x2d4>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	f003 0207 	and.w	r2, r3, #7
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4422      	add	r2, r4
 8004eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ebc:	e105      	b.n	80050ca <UART_SetConfig+0x4d6>
 8004ebe:	bf00      	nop
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	40011400 	.word	0x40011400
 8004ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ede:	4642      	mov	r2, r8
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	1891      	adds	r1, r2, r2
 8004ee4:	6239      	str	r1, [r7, #32]
 8004ee6:	415b      	adcs	r3, r3
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eee:	4641      	mov	r1, r8
 8004ef0:	1854      	adds	r4, r2, r1
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	eb43 0501 	adc.w	r5, r3, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	00eb      	lsls	r3, r5, #3
 8004f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f06:	00e2      	lsls	r2, r4, #3
 8004f08:	4614      	mov	r4, r2
 8004f0a:	461d      	mov	r5, r3
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	18e3      	adds	r3, r4, r3
 8004f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f14:	464b      	mov	r3, r9
 8004f16:	eb45 0303 	adc.w	r3, r5, r3
 8004f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	008b      	lsls	r3, r1, #2
 8004f3e:	4621      	mov	r1, r4
 8004f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f44:	4621      	mov	r1, r4
 8004f46:	008a      	lsls	r2, r1, #2
 8004f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f4c:	f7fb f9b8 	bl	80002c0 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <UART_SetConfig+0x4e4>)
 8004f56:	fba3 2302 	umull	r2, r3, r3, r2
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	011c      	lsls	r4, r3, #4
 8004f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	1891      	adds	r1, r2, r2
 8004f76:	61b9      	str	r1, [r7, #24]
 8004f78:	415b      	adcs	r3, r3
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f80:	4641      	mov	r1, r8
 8004f82:	1851      	adds	r1, r2, r1
 8004f84:	6139      	str	r1, [r7, #16]
 8004f86:	4649      	mov	r1, r9
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f98:	4659      	mov	r1, fp
 8004f9a:	00cb      	lsls	r3, r1, #3
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	00ca      	lsls	r2, r1, #3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	4642      	mov	r2, r8
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	eb42 0303 	adc.w	r3, r2, r3
 8004fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fd8:	4649      	mov	r1, r9
 8004fda:	008b      	lsls	r3, r1, #2
 8004fdc:	4641      	mov	r1, r8
 8004fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	008a      	lsls	r2, r1, #2
 8004fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fea:	f7fb f969 	bl	80002c0 <__aeabi_uldivmod>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <UART_SetConfig+0x4e4>)
 8004ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	2164      	movs	r1, #100	; 0x64
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	3332      	adds	r3, #50	; 0x32
 8005006:	4a34      	ldr	r2, [pc, #208]	; (80050d8 <UART_SetConfig+0x4e4>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005012:	441c      	add	r4, r3
 8005014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005018:	2200      	movs	r2, #0
 800501a:	673b      	str	r3, [r7, #112]	; 0x70
 800501c:	677a      	str	r2, [r7, #116]	; 0x74
 800501e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005022:	4642      	mov	r2, r8
 8005024:	464b      	mov	r3, r9
 8005026:	1891      	adds	r1, r2, r2
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	415b      	adcs	r3, r3
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005032:	4641      	mov	r1, r8
 8005034:	1851      	adds	r1, r2, r1
 8005036:	6039      	str	r1, [r7, #0]
 8005038:	4649      	mov	r1, r9
 800503a:	414b      	adcs	r3, r1
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800504a:	4659      	mov	r1, fp
 800504c:	00cb      	lsls	r3, r1, #3
 800504e:	4651      	mov	r1, sl
 8005050:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005054:	4651      	mov	r1, sl
 8005056:	00ca      	lsls	r2, r1, #3
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	4603      	mov	r3, r0
 800505e:	4642      	mov	r2, r8
 8005060:	189b      	adds	r3, r3, r2
 8005062:	66bb      	str	r3, [r7, #104]	; 0x68
 8005064:	464b      	mov	r3, r9
 8005066:	460a      	mov	r2, r1
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	663b      	str	r3, [r7, #96]	; 0x60
 8005078:	667a      	str	r2, [r7, #100]	; 0x64
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005086:	4649      	mov	r1, r9
 8005088:	008b      	lsls	r3, r1, #2
 800508a:	4641      	mov	r1, r8
 800508c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005090:	4641      	mov	r1, r8
 8005092:	008a      	lsls	r2, r1, #2
 8005094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005098:	f7fb f912 	bl	80002c0 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <UART_SetConfig+0x4e4>)
 80050a2:	fba3 1302 	umull	r1, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2164      	movs	r1, #100	; 0x64
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	3332      	adds	r3, #50	; 0x32
 80050b4:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <UART_SetConfig+0x4e4>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	f003 020f 	and.w	r2, r3, #15
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4422      	add	r2, r4
 80050c8:	609a      	str	r2, [r3, #8]
}
 80050ca:	bf00      	nop
 80050cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d6:	bf00      	nop
 80050d8:	51eb851f 	.word	0x51eb851f

080050dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80050e0:	4904      	ldr	r1, [pc, #16]	; (80050f4 <MX_FATFS_Init+0x18>)
 80050e2:	4805      	ldr	r0, [pc, #20]	; (80050f8 <MX_FATFS_Init+0x1c>)
 80050e4:	f003 f82a 	bl	800813c <FATFS_LinkDriver>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <MX_FATFS_Init+0x20>)
 80050ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2000045c 	.word	0x2000045c
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	20000458 	.word	0x20000458

08005100 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005104:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005106:	4618      	mov	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <GenerateCRCTable>:
void get_trail(uint8_t* ocr);
uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg);


void GenerateCRCTable()
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
  int i, j;
  uint8_t CRCPoly = 0x89;  // the value of our CRC-7 polynomial
 8005116:	2389      	movs	r3, #137	; 0x89
 8005118:	71fb      	strb	r3, [r7, #7]

  // generate a table value for all 256 possible byte values
  for (i = 0; i < 256; ++i) {
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e03c      	b.n	800519a <GenerateCRCTable+0x8a>
    CRCTable[i] = (i & 0x80) ? i ^ CRCPoly : i;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <GenerateCRCTable+0x2a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	b25a      	sxtb	r2, r3
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	4053      	eors	r3, r2
 8005134:	b25b      	sxtb	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e001      	b.n	800513e <GenerateCRCTable+0x2e>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	491c      	ldr	r1, [pc, #112]	; (80051b0 <GenerateCRCTable+0xa0>)
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	440a      	add	r2, r1
 8005144:	7013      	strb	r3, [r2, #0]
    for (j = 1; j < 8; ++j) {
 8005146:	2301      	movs	r3, #1
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	e020      	b.n	800518e <GenerateCRCTable+0x7e>
        CRCTable[i] <<= 1;
 800514c:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <GenerateCRCTable+0xa0>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	b2d9      	uxtb	r1, r3
 8005158:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <GenerateCRCTable+0xa0>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	460a      	mov	r2, r1
 8005160:	701a      	strb	r2, [r3, #0]
        if (CRCTable[i] & 0x80){
 8005162:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <GenerateCRCTable+0xa0>)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b25b      	sxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	da0b      	bge.n	8005188 <GenerateCRCTable+0x78>
            CRCTable[i] ^= CRCPoly;
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <GenerateCRCTable+0xa0>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	4053      	eors	r3, r2
 800517c:	b2d9      	uxtb	r1, r3
 800517e:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <GenerateCRCTable+0xa0>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	460a      	mov	r2, r1
 8005186:	701a      	strb	r2, [r3, #0]
    for (j = 1; j < 8; ++j) {
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b07      	cmp	r3, #7
 8005192:	dddb      	ble.n	800514c <GenerateCRCTable+0x3c>
  for (i = 0; i < 256; ++i) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2bff      	cmp	r3, #255	; 0xff
 800519e:	ddbf      	ble.n	8005120 <GenerateCRCTable+0x10>
        }
    }
  }
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000460 	.word	0x20000460

080051b4 <CRCAdd>:

uint8_t CRCAdd(uint8_t CRC_val , uint8_t message_byte){
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	460a      	mov	r2, r1
 80051be:	71fb      	strb	r3, [r7, #7]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71bb      	strb	r3, [r7, #6]
	 return CRCTable[(CRC_val << 1) ^ message_byte];
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	005a      	lsls	r2, r3, #1
 80051c8:	79bb      	ldrb	r3, [r7, #6]
 80051ca:	4053      	eors	r3, r2
 80051cc:	4a03      	ldr	r2, [pc, #12]	; (80051dc <CRCAdd+0x28>)
 80051ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000460 	.word	0x20000460

080051e0 <getCRC>:


// returns the CRC-7 for a message of "length" bytes
uint8_t getCRC(uint8_t message[], int length)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]

  int i;
  uint8_t CRC_val = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	72fb      	strb	r3, [r7, #11]

  for (i = 0; i < length; ++i){
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e00d      	b.n	8005210 <getCRC+0x30>
	  CRC_val = CRCAdd(CRC_val, message[i]);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	7afb      	ldrb	r3, [r7, #11]
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ffd7 	bl	80051b4 <CRCAdd>
 8005206:	4603      	mov	r3, r0
 8005208:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length; ++i){
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3301      	adds	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	dbed      	blt.n	80051f4 <getCRC+0x14>
  }

  return CRC_val;
 8005218:	7afb      	ldrb	r3, [r7, #11]

}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <send_SD_cmd>:

uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg){
 8005224:	b580      	push	{r7, lr}
 8005226:	b094      	sub	sp, #80	; 0x50
 8005228:	af02      	add	r7, sp, #8
 800522a:	4603      	mov	r3, r0
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]

	//should assert that resp!=NULL
	if( (cmd==ACMD41)||(cmd==ACMD23)){
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b29      	cmp	r3, #41	; 0x29
 8005234:	d002      	beq.n	800523c <send_SD_cmd+0x18>
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	2b57      	cmp	r3, #87	; 0x57
 800523a:	d10c      	bne.n	8005256 <send_SD_cmd+0x32>
		uint8_t acmd_resp = send_SD_cmd(CMD55,0);
 800523c:	2100      	movs	r1, #0
 800523e:	2037      	movs	r0, #55	; 0x37
 8005240:	f7ff fff0 	bl	8005224 <send_SD_cmd>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(acmd_resp == 0xFF){
 800524a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800524e:	2bff      	cmp	r3, #255	; 0xff
 8005250:	d101      	bne.n	8005256 <send_SD_cmd+0x32>
			return 0xFF;
 8005252:	23ff      	movs	r3, #255	; 0xff
 8005254:	e08e      	b.n	8005374 <send_SD_cmd+0x150>
		}
	}


	uint8_t tx_high = 0xFF;
 8005256:	23ff      	movs	r3, #255	; 0xff
 8005258:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t MSG[35] = {'\0'};
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	f107 0318 	add.w	r3, r7, #24
 8005264:	221f      	movs	r2, #31
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f005 fdf9 	bl	800ae60 <memset>
	uint8_t spi_rx = 0xFF;
 800526e:	23ff      	movs	r3, #255	; 0xff
 8005270:	74fb      	strb	r3, [r7, #19]
	uint8_t rec_res = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 8005278:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800527c:	2332      	movs	r3, #50	; 0x32
 800527e:	2201      	movs	r2, #1
 8005280:	483e      	ldr	r0, [pc, #248]	; (800537c <send_SD_cmd+0x158>)
 8005282:	f7fd fbc2 	bl	8002a0a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 8005286:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800528a:	2332      	movs	r3, #50	; 0x32
 800528c:	2201      	movs	r2, #1
 800528e:	483b      	ldr	r0, [pc, #236]	; (800537c <send_SD_cmd+0x158>)
 8005290:	f7fd fbbb 	bl	8002a0a <HAL_SPI_Transmit>


	HAL_StatusTypeDef status;
	uint8_t spi_tx_bf[6] = {0};
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	2300      	movs	r3, #0
 800529a:	823b      	strh	r3, [r7, #16]

	spi_tx_bf[0] = (0x40)| cmd;
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	733b      	strb	r3, [r7, #12]

	spi_tx_bf[4] =  cmd_arg & 0x000000FF;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	743b      	strb	r3, [r7, #16]
	spi_tx_bf[3] = (cmd_arg & 0x0000FF00) >> 8;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	73fb      	strb	r3, [r7, #15]
	spi_tx_bf[2] = (cmd_arg & 0x00FF0000) >> 16;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	73bb      	strb	r3, [r7, #14]
	spi_tx_bf[1] = (cmd_arg & 0xFF000000) >> 24;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	0e1b      	lsrs	r3, r3, #24
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	737b      	strb	r3, [r7, #13]

	spi_tx_bf[5] = (getCRC(spi_tx_bf,5)<<1)  + 1;
 80052c4:	f107 030c 	add.w	r3, r7, #12
 80052c8:	2105      	movs	r1, #5
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ff88 	bl	80051e0 <getCRC>
 80052d0:	4603      	mov	r3, r0
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	747b      	strb	r3, [r7, #17]

	//printf(MSG, "cmd:%u %u %u %u %u %u\r\n",spi_tx_bf[0],spi_tx_bf[1],spi_tx_bf[2],spi_tx_bf[3],spi_tx_bf[4],spi_tx_bf[5]);

    HAL_SPI_Transmit(&HSPI, spi_tx_bf , 6, 50);
 80052dc:	f107 010c 	add.w	r1, r7, #12
 80052e0:	2332      	movs	r3, #50	; 0x32
 80052e2:	2206      	movs	r2, #6
 80052e4:	4825      	ldr	r0, [pc, #148]	; (800537c <send_SD_cmd+0x158>)
 80052e6:	f7fd fb90 	bl	8002a0a <HAL_SPI_Transmit>

	int count = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	643b      	str	r3, [r7, #64]	; 0x40


	while( count<N_CS && !rec_res  ){
 80052ee:	e013      	b.n	8005318 <send_SD_cmd+0xf4>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx , 1, 50);
 80052f0:	f107 0213 	add.w	r2, r7, #19
 80052f4:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80052f8:	2332      	movs	r3, #50	; 0x32
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2301      	movs	r3, #1
 80052fe:	481f      	ldr	r0, [pc, #124]	; (800537c <send_SD_cmd+0x158>)
 8005300:	f7fd fcbf 	bl	8002c82 <HAL_SPI_TransmitReceive>
		if( (spi_rx&0x80) == 0){
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	b25b      	sxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	db02      	blt.n	8005312 <send_SD_cmd+0xee>
			rec_res = 1;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		//printf("resp:%u\r\n",spi_rx);

		count++;
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	3301      	adds	r3, #1
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
	while( count<N_CS && !rec_res  ){
 8005318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531a:	2b07      	cmp	r3, #7
 800531c:	dc03      	bgt.n	8005326 <send_SD_cmd+0x102>
 800531e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0e4      	beq.n	80052f0 <send_SD_cmd+0xcc>
	}


	if(cmd!=CMD58 && cmd!=CMD8 && cmd!=CMD9 && spi_rx!=0xFF){
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	2b3a      	cmp	r3, #58	; 0x3a
 800532a:	d022      	beq.n	8005372 <send_SD_cmd+0x14e>
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d01f      	beq.n	8005372 <send_SD_cmd+0x14e>
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	2b09      	cmp	r3, #9
 8005336:	d01c      	beq.n	8005372 <send_SD_cmd+0x14e>
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2bff      	cmp	r3, #255	; 0xff
 800533c:	d019      	beq.n	8005372 <send_SD_cmd+0x14e>
		uint8_t spi_rx_clear = 0x0;
 800533e:	2300      	movs	r3, #0
 8005340:	72fb      	strb	r3, [r7, #11]

		for(int ii=0; ii<8; ii++){
 8005342:	2300      	movs	r3, #0
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005346:	e00f      	b.n	8005368 <send_SD_cmd+0x144>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 8005348:	f107 020b 	add.w	r2, r7, #11
 800534c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8005350:	2332      	movs	r3, #50	; 0x32
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2301      	movs	r3, #1
 8005356:	4809      	ldr	r0, [pc, #36]	; (800537c <send_SD_cmd+0x158>)
 8005358:	f7fd fc93 	bl	8002c82 <HAL_SPI_TransmitReceive>
			if(spi_rx_clear==0xFF){
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	2bff      	cmp	r3, #255	; 0xff
 8005360:	d006      	beq.n	8005370 <send_SD_cmd+0x14c>
		for(int ii=0; ii<8; ii++){
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	3301      	adds	r3, #1
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	2b07      	cmp	r3, #7
 800536c:	ddec      	ble.n	8005348 <send_SD_cmd+0x124>
 800536e:	e000      	b.n	8005372 <send_SD_cmd+0x14e>
				break;
 8005370:	bf00      	nop
			}
		}
	}

	return spi_rx;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3748      	adds	r7, #72	; 0x48
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	200000c4 	.word	0x200000c4

08005380 <get_trail>:

void get_trail(uint8_t* ocr){
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
	    uint8_t tx_high = 0xFF;
 8005388:	23ff      	movs	r3, #255	; 0xff
 800538a:	75fb      	strb	r3, [r7, #23]
		uint8_t rx_buff[4] = {0};
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr, 1, 50);
 8005390:	f107 0117 	add.w	r1, r7, #23
 8005394:	2332      	movs	r3, #50	; 0x32
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2301      	movs	r3, #1
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	481a      	ldr	r0, [pc, #104]	; (8005408 <get_trail+0x88>)
 800539e:	f7fd fc70 	bl	8002c82 <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+1, 1, 50);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	f107 0117 	add.w	r1, r7, #23
 80053aa:	2332      	movs	r3, #50	; 0x32
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	2301      	movs	r3, #1
 80053b0:	4815      	ldr	r0, [pc, #84]	; (8005408 <get_trail+0x88>)
 80053b2:	f7fd fc66 	bl	8002c82 <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+2, 1, 50);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	f107 0117 	add.w	r1, r7, #23
 80053be:	2332      	movs	r3, #50	; 0x32
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2301      	movs	r3, #1
 80053c4:	4810      	ldr	r0, [pc, #64]	; (8005408 <get_trail+0x88>)
 80053c6:	f7fd fc5c 	bl	8002c82 <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+3, 1, 50);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	1cda      	adds	r2, r3, #3
 80053ce:	f107 0117 	add.w	r1, r7, #23
 80053d2:	2332      	movs	r3, #50	; 0x32
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2301      	movs	r3, #1
 80053d8:	480b      	ldr	r0, [pc, #44]	; (8005408 <get_trail+0x88>)
 80053da:	f7fd fc52 	bl	8002c82 <HAL_SPI_TransmitReceive>


		//sprintf(MSG, "trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
		//printf("trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		uint8_t spi_rx_clear = 0x0;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
		while(spi_rx_clear!=0xFF){
 80053e2:	e009      	b.n	80053f8 <get_trail+0x78>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 80053e4:	f107 020f 	add.w	r2, r7, #15
 80053e8:	f107 0117 	add.w	r1, r7, #23
 80053ec:	2332      	movs	r3, #50	; 0x32
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	2301      	movs	r3, #1
 80053f2:	4805      	ldr	r0, [pc, #20]	; (8005408 <get_trail+0x88>)
 80053f4:	f7fd fc45 	bl	8002c82 <HAL_SPI_TransmitReceive>
		while(spi_rx_clear!=0xFF){
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2bff      	cmp	r3, #255	; 0xff
 80053fc:	d1f2      	bne.n	80053e4 <get_trail+0x64>
		}
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	200000c4 	.word	0x200000c4

0800540c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    Stat = STA_NOINIT;
 8005416:	4b4b      	ldr	r3, [pc, #300]	; (8005544 <USER_initialize+0x138>)
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
	if(pdrv!=0){
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <USER_initialize+0x1e>
	  return Stat;
 8005422:	4b48      	ldr	r3, [pc, #288]	; (8005544 <USER_initialize+0x138>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e088      	b.n	800553c <USER_initialize+0x130>
	}

    GenerateCRCTable();
 800542a:	f7ff fe71 	bl	8005110 <GenerateCRCTable>


    uint8_t spi_tx = 0xFF;
 800542e:	23ff      	movs	r3, #255	; 0xff
 8005430:	73fb      	strb	r3, [r7, #15]


    SD_CS_HIGH();
 8005432:	2201      	movs	r2, #1
 8005434:	2102      	movs	r1, #2
 8005436:	4844      	ldr	r0, [pc, #272]	; (8005548 <USER_initialize+0x13c>)
 8005438:	f7fc fc2a 	bl	8001c90 <HAL_GPIO_WritePin>

    HAL_Delay(50); //delay at least 1 ms
 800543c:	2032      	movs	r0, #50	; 0x32
 800543e:	f7fc f813 	bl	8001468 <HAL_Delay>

    //only need 72, do a bunch more
    for(int ii = 0; ii<10; ii++){
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	e009      	b.n	800545c <USER_initialize+0x50>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 8005448:	f107 010f 	add.w	r1, r7, #15
 800544c:	2300      	movs	r3, #0
 800544e:	2201      	movs	r2, #1
 8005450:	483e      	ldr	r0, [pc, #248]	; (800554c <USER_initialize+0x140>)
 8005452:	f7fd fada 	bl	8002a0a <HAL_SPI_Transmit>
    for(int ii = 0; ii<10; ii++){
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b09      	cmp	r3, #9
 8005460:	ddf2      	ble.n	8005448 <USER_initialize+0x3c>
    }

    uint8_t R1_resp = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]
    uint8_t ocr[4] = {0};
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]


    SD_CS_LOW();
 800546a:	2200      	movs	r2, #0
 800546c:	2102      	movs	r1, #2
 800546e:	4836      	ldr	r0, [pc, #216]	; (8005548 <USER_initialize+0x13c>)
 8005470:	f7fc fc0e 	bl	8001c90 <HAL_GPIO_WritePin>

    //online comments indicate this makes things more consistent
    for(int ii = 0; ii<2; ii++){
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e009      	b.n	800548e <USER_initialize+0x82>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 800547a:	f107 010f 	add.w	r1, r7, #15
 800547e:	2300      	movs	r3, #0
 8005480:	2201      	movs	r2, #1
 8005482:	4832      	ldr	r0, [pc, #200]	; (800554c <USER_initialize+0x140>)
 8005484:	f7fd fac1 	bl	8002a0a <HAL_SPI_Transmit>
    for(int ii = 0; ii<2; ii++){
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	3301      	adds	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	ddf2      	ble.n	800547a <USER_initialize+0x6e>
    }

    R1_resp = send_SD_cmd(CMD0,0);
 8005494:	2100      	movs	r1, #0
 8005496:	2000      	movs	r0, #0
 8005498:	f7ff fec4 	bl	8005224 <send_SD_cmd>
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]


    if(R1_resp == 0x01){
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d144      	bne.n	8005530 <USER_initialize+0x124>


  	  R1_resp = send_SD_cmd(CMD8,0x01AA);
 80054a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054aa:	2008      	movs	r0, #8
 80054ac:	f7ff feba 	bl	8005224 <send_SD_cmd>
 80054b0:	4603      	mov	r3, r0
 80054b2:	75fb      	strb	r3, [r7, #23]
  	  get_trail(ocr);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff61 	bl	8005380 <get_trail>


  	  if( (R1_resp!=0x01)){ //if error or no response, SD1 or MMC
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d135      	bne.n	8005530 <USER_initialize+0x124>
  		  //Won't support this

  	  }
  	  else if( (ocr[2] == 0x01)&&(ocr[3] == 0xAA)  ){ //SD v2
 80054c4:	7abb      	ldrb	r3, [r7, #10]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d132      	bne.n	8005530 <USER_initialize+0x124>
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	2baa      	cmp	r3, #170	; 0xaa
 80054ce:	d12f      	bne.n	8005530 <USER_initialize+0x124>
  		  //printf("SD 2.0+\r\n");



  		  uint32_t t_init = HAL_GetTick();
 80054d0:	f7fb ffbe 	bl	8001450 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 80054d6:	e009      	b.n	80054ec <USER_initialize+0xe0>


  			  R1_resp = send_SD_cmd(ACMD41,0x40000000);
 80054d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054dc:	2029      	movs	r0, #41	; 0x29
 80054de:	f7ff fea1 	bl	8005224 <send_SD_cmd>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]

  			  if(R1_resp==0x00){
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <USER_initialize+0xf2>
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 80054ec:	f7fb ffb0 	bl	8001450 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054fa:	d3ed      	bcc.n	80054d8 <USER_initialize+0xcc>
 80054fc:	e000      	b.n	8005500 <USER_initialize+0xf4>
  				  break;
 80054fe:	bf00      	nop
  		  }




  		  R1_resp = send_SD_cmd(CMD58,0x00000000);
 8005500:	2100      	movs	r1, #0
 8005502:	203a      	movs	r0, #58	; 0x3a
 8005504:	f7ff fe8e 	bl	8005224 <send_SD_cmd>
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]
  		  get_trail(ocr);
 800550c:	f107 0308 	add.w	r3, r7, #8
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff35 	bl	8005380 <get_trail>

  		  //printf("OCR status:\r\n");
  		  //printf("\tCCS(0=bytes,1=blocks):%u\r\n", (ocr[0]>>6)&0x01 );

  		  //force 512 byte blocks
  		  R1_resp = send_SD_cmd(CMD16,0x00000200);
 8005516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551a:	2010      	movs	r0, #16
 800551c:	f7ff fe82 	bl	8005224 <send_SD_cmd>
 8005520:	4603      	mov	r3, r0
 8005522:	75fb      	strb	r3, [r7, #23]


  		  //I don't, but could check voltage here
  		  Stat=0;
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <USER_initialize+0x138>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
  		  //after init, can speed up spi
  		  HSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800552a:	4b08      	ldr	r3, [pc, #32]	; (800554c <USER_initialize+0x140>)
 800552c:	2210      	movs	r2, #16
 800552e:	61da      	str	r2, [r3, #28]
    }
    else{
  	  //printf("error, CMD0 response:%u\r\n",R1_resp);
    }

    Stat = 0;
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <USER_initialize+0x138>)
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]

    return Stat;
 8005536:	4b03      	ldr	r3, [pc, #12]	; (8005544 <USER_initialize+0x138>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000009 	.word	0x20000009
 8005548:	40020400 	.word	0x40020400
 800554c:	200000c4 	.word	0x200000c4

08005550 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    //Stat = STA_NOINIT;
    return Stat;
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <USER_status+0x1c>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	20000009 	.word	0x20000009

08005570 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	; 0x38
 8005574:	af02      	add	r7, sp, #8
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	if(pdrv!=0){
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <USER_read+0x1a>
		return RES_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0d7      	b.n	800573a <USER_read+0x1ca>
	}
	if(USER_status(pdrv)!=0){
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ffdf 	bl	8005550 <USER_status>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <USER_read+0x2c>
		return RES_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0ce      	b.n	800573a <USER_read+0x1ca>
	}


	if(count==0){
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <USER_read+0x36>
	    return RES_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e0c9      	b.n	800573a <USER_read+0x1ca>
	}
	else if(count==1){
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d149      	bne.n	8005640 <USER_read+0xd0>
	  uint8_t R1_resp = send_SD_cmd(CMD17,sector);
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	2011      	movs	r0, #17
 80055b0:	f7ff fe38 	bl	8005224 <send_SD_cmd>
 80055b4:	4603      	mov	r3, r0
 80055b6:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 80055b8:	23ff      	movs	r3, #255	; 0xff
 80055ba:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 80055bc:	23ff      	movs	r3, #255	; 0xff
 80055be:	763b      	strb	r3, [r7, #24]

	  int ii = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 80055c4:	e00c      	b.n	80055e0 <USER_read+0x70>
		ii++;
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	3301      	adds	r3, #1
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80055cc:	f107 0218 	add.w	r2, r7, #24
 80055d0:	f107 0119 	add.w	r1, r7, #25
 80055d4:	2332      	movs	r3, #50	; 0x32
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	2301      	movs	r3, #1
 80055da:	485a      	ldr	r0, [pc, #360]	; (8005744 <USER_read+0x1d4>)
 80055dc:	f7fd fb51 	bl	8002c82 <HAL_SPI_TransmitReceive>
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 80055e0:	7e3b      	ldrb	r3, [r7, #24]
 80055e2:	2bff      	cmp	r3, #255	; 0xff
 80055e4:	d102      	bne.n	80055ec <USER_read+0x7c>
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	2b63      	cmp	r3, #99	; 0x63
 80055ea:	ddec      	ble.n	80055c6 <USER_read+0x56>
	  }

	  //capture data
	  for(ii=0;ii<512;ii++){
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f0:	e00d      	b.n	800560e <USER_read+0x9e>
	 	HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii , 1, 50);
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	441a      	add	r2, r3
 80055f8:	f107 0119 	add.w	r1, r7, #25
 80055fc:	2332      	movs	r3, #50	; 0x32
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2301      	movs	r3, #1
 8005602:	4850      	ldr	r0, [pc, #320]	; (8005744 <USER_read+0x1d4>)
 8005604:	f7fd fb3d 	bl	8002c82 <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<512;ii++){
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	3301      	adds	r3, #1
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	dbed      	blt.n	80055f2 <USER_read+0x82>
	  }

		//read CRC - don't use for now
	  for(ii=0;ii<2;ii++){
 8005616:	2300      	movs	r3, #0
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	e00c      	b.n	8005636 <USER_read+0xc6>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 800561c:	f107 0218 	add.w	r2, r7, #24
 8005620:	f107 0119 	add.w	r1, r7, #25
 8005624:	2332      	movs	r3, #50	; 0x32
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	2301      	movs	r3, #1
 800562a:	4846      	ldr	r0, [pc, #280]	; (8005744 <USER_read+0x1d4>)
 800562c:	f7fd fb29 	bl	8002c82 <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<2;ii++){
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	3301      	adds	r3, #1
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	2b01      	cmp	r3, #1
 800563a:	ddef      	ble.n	800561c <USER_read+0xac>
	  }

	  return RES_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e07c      	b.n	800573a <USER_read+0x1ca>

	}
	else{
	  uint8_t R1_resp = send_SD_cmd(CMD18,sector);
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	2012      	movs	r0, #18
 8005644:	f7ff fdee 	bl	8005224 <send_SD_cmd>
 8005648:	4603      	mov	r3, r0
 800564a:	76fb      	strb	r3, [r7, #27]

	  uint8_t spi_tx = 0xFF;
 800564c:	23ff      	movs	r3, #255	; 0xff
 800564e:	75fb      	strb	r3, [r7, #23]
	  uint8_t spi_rx = 0xFF;
 8005650:	23ff      	movs	r3, #255	; 0xff
 8005652:	75bb      	strb	r3, [r7, #22]


	  for(int jj=0; jj<count; jj++){
 8005654:	2300      	movs	r3, #0
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
 8005658:	e046      	b.n	80056e8 <USER_read+0x178>

		int ii = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
		spi_rx = 0xFF;
 800565e:	23ff      	movs	r3, #255	; 0xff
 8005660:	75bb      	strb	r3, [r7, #22]
		while( (spi_rx == 0xFF)&&(ii<100) ){
 8005662:	e00c      	b.n	800567e <USER_read+0x10e>
		  ii++;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	3301      	adds	r3, #1
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800566a:	f107 0216 	add.w	r2, r7, #22
 800566e:	f107 0117 	add.w	r1, r7, #23
 8005672:	2332      	movs	r3, #50	; 0x32
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2301      	movs	r3, #1
 8005678:	4832      	ldr	r0, [pc, #200]	; (8005744 <USER_read+0x1d4>)
 800567a:	f7fd fb02 	bl	8002c82 <HAL_SPI_TransmitReceive>
		while( (spi_rx == 0xFF)&&(ii<100) ){
 800567e:	7dbb      	ldrb	r3, [r7, #22]
 8005680:	2bff      	cmp	r3, #255	; 0xff
 8005682:	d102      	bne.n	800568a <USER_read+0x11a>
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	2b63      	cmp	r3, #99	; 0x63
 8005688:	ddec      	ble.n	8005664 <USER_read+0xf4>
		}

			//capture data
		for(ii=0;ii<512;ii++){
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	e011      	b.n	80056b4 <USER_read+0x144>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii+(jj*512) , 1, 50);
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	025b      	lsls	r3, r3, #9
 8005694:	461a      	mov	r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	4413      	add	r3, r2
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	441a      	add	r2, r3
 800569e:	f107 0117 	add.w	r1, r7, #23
 80056a2:	2332      	movs	r3, #50	; 0x32
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2301      	movs	r3, #1
 80056a8:	4826      	ldr	r0, [pc, #152]	; (8005744 <USER_read+0x1d4>)
 80056aa:	f7fd faea 	bl	8002c82 <HAL_SPI_TransmitReceive>
		for(ii=0;ii<512;ii++){
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	3301      	adds	r3, #1
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ba:	dbe9      	blt.n	8005690 <USER_read+0x120>
		}

			//read CRC - don't use for now
		for(ii=0;ii<2;ii++){
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	e00c      	b.n	80056dc <USER_read+0x16c>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80056c2:	f107 0216 	add.w	r2, r7, #22
 80056c6:	f107 0117 	add.w	r1, r7, #23
 80056ca:	2332      	movs	r3, #50	; 0x32
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2301      	movs	r3, #1
 80056d0:	481c      	ldr	r0, [pc, #112]	; (8005744 <USER_read+0x1d4>)
 80056d2:	f7fd fad6 	bl	8002c82 <HAL_SPI_TransmitReceive>
		for(ii=0;ii<2;ii++){
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	3301      	adds	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b01      	cmp	r3, #1
 80056e0:	ddef      	ble.n	80056c2 <USER_read+0x152>
	  for(int jj=0; jj<count; jj++){
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	3301      	adds	r3, #1
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d8b4      	bhi.n	800565a <USER_read+0xea>
		}
	  }


	  R1_resp = send_SD_cmd(CMD12,0x0);
 80056f0:	2100      	movs	r1, #0
 80056f2:	200c      	movs	r0, #12
 80056f4:	f7ff fd96 	bl	8005224 <send_SD_cmd>
 80056f8:	4603      	mov	r3, r0
 80056fa:	76fb      	strb	r3, [r7, #27]

	  int busy = 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	623b      	str	r3, [r7, #32]
	  int counter = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 8005704:	e011      	b.n	800572a <USER_read+0x1ba>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8005706:	f107 0216 	add.w	r2, r7, #22
 800570a:	f107 0117 	add.w	r1, r7, #23
 800570e:	2332      	movs	r3, #50	; 0x32
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	2301      	movs	r3, #1
 8005714:	480b      	ldr	r0, [pc, #44]	; (8005744 <USER_read+0x1d4>)
 8005716:	f7fd fab4 	bl	8002c82 <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 800571a:	7dbb      	ldrb	r3, [r7, #22]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <USER_read+0x1b4>
		  busy = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	623b      	str	r3, [r7, #32]
		}
		counter++;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	3301      	adds	r3, #1
 8005728:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <USER_read+0x1c8>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005736:	dbe6      	blt.n	8005706 <USER_read+0x196>
	  }

	  return RES_OK;
 8005738:	2300      	movs	r3, #0
	}

	//shouldn't get here
    return RES_OK;
  /* USER CODE END READ */
}
 800573a:	4618      	mov	r0, r3
 800573c:	3730      	adds	r7, #48	; 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200000c4 	.word	0x200000c4

08005748 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b094      	sub	sp, #80	; 0x50
 800574c:	af02      	add	r7, sp, #8
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	if(pdrv!=0){
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <USER_write+0x1a>
		return RES_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e135      	b.n	80059ce <USER_write+0x286>
	}
	if(USER_status(pdrv)!=0){
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fef3 	bl	8005550 <USER_status>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USER_write+0x2c>
		return RES_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e12c      	b.n	80059ce <USER_write+0x286>
	}

	if(count==0){
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <USER_write+0x36>
	  return RES_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e127      	b.n	80059ce <USER_write+0x286>
	}
	else if(count==1){
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d169      	bne.n	8005858 <USER_write+0x110>
	  uint8_t R1_resp = send_SD_cmd(CMD24,sector);
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	2018      	movs	r0, #24
 8005788:	f7ff fd4c 	bl	8005224 <send_SD_cmd>
 800578c:	4603      	mov	r3, r0
 800578e:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 8005790:	23ff      	movs	r3, #255	; 0xff
 8005792:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8005794:	23ff      	movs	r3, #255	; 0xff
 8005796:	763b      	strb	r3, [r7, #24]

	  //1 byte of delat


	  //send data packet
	  spi_tx = 0xFE;
 8005798:	23fe      	movs	r3, #254	; 0xfe
 800579a:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800579c:	f107 0218 	add.w	r2, r7, #24
 80057a0:	f107 0119 	add.w	r1, r7, #25
 80057a4:	2332      	movs	r3, #50	; 0x32
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2301      	movs	r3, #1
 80057aa:	488b      	ldr	r0, [pc, #556]	; (80059d8 <USER_write+0x290>)
 80057ac:	f7fd fa69 	bl	8002c82 <HAL_SPI_TransmitReceive>

	  //send data
	  for(int ii=0;ii<512;ii++){
 80057b0:	2300      	movs	r3, #0
 80057b2:	647b      	str	r3, [r7, #68]	; 0x44
 80057b4:	e00d      	b.n	80057d2 <USER_write+0x8a>
		HAL_SPI_TransmitReceive(&HSPI, buff+ii, &spi_rx, 1, 50);
 80057b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	18d1      	adds	r1, r2, r3
 80057bc:	f107 0218 	add.w	r2, r7, #24
 80057c0:	2332      	movs	r3, #50	; 0x32
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2301      	movs	r3, #1
 80057c6:	4884      	ldr	r0, [pc, #528]	; (80059d8 <USER_write+0x290>)
 80057c8:	f7fd fa5b 	bl	8002c82 <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<512;ii++){
 80057cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ce:	3301      	adds	r3, #1
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d8:	dbed      	blt.n	80057b6 <USER_write+0x6e>
	  }

	  //crc, dummy packets
	  for(int ii=0;ii<2;ii++){
 80057da:	2300      	movs	r3, #0
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
 80057de:	e00c      	b.n	80057fa <USER_write+0xb2>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80057e0:	f107 0218 	add.w	r2, r7, #24
 80057e4:	f107 0119 	add.w	r1, r7, #25
 80057e8:	2332      	movs	r3, #50	; 0x32
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2301      	movs	r3, #1
 80057ee:	487a      	ldr	r0, [pc, #488]	; (80059d8 <USER_write+0x290>)
 80057f0:	f7fd fa47 	bl	8002c82 <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<2;ii++){
 80057f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f6:	3301      	adds	r3, #1
 80057f8:	643b      	str	r3, [r7, #64]	; 0x40
 80057fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	ddef      	ble.n	80057e0 <USER_write+0x98>
	  }

	    //get data response, fail if not data accepted
	  spi_tx = 0xFF;
 8005800:	23ff      	movs	r3, #255	; 0xff
 8005802:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8005804:	f107 0218 	add.w	r2, r7, #24
 8005808:	f107 0119 	add.w	r1, r7, #25
 800580c:	2332      	movs	r3, #50	; 0x32
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2301      	movs	r3, #1
 8005812:	4871      	ldr	r0, [pc, #452]	; (80059d8 <USER_write+0x290>)
 8005814:	f7fd fa35 	bl	8002c82 <HAL_SPI_TransmitReceive>

	  int busy = 1;
 8005818:	2301      	movs	r3, #1
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int counter = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 8005820:	e011      	b.n	8005846 <USER_write+0xfe>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8005822:	f107 0218 	add.w	r2, r7, #24
 8005826:	f107 0119 	add.w	r1, r7, #25
 800582a:	2332      	movs	r3, #50	; 0x32
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2301      	movs	r3, #1
 8005830:	4869      	ldr	r0, [pc, #420]	; (80059d8 <USER_write+0x290>)
 8005832:	f7fd fa26 	bl	8002c82 <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 8005836:	7e3b      	ldrb	r3, [r7, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <USER_write+0xf8>
	  	  busy = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		counter++;
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	3301      	adds	r3, #1
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <USER_write+0x10c>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005852:	dbe6      	blt.n	8005822 <USER_write+0xda>
	  }

	  return RES_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e0ba      	b.n	80059ce <USER_write+0x286>
	}
	else{
		uint8_t R1_resp = send_SD_cmd(CMD25,sector);
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	2019      	movs	r0, #25
 800585c:	f7ff fce2 	bl	8005224 <send_SD_cmd>
 8005860:	4603      	mov	r3, r0
 8005862:	76fb      	strb	r3, [r7, #27]

		uint8_t spi_tx = 0xFF;
 8005864:	23ff      	movs	r3, #255	; 0xff
 8005866:	75fb      	strb	r3, [r7, #23]
		uint8_t spi_rx = 0xFF;
 8005868:	23ff      	movs	r3, #255	; 0xff
 800586a:	75bb      	strb	r3, [r7, #22]

		//one buffer of nothing
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800586c:	f107 0216 	add.w	r2, r7, #22
 8005870:	f107 0117 	add.w	r1, r7, #23
 8005874:	2332      	movs	r3, #50	; 0x32
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2301      	movs	r3, #1
 800587a:	4857      	ldr	r0, [pc, #348]	; (80059d8 <USER_write+0x290>)
 800587c:	f7fd fa01 	bl	8002c82 <HAL_SPI_TransmitReceive>


		for(int jj=0; jj<count; jj++){
 8005880:	2300      	movs	r3, #0
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	e068      	b.n	8005958 <USER_write+0x210>


			//send data packet
			spi_tx = 0xFC;
 8005886:	23fc      	movs	r3, #252	; 0xfc
 8005888:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800588a:	f107 0216 	add.w	r2, r7, #22
 800588e:	f107 0117 	add.w	r1, r7, #23
 8005892:	2332      	movs	r3, #50	; 0x32
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	2301      	movs	r3, #1
 8005898:	484f      	ldr	r0, [pc, #316]	; (80059d8 <USER_write+0x290>)
 800589a:	f7fd f9f2 	bl	8002c82 <HAL_SPI_TransmitReceive>

			//send data
			//spi_tx = 0xAC;
			for(int ii=0;ii<512;ii++){
 800589e:	2300      	movs	r3, #0
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30
 80058a2:	e011      	b.n	80058c8 <USER_write+0x180>
	//			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
				HAL_SPI_TransmitReceive(&HSPI, buff+ii+(512*jj), &spi_rx, 1, 50);
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	025b      	lsls	r3, r3, #9
 80058a8:	461a      	mov	r2, r3
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	4413      	add	r3, r2
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	18d1      	adds	r1, r2, r3
 80058b2:	f107 0216 	add.w	r2, r7, #22
 80058b6:	2332      	movs	r3, #50	; 0x32
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2301      	movs	r3, #1
 80058bc:	4846      	ldr	r0, [pc, #280]	; (80059d8 <USER_write+0x290>)
 80058be:	f7fd f9e0 	bl	8002c82 <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<512;ii++){
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	3301      	adds	r3, #1
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ce:	dbe9      	blt.n	80058a4 <USER_write+0x15c>
			}

			spi_tx = 0x00;
 80058d0:	2300      	movs	r3, #0
 80058d2:	75fb      	strb	r3, [r7, #23]
			//crc, dummy packets
			for(int ii=0;ii<2;ii++){
 80058d4:	2300      	movs	r3, #0
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d8:	e00c      	b.n	80058f4 <USER_write+0x1ac>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80058da:	f107 0216 	add.w	r2, r7, #22
 80058de:	f107 0117 	add.w	r1, r7, #23
 80058e2:	2332      	movs	r3, #50	; 0x32
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	483b      	ldr	r0, [pc, #236]	; (80059d8 <USER_write+0x290>)
 80058ea:	f7fd f9ca 	bl	8002c82 <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<2;ii++){
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	3301      	adds	r3, #1
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	ddef      	ble.n	80058da <USER_write+0x192>
			}

			//get data response, fail if not data accepted
			spi_tx = 0xFF;
 80058fa:	23ff      	movs	r3, #255	; 0xff
 80058fc:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80058fe:	f107 0216 	add.w	r2, r7, #22
 8005902:	f107 0117 	add.w	r1, r7, #23
 8005906:	2332      	movs	r3, #50	; 0x32
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	2301      	movs	r3, #1
 800590c:	4832      	ldr	r0, [pc, #200]	; (80059d8 <USER_write+0x290>)
 800590e:	f7fd f9b8 	bl	8002c82 <HAL_SPI_TransmitReceive>

			int busy = 1;
 8005912:	2301      	movs	r3, #1
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
			int counter = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
			spi_tx = 0xFF;
 800591a:	23ff      	movs	r3, #255	; 0xff
 800591c:	75fb      	strb	r3, [r7, #23]

			while(busy&&(counter<1000) ){
 800591e:	e011      	b.n	8005944 <USER_write+0x1fc>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8005920:	f107 0216 	add.w	r2, r7, #22
 8005924:	f107 0117 	add.w	r1, r7, #23
 8005928:	2332      	movs	r3, #50	; 0x32
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2301      	movs	r3, #1
 800592e:	482a      	ldr	r0, [pc, #168]	; (80059d8 <USER_write+0x290>)
 8005930:	f7fd f9a7 	bl	8002c82 <HAL_SPI_TransmitReceive>
				if(spi_rx!=0){
 8005934:	7dbb      	ldrb	r3, [r7, #22]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <USER_write+0x1f6>
					busy = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				counter++;
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	3301      	adds	r3, #1
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
			while(busy&&(counter<1000) ){
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <USER_write+0x20a>
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005950:	dbe6      	blt.n	8005920 <USER_write+0x1d8>
		for(int jj=0; jj<count; jj++){
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	3301      	adds	r3, #1
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d892      	bhi.n	8005886 <USER_write+0x13e>
			}

		}

		//send stop token
		spi_tx = 0xFD;
 8005960:	23fd      	movs	r3, #253	; 0xfd
 8005962:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8005964:	f107 0216 	add.w	r2, r7, #22
 8005968:	f107 0117 	add.w	r1, r7, #23
 800596c:	2332      	movs	r3, #50	; 0x32
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2301      	movs	r3, #1
 8005972:	4819      	ldr	r0, [pc, #100]	; (80059d8 <USER_write+0x290>)
 8005974:	f7fd f985 	bl	8002c82 <HAL_SPI_TransmitReceive>

		//
		spi_tx = 0xFF;
 8005978:	23ff      	movs	r3, #255	; 0xff
 800597a:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800597c:	f107 0216 	add.w	r2, r7, #22
 8005980:	f107 0117 	add.w	r1, r7, #23
 8005984:	2332      	movs	r3, #50	; 0x32
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	2301      	movs	r3, #1
 800598a:	4813      	ldr	r0, [pc, #76]	; (80059d8 <USER_write+0x290>)
 800598c:	f7fd f979 	bl	8002c82 <HAL_SPI_TransmitReceive>


		int busy = 1;
 8005990:	2301      	movs	r3, #1
 8005992:	623b      	str	r3, [r7, #32]
		int counter = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 8005998:	e011      	b.n	80059be <USER_write+0x276>
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800599a:	f107 0216 	add.w	r2, r7, #22
 800599e:	f107 0117 	add.w	r1, r7, #23
 80059a2:	2332      	movs	r3, #50	; 0x32
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	2301      	movs	r3, #1
 80059a8:	480b      	ldr	r0, [pc, #44]	; (80059d8 <USER_write+0x290>)
 80059aa:	f7fd f96a 	bl	8002c82 <HAL_SPI_TransmitReceive>
			if(spi_rx!=0){
 80059ae:	7dbb      	ldrb	r3, [r7, #22]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <USER_write+0x270>
				busy = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	623b      	str	r3, [r7, #32]
			}
			else{
			}
			counter++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <USER_write+0x284>
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ca:	dbe6      	blt.n	800599a <USER_write+0x252>
		}
	}

	//shouldn't get here
    return RES_OK;
 80059cc:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3748      	adds	r7, #72	; 0x48
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200000c4 	.word	0x200000c4

080059dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	4603      	mov	r3, r0
 80059e4:	603a      	str	r2, [r7, #0]
 80059e6:	71fb      	strb	r3, [r7, #7]
 80059e8:	460b      	mov	r3, r1
 80059ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(cmd){
 80059f2:	79bb      	ldrb	r3, [r7, #6]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	f200 809c 	bhi.w	8005b32 <USER_ioctl+0x156>
 80059fa:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <USER_ioctl+0x24>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a15 	.word	0x08005a15
 8005a04:	08005a3b 	.word	0x08005a3b
 8005a08:	08005a2b 	.word	0x08005a2b
 8005a0c:	08005a1d 	.word	0x08005a1d
 8005a10:	08005b2b 	.word	0x08005b2b

	case CTRL_SYNC:
		// nothing to do here
		res = RES_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005a1a:	e08d      	b.n	8005b38 <USER_ioctl+0x15c>
	case GET_BLOCK_SIZE:
		*(int*)buff = 1; //could check, but doing this for now
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005a28:	e086      	b.n	8005b38 <USER_ioctl+0x15c>
	case GET_SECTOR_SIZE:
		*(int*)buff = 512; //buffer size is always 512
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005a38:	e07e      	b.n	8005b38 <USER_ioctl+0x15c>

	case GET_SECTOR_COUNT:
		if(USER_status(pdrv)!=0){
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fd87 	bl	8005550 <USER_status>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <USER_ioctl+0x70>
			return RES_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e077      	b.n	8005b3c <USER_ioctl+0x160>
		}
		else{
			BYTE buffer[16] = {0};
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	f107 0314 	add.w	r3, r7, #20
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	609a      	str	r2, [r3, #8]
			//printf("GET_BLOCK_SIZE\r\n");
			uint8_t R1_resp = send_SD_cmd(CMD9,0x0);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2009      	movs	r0, #9
 8005a60:	f7ff fbe0 	bl	8005224 <send_SD_cmd>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("cmd resp:%u\r\n",R1_resp);
			uint8_t spi_tx = 0xFF;
 8005a6a:	23ff      	movs	r3, #255	; 0xff
 8005a6c:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_rx = 0xFF;
 8005a6e:	23ff      	movs	r3, #255	; 0xff
 8005a70:	73bb      	strb	r3, [r7, #14]

			int ii = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 8005a76:	e00c      	b.n	8005a92 <USER_ioctl+0xb6>
				ii++;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8005a7e:	f107 020e 	add.w	r2, r7, #14
 8005a82:	f107 010f 	add.w	r1, r7, #15
 8005a86:	2332      	movs	r3, #50	; 0x32
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	482d      	ldr	r0, [pc, #180]	; (8005b44 <USER_ioctl+0x168>)
 8005a8e:	f7fd f8f8 	bl	8002c82 <HAL_SPI_TransmitReceive>
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	2bff      	cmp	r3, #255	; 0xff
 8005a96:	d104      	bne.n	8005aa2 <USER_ioctl+0xc6>
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	ddea      	ble.n	8005a78 <USER_ioctl+0x9c>

			//printf("ii:%u\r\n",ii);
			//printf("data token:%u\r\n",spi_rx);

			//capture data
			for(ii=0;ii<16;ii++){
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa6:	e010      	b.n	8005aca <USER_ioctl+0xee>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buffer+15-ii , 1, 50);
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	f1c3 030f 	rsb	r3, r3, #15
 8005aae:	f107 0210 	add.w	r2, r7, #16
 8005ab2:	441a      	add	r2, r3
 8005ab4:	f107 010f 	add.w	r1, r7, #15
 8005ab8:	2332      	movs	r3, #50	; 0x32
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2301      	movs	r3, #1
 8005abe:	4821      	ldr	r0, [pc, #132]	; (8005b44 <USER_ioctl+0x168>)
 8005ac0:	f7fd f8df 	bl	8002c82 <HAL_SPI_TransmitReceive>
			for(ii=0;ii<16;ii++){
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2b0f      	cmp	r3, #15
 8005ace:	ddeb      	ble.n	8005aa8 <USER_ioctl+0xcc>
				//printf("(%u,%u)\r\n",8*(15-ii),buffer[15-ii]);

			}


			for(ii=0;ii<2;ii++){
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad4:	e00c      	b.n	8005af0 <USER_ioctl+0x114>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 8005ad6:	f107 020e 	add.w	r2, r7, #14
 8005ada:	f107 010f 	add.w	r1, r7, #15
 8005ade:	2332      	movs	r3, #50	; 0x32
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4817      	ldr	r0, [pc, #92]	; (8005b44 <USER_ioctl+0x168>)
 8005ae6:	f7fd f8cc 	bl	8002c82 <HAL_SPI_TransmitReceive>
			for(ii=0;ii<2;ii++){
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	3301      	adds	r3, #1
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	ddef      	ble.n	8005ad6 <USER_ioctl+0xfa>
				//printf("rx crc:%u\r\n",spi_rx);
			}

			//printf( "sector size: %u\r\n", ((buffer[5]&0x3F)<<1)|(buffer[4]>>7) );//  | buffer[4]>>7) );
			uint32_t mem_size = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
			mem_size = (uint32_t)buffer[6] | ( ((uint32_t) buffer[7])<<8) | (((uint32_t)(buffer[8]&0x3F))<<16) ;
 8005afa:	7dbb      	ldrb	r3, [r7, #22]
 8005afc:	461a      	mov	r2, r3
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	431a      	orrs	r2, r3
 8005b04:	7e3b      	ldrb	r3, [r7, #24]
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	623b      	str	r3, [r7, #32]
//			printf("64:%u\r\n",buffer[8]);


//			printf("mem size(kB):%u\r\n",(mem_size+1)*512);
//			printf("mem size(sectors):%u\r\n",(mem_size+1)*1000);
		  *(int*)buff = ((mem_size+1)*1000);
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	3301      	adds	r3, #1
 8005b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	601a      	str	r2, [r3, #0]
	      res =  RES_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}

		break;
 8005b28:	e006      	b.n	8005b38 <USER_ioctl+0x15c>
	case CTRL_TRIM:
//		printf("CTRL_TRIM\r\n");
		//not implementing
	    res =  RES_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		break;
 8005b30:	e002      	b.n	8005b38 <USER_ioctl+0x15c>
	default:
		res = RES_PARERR;
 8005b32:	2304      	movs	r3, #4
 8005b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return res;
 8005b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f


  /* USER CODE END IOCTL */
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	; 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	200000c4 	.word	0x200000c4

08005b48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <disk_status+0x30>)
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	79fa      	ldrb	r2, [r7, #7]
 8005b60:	4905      	ldr	r1, [pc, #20]	; (8005b78 <disk_status+0x30>)
 8005b62:	440a      	add	r2, r1
 8005b64:	7a12      	ldrb	r2, [r2, #8]
 8005b66:	4610      	mov	r0, r2
 8005b68:	4798      	blx	r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000588 	.word	0x20000588

08005b7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	4a0d      	ldr	r2, [pc, #52]	; (8005bc4 <disk_initialize+0x48>)
 8005b8e:	5cd3      	ldrb	r3, [r2, r3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d111      	bne.n	8005bb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	4a0b      	ldr	r2, [pc, #44]	; (8005bc4 <disk_initialize+0x48>)
 8005b98:	2101      	movs	r1, #1
 8005b9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <disk_initialize+0x48>)
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	79fa      	ldrb	r2, [r7, #7]
 8005baa:	4906      	ldr	r1, [pc, #24]	; (8005bc4 <disk_initialize+0x48>)
 8005bac:	440a      	add	r2, r1
 8005bae:	7a12      	ldrb	r2, [r2, #8]
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000588 	.word	0x20000588

08005bc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <disk_read+0x3c>)
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	689c      	ldr	r4, [r3, #8]
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4a07      	ldr	r2, [pc, #28]	; (8005c04 <disk_read+0x3c>)
 8005be8:	4413      	add	r3, r2
 8005bea:	7a18      	ldrb	r0, [r3, #8]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	47a0      	blx	r4
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000588 	.word	0x20000588

08005c08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <disk_write+0x3c>)
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68dc      	ldr	r4, [r3, #12]
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <disk_write+0x3c>)
 8005c28:	4413      	add	r3, r2
 8005c2a:	7a18      	ldrb	r0, [r3, #8]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	47a0      	blx	r4
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd90      	pop	{r4, r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000588 	.word	0x20000588

08005c48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	603a      	str	r2, [r7, #0]
 8005c52:	71fb      	strb	r3, [r7, #7]
 8005c54:	460b      	mov	r3, r1
 8005c56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <disk_ioctl+0x38>)
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	79fa      	ldrb	r2, [r7, #7]
 8005c66:	4906      	ldr	r1, [pc, #24]	; (8005c80 <disk_ioctl+0x38>)
 8005c68:	440a      	add	r2, r1
 8005c6a:	7a10      	ldrb	r0, [r2, #8]
 8005c6c:	79b9      	ldrb	r1, [r7, #6]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	4798      	blx	r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000588 	.word	0x20000588

08005c84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c94:	89fb      	ldrh	r3, [r7, #14]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b21b      	sxth	r3, r3
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005ca6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3303      	adds	r3, #3
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	3202      	adds	r2, #2
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	3201      	adds	r2, #1
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
	return rv;
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	887a      	ldrh	r2, [r7, #2]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	887a      	ldrh	r2, [r7, #2]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	0a1b      	lsrs	r3, r3, #8
 8005d6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	1c53      	adds	r3, r2, #1
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	6179      	str	r1, [r7, #20]
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f1      	bne.n	8005da2 <mem_cpy+0x1a>
	}
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005dca:	b480      	push	{r7}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	617a      	str	r2, [r7, #20]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f3      	bne.n	8005dda <mem_set+0x10>
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	61fa      	str	r2, [r7, #28]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	61ba      	str	r2, [r7, #24]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	1acb      	subs	r3, r1, r3
 8005e2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <mem_cmp+0x40>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0eb      	beq.n	8005e18 <mem_cmp+0x18>

	return r;
 8005e40:	697b      	ldr	r3, [r7, #20]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e58:	e002      	b.n	8005e60 <chk_chr+0x12>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <chk_chr+0x26>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d1f2      	bne.n	8005e5a <chk_chr+0xc>
	return *str;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	781b      	ldrb	r3, [r3, #0]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <lock_fs+0x22>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f002 f986 	bl	80081a8 <ff_req_grant>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <lock_fs+0x22>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <lock_fs+0x24>
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <unlock_fs+0x2e>
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d00a      	beq.n	8005ede <unlock_fs+0x2e>
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	2b0b      	cmp	r3, #11
 8005ecc:	d007      	beq.n	8005ede <unlock_fs+0x2e>
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	d004      	beq.n	8005ede <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f002 f97a 	bl	80081d2 <ff_rel_grant>
	}
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e029      	b.n	8005f50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005efc:	4a27      	ldr	r2, [pc, #156]	; (8005f9c <chk_lock+0xb4>)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	4413      	add	r3, r2
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01d      	beq.n	8005f46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f0a:	4a24      	ldr	r2, [pc, #144]	; (8005f9c <chk_lock+0xb4>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	4413      	add	r3, r2
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d116      	bne.n	8005f4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <chk_lock+0xb4>)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	3304      	adds	r3, #4
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d10c      	bne.n	8005f4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f30:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <chk_lock+0xb4>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	4413      	add	r3, r2
 8005f38:	3308      	adds	r3, #8
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d102      	bne.n	8005f4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f44:	e007      	b.n	8005f56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f46:	2301      	movs	r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d9d2      	bls.n	8005efc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d109      	bne.n	8005f70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <chk_lock+0x80>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d101      	bne.n	8005f6c <chk_lock+0x84>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e010      	b.n	8005f8e <chk_lock+0xa6>
 8005f6c:	2312      	movs	r3, #18
 8005f6e:	e00e      	b.n	8005f8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d108      	bne.n	8005f88 <chk_lock+0xa0>
 8005f76:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <chk_lock+0xb4>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	330c      	adds	r3, #12
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f86:	d101      	bne.n	8005f8c <chk_lock+0xa4>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	e000      	b.n	8005f8e <chk_lock+0xa6>
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000568 	.word	0x20000568

08005fa0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	e002      	b.n	8005fb2 <enq_lock+0x12>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d806      	bhi.n	8005fc6 <enq_lock+0x26>
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <enq_lock+0x40>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	4413      	add	r3, r2
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f2      	bne.n	8005fac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20000568 	.word	0x20000568

08005fe4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e01f      	b.n	8006034 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ff4:	4a41      	ldr	r2, [pc, #260]	; (80060fc <inc_lock+0x118>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d113      	bne.n	800602e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006006:	4a3d      	ldr	r2, [pc, #244]	; (80060fc <inc_lock+0x118>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	4413      	add	r3, r2
 800600e:	3304      	adds	r3, #4
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006016:	429a      	cmp	r2, r3
 8006018:	d109      	bne.n	800602e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800601a:	4a38      	ldr	r2, [pc, #224]	; (80060fc <inc_lock+0x118>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	4413      	add	r3, r2
 8006022:	3308      	adds	r3, #8
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800602a:	429a      	cmp	r2, r3
 800602c:	d006      	beq.n	800603c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d9dc      	bls.n	8005ff4 <inc_lock+0x10>
 800603a:	e000      	b.n	800603e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800603c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d132      	bne.n	80060aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e002      	b.n	8006050 <inc_lock+0x6c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d806      	bhi.n	8006064 <inc_lock+0x80>
 8006056:	4a29      	ldr	r2, [pc, #164]	; (80060fc <inc_lock+0x118>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	4413      	add	r3, r2
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f2      	bne.n	800604a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d101      	bne.n	800606e <inc_lock+0x8a>
 800606a:	2300      	movs	r3, #0
 800606c:	e040      	b.n	80060f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4922      	ldr	r1, [pc, #136]	; (80060fc <inc_lock+0x118>)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	440b      	add	r3, r1
 800607a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	491e      	ldr	r1, [pc, #120]	; (80060fc <inc_lock+0x118>)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	440b      	add	r3, r1
 8006088:	3304      	adds	r3, #4
 800608a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	491a      	ldr	r1, [pc, #104]	; (80060fc <inc_lock+0x118>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	440b      	add	r3, r1
 8006098:	3308      	adds	r3, #8
 800609a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <inc_lock+0x118>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	4413      	add	r3, r2
 80060a4:	330c      	adds	r3, #12
 80060a6:	2200      	movs	r2, #0
 80060a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <inc_lock+0xe0>
 80060b0:	4a12      	ldr	r2, [pc, #72]	; (80060fc <inc_lock+0x118>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	330c      	adds	r3, #12
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <inc_lock+0xe0>
 80060c0:	2300      	movs	r3, #0
 80060c2:	e015      	b.n	80060f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <inc_lock+0xf8>
 80060ca:	4a0c      	ldr	r2, [pc, #48]	; (80060fc <inc_lock+0x118>)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4413      	add	r3, r2
 80060d2:	330c      	adds	r3, #12
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	e001      	b.n	80060e0 <inc_lock+0xfc>
 80060dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060e0:	4906      	ldr	r1, [pc, #24]	; (80060fc <inc_lock+0x118>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	440b      	add	r3, r1
 80060e8:	330c      	adds	r3, #12
 80060ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20000568 	.word	0x20000568

08006100 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3b01      	subs	r3, #1
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d825      	bhi.n	8006160 <dec_lock+0x60>
		n = Files[i].ctr;
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <dec_lock+0x74>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	4413      	add	r3, r2
 800611c:	330c      	adds	r3, #12
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006122:	89fb      	ldrh	r3, [r7, #14]
 8006124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006128:	d101      	bne.n	800612e <dec_lock+0x2e>
 800612a:	2300      	movs	r3, #0
 800612c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800612e:	89fb      	ldrh	r3, [r7, #14]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <dec_lock+0x3a>
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	3b01      	subs	r3, #1
 8006138:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800613a:	4a0e      	ldr	r2, [pc, #56]	; (8006174 <dec_lock+0x74>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4413      	add	r3, r2
 8006142:	330c      	adds	r3, #12
 8006144:	89fa      	ldrh	r2, [r7, #14]
 8006146:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006148:	89fb      	ldrh	r3, [r7, #14]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <dec_lock+0x5a>
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <dec_lock+0x74>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	4413      	add	r3, r2
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	737b      	strb	r3, [r7, #13]
 800615e:	e001      	b.n	8006164 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006160:	2302      	movs	r3, #2
 8006162:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006164:	7b7b      	ldrb	r3, [r7, #13]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000568 	.word	0x20000568

08006178 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e010      	b.n	80061a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006186:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <clear_lock+0x44>)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	4413      	add	r3, r2
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d105      	bne.n	80061a2 <clear_lock+0x2a>
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <clear_lock+0x44>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4413      	add	r3, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d9eb      	bls.n	8006186 <clear_lock+0xe>
	}
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	20000568 	.word	0x20000568

080061c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	78db      	ldrb	r3, [r3, #3]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d034      	beq.n	800623e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7858      	ldrb	r0, [r3, #1]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061e4:	2301      	movs	r3, #1
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	f7ff fd0e 	bl	8005c08 <disk_write>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
 80061f6:	e022      	b.n	800623e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	1ad2      	subs	r2, r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	429a      	cmp	r2, r3
 800620c:	d217      	bcs.n	800623e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	789b      	ldrb	r3, [r3, #2]
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	e010      	b.n	8006238 <sync_window+0x78>
					wsect += fs->fsize;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	7858      	ldrb	r0, [r3, #1]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800622a:	2301      	movs	r3, #1
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	f7ff fceb 	bl	8005c08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	3b01      	subs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d8eb      	bhi.n	8006216 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d01b      	beq.n	8006298 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ffad 	bl	80061c0 <sync_window>
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d113      	bne.n	8006298 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7858      	ldrb	r0, [r3, #1]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800627a:	2301      	movs	r3, #1
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	f7ff fca3 	bl	8005bc8 <disk_read>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800628c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff87 	bl	80061c0 <sync_window>
 80062b2:	4603      	mov	r3, r0
 80062b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d158      	bne.n	800636e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d148      	bne.n	8006356 <sync_fs+0xb2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	791b      	ldrb	r3, [r3, #4]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d144      	bne.n	8006356 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3334      	adds	r3, #52	; 0x34
 80062d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fd77 	bl	8005dca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3334      	adds	r3, #52	; 0x34
 80062e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062e4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fd06 	bl	8005cfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3334      	adds	r3, #52	; 0x34
 80062f2:	4921      	ldr	r1, [pc, #132]	; (8006378 <sync_fs+0xd4>)
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fd1b 	bl	8005d30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3334      	adds	r3, #52	; 0x34
 80062fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006302:	491e      	ldr	r1, [pc, #120]	; (800637c <sync_fs+0xd8>)
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fd13 	bl	8005d30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3334      	adds	r3, #52	; 0x34
 800630e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7ff fd09 	bl	8005d30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3334      	adds	r3, #52	; 0x34
 8006322:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7ff fcff 	bl	8005d30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7858      	ldrb	r0, [r3, #1]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634a:	2301      	movs	r3, #1
 800634c:	f7ff fc5c 	bl	8005c08 <disk_write>
			fs->fsi_flag = 0;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff fc72 	bl	8005c48 <disk_ioctl>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <sync_fs+0xca>
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	41615252 	.word	0x41615252
 800637c:	61417272 	.word	0x61417272

08006380 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	3b02      	subs	r3, #2
 800638e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	3b02      	subs	r3, #2
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d301      	bcc.n	80063a0 <clust2sect+0x20>
 800639c:	2300      	movs	r3, #0
 800639e:	e008      	b.n	80063b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	895b      	ldrh	r3, [r3, #10]
 80063a4:	461a      	mov	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	fb03 f202 	mul.w	r2, r3, r2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4413      	add	r3, r2
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d904      	bls.n	80063de <get_fat+0x20>
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d302      	bcc.n	80063e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80063de:	2301      	movs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e08f      	b.n	8006504 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d062      	beq.n	80064b8 <get_fat+0xfa>
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	dc7c      	bgt.n	80064f0 <get_fat+0x132>
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d002      	beq.n	8006400 <get_fat+0x42>
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d042      	beq.n	8006484 <get_fat+0xc6>
 80063fe:	e077      	b.n	80064f0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	0a5b      	lsrs	r3, r3, #9
 8006416:	4413      	add	r3, r2
 8006418:	4619      	mov	r1, r3
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7ff ff14 	bl	8006248 <move_window>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d167      	bne.n	80064f6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006438:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	0a5b      	lsrs	r3, r3, #9
 8006442:	4413      	add	r3, r2
 8006444:	4619      	mov	r1, r3
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f7ff fefe 	bl	8006248 <move_window>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d153      	bne.n	80064fa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4313      	orrs	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <get_fat+0xbc>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	e002      	b.n	8006480 <get_fat+0xc2>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006480:	617b      	str	r3, [r7, #20]
			break;
 8006482:	e03f      	b.n	8006504 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	4413      	add	r3, r2
 800648e:	4619      	mov	r1, r3
 8006490:	6938      	ldr	r0, [r7, #16]
 8006492:	f7ff fed9 	bl	8006248 <move_window>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d130      	bne.n	80064fe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80064aa:	4413      	add	r3, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fbe9 	bl	8005c84 <ld_word>
 80064b2:	4603      	mov	r3, r0
 80064b4:	617b      	str	r3, [r7, #20]
			break;
 80064b6:	e025      	b.n	8006504 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	09db      	lsrs	r3, r3, #7
 80064c0:	4413      	add	r3, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	6938      	ldr	r0, [r7, #16]
 80064c6:	f7ff febf 	bl	8006248 <move_window>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d118      	bne.n	8006502 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80064de:	4413      	add	r3, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fbe7 	bl	8005cb4 <ld_dword>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064ec:	617b      	str	r3, [r7, #20]
			break;
 80064ee:	e009      	b.n	8006504 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e006      	b.n	8006504 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064f6:	bf00      	nop
 80064f8:	e004      	b.n	8006504 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064fa:	bf00      	nop
 80064fc:	e002      	b.n	8006504 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006502:	bf00      	nop
		}
	}

	return val;
 8006504:	697b      	ldr	r3, [r7, #20]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800650e:	b590      	push	{r4, r7, lr}
 8006510:	b089      	sub	sp, #36	; 0x24
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800651a:	2302      	movs	r3, #2
 800651c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b01      	cmp	r3, #1
 8006522:	f240 80d2 	bls.w	80066ca <put_fat+0x1bc>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	429a      	cmp	r2, r3
 800652e:	f080 80cc 	bcs.w	80066ca <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b03      	cmp	r3, #3
 8006538:	f000 8096 	beq.w	8006668 <put_fat+0x15a>
 800653c:	2b03      	cmp	r3, #3
 800653e:	f300 80cd 	bgt.w	80066dc <put_fat+0x1ce>
 8006542:	2b01      	cmp	r3, #1
 8006544:	d002      	beq.n	800654c <put_fat+0x3e>
 8006546:	2b02      	cmp	r3, #2
 8006548:	d06e      	beq.n	8006628 <put_fat+0x11a>
 800654a:	e0c7      	b.n	80066dc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4413      	add	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	0a5b      	lsrs	r3, r3, #9
 8006562:	4413      	add	r3, r2
 8006564:	4619      	mov	r1, r3
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff fe6e 	bl	8006248 <move_window>
 800656c:	4603      	mov	r3, r0
 800656e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006570:	7ffb      	ldrb	r3, [r7, #31]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 80ab 	bne.w	80066ce <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	61b9      	str	r1, [r7, #24]
 8006584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006588:	4413      	add	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00d      	beq.n	80065b2 <put_fat+0xa4>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	b25a      	sxtb	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	4313      	orrs	r3, r2
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	e001      	b.n	80065b6 <put_fat+0xa8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	0a5b      	lsrs	r3, r3, #9
 80065c8:	4413      	add	r3, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fe3b 	bl	8006248 <move_window>
 80065d2:	4603      	mov	r3, r0
 80065d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d17a      	bne.n	80066d2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <put_fat+0xf0>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	e00e      	b.n	800661c <put_fat+0x10e>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	b25b      	sxtb	r3, r3
 8006604:	f023 030f 	bic.w	r3, r3, #15
 8006608:	b25a      	sxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0a1b      	lsrs	r3, r3, #8
 800660e:	b25b      	sxtb	r3, r3
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	b25b      	sxtb	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b25b      	sxtb	r3, r3
 800661a:	b2db      	uxtb	r3, r3
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	70da      	strb	r2, [r3, #3]
			break;
 8006626:	e059      	b.n	80066dc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	4413      	add	r3, r2
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fe07 	bl	8006248 <move_window>
 800663a:	4603      	mov	r3, r0
 800663c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800663e:	7ffb      	ldrb	r3, [r7, #31]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d148      	bne.n	80066d6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006652:	4413      	add	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	b292      	uxth	r2, r2
 8006658:	4611      	mov	r1, r2
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fb4d 	bl	8005cfa <st_word>
			fs->wflag = 1;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	70da      	strb	r2, [r3, #3]
			break;
 8006666:	e039      	b.n	80066dc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	09db      	lsrs	r3, r3, #7
 8006670:	4413      	add	r3, r2
 8006672:	4619      	mov	r1, r3
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff fde7 	bl	8006248 <move_window>
 800667a:	4603      	mov	r3, r0
 800667c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800667e:	7ffb      	ldrb	r3, [r7, #31]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d12a      	bne.n	80066da <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006698:	4413      	add	r3, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fb0a 	bl	8005cb4 <ld_dword>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066a6:	4323      	orrs	r3, r4
 80066a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066b8:	4413      	add	r3, r2
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fb37 	bl	8005d30 <st_dword>
			fs->wflag = 1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	70da      	strb	r2, [r3, #3]
			break;
 80066c8:	e008      	b.n	80066dc <put_fat+0x1ce>
		}
	}
 80066ca:	bf00      	nop
 80066cc:	e006      	b.n	80066dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066ce:	bf00      	nop
 80066d0:	e004      	b.n	80066dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066d2:	bf00      	nop
 80066d4:	e002      	b.n	80066dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066da:	bf00      	nop
	return res;
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3724      	adds	r7, #36	; 0x24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd90      	pop	{r4, r7, pc}

080066e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b088      	sub	sp, #32
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d904      	bls.n	800670c <remove_chain+0x26>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	d301      	bcc.n	8006710 <remove_chain+0x2a>
 800670c:	2302      	movs	r3, #2
 800670e:	e04b      	b.n	80067a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00c      	beq.n	8006730 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	69b8      	ldr	r0, [r7, #24]
 800671e:	f7ff fef6 	bl	800650e <put_fat>
 8006722:	4603      	mov	r3, r0
 8006724:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006726:	7ffb      	ldrb	r3, [r7, #31]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <remove_chain+0x4a>
 800672c:	7ffb      	ldrb	r3, [r7, #31]
 800672e:	e03b      	b.n	80067a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fe43 	bl	80063be <get_fat>
 8006738:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d031      	beq.n	80067a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <remove_chain+0x64>
 8006746:	2302      	movs	r3, #2
 8006748:	e02e      	b.n	80067a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006750:	d101      	bne.n	8006756 <remove_chain+0x70>
 8006752:	2301      	movs	r3, #1
 8006754:	e028      	b.n	80067a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006756:	2200      	movs	r2, #0
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	69b8      	ldr	r0, [r7, #24]
 800675c:	f7ff fed7 	bl	800650e <put_fat>
 8006760:	4603      	mov	r3, r0
 8006762:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006764:	7ffb      	ldrb	r3, [r7, #31]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <remove_chain+0x88>
 800676a:	7ffb      	ldrb	r3, [r7, #31]
 800676c:	e01c      	b.n	80067a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	3b02      	subs	r3, #2
 8006778:	429a      	cmp	r2, r3
 800677a:	d20b      	bcs.n	8006794 <remove_chain+0xae>
			fs->free_clst++;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	f043 0301 	orr.w	r3, r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3c6      	bcc.n	8006730 <remove_chain+0x4a>
 80067a2:	e000      	b.n	80067a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80067a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10d      	bne.n	80067e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <create_chain+0x2c>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d31b      	bcc.n	8006814 <create_chain+0x64>
 80067dc:	2301      	movs	r3, #1
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e018      	b.n	8006814 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fdea 	bl	80063be <get_fat>
 80067ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d801      	bhi.n	80067f6 <create_chain+0x46>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e070      	b.n	80068d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fc:	d101      	bne.n	8006802 <create_chain+0x52>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	e06a      	b.n	80068d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	429a      	cmp	r2, r3
 800680a:	d201      	bcs.n	8006810 <create_chain+0x60>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	e063      	b.n	80068d8 <create_chain+0x128>
		scl = clst;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	3301      	adds	r3, #1
 800681c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	429a      	cmp	r2, r3
 8006826:	d307      	bcc.n	8006838 <create_chain+0x88>
				ncl = 2;
 8006828:	2302      	movs	r3, #2
 800682a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	429a      	cmp	r2, r3
 8006832:	d901      	bls.n	8006838 <create_chain+0x88>
 8006834:	2300      	movs	r3, #0
 8006836:	e04f      	b.n	80068d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fdbf 	bl	80063be <get_fat>
 8006840:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00e      	beq.n	8006866 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d003      	beq.n	8006856 <create_chain+0xa6>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006854:	d101      	bne.n	800685a <create_chain+0xaa>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	e03e      	b.n	80068d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d1da      	bne.n	8006818 <create_chain+0x68>
 8006862:	2300      	movs	r3, #0
 8006864:	e038      	b.n	80068d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006866:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800686c:	69f9      	ldr	r1, [r7, #28]
 800686e:	6938      	ldr	r0, [r7, #16]
 8006870:	f7ff fe4d 	bl	800650e <put_fat>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <create_chain+0xe2>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7ff fe40 	bl	800650e <put_fat>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d116      	bne.n	80068c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	3b02      	subs	r3, #2
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d804      	bhi.n	80068b6 <create_chain+0x106>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	791b      	ldrb	r3, [r3, #4]
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	711a      	strb	r2, [r3, #4]
 80068c4:	e007      	b.n	80068d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d102      	bne.n	80068d2 <create_chain+0x122>
 80068cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068d0:	e000      	b.n	80068d4 <create_chain+0x124>
 80068d2:	2301      	movs	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80068d6:	69fb      	ldr	r3, [r7, #28]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	3304      	adds	r3, #4
 80068f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	0a5b      	lsrs	r3, r3, #9
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	8952      	ldrh	r2, [r2, #10]
 8006900:	fbb3 f3f2 	udiv	r3, r3, r2
 8006904:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	613a      	str	r2, [r7, #16]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <clmt_clust+0x3a>
 8006916:	2300      	movs	r3, #0
 8006918:	e010      	b.n	800693c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d307      	bcc.n	8006932 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3304      	adds	r3, #4
 800692e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006930:	e7e9      	b.n	8006906 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006932:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4413      	add	r3, r2
}
 800693c:	4618      	mov	r0, r3
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800695e:	d204      	bcs.n	800696a <dir_sdi+0x22>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <dir_sdi+0x26>
		return FR_INT_ERR;
 800696a:	2302      	movs	r3, #2
 800696c:	e063      	b.n	8006a36 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <dir_sdi+0x46>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d902      	bls.n	800698e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10c      	bne.n	80069ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	8912      	ldrh	r2, [r2, #8]
 800699c:	4293      	cmp	r3, r2
 800699e:	d301      	bcc.n	80069a4 <dir_sdi+0x5c>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e048      	b.n	8006a36 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	61da      	str	r2, [r3, #28]
 80069ac:	e029      	b.n	8006a02 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	895b      	ldrh	r3, [r3, #10]
 80069b2:	025b      	lsls	r3, r3, #9
 80069b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069b6:	e019      	b.n	80069ec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fcfe 	bl	80063be <get_fat>
 80069c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ca:	d101      	bne.n	80069d0 <dir_sdi+0x88>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e032      	b.n	8006a36 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d904      	bls.n	80069e0 <dir_sdi+0x98>
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d301      	bcc.n	80069e4 <dir_sdi+0x9c>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e028      	b.n	8006a36 <dir_sdi+0xee>
			ofs -= csz;
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d2e1      	bcs.n	80069b8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	6938      	ldr	r0, [r7, #16]
 80069f8:	f7ff fcc2 	bl	8006380 <clust2sect>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <dir_sdi+0xcc>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e010      	b.n	8006a36 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	0a5b      	lsrs	r3, r3, #9
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2e:	441a      	add	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	3320      	adds	r3, #32
 8006a54:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <dir_next+0x28>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a64:	d301      	bcc.n	8006a6a <dir_next+0x2c>
 8006a66:	2304      	movs	r3, #4
 8006a68:	e0aa      	b.n	8006bc0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8098 	bne.w	8006ba6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	8912      	ldrh	r2, [r2, #8]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	f0c0 8088 	bcc.w	8006ba6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	61da      	str	r2, [r3, #28]
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	e08f      	b.n	8006bc0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	0a5b      	lsrs	r3, r3, #9
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	8952      	ldrh	r2, [r2, #10]
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d17a      	bne.n	8006ba6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4610      	mov	r0, r2
 8006aba:	f7ff fc80 	bl	80063be <get_fat>
 8006abe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d801      	bhi.n	8006aca <dir_next+0x8c>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e07a      	b.n	8006bc0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad0:	d101      	bne.n	8006ad6 <dir_next+0x98>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e074      	b.n	8006bc0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d358      	bcc.n	8006b92 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	61da      	str	r2, [r3, #28]
 8006aec:	2304      	movs	r3, #4
 8006aee:	e067      	b.n	8006bc0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7ff fe59 	bl	80067b0 <create_chain>
 8006afe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <dir_next+0xcc>
 8006b06:	2307      	movs	r3, #7
 8006b08:	e05a      	b.n	8006bc0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <dir_next+0xd6>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e055      	b.n	8006bc0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b1a:	d101      	bne.n	8006b20 <dir_next+0xe2>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e04f      	b.n	8006bc0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff fb4d 	bl	80061c0 <sync_window>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <dir_next+0xf2>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e047      	b.n	8006bc0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3334      	adds	r3, #52	; 0x34
 8006b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff f945 	bl	8005dca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fc1a 	bl	8006380 <clust2sect>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
 8006b52:	e012      	b.n	8006b7a <dir_next+0x13c>
						fs->wflag = 1;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fb30 	bl	80061c0 <sync_window>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <dir_next+0x12c>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e02a      	b.n	8006bc0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d3e6      	bcc.n	8006b54 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad2      	subs	r2, r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b98:	6979      	ldr	r1, [r7, #20]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fbf0 	bl	8006380 <clust2sect>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb8:	441a      	add	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff feb4 	bl	8006948 <dir_sdi>
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d12b      	bne.n	8006c42 <dir_alloc+0x7a>
		n = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fb27 	bl	8006248 <move_window>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11d      	bne.n	8006c40 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2be5      	cmp	r3, #229	; 0xe5
 8006c0c:	d004      	beq.n	8006c18 <dir_alloc+0x50>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d102      	bne.n	8006c2c <dir_alloc+0x64>
 8006c26:	e00c      	b.n	8006c42 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c28:	2300      	movs	r3, #0
 8006c2a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff05 	bl	8006a3e <dir_next>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0d7      	beq.n	8006bee <dir_alloc+0x26>
 8006c3e:	e000      	b.n	8006c42 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c40:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d101      	bne.n	8006c4c <dir_alloc+0x84>
 8006c48:	2307      	movs	r3, #7
 8006c4a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	331a      	adds	r3, #26
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff f80d 	bl	8005c84 <ld_word>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d109      	bne.n	8006c8a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff f802 	bl	8005c84 <ld_word>
 8006c80:	4603      	mov	r3, r0
 8006c82:	041b      	lsls	r3, r3, #16
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	331a      	adds	r3, #26
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff f825 	bl	8005cfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d109      	bne.n	8006ccc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f103 0214 	add.w	r2, r3, #20
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f7ff f817 	bl	8005cfa <st_word>
	}
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff fe2f 	bl	8006948 <dir_sdi>
 8006cea:	4603      	mov	r3, r0
 8006cec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <dir_find+0x24>
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	e03e      	b.n	8006d76 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6938      	ldr	r0, [r7, #16]
 8006d00:	f7ff faa2 	bl	8006248 <move_window>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d12f      	bne.n	8006d6e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <dir_find+0x4e>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	75fb      	strb	r3, [r7, #23]
 8006d20:	e028      	b.n	8006d74 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	330b      	adds	r3, #11
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	330b      	adds	r3, #11
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <dir_find+0x86>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a18      	ldr	r0, [r3, #32]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	220b      	movs	r2, #11
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f7ff f856 	bl	8005e00 <mem_cmp>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe6e 	bl	8006a3e <dir_next>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0c5      	beq.n	8006cf8 <dir_find+0x24>
 8006d6c:	e002      	b.n	8006d74 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d72:	bf00      	nop

	return res;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff ff1a 	bl	8006bc8 <dir_alloc>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11c      	bne.n	8006dd8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	4619      	mov	r1, r3
 8006da4:	68b8      	ldr	r0, [r7, #8]
 8006da6:	f7ff fa4f 	bl	8006248 <move_window>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d111      	bne.n	8006dd8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	2220      	movs	r2, #32
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff f804 	bl	8005dca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a18      	ldr	r0, [r3, #32]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3324      	adds	r3, #36	; 0x24
 8006dca:	220b      	movs	r2, #11
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f7fe ffdb 	bl	8005d88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04e      	beq.n	8006e98 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006e02:	e021      	b.n	8006e48 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1a      	ldr	r2, [r3, #32]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	1c59      	adds	r1, r3, #1
 8006e0c:	6179      	str	r1, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d100      	bne.n	8006e1c <get_fileinfo+0x3a>
 8006e1a:	e015      	b.n	8006e48 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	d101      	bne.n	8006e26 <get_fileinfo+0x44>
 8006e22:	23e5      	movs	r3, #229	; 0xe5
 8006e24:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b09      	cmp	r3, #9
 8006e2a:	d106      	bne.n	8006e3a <get_fileinfo+0x58>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	613a      	str	r2, [r7, #16]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	222e      	movs	r2, #46	; 0x2e
 8006e38:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	613a      	str	r2, [r7, #16]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	4413      	add	r3, r2
 8006e44:	7bfa      	ldrb	r2, [r7, #15]
 8006e46:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b0a      	cmp	r3, #10
 8006e4c:	d9da      	bls.n	8006e04 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	3309      	adds	r3, #9
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	7ada      	ldrb	r2, [r3, #11]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	331c      	adds	r3, #28
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe ff22 	bl	8005cb4 <ld_dword>
 8006e70:	4602      	mov	r2, r0
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	3316      	adds	r3, #22
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe ff19 	bl	8005cb4 <ld_dword>
 8006e82:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	80da      	strh	r2, [r3, #6]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	809a      	strh	r2, [r3, #4]
 8006e96:	e000      	b.n	8006e9a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e98:	bf00      	nop
}
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3324      	adds	r3, #36	; 0x24
 8006eb4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006eb6:	220b      	movs	r2, #11
 8006eb8:	2120      	movs	r1, #32
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f7fe ff85 	bl	8005dca <mem_set>
	si = i = 0; ni = 8;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	2308      	movs	r3, #8
 8006eca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	61fa      	str	r2, [r7, #28]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006eda:	7efb      	ldrb	r3, [r7, #27]
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d94e      	bls.n	8006f7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ee0:	7efb      	ldrb	r3, [r7, #27]
 8006ee2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ee4:	d006      	beq.n	8006ef4 <create_name+0x54>
 8006ee6:	7efb      	ldrb	r3, [r7, #27]
 8006ee8:	2b5c      	cmp	r3, #92	; 0x5c
 8006eea:	d110      	bne.n	8006f0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006eec:	e002      	b.n	8006ef4 <create_name+0x54>
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b2f      	cmp	r3, #47	; 0x2f
 8006efe:	d0f6      	beq.n	8006eee <create_name+0x4e>
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b5c      	cmp	r3, #92	; 0x5c
 8006f0a:	d0f0      	beq.n	8006eee <create_name+0x4e>
			break;
 8006f0c:	e038      	b.n	8006f80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006f0e:	7efb      	ldrb	r3, [r7, #27]
 8006f10:	2b2e      	cmp	r3, #46	; 0x2e
 8006f12:	d003      	beq.n	8006f1c <create_name+0x7c>
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d30c      	bcc.n	8006f36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b0b      	cmp	r3, #11
 8006f20:	d002      	beq.n	8006f28 <create_name+0x88>
 8006f22:	7efb      	ldrb	r3, [r7, #27]
 8006f24:	2b2e      	cmp	r3, #46	; 0x2e
 8006f26:	d001      	beq.n	8006f2c <create_name+0x8c>
 8006f28:	2306      	movs	r3, #6
 8006f2a:	e044      	b.n	8006fb6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	230b      	movs	r3, #11
 8006f32:	617b      	str	r3, [r7, #20]
			continue;
 8006f34:	e022      	b.n	8006f7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006f36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da04      	bge.n	8006f48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006f3e:	7efb      	ldrb	r3, [r7, #27]
 8006f40:	3b80      	subs	r3, #128	; 0x80
 8006f42:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <create_name+0x120>)
 8006f44:	5cd3      	ldrb	r3, [r2, r3]
 8006f46:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006f48:	7efb      	ldrb	r3, [r7, #27]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	481d      	ldr	r0, [pc, #116]	; (8006fc4 <create_name+0x124>)
 8006f4e:	f7fe ff7e 	bl	8005e4e <chk_chr>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <create_name+0xbc>
 8006f58:	2306      	movs	r3, #6
 8006f5a:	e02c      	b.n	8006fb6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006f5c:	7efb      	ldrb	r3, [r7, #27]
 8006f5e:	2b60      	cmp	r3, #96	; 0x60
 8006f60:	d905      	bls.n	8006f6e <create_name+0xce>
 8006f62:	7efb      	ldrb	r3, [r7, #27]
 8006f64:	2b7a      	cmp	r3, #122	; 0x7a
 8006f66:	d802      	bhi.n	8006f6e <create_name+0xce>
 8006f68:	7efb      	ldrb	r3, [r7, #27]
 8006f6a:	3b20      	subs	r3, #32
 8006f6c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	613a      	str	r2, [r7, #16]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4413      	add	r3, r2
 8006f78:	7efa      	ldrb	r2, [r7, #27]
 8006f7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006f7c:	e7a6      	b.n	8006ecc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	441a      	add	r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <create_name+0xf4>
 8006f90:	2306      	movs	r3, #6
 8006f92:	e010      	b.n	8006fb6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2be5      	cmp	r3, #229	; 0xe5
 8006f9a:	d102      	bne.n	8006fa2 <create_name+0x102>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2205      	movs	r2, #5
 8006fa0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006fa2:	7efb      	ldrb	r3, [r7, #27]
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d801      	bhi.n	8006fac <create_name+0x10c>
 8006fa8:	2204      	movs	r2, #4
 8006faa:	e000      	b.n	8006fae <create_name+0x10e>
 8006fac:	2200      	movs	r2, #0
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	330b      	adds	r3, #11
 8006fb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006fb4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	0800c82c 	.word	0x0800c82c
 8006fc4:	0800c6b0 	.word	0x0800c6b0

08006fc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006fdc:	e002      	b.n	8006fe4 <follow_path+0x1c>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8006fea:	d0f8      	beq.n	8006fde <follow_path+0x16>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ff2:	d0f4      	beq.n	8006fde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b1f      	cmp	r3, #31
 8007000:	d80a      	bhi.n	8007018 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2280      	movs	r2, #128	; 0x80
 8007006:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff fc9b 	bl	8006948 <dir_sdi>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]
 8007016:	e043      	b.n	80070a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007018:	463b      	mov	r3, r7
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff ff3f 	bl	8006ea0 <create_name>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d134      	bne.n	8007096 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fe51 	bl	8006cd4 <dir_find>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800703c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b04      	cmp	r3, #4
 8007048:	d127      	bne.n	800709a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d122      	bne.n	800709a <follow_path+0xd2>
 8007054:	2305      	movs	r3, #5
 8007056:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007058:	e01f      	b.n	800709a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d11c      	bne.n	800709e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	799b      	ldrb	r3, [r3, #6]
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007070:	2305      	movs	r3, #5
 8007072:	75fb      	strb	r3, [r7, #23]
 8007074:	e014      	b.n	80070a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	4413      	add	r3, r2
 8007086:	4619      	mov	r1, r3
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff fde4 	bl	8006c56 <ld_clust>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007094:	e7c0      	b.n	8007018 <follow_path+0x50>
			if (res != FR_OK) break;
 8007096:	bf00      	nop
 8007098:	e002      	b.n	80070a0 <follow_path+0xd8>
				break;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800709e:	bf00      	nop
			}
		}
	}

	return res;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d031      	beq.n	8007124 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	e002      	b.n	80070ce <get_ldnumber+0x24>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3301      	adds	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d903      	bls.n	80070de <get_ldnumber+0x34>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b3a      	cmp	r3, #58	; 0x3a
 80070dc:	d1f4      	bne.n	80070c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b3a      	cmp	r3, #58	; 0x3a
 80070e4:	d11c      	bne.n	8007120 <get_ldnumber+0x76>
			tp = *path;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	60fa      	str	r2, [r7, #12]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	3b30      	subs	r3, #48	; 0x30
 80070f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d80e      	bhi.n	800711c <get_ldnumber+0x72>
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	429a      	cmp	r2, r3
 8007104:	d10a      	bne.n	800711c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d107      	bne.n	800711c <get_ldnumber+0x72>
					vol = (int)i;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3301      	adds	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	e002      	b.n	8007126 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007124:	693b      	ldr	r3, [r7, #16]
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	70da      	strb	r2, [r3, #3]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff f87a 	bl	8006248 <move_window>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <check_fs+0x2a>
 800715a:	2304      	movs	r3, #4
 800715c:	e038      	b.n	80071d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3334      	adds	r3, #52	; 0x34
 8007162:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fd8c 	bl	8005c84 <ld_word>
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007174:	429a      	cmp	r2, r3
 8007176:	d001      	beq.n	800717c <check_fs+0x48>
 8007178:	2303      	movs	r3, #3
 800717a:	e029      	b.n	80071d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007182:	2be9      	cmp	r3, #233	; 0xe9
 8007184:	d009      	beq.n	800719a <check_fs+0x66>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800718c:	2beb      	cmp	r3, #235	; 0xeb
 800718e:	d11e      	bne.n	80071ce <check_fs+0x9a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007196:	2b90      	cmp	r3, #144	; 0x90
 8007198:	d119      	bne.n	80071ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3334      	adds	r3, #52	; 0x34
 800719e:	3336      	adds	r3, #54	; 0x36
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fd87 	bl	8005cb4 <ld_dword>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071ac:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <check_fs+0xa4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <check_fs+0x82>
 80071b2:	2300      	movs	r3, #0
 80071b4:	e00c      	b.n	80071d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3334      	adds	r3, #52	; 0x34
 80071ba:	3352      	adds	r3, #82	; 0x52
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe fd79 	bl	8005cb4 <ld_dword>
 80071c2:	4603      	mov	r3, r0
 80071c4:	4a05      	ldr	r2, [pc, #20]	; (80071dc <check_fs+0xa8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d101      	bne.n	80071ce <check_fs+0x9a>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e000      	b.n	80071d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80071ce:	2302      	movs	r3, #2
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	00544146 	.word	0x00544146
 80071dc:	33544146 	.word	0x33544146

080071e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b096      	sub	sp, #88	; 0x58
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff ff58 	bl	80070aa <get_ldnumber>
 80071fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da01      	bge.n	8007206 <find_volume+0x26>
 8007202:	230b      	movs	r3, #11
 8007204:	e235      	b.n	8007672 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007206:	4aa5      	ldr	r2, [pc, #660]	; (800749c <find_volume+0x2bc>)
 8007208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800720e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <find_volume+0x3a>
 8007216:	230c      	movs	r3, #12
 8007218:	e22b      	b.n	8007672 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800721a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800721c:	f7fe fe32 	bl	8005e84 <lock_fs>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <find_volume+0x4a>
 8007226:	230f      	movs	r3, #15
 8007228:	e223      	b.n	8007672 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800722e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01a      	beq.n	8007276 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fc7f 	bl	8005b48 <disk_status>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10c      	bne.n	8007276 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <find_volume+0x92>
 8007262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800726e:	230a      	movs	r3, #10
 8007270:	e1ff      	b.n	8007672 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8007272:	2300      	movs	r3, #0
 8007274:	e1fd      	b.n	8007672 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800727c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727e:	b2da      	uxtb	r2, r3
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe fc77 	bl	8005b7c <disk_initialize>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80072a0:	2303      	movs	r3, #3
 80072a2:	e1e6      	b.n	8007672 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <find_volume+0xda>
 80072aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80072b6:	230a      	movs	r3, #10
 80072b8:	e1db      	b.n	8007672 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80072be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072c2:	f7ff ff37 	bl	8007134 <check_fs>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80072cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d149      	bne.n	8007368 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072d4:	2300      	movs	r3, #0
 80072d6:	643b      	str	r3, [r7, #64]	; 0x40
 80072d8:	e01e      	b.n	8007318 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80072e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072e8:	4413      	add	r3, r2
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	3304      	adds	r3, #4
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d006      	beq.n	8007304 <find_volume+0x124>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	3308      	adds	r3, #8
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fcda 	bl	8005cb4 <ld_dword>
 8007300:	4602      	mov	r2, r0
 8007302:	e000      	b.n	8007306 <find_volume+0x126>
 8007304:	2200      	movs	r2, #0
 8007306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	3358      	adds	r3, #88	; 0x58
 800730c:	443b      	add	r3, r7
 800730e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007314:	3301      	adds	r3, #1
 8007316:	643b      	str	r3, [r7, #64]	; 0x40
 8007318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731a:	2b03      	cmp	r3, #3
 800731c:	d9dd      	bls.n	80072da <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800731e:	2300      	movs	r3, #0
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <find_volume+0x14e>
 8007328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732a:	3b01      	subs	r3, #1
 800732c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	3358      	adds	r3, #88	; 0x58
 8007334:	443b      	add	r3, r7
 8007336:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800733a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800733c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <find_volume+0x16e>
 8007342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007346:	f7ff fef5 	bl	8007134 <check_fs>
 800734a:	4603      	mov	r3, r0
 800734c:	e000      	b.n	8007350 <find_volume+0x170>
 800734e:	2303      	movs	r3, #3
 8007350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007358:	2b01      	cmp	r3, #1
 800735a:	d905      	bls.n	8007368 <find_volume+0x188>
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	3301      	adds	r3, #1
 8007360:	643b      	str	r3, [r7, #64]	; 0x40
 8007362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007364:	2b03      	cmp	r3, #3
 8007366:	d9e2      	bls.n	800732e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800736c:	2b04      	cmp	r3, #4
 800736e:	d101      	bne.n	8007374 <find_volume+0x194>
 8007370:	2301      	movs	r3, #1
 8007372:	e17e      	b.n	8007672 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007378:	2b01      	cmp	r3, #1
 800737a:	d901      	bls.n	8007380 <find_volume+0x1a0>
 800737c:	230d      	movs	r3, #13
 800737e:	e178      	b.n	8007672 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	3334      	adds	r3, #52	; 0x34
 8007384:	330b      	adds	r3, #11
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fc7c 	bl	8005c84 <ld_word>
 800738c:	4603      	mov	r3, r0
 800738e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007392:	d001      	beq.n	8007398 <find_volume+0x1b8>
 8007394:	230d      	movs	r3, #13
 8007396:	e16c      	b.n	8007672 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	3334      	adds	r3, #52	; 0x34
 800739c:	3316      	adds	r3, #22
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fc70 	bl	8005c84 <ld_word>
 80073a4:	4603      	mov	r3, r0
 80073a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80073a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <find_volume+0x1dc>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	3334      	adds	r3, #52	; 0x34
 80073b2:	3324      	adds	r3, #36	; 0x24
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fc7d 	bl	8005cb4 <ld_dword>
 80073ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	789b      	ldrb	r3, [r3, #2]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d005      	beq.n	80073e0 <find_volume+0x200>
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	789b      	ldrb	r3, [r3, #2]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d001      	beq.n	80073e0 <find_volume+0x200>
 80073dc:	230d      	movs	r3, #13
 80073de:	e148      	b.n	8007672 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	789b      	ldrb	r3, [r3, #2]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	895b      	ldrh	r3, [r3, #10]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <find_volume+0x234>
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	895b      	ldrh	r3, [r3, #10]
 8007406:	461a      	mov	r2, r3
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	895b      	ldrh	r3, [r3, #10]
 800740c:	3b01      	subs	r3, #1
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <find_volume+0x238>
 8007414:	230d      	movs	r3, #13
 8007416:	e12c      	b.n	8007672 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	3334      	adds	r3, #52	; 0x34
 800741c:	3311      	adds	r3, #17
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fc30 	bl	8005c84 <ld_word>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	891b      	ldrh	r3, [r3, #8]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <find_volume+0x25e>
 800743a:	230d      	movs	r3, #13
 800743c:	e119      	b.n	8007672 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	3334      	adds	r3, #52	; 0x34
 8007442:	3313      	adds	r3, #19
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fc1d 	bl	8005c84 <ld_word>
 800744a:	4603      	mov	r3, r0
 800744c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800744e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <find_volume+0x282>
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	3334      	adds	r3, #52	; 0x34
 8007458:	3320      	adds	r3, #32
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fc2a 	bl	8005cb4 <ld_dword>
 8007460:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	3334      	adds	r3, #52	; 0x34
 8007466:	330e      	adds	r3, #14
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fc0b 	bl	8005c84 <ld_word>
 800746e:	4603      	mov	r3, r0
 8007470:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <find_volume+0x29c>
 8007478:	230d      	movs	r3, #13
 800747a:	e0fa      	b.n	8007672 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800747c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800747e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007480:	4413      	add	r3, r2
 8007482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007484:	8912      	ldrh	r2, [r2, #8]
 8007486:	0912      	lsrs	r2, r2, #4
 8007488:	b292      	uxth	r2, r2
 800748a:	4413      	add	r3, r2
 800748c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800748e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	429a      	cmp	r2, r3
 8007494:	d204      	bcs.n	80074a0 <find_volume+0x2c0>
 8007496:	230d      	movs	r3, #13
 8007498:	e0eb      	b.n	8007672 <find_volume+0x492>
 800749a:	bf00      	nop
 800749c:	20000560 	.word	0x20000560
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80074a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a8:	8952      	ldrh	r2, [r2, #10]
 80074aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <find_volume+0x2da>
 80074b6:	230d      	movs	r3, #13
 80074b8:	e0db      	b.n	8007672 <find_volume+0x492>
		fmt = FS_FAT32;
 80074ba:	2303      	movs	r3, #3
 80074bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d802      	bhi.n	80074d0 <find_volume+0x2f0>
 80074ca:	2302      	movs	r3, #2
 80074cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d802      	bhi.n	80074e0 <find_volume+0x300>
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	1c9a      	adds	r2, r3, #2
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074ec:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80074ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f2:	441a      	add	r2, r3
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80074f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	441a      	add	r2, r3
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007506:	2b03      	cmp	r3, #3
 8007508:	d11e      	bne.n	8007548 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	3334      	adds	r3, #52	; 0x34
 800750e:	332a      	adds	r3, #42	; 0x2a
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fbb7 	bl	8005c84 <ld_word>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <find_volume+0x340>
 800751c:	230d      	movs	r3, #13
 800751e:	e0a8      	b.n	8007672 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	891b      	ldrh	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <find_volume+0x34c>
 8007528:	230d      	movs	r3, #13
 800752a:	e0a2      	b.n	8007672 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	3334      	adds	r3, #52	; 0x34
 8007530:	332c      	adds	r3, #44	; 0x2c
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fbbe 	bl	8005cb4 <ld_dword>
 8007538:	4602      	mov	r2, r0
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	647b      	str	r3, [r7, #68]	; 0x44
 8007546:	e01f      	b.n	8007588 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	891b      	ldrh	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <find_volume+0x374>
 8007550:	230d      	movs	r3, #13
 8007552:	e08e      	b.n	8007672 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	441a      	add	r2, r3
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007564:	2b02      	cmp	r3, #2
 8007566:	d103      	bne.n	8007570 <find_volume+0x390>
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	e00a      	b.n	8007586 <find_volume+0x3a6>
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	085a      	lsrs	r2, r3, #1
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007586:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	69da      	ldr	r2, [r3, #28]
 800758c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007592:	0a5b      	lsrs	r3, r3, #9
 8007594:	429a      	cmp	r2, r3
 8007596:	d201      	bcs.n	800759c <find_volume+0x3bc>
 8007598:	230d      	movs	r3, #13
 800759a:	e06a      	b.n	8007672 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075a2:	615a      	str	r2, [r3, #20]
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	2280      	movs	r2, #128	; 0x80
 80075b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80075b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d149      	bne.n	800764e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	3334      	adds	r3, #52	; 0x34
 80075be:	3330      	adds	r3, #48	; 0x30
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fb5f 	bl	8005c84 <ld_word>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d140      	bne.n	800764e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80075cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ce:	3301      	adds	r3, #1
 80075d0:	4619      	mov	r1, r3
 80075d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075d4:	f7fe fe38 	bl	8006248 <move_window>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d137      	bne.n	800764e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	2200      	movs	r2, #0
 80075e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	3334      	adds	r3, #52	; 0x34
 80075e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fb49 	bl	8005c84 <ld_word>
 80075f2:	4603      	mov	r3, r0
 80075f4:	461a      	mov	r2, r3
 80075f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d127      	bne.n	800764e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	3334      	adds	r3, #52	; 0x34
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fb56 	bl	8005cb4 <ld_dword>
 8007608:	4603      	mov	r3, r0
 800760a:	4a1c      	ldr	r2, [pc, #112]	; (800767c <find_volume+0x49c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d11e      	bne.n	800764e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	3334      	adds	r3, #52	; 0x34
 8007614:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fb4b 	bl	8005cb4 <ld_dword>
 800761e:	4603      	mov	r3, r0
 8007620:	4a17      	ldr	r2, [pc, #92]	; (8007680 <find_volume+0x4a0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d113      	bne.n	800764e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	3334      	adds	r3, #52	; 0x34
 800762a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fb40 	bl	8005cb4 <ld_dword>
 8007634:	4602      	mov	r2, r0
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	3334      	adds	r3, #52	; 0x34
 800763e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fb36 	bl	8005cb4 <ld_dword>
 8007648:	4602      	mov	r2, r0
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007654:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <find_volume+0x4a4>)
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <find_volume+0x4a4>)
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <find_volume+0x4a4>)
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800766a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800766c:	f7fe fd84 	bl	8006178 <clear_lock>
#endif
	return FR_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3758      	adds	r7, #88	; 0x58
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	41615252 	.word	0x41615252
 8007680:	61417272 	.word	0x61417272
 8007684:	20000564 	.word	0x20000564

08007688 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007692:	2309      	movs	r3, #9
 8007694:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d02e      	beq.n	80076fa <validate+0x72>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02a      	beq.n	80076fa <validate+0x72>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d025      	beq.n	80076fa <validate+0x72>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	889a      	ldrh	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	88db      	ldrh	r3, [r3, #6]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d11e      	bne.n	80076fa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fbdf 	bl	8005e84 <lock_fs>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d014      	beq.n	80076f6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fa38 	bl	8005b48 <disk_status>
 80076d8:	4603      	mov	r3, r0
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <validate+0x60>
				res = FR_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	e008      	b.n	80076fa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fbde 	bl	8005eb0 <unlock_fs>
 80076f4:	e001      	b.n	80076fa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80076f6:	230f      	movs	r3, #15
 80076f8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <validate+0x7e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	e000      	b.n	8007708 <validate+0x80>
 8007706:	2300      	movs	r3, #0
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	6013      	str	r3, [r2, #0]
	return res;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800772a:	f107 0310 	add.w	r3, r7, #16
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fcbb 	bl	80070aa <get_ldnumber>
 8007734:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	da01      	bge.n	8007740 <f_mount+0x28>
 800773c:	230b      	movs	r3, #11
 800773e:	e048      	b.n	80077d2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007740:	4a26      	ldr	r2, [pc, #152]	; (80077dc <f_mount+0xc4>)
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007748:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00f      	beq.n	8007770 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007750:	69b8      	ldr	r0, [r7, #24]
 8007752:	f7fe fd11 	bl	8006178 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fd18 	bl	8008190 <ff_del_syncobj>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <f_mount+0x52>
 8007766:	2302      	movs	r3, #2
 8007768:	e033      	b.n	80077d2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00f      	beq.n	8007796 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	330c      	adds	r3, #12
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f000 fce7 	bl	800815a <ff_cre_syncobj>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <f_mount+0x7e>
 8007792:	2302      	movs	r3, #2
 8007794:	e01d      	b.n	80077d2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4910      	ldr	r1, [pc, #64]	; (80077dc <f_mount+0xc4>)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <f_mount+0x94>
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d001      	beq.n	80077b0 <f_mount+0x98>
 80077ac:	2300      	movs	r3, #0
 80077ae:	e010      	b.n	80077d2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80077b0:	f107 010c 	add.w	r1, r7, #12
 80077b4:	f107 0308 	add.w	r3, r7, #8
 80077b8:	2200      	movs	r2, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fd10 	bl	80071e0 <find_volume>
 80077c0:	4603      	mov	r3, r0
 80077c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	7dfa      	ldrb	r2, [r7, #23]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fb70 	bl	8005eb0 <unlock_fs>
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000560 	.word	0x20000560

080077e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b098      	sub	sp, #96	; 0x60
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <f_open+0x18>
 80077f4:	2309      	movs	r3, #9
 80077f6:	e1b4      	b.n	8007b62 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007800:	79fa      	ldrb	r2, [r7, #7]
 8007802:	f107 0110 	add.w	r1, r7, #16
 8007806:	f107 0308 	add.w	r3, r7, #8
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fce8 	bl	80071e0 <find_volume>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 8191 	bne.w	8007b42 <f_open+0x362>
		dj.obj.fs = fs;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	f107 0314 	add.w	r3, r7, #20
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fbcb 	bl	8006fc8 <follow_path>
 8007832:	4603      	mov	r3, r0
 8007834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800783c:	2b00      	cmp	r3, #0
 800783e:	d11a      	bne.n	8007876 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007840:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007844:	b25b      	sxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	da03      	bge.n	8007852 <f_open+0x72>
				res = FR_INVALID_NAME;
 800784a:	2306      	movs	r3, #6
 800784c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007850:	e011      	b.n	8007876 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fb3c 	bl	8005ee8 <chk_lock>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	f003 031c 	and.w	r3, r3, #28
 800787c:	2b00      	cmp	r3, #0
 800787e:	d07f      	beq.n	8007980 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007884:	2b00      	cmp	r3, #0
 8007886:	d017      	beq.n	80078b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800788c:	2b04      	cmp	r3, #4
 800788e:	d10e      	bne.n	80078ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007890:	f7fe fb86 	bl	8005fa0 <enq_lock>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d006      	beq.n	80078a8 <f_open+0xc8>
 800789a:	f107 0314 	add.w	r3, r7, #20
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fa6d 	bl	8006d7e <dir_register>
 80078a4:	4603      	mov	r3, r0
 80078a6:	e000      	b.n	80078aa <f_open+0xca>
 80078a8:	2312      	movs	r3, #18
 80078aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	f043 0308 	orr.w	r3, r3, #8
 80078b4:	71fb      	strb	r3, [r7, #7]
 80078b6:	e010      	b.n	80078da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80078b8:	7ebb      	ldrb	r3, [r7, #26]
 80078ba:	f003 0311 	and.w	r3, r3, #17
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <f_open+0xea>
					res = FR_DENIED;
 80078c2:	2307      	movs	r3, #7
 80078c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078c8:	e007      	b.n	80078da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <f_open+0xfa>
 80078d4:	2308      	movs	r3, #8
 80078d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80078da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d168      	bne.n	80079b4 <f_open+0x1d4>
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d063      	beq.n	80079b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80078ec:	f7fd fc08 	bl	8005100 <get_fattime>
 80078f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	330e      	adds	r3, #14
 80078f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fa19 	bl	8005d30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	3316      	adds	r3, #22
 8007902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fa13 	bl	8005d30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	330b      	adds	r3, #11
 800790e:	2220      	movs	r2, #32
 8007910:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff f99c 	bl	8006c56 <ld_clust>
 800791e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007924:	2200      	movs	r2, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff f9b4 	bl	8006c94 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792e:	331c      	adds	r3, #28
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe f9fc 	bl	8005d30 <st_dword>
					fs->wflag = 1;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2201      	movs	r2, #1
 800793c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800793e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d037      	beq.n	80079b4 <f_open+0x1d4>
						dw = fs->winsect;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	2200      	movs	r2, #0
 8007950:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fec7 	bl	80066e6 <remove_chain>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800795e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007962:	2b00      	cmp	r3, #0
 8007964:	d126      	bne.n	80079b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fc6c 	bl	8006248 <move_window>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800797a:	3a01      	subs	r2, #1
 800797c:	611a      	str	r2, [r3, #16]
 800797e:	e019      	b.n	80079b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007984:	2b00      	cmp	r3, #0
 8007986:	d115      	bne.n	80079b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007988:	7ebb      	ldrb	r3, [r7, #26]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007992:	2304      	movs	r3, #4
 8007994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007998:	e00c      	b.n	80079b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <f_open+0x1d4>
 80079a4:	7ebb      	ldrb	r3, [r7, #26]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <f_open+0x1d4>
						res = FR_DENIED;
 80079ae:	2307      	movs	r3, #7
 80079b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80079b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d128      	bne.n	8007a0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80079d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	f107 0314 	add.w	r3, r7, #20
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe faf5 	bl	8005fe4 <inc_lock>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <f_open+0x22e>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f040 8095 	bne.w	8007b42 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff f919 	bl	8006c56 <ld_clust>
 8007a24:	4602      	mov	r2, r0
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2c:	331c      	adds	r3, #28
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe f940 	bl	8005cb4 <ld_dword>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	88da      	ldrh	r2, [r3, #6]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	79fa      	ldrb	r2, [r7, #7]
 8007a52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3330      	adds	r3, #48	; 0x30
 8007a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe f9aa 	bl	8005dca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d060      	beq.n	8007b42 <f_open+0x362>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d05c      	beq.n	8007b42 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	025b      	lsls	r3, r3, #9
 8007a96:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8007aa4:	e016      	b.n	8007ad4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fc87 	bl	80063be <get_fat>
 8007ab0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d802      	bhi.n	8007abe <f_open+0x2de>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac4:	d102      	bne.n	8007acc <f_open+0x2ec>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <f_open+0x304>
 8007adc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d8e0      	bhi.n	8007aa6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ae8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d127      	bne.n	8007b42 <f_open+0x362>
 8007af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d022      	beq.n	8007b42 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe fc3d 	bl	8006380 <clust2sect>
 8007b06:	6478      	str	r0, [r7, #68]	; 0x44
 8007b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <f_open+0x336>
						res = FR_INT_ERR;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007b14:	e015      	b.n	8007b42 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b18:	0a5a      	lsrs	r2, r3, #9
 8007b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	7858      	ldrb	r0, [r3, #1]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1a      	ldr	r2, [r3, #32]
 8007b30:	2301      	movs	r3, #1
 8007b32:	f7fe f849 	bl	8005bc8 <disk_read>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <f_open+0x362>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <f_open+0x370>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe f9a9 	bl	8005eb0 <unlock_fs>
 8007b5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3760      	adds	r7, #96	; 0x60
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b08c      	sub	sp, #48	; 0x30
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f107 0210 	add.w	r2, r7, #16
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fd7c 	bl	8007688 <validate>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d107      	bne.n	8007bae <f_write+0x44>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	7d5b      	ldrb	r3, [r3, #21]
 8007ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <f_write+0x58>
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe f97a 	bl	8005eb0 <unlock_fs>
 8007bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bc0:	e173      	b.n	8007eaa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	7d1b      	ldrb	r3, [r3, #20]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <f_write+0x72>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2107      	movs	r1, #7
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe f96c 	bl	8005eb0 <unlock_fs>
 8007bd8:	2307      	movs	r3, #7
 8007bda:	e166      	b.n	8007eaa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	441a      	add	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	f080 814b 	bcs.w	8007e84 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007bf6:	e145      	b.n	8007e84 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 8101 	bne.w	8007e08 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	0a5b      	lsrs	r3, r3, #9
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	8952      	ldrh	r2, [r2, #10]
 8007c10:	3a01      	subs	r2, #1
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d14d      	bne.n	8007cb8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10c      	bne.n	8007c3e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d11a      	bne.n	8007c66 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fdbb 	bl	80067b0 <create_chain>
 8007c3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c3c:	e013      	b.n	8007c66 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7fe fe47 	bl	80068e0 <clmt_clust>
 8007c52:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c54:	e007      	b.n	8007c66 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7fe fda6 	bl	80067b0 <create_chain>
 8007c64:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8110 	beq.w	8007e8e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d109      	bne.n	8007c88 <f_write+0x11e>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2202      	movs	r2, #2
 8007c78:	755a      	strb	r2, [r3, #21]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2102      	movs	r1, #2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe f916 	bl	8005eb0 <unlock_fs>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e110      	b.n	8007eaa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c8e:	d109      	bne.n	8007ca4 <f_write+0x13a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	755a      	strb	r2, [r3, #21]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe f908 	bl	8005eb0 <unlock_fs>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e102      	b.n	8007eaa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <f_write+0x14e>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	7d1b      	ldrb	r3, [r3, #20]
 8007cbc:	b25b      	sxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da1d      	bge.n	8007cfe <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	7858      	ldrb	r0, [r3, #1]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f7fd ff99 	bl	8005c08 <disk_write>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <f_write+0x186>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	755a      	strb	r2, [r3, #21]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe f8e2 	bl	8005eb0 <unlock_fs>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0dc      	b.n	8007eaa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	7d1b      	ldrb	r3, [r3, #20]
 8007cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fe fb3a 	bl	8006380 <clust2sect>
 8007d0c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <f_write+0x1be>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2202      	movs	r2, #2
 8007d18:	755a      	strb	r2, [r3, #21]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe f8c6 	bl	8005eb0 <unlock_fs>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e0c0      	b.n	8007eaa <f_write+0x340>
			sect += csect;
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	0a5b      	lsrs	r3, r3, #9
 8007d34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d041      	beq.n	8007dc0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	4413      	add	r3, r2
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	8952      	ldrh	r2, [r2, #10]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d905      	bls.n	8007d56 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	895b      	ldrh	r3, [r3, #10]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	7858      	ldrb	r0, [r3, #1]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	69f9      	ldr	r1, [r7, #28]
 8007d60:	f7fd ff52 	bl	8005c08 <disk_write>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <f_write+0x214>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	755a      	strb	r2, [r3, #21]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2101      	movs	r1, #1
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe f89b 	bl	8005eb0 <unlock_fs>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e095      	b.n	8007eaa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	6a3a      	ldr	r2, [r7, #32]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d915      	bls.n	8007db8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	025b      	lsls	r3, r3, #9
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da4:	4619      	mov	r1, r3
 8007da6:	f7fd ffef 	bl	8005d88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	7d1b      	ldrb	r3, [r3, #20]
 8007dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	025b      	lsls	r3, r3, #9
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007dbe:	e044      	b.n	8007e4a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d01b      	beq.n	8007e02 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699a      	ldr	r2, [r3, #24]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d215      	bcs.n	8007e02 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	7858      	ldrb	r0, [r3, #1]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007de0:	2301      	movs	r3, #1
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	f7fd fef0 	bl	8005bc8 <disk_read>
 8007de8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	755a      	strb	r2, [r3, #21]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe f859 	bl	8005eb0 <unlock_fs>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e053      	b.n	8007eaa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d901      	bls.n	8007e22 <f_write+0x2b8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e30:	4413      	add	r3, r2
 8007e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e34:	69f9      	ldr	r1, [r7, #28]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fd ffa6 	bl	8005d88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	7d1b      	ldrb	r3, [r3, #20]
 8007e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	4413      	add	r3, r2
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	441a      	add	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	619a      	str	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	bf38      	it	cc
 8007e6a:	461a      	movcc	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	441a      	add	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f47f aeb6 	bne.w	8007bf8 <f_write+0x8e>
 8007e8c:	e000      	b.n	8007e90 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e8e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	7d1b      	ldrb	r3, [r3, #20]
 8007e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f804 	bl	8005eb0 <unlock_fs>
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3730      	adds	r7, #48	; 0x30
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f107 0208 	add.w	r2, r7, #8
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fbe0 	bl	8007688 <validate>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d16d      	bne.n	8007fae <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7d1b      	ldrb	r3, [r3, #20]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d067      	beq.n	8007fae <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7d1b      	ldrb	r3, [r3, #20]
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	da1a      	bge.n	8007f1e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	7858      	ldrb	r0, [r3, #1]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1a      	ldr	r2, [r3, #32]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f7fd fe86 	bl	8005c08 <disk_write>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d006      	beq.n	8007f10 <f_sync+0x5e>
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd ffd2 	bl	8005eb0 <unlock_fs>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e055      	b.n	8007fbc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7d1b      	ldrb	r3, [r3, #20]
 8007f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f1e:	f7fd f8ef 	bl	8005100 <get_fattime>
 8007f22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fe f98b 	bl	8006248 <move_window>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d138      	bne.n	8007fae <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	330b      	adds	r3, #11
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	330b      	adds	r3, #11
 8007f4c:	f042 0220 	orr.w	r2, r2, #32
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	f7fe fe98 	bl	8006c94 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f103 021c 	add.w	r2, r3, #28
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7fd fedd 	bl	8005d30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3316      	adds	r3, #22
 8007f7a:	6939      	ldr	r1, [r7, #16]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd fed7 	bl	8005d30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3312      	adds	r3, #18
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fd feb6 	bl	8005cfa <st_word>
					fs->wflag = 1;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2201      	movs	r2, #1
 8007f92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe f984 	bl	80062a4 <sync_fs>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	7d1b      	ldrb	r3, [r3, #20]
 8007fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	7dfa      	ldrb	r2, [r7, #23]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fd ff7b 	bl	8005eb0 <unlock_fs>
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff ff70 	bl	8007eb2 <f_sync>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11d      	bne.n	8008018 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f107 0208 	add.w	r2, r7, #8
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff fb4f 	bl	8007688 <validate>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d111      	bne.n	8008018 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe f881 	bl	8006100 <dec_lock>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd ff4c 	bl	8005eb0 <unlock_fs>
#endif
		}
	}
	return res;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b090      	sub	sp, #64	; 0x40
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800802c:	f107 010c 	add.w	r1, r7, #12
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	2200      	movs	r2, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff f8d3 	bl	80071e0 <find_volume>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008040:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11f      	bne.n	8008088 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe ffb9 	bl	8006fc8 <follow_path>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800805c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008060:	2b00      	cmp	r3, #0
 8008062:	d111      	bne.n	8008088 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008064:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008068:	b25b      	sxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	da03      	bge.n	8008076 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800806e:	2306      	movs	r3, #6
 8008070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008074:	e008      	b.n	8008088 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <f_stat+0x66>
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fead 	bl	8006de2 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd ff0d 	bl	8005eb0 <unlock_fs>
 8008096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800809a:	4618      	mov	r0, r3
 800809c:	3740      	adds	r7, #64	; 0x40
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80080ba:	4b1f      	ldr	r3, [pc, #124]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080bc:	7a5b      	ldrb	r3, [r3, #9]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d131      	bne.n	8008128 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80080c4:	4b1c      	ldr	r3, [pc, #112]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080c6:	7a5b      	ldrb	r3, [r3, #9]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	4b1a      	ldr	r3, [pc, #104]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080ce:	2100      	movs	r1, #0
 80080d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80080d2:	4b19      	ldr	r3, [pc, #100]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080d4:	7a5b      	ldrb	r3, [r3, #9]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	4a17      	ldr	r2, [pc, #92]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080e4:	7a5b      	ldrb	r3, [r3, #9]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	4b13      	ldr	r3, [pc, #76]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080ec:	4413      	add	r3, r2
 80080ee:	79fa      	ldrb	r2, [r7, #7]
 80080f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80080f2:	4b11      	ldr	r3, [pc, #68]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080f4:	7a5b      	ldrb	r3, [r3, #9]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	b2d1      	uxtb	r1, r2
 80080fc:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <FATFS_LinkDriverEx+0x94>)
 80080fe:	7251      	strb	r1, [r2, #9]
 8008100:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008102:	7dbb      	ldrb	r3, [r7, #22]
 8008104:	3330      	adds	r3, #48	; 0x30
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	3301      	adds	r3, #1
 8008110:	223a      	movs	r2, #58	; 0x3a
 8008112:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	3302      	adds	r3, #2
 8008118:	222f      	movs	r2, #47	; 0x2f
 800811a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	3303      	adds	r3, #3
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20000588 	.word	0x20000588

0800813c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008146:	2200      	movs	r2, #0
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff ffaa 	bl	80080a4 <FATFS_LinkDriverEx>
 8008150:	4603      	mov	r3, r0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	4603      	mov	r3, r0
 8008162:	6039      	str	r1, [r7, #0]
 8008164:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8008166:	2200      	movs	r2, #0
 8008168:	2101      	movs	r1, #1
 800816a:	2001      	movs	r0, #1
 800816c:	f000 f84c 	bl	8008208 <osSemaphoreNew>
 8008170:	4602      	mov	r2, r0
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	bf14      	ite	ne
 800817e:	2301      	movne	r3, #1
 8008180:	2300      	moveq	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	60fb      	str	r3, [r7, #12]

    return ret;
 8008186:	68fb      	ldr	r3, [r7, #12]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f955 	bl	8008448 <osSemaphoreDelete>
#endif
    return 1;
 800819e:	2301      	movs	r3, #1
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80081b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f8af 	bl	800831c <osSemaphoreAcquire>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80081c4:	2301      	movs	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80081c8:	68fb      	ldr	r3, [r7, #12]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8f0 	bl	80083c0 <osSemaphoreRelease>
#endif
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081ec:	4b05      	ldr	r3, [pc, #20]	; (8008204 <SysTick_Handler+0x1c>)
 80081ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081f0:	f002 f824 	bl	800a23c <xTaskGetSchedulerState>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d001      	beq.n	80081fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081fa:	f002 fbad 	bl	800a958 <xPortSysTickHandler>
  }
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000e010 	.word	0xe000e010

08008208 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af02      	add	r7, sp, #8
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008214:	2300      	movs	r3, #0
 8008216:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008218:	f3ef 8305 	mrs	r3, IPSR
 800821c:	613b      	str	r3, [r7, #16]
  return(result);
 800821e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008220:	2b00      	cmp	r3, #0
 8008222:	d175      	bne.n	8008310 <osSemaphoreNew+0x108>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d072      	beq.n	8008310 <osSemaphoreNew+0x108>
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	429a      	cmp	r2, r3
 8008230:	d86e      	bhi.n	8008310 <osSemaphoreNew+0x108>
    mem = -1;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008236:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d015      	beq.n	800826a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d006      	beq.n	8008254 <osSemaphoreNew+0x4c>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	2b4f      	cmp	r3, #79	; 0x4f
 800824c:	d902      	bls.n	8008254 <osSemaphoreNew+0x4c>
        mem = 1;
 800824e:	2301      	movs	r3, #1
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	e00c      	b.n	800826e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d108      	bne.n	800826e <osSemaphoreNew+0x66>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <osSemaphoreNew+0x66>
          mem = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	e001      	b.n	800826e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008274:	d04c      	beq.n	8008310 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d128      	bne.n	80082ce <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10a      	bne.n	8008298 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2203      	movs	r2, #3
 8008288:	9200      	str	r2, [sp, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	2001      	movs	r0, #1
 8008290:	f000 fb46 	bl	8008920 <xQueueGenericCreateStatic>
 8008294:	61f8      	str	r0, [r7, #28]
 8008296:	e005      	b.n	80082a4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008298:	2203      	movs	r2, #3
 800829a:	2100      	movs	r1, #0
 800829c:	2001      	movs	r0, #1
 800829e:	f000 fbb7 	bl	8008a10 <xQueueGenericCreate>
 80082a2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d022      	beq.n	80082f0 <osSemaphoreNew+0xe8>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01f      	beq.n	80082f0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80082b0:	2300      	movs	r3, #0
 80082b2:	2200      	movs	r2, #0
 80082b4:	2100      	movs	r1, #0
 80082b6:	69f8      	ldr	r0, [r7, #28]
 80082b8:	f000 fc72 	bl	8008ba0 <xQueueGenericSend>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d016      	beq.n	80082f0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80082c2:	69f8      	ldr	r0, [r7, #28]
 80082c4:	f000 ff84 	bl	80091d0 <vQueueDelete>
            hSemaphore = NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	e010      	b.n	80082f0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d108      	bne.n	80082e6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	461a      	mov	r2, r3
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fbf4 	bl	8008aca <xQueueCreateCountingSemaphoreStatic>
 80082e2:	61f8      	str	r0, [r7, #28]
 80082e4:	e004      	b.n	80082f0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fc25 	bl	8008b38 <xQueueCreateCountingSemaphore>
 80082ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00c      	beq.n	8008310 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <osSemaphoreNew+0xfc>
          name = attr->name;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e001      	b.n	8008308 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008308:	6979      	ldr	r1, [r7, #20]
 800830a:	69f8      	ldr	r0, [r7, #28]
 800830c:	f001 f8ac 	bl	8009468 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008310:	69fb      	ldr	r3, [r7, #28]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008334:	f06f 0303 	mvn.w	r3, #3
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	e039      	b.n	80083b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800833c:	f3ef 8305 	mrs	r3, IPSR
 8008340:	60fb      	str	r3, [r7, #12]
  return(result);
 8008342:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008344:	2b00      	cmp	r3, #0
 8008346:	d022      	beq.n	800838e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800834e:	f06f 0303 	mvn.w	r3, #3
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e02c      	b.n	80083b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	461a      	mov	r2, r3
 8008360:	2100      	movs	r1, #0
 8008362:	6938      	ldr	r0, [r7, #16]
 8008364:	f000 feb4 	bl	80090d0 <xQueueReceiveFromISR>
 8008368:	4603      	mov	r3, r0
 800836a:	2b01      	cmp	r3, #1
 800836c:	d003      	beq.n	8008376 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800836e:	f06f 0302 	mvn.w	r3, #2
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e01c      	b.n	80083b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d019      	beq.n	80083b0 <osSemaphoreAcquire+0x94>
 800837c:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <osSemaphoreAcquire+0xa0>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	e010      	b.n	80083b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6938      	ldr	r0, [r7, #16]
 8008392:	f000 fd91 	bl	8008eb8 <xQueueSemaphoreTake>
 8008396:	4603      	mov	r3, r0
 8008398:	2b01      	cmp	r3, #1
 800839a:	d009      	beq.n	80083b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80083a2:	f06f 0301 	mvn.w	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e002      	b.n	80083b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80083aa:	f06f 0302 	mvn.w	r3, #2
 80083ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80083b0:	697b      	ldr	r3, [r7, #20]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80083d6:	f06f 0303 	mvn.w	r3, #3
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e02c      	b.n	8008438 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083de:	f3ef 8305 	mrs	r3, IPSR
 80083e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80083e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01a      	beq.n	8008420 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80083ee:	f107 0308 	add.w	r3, r7, #8
 80083f2:	4619      	mov	r1, r3
 80083f4:	6938      	ldr	r0, [r7, #16]
 80083f6:	f000 fcd1 	bl	8008d9c <xQueueGiveFromISR>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d003      	beq.n	8008408 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008400:	f06f 0302 	mvn.w	r3, #2
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	e017      	b.n	8008438 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d014      	beq.n	8008438 <osSemaphoreRelease+0x78>
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <osSemaphoreRelease+0x84>)
 8008410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	e00b      	b.n	8008438 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008420:	2300      	movs	r3, #0
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	6938      	ldr	r0, [r7, #16]
 8008428:	f000 fbba 	bl	8008ba0 <xQueueGenericSend>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d002      	beq.n	8008438 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008432:	f06f 0302 	mvn.w	r3, #2
 8008436:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008438:	697b      	ldr	r3, [r7, #20]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008454:	f3ef 8305 	mrs	r3, IPSR
 8008458:	60fb      	str	r3, [r7, #12]
  return(result);
 800845a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008460:	f06f 0305 	mvn.w	r3, #5
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e00e      	b.n	8008486 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800846e:	f06f 0303 	mvn.w	r3, #3
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	e007      	b.n	8008486 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f001 f820 	bl	80094bc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008480:	6938      	ldr	r0, [r7, #16]
 8008482:	f000 fea5 	bl	80091d0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008486:	697b      	ldr	r3, [r7, #20]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8008498:	2300      	movs	r3, #0
 800849a:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80084b8:	2008      	movs	r0, #8
 80084ba:	f002 faaf 	bl	800aa1c <pvPortMalloc>
 80084be:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60bb      	str	r3, [r7, #8]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 80084e2:	f002 f9a9 	bl	800a838 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2200      	movs	r2, #0
 80084f0:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80084f2:	4b08      	ldr	r3, [pc, #32]	; (8008514 <FreeRTOS_CLIRegisterCommand+0x84>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80084fa:	4a06      	ldr	r2, [pc, #24]	; (8008514 <FreeRTOS_CLIRegisterCommand+0x84>)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8008500:	f002 f9ca 	bl	800a898 <vPortExitCritical>

		xReturn = pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008508:	697b      	ldr	r3, [r7, #20]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000028 	.word	0x20000028

08008518 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8008528:	4b3a      	ldr	r3, [pc, #232]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d141      	bne.n	80085b4 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8008530:	4b38      	ldr	r3, [pc, #224]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008532:	4a39      	ldr	r2, [pc, #228]	; (8008618 <FreeRTOS_CLIProcessCommand+0x100>)
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e037      	b.n	80085a8 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8008538:	4b36      	ldr	r3, [pc, #216]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8008542:	69b8      	ldr	r0, [r7, #24]
 8008544:	f7f7 fe64 	bl	8000210 <strlen>
 8008548:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	4413      	add	r3, r2
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b20      	cmp	r3, #32
 8008554:	d005      	beq.n	8008562 <FreeRTOS_CLIProcessCommand+0x4a>
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	4413      	add	r3, r2
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d11d      	bne.n	800859e <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	69b9      	ldr	r1, [r7, #24]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f002 fe14 	bl	800b194 <strncmp>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d115      	bne.n	800859e <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8008572:	4b28      	ldr	r3, [pc, #160]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	db18      	blt.n	80085b2 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f87d 	bl	8008680 <prvGetNumberOfParameters>
 8008586:	4603      	mov	r3, r0
 8008588:	461a      	mov	r2, r3
 800858a:	4b22      	ldr	r3, [pc, #136]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008594:	429a      	cmp	r2, r3
 8008596:	d00c      	beq.n	80085b2 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8008598:	2300      	movs	r3, #0
 800859a:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 800859c:	e009      	b.n	80085b2 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800859e:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	4a1b      	ldr	r2, [pc, #108]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1c3      	bne.n	8008538 <FreeRTOS_CLIProcessCommand+0x20>
 80085b0:	e000      	b.n	80085b4 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 80085b2:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80085b4:	4b17      	ldr	r3, [pc, #92]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <FreeRTOS_CLIProcessCommand+0xbc>
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d108      	bne.n	80085d4 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	4915      	ldr	r1, [pc, #84]	; (800861c <FreeRTOS_CLIProcessCommand+0x104>)
 80085c6:	68b8      	ldr	r0, [r7, #8]
 80085c8:	f002 fdf8 	bl	800b1bc <strncpy>
		pxCommand = NULL;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e01a      	b.n	800860a <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80085dc:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	4798      	blx	r3
 80085ec:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <FreeRTOS_CLIProcessCommand+0xfc>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e006      	b.n	800860a <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4908      	ldr	r1, [pc, #32]	; (8008620 <FreeRTOS_CLIProcessCommand+0x108>)
 8008600:	68b8      	ldr	r0, [r7, #8]
 8008602:	f002 fddb 	bl	800b1bc <strncpy>
		xReturn = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800860a:	69fb      	ldr	r3, [r7, #28]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000594 	.word	0x20000594
 8008618:	20000020 	.word	0x20000020
 800861c:	0800c72c 	.word	0x0800c72c
 8008620:	0800c784 	.word	0x0800c784

08008624 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8008630:	4b11      	ldr	r3, [pc, #68]	; (8008678 <prvHelpCommand+0x54>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8008638:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <prvHelpCommand+0x54>)
 800863a:	4a10      	ldr	r2, [pc, #64]	; (800867c <prvHelpCommand+0x58>)
 800863c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800863e:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <prvHelpCommand+0x54>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4619      	mov	r1, r3
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f002 fdb6 	bl	800b1bc <strncpy>
	pxCommand = pxCommand->pxNext;
 8008650:	4b09      	ldr	r3, [pc, #36]	; (8008678 <prvHelpCommand+0x54>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	4a08      	ldr	r2, [pc, #32]	; (8008678 <prvHelpCommand+0x54>)
 8008658:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <prvHelpCommand+0x54>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	e001      	b.n	800866c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800866c:	697b      	ldr	r3, [r7, #20]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000598 	.word	0x20000598
 800867c:	20000020 	.word	0x20000020

08008680 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800868c:	2300      	movs	r3, #0
 800868e:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8008690:	e014      	b.n	80086bc <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b20      	cmp	r3, #32
 8008698:	d10b      	bne.n	80086b2 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d00a      	beq.n	80086b6 <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 80086a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	3301      	adds	r3, #1
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	60bb      	str	r3, [r7, #8]
 80086b0:	e001      	b.n	80086b6 <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3301      	adds	r3, #1
 80086ba:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d105      	bne.n	80086d6 <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 80086ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80086d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f103 0208 	add.w	r2, r3, #8
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f103 0208 	add.w	r2, r3, #8
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f103 0208 	add.w	r2, r3, #8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	601a      	str	r2, [r3, #0]
}
 800877c:	bf00      	nop
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879e:	d103      	bne.n	80087a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	e00c      	b.n	80087c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3308      	adds	r3, #8
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	e002      	b.n	80087b6 <vListInsert+0x2e>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d2f6      	bcs.n	80087b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6892      	ldr	r2, [r2, #8]
 8008810:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6852      	ldr	r2, [r2, #4]
 800881a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	429a      	cmp	r2, r3
 8008824:	d103      	bne.n	800882e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	1e5a      	subs	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xQueueGenericReset+0x2a>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	60bb      	str	r3, [r7, #8]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800887a:	f001 ffdd 	bl	800a838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	441a      	add	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088aa:	3b01      	subs	r3, #1
 80088ac:	68f9      	ldr	r1, [r7, #12]
 80088ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088b0:	fb01 f303 	mul.w	r3, r1, r3
 80088b4:	441a      	add	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	22ff      	movs	r2, #255	; 0xff
 80088c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d114      	bne.n	80088fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01a      	beq.n	800890e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3310      	adds	r3, #16
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 fa91 	bl	8009e04 <xTaskRemoveFromEventList>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d012      	beq.n	800890e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088e8:	4b0c      	ldr	r3, [pc, #48]	; (800891c <xQueueGenericReset+0xcc>)
 80088ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	e009      	b.n	800890e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3310      	adds	r3, #16
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fef1 	bl	80086e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3324      	adds	r3, #36	; 0x24
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff feec 	bl	80086e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800890e:	f001 ffc3 	bl	800a898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008912:	2301      	movs	r3, #1
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	e000ed04 	.word	0xe000ed04

08008920 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	; 0x38
 8008924:	af02      	add	r7, sp, #8
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008946:	bf00      	nop
 8008948:	e7fe      	b.n	8008948 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <xQueueGenericCreateStatic+0x52>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <xQueueGenericCreateStatic+0x56>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueGenericCreateStatic+0x58>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	623b      	str	r3, [r7, #32]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <xQueueGenericCreateStatic+0x7e>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <xQueueGenericCreateStatic+0x82>
 800899e:	2301      	movs	r3, #1
 80089a0:	e000      	b.n	80089a4 <xQueueGenericCreateStatic+0x84>
 80089a2:	2300      	movs	r3, #0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	61fb      	str	r3, [r7, #28]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089be:	2350      	movs	r3, #80	; 0x50
 80089c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b50      	cmp	r3, #80	; 0x50
 80089c6:	d00a      	beq.n	80089de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	61bb      	str	r3, [r7, #24]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	4613      	mov	r3, r2
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f83f 	bl	8008a84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3730      	adds	r7, #48	; 0x30
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	613b      	str	r3, [r7, #16]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
 8008a42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	3350      	adds	r3, #80	; 0x50
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 ffe7 	bl	800aa1c <pvPortMalloc>
 8008a4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d011      	beq.n	8008a7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	3350      	adds	r3, #80	; 0x50
 8008a5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a68:	79fa      	ldrb	r2, [r7, #7]
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f805 	bl	8008a84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	e002      	b.n	8008aa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	69b8      	ldr	r0, [r7, #24]
 8008ab6:	f7ff fecb 	bl	8008850 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b08a      	sub	sp, #40	; 0x28
 8008ace:	af02      	add	r7, sp, #8
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	61bb      	str	r3, [r7, #24]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d90a      	bls.n	8008b10 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	617b      	str	r3, [r7, #20]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b10:	2302      	movs	r3, #2
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	2100      	movs	r1, #0
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff ff00 	bl	8008920 <xQueueGenericCreateStatic>
 8008b20:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
	}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3720      	adds	r7, #32
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	613b      	str	r3, [r7, #16]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d90a      	bls.n	8008b7c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	2100      	movs	r1, #0
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff ff45 	bl	8008a10 <xQueueGenericCreate>
 8008b86:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b94:	697b      	ldr	r3, [r7, #20]
	}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08e      	sub	sp, #56	; 0x38
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <xQueueGenericSend+0x40>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <xQueueGenericSend+0x44>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <xQueueGenericSend+0x46>
 8008be4:	2300      	movs	r3, #0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <xQueueGenericSend+0x60>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x6e>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSend+0x72>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSend+0x74>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c2e:	f001 fb05 	bl	800a23c <xTaskGetSchedulerState>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <xQueueGenericSend+0x9e>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericSend+0xa2>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericSend+0xa4>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	61fb      	str	r3, [r7, #28]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c5e:	f001 fdeb 	bl	800a838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d302      	bcc.n	8008c74 <xQueueGenericSend+0xd4>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d129      	bne.n	8008cc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c7a:	f000 fae4 	bl	8009246 <prvCopyDataToQueue>
 8008c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d010      	beq.n	8008caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	3324      	adds	r3, #36	; 0x24
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 f8b9 	bl	8009e04 <xTaskRemoveFromEventList>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d013      	beq.n	8008cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c98:	4b3f      	ldr	r3, [pc, #252]	; (8008d98 <xQueueGenericSend+0x1f8>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e00a      	b.n	8008cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d007      	beq.n	8008cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008cb0:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <xQueueGenericSend+0x1f8>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cc0:	f001 fdea 	bl	800a898 <vPortExitCritical>
				return pdPASS;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e063      	b.n	8008d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cce:	f001 fde3 	bl	800a898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e05c      	b.n	8008d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 f8f3 	bl	8009ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cea:	f001 fdd5 	bl	800a898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cee:	f000 fdf1 	bl	80098d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cf2:	f001 fda1 	bl	800a838 <vPortEnterCritical>
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cfc:	b25b      	sxtb	r3, r3
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d02:	d103      	bne.n	8008d0c <xQueueGenericSend+0x16c>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d12:	b25b      	sxtb	r3, r3
 8008d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d18:	d103      	bne.n	8008d22 <xQueueGenericSend+0x182>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d22:	f001 fdb9 	bl	800a898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d26:	1d3a      	adds	r2, r7, #4
 8008d28:	f107 0314 	add.w	r3, r7, #20
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 f8e2 	bl	8009ef8 <xTaskCheckForTimeOut>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d124      	bne.n	8008d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d3c:	f000 fb7b 	bl	8009436 <prvIsQueueFull>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d018      	beq.n	8008d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	3310      	adds	r3, #16
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 f834 	bl	8009dbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d56:	f000 fb06 	bl	8009366 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d5a:	f000 fdc9 	bl	80098f0 <xTaskResumeAll>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f47f af7c 	bne.w	8008c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <xQueueGenericSend+0x1f8>)
 8008d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	e772      	b.n	8008c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7a:	f000 faf4 	bl	8009366 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d7e:	f000 fdb7 	bl	80098f0 <xTaskResumeAll>
 8008d82:	e76c      	b.n	8008c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d86:	f000 faee 	bl	8009366 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d8a:	f000 fdb1 	bl	80098f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3738      	adds	r7, #56	; 0x38
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08e      	sub	sp, #56	; 0x38
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	61fb      	str	r3, [r7, #28]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <xQueueGiveFromISR+0x58>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <xQueueGiveFromISR+0x5c>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <xQueueGiveFromISR+0x5e>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	61bb      	str	r3, [r7, #24]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e14:	f001 fdc2 	bl	800a99c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e18:	f3ef 8211 	mrs	r2, BASEPRI
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	617a      	str	r2, [r7, #20]
 8008e2e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e30:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d22b      	bcs.n	8008e9c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5e:	d112      	bne.n	8008e86 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d016      	beq.n	8008e96 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	3324      	adds	r3, #36	; 0x24
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 ffc9 	bl	8009e04 <xTaskRemoveFromEventList>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00e      	beq.n	8008e96 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2201      	movs	r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e007      	b.n	8008e96 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	b25a      	sxtb	r2, r3
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e96:	2301      	movs	r3, #1
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9a:	e001      	b.n	8008ea0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3738      	adds	r7, #56	; 0x38
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08e      	sub	sp, #56	; 0x38
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	623b      	str	r3, [r7, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	61fb      	str	r3, [r7, #28]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f08:	f001 f998 	bl	800a23c <xTaskGetSchedulerState>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <xQueueSemaphoreTake+0x60>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <xQueueSemaphoreTake+0x64>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <xQueueSemaphoreTake+0x66>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	61bb      	str	r3, [r7, #24]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f38:	f001 fc7e 	bl	800a838 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d024      	beq.n	8008f92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	1e5a      	subs	r2, r3, #1
 8008f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f58:	f001 fb90 	bl	800a67c <pvTaskIncrementMutexHeldCount>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	3310      	adds	r3, #16
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 ff48 	bl	8009e04 <xTaskRemoveFromEventList>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f7a:	4b54      	ldr	r3, [pc, #336]	; (80090cc <xQueueSemaphoreTake+0x214>)
 8008f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f8a:	f001 fc85 	bl	800a898 <vPortExitCritical>
				return pdPASS;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e097      	b.n	80090c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d111      	bne.n	8008fbc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	617b      	str	r3, [r7, #20]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fb4:	f001 fc70 	bl	800a898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e082      	b.n	80090c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fc2:	f107 030c 	add.w	r3, r7, #12
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 ff80 	bl	8009ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fd0:	f001 fc62 	bl	800a898 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fd4:	f000 fc7e 	bl	80098d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fd8:	f001 fc2e 	bl	800a838 <vPortEnterCritical>
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fe2:	b25b      	sxtb	r3, r3
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe8:	d103      	bne.n	8008ff2 <xQueueSemaphoreTake+0x13a>
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ff8:	b25b      	sxtb	r3, r3
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ffe:	d103      	bne.n	8009008 <xQueueSemaphoreTake+0x150>
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009008:	f001 fc46 	bl	800a898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800900c:	463a      	mov	r2, r7
 800900e:	f107 030c 	add.w	r3, r7, #12
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f000 ff6f 	bl	8009ef8 <xTaskCheckForTimeOut>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d132      	bne.n	8009086 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009022:	f000 f9f2 	bl	800940a <prvIsQueueEmpty>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d026      	beq.n	800907a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009034:	f001 fc00 	bl	800a838 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f91b 	bl	800a278 <xTaskPriorityInherit>
 8009042:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009044:	f001 fc28 	bl	800a898 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	3324      	adds	r3, #36	; 0x24
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f000 feb3 	bl	8009dbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009058:	f000 f985 	bl	8009366 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800905c:	f000 fc48 	bl	80098f0 <xTaskResumeAll>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	f47f af68 	bne.w	8008f38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009068:	4b18      	ldr	r3, [pc, #96]	; (80090cc <xQueueSemaphoreTake+0x214>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	e75e      	b.n	8008f38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800907a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907c:	f000 f973 	bl	8009366 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009080:	f000 fc36 	bl	80098f0 <xTaskResumeAll>
 8009084:	e758      	b.n	8008f38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009088:	f000 f96d 	bl	8009366 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800908c:	f000 fc30 	bl	80098f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009092:	f000 f9ba 	bl	800940a <prvIsQueueEmpty>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	f43f af4d 	beq.w	8008f38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00d      	beq.n	80090c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80090a4:	f001 fbc8 	bl	800a838 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090aa:	f000 f8b4 	bl	8009216 <prvGetDisinheritPriorityAfterTimeout>
 80090ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 f9b4 	bl	800a424 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090bc:	f001 fbec 	bl	800a898 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3738      	adds	r7, #56	; 0x38
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	; 0x38
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	623b      	str	r3, [r7, #32]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <xQueueReceiveFromISR+0x3a>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <xQueueReceiveFromISR+0x3e>
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <xQueueReceiveFromISR+0x40>
 800910e:	2300      	movs	r3, #0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	61fb      	str	r3, [r7, #28]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800912a:	f001 fc37 	bl	800a99c <vPortValidateInterruptPriority>
	__asm volatile
 800912e:	f3ef 8211 	mrs	r2, BASEPRI
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	61ba      	str	r2, [r7, #24]
 8009144:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009146:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	2b00      	cmp	r3, #0
 8009154:	d02f      	beq.n	80091b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800915c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009164:	f000 f8d9 	bl	800931a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	1e5a      	subs	r2, r3, #1
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009178:	d112      	bne.n	80091a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d016      	beq.n	80091b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	3310      	adds	r3, #16
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fe3c 	bl	8009e04 <xTaskRemoveFromEventList>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e007      	b.n	80091b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80091a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091a4:	3301      	adds	r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	b25a      	sxtb	r2, r3
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80091b0:	2301      	movs	r3, #1
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
 80091b4:	e001      	b.n	80091ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f383 8811 	msr	BASEPRI, r3
}
 80091c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3738      	adds	r7, #56	; 0x38
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <vQueueDelete+0x28>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	60bb      	str	r3, [r7, #8]
}
 80091f4:	bf00      	nop
 80091f6:	e7fe      	b.n	80091f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f95f 	bl	80094bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f001 fcd3 	bl	800abb4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e001      	b.n	8009238 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009238:	68fb      	ldr	r3, [r7, #12]
	}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b086      	sub	sp, #24
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10d      	bne.n	8009280 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d14d      	bne.n	8009308 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f869 	bl	800a348 <xTaskPriorityDisinherit>
 8009276:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	609a      	str	r2, [r3, #8]
 800927e:	e043      	b.n	8009308 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d119      	bne.n	80092ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6858      	ldr	r0, [r3, #4]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	461a      	mov	r2, r3
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	f001 fdd7 	bl	800ae44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	441a      	add	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d32b      	bcc.n	8009308 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	605a      	str	r2, [r3, #4]
 80092b8:	e026      	b.n	8009308 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68d8      	ldr	r0, [r3, #12]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	461a      	mov	r2, r3
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	f001 fdbd 	bl	800ae44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	425b      	negs	r3, r3
 80092d4:	441a      	add	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d207      	bcs.n	80092f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	425b      	negs	r3, r3
 80092f0:	441a      	add	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d105      	bne.n	8009308 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3b01      	subs	r3, #1
 8009306:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009310:	697b      	ldr	r3, [r7, #20]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009328:	2b00      	cmp	r3, #0
 800932a:	d018      	beq.n	800935e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	d303      	bcc.n	800934e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68d9      	ldr	r1, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	461a      	mov	r2, r3
 8009358:	6838      	ldr	r0, [r7, #0]
 800935a:	f001 fd73 	bl	800ae44 <memcpy>
	}
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800936e:	f001 fa63 	bl	800a838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009378:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800937a:	e011      	b.n	80093a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d012      	beq.n	80093aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3324      	adds	r3, #36	; 0x24
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fd3b 	bl	8009e04 <xTaskRemoveFromEventList>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009394:	f000 fe12 	bl	8009fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	3b01      	subs	r3, #1
 800939c:	b2db      	uxtb	r3, r3
 800939e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dce9      	bgt.n	800937c <prvUnlockQueue+0x16>
 80093a8:	e000      	b.n	80093ac <prvUnlockQueue+0x46>
					break;
 80093aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	22ff      	movs	r2, #255	; 0xff
 80093b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093b4:	f001 fa70 	bl	800a898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093b8:	f001 fa3e 	bl	800a838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093c4:	e011      	b.n	80093ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d012      	beq.n	80093f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3310      	adds	r3, #16
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fd16 	bl	8009e04 <xTaskRemoveFromEventList>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093de:	f000 fded 	bl	8009fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dce9      	bgt.n	80093c6 <prvUnlockQueue+0x60>
 80093f2:	e000      	b.n	80093f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	22ff      	movs	r2, #255	; 0xff
 80093fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093fe:	f001 fa4b 	bl	800a898 <vPortExitCritical>
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009412:	f001 fa11 	bl	800a838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800941e:	2301      	movs	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	e001      	b.n	8009428 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009428:	f001 fa36 	bl	800a898 <vPortExitCritical>

	return xReturn;
 800942c:	68fb      	ldr	r3, [r7, #12]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800943e:	f001 f9fb 	bl	800a838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944a:	429a      	cmp	r2, r3
 800944c:	d102      	bne.n	8009454 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800944e:	2301      	movs	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	e001      	b.n	8009458 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009458:	f001 fa1e 	bl	800a898 <vPortExitCritical>

	return xReturn;
 800945c:	68fb      	ldr	r3, [r7, #12]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e014      	b.n	80094a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009478:	4a0f      	ldr	r2, [pc, #60]	; (80094b8 <vQueueAddToRegistry+0x50>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009484:	490c      	ldr	r1, [pc, #48]	; (80094b8 <vQueueAddToRegistry+0x50>)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800948e:	4a0a      	ldr	r2, [pc, #40]	; (80094b8 <vQueueAddToRegistry+0x50>)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	4413      	add	r3, r2
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800949a:	e006      	b.n	80094aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b07      	cmp	r3, #7
 80094a6:	d9e7      	bls.n	8009478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	2000059c 	.word	0x2000059c

080094bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	e016      	b.n	80094f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094ca:	4a10      	ldr	r2, [pc, #64]	; (800950c <vQueueUnregisterQueue+0x50>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4413      	add	r3, r2
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d10b      	bne.n	80094f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094da:	4a0c      	ldr	r2, [pc, #48]	; (800950c <vQueueUnregisterQueue+0x50>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2100      	movs	r1, #0
 80094e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094e4:	4a09      	ldr	r2, [pc, #36]	; (800950c <vQueueUnregisterQueue+0x50>)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	4413      	add	r3, r2
 80094ec:	2200      	movs	r2, #0
 80094ee:	605a      	str	r2, [r3, #4]
				break;
 80094f0:	e006      	b.n	8009500 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b07      	cmp	r3, #7
 80094fc:	d9e5      	bls.n	80094ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	2000059c 	.word	0x2000059c

08009510 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af04      	add	r7, sp, #16
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	4613      	mov	r3, r2
 800951e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4618      	mov	r0, r3
 8009526:	f001 fa79 	bl	800aa1c <pvPortMalloc>
 800952a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00e      	beq.n	8009550 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009532:	2060      	movs	r0, #96	; 0x60
 8009534:	f001 fa72 	bl	800aa1c <pvPortMalloc>
 8009538:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	631a      	str	r2, [r3, #48]	; 0x30
 8009546:	e005      	b.n	8009554 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009548:	6978      	ldr	r0, [r7, #20]
 800954a:	f001 fb33 	bl	800abb4 <vPortFree>
 800954e:	e001      	b.n	8009554 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d017      	beq.n	800958a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009562:	88fa      	ldrh	r2, [r7, #6]
 8009564:	2300      	movs	r3, #0
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f80e 	bl	800959a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800957e:	69f8      	ldr	r0, [r7, #28]
 8009580:	f000 f89e 	bl	80096c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009584:	2301      	movs	r3, #1
 8009586:	61bb      	str	r3, [r7, #24]
 8009588:	e002      	b.n	8009590 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800958a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800958e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009590:	69bb      	ldr	r3, [r7, #24]
	}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b088      	sub	sp, #32
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
 80095a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	461a      	mov	r2, r3
 80095b2:	21a5      	movs	r1, #165	; 0xa5
 80095b4:	f001 fc54 	bl	800ae60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095c2:	3b01      	subs	r3, #1
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	f023 0307 	bic.w	r3, r3, #7
 80095d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00a      	beq.n	80095f2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	617b      	str	r3, [r7, #20]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01f      	beq.n	8009638 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
 80095fc:	e012      	b.n	8009624 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	4413      	add	r3, r2
 8009604:	7819      	ldrb	r1, [r3, #0]
 8009606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	4413      	add	r3, r2
 800960c:	3334      	adds	r3, #52	; 0x34
 800960e:	460a      	mov	r2, r1
 8009610:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d006      	beq.n	800962c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	3301      	adds	r3, #1
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	2b0f      	cmp	r3, #15
 8009628:	d9e9      	bls.n	80095fe <prvInitialiseNewTask+0x64>
 800962a:	e000      	b.n	800962e <prvInitialiseNewTask+0x94>
			{
				break;
 800962c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009636:	e003      	b.n	8009640 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b37      	cmp	r3, #55	; 0x37
 8009644:	d901      	bls.n	800964a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009646:	2337      	movs	r3, #55	; 0x37
 8009648:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800964e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009654:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	2200      	movs	r2, #0
 800965a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	3304      	adds	r3, #4
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff f860 	bl	8008726 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	3318      	adds	r3, #24
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff f85b 	bl	8008726 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009674:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009684:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	2200      	movs	r2, #0
 800968a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	2200      	movs	r2, #0
 8009690:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	2200      	movs	r2, #0
 8009696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	68f9      	ldr	r1, [r7, #12]
 800969e:	69b8      	ldr	r0, [r7, #24]
 80096a0:	f001 f854 	bl	800a74c <pxPortInitialiseStack>
 80096a4:	4602      	mov	r2, r0
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b6:	bf00      	nop
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096c8:	f001 f8b6 	bl	800a838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096cc:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <prvAddNewTaskToReadyList+0xc4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	4a2c      	ldr	r2, [pc, #176]	; (8009784 <prvAddNewTaskToReadyList+0xc4>)
 80096d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096d6:	4b2c      	ldr	r3, [pc, #176]	; (8009788 <prvAddNewTaskToReadyList+0xc8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d109      	bne.n	80096f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096de:	4a2a      	ldr	r2, [pc, #168]	; (8009788 <prvAddNewTaskToReadyList+0xc8>)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096e4:	4b27      	ldr	r3, [pc, #156]	; (8009784 <prvAddNewTaskToReadyList+0xc4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d110      	bne.n	800970e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096ec:	f000 fc72 	bl	8009fd4 <prvInitialiseTaskLists>
 80096f0:	e00d      	b.n	800970e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096f2:	4b26      	ldr	r3, [pc, #152]	; (800978c <prvAddNewTaskToReadyList+0xcc>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096fa:	4b23      	ldr	r3, [pc, #140]	; (8009788 <prvAddNewTaskToReadyList+0xc8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	429a      	cmp	r2, r3
 8009706:	d802      	bhi.n	800970e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009708:	4a1f      	ldr	r2, [pc, #124]	; (8009788 <prvAddNewTaskToReadyList+0xc8>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800970e:	4b20      	ldr	r3, [pc, #128]	; (8009790 <prvAddNewTaskToReadyList+0xd0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3301      	adds	r3, #1
 8009714:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <prvAddNewTaskToReadyList+0xd0>)
 8009716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009718:	4b1d      	ldr	r3, [pc, #116]	; (8009790 <prvAddNewTaskToReadyList+0xd0>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	4b1b      	ldr	r3, [pc, #108]	; (8009794 <prvAddNewTaskToReadyList+0xd4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	429a      	cmp	r2, r3
 800972a:	d903      	bls.n	8009734 <prvAddNewTaskToReadyList+0x74>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4a18      	ldr	r2, [pc, #96]	; (8009794 <prvAddNewTaskToReadyList+0xd4>)
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4a15      	ldr	r2, [pc, #84]	; (8009798 <prvAddNewTaskToReadyList+0xd8>)
 8009742:	441a      	add	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fe fff8 	bl	8008740 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009750:	f001 f8a2 	bl	800a898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009754:	4b0d      	ldr	r3, [pc, #52]	; (800978c <prvAddNewTaskToReadyList+0xcc>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00e      	beq.n	800977a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <prvAddNewTaskToReadyList+0xc8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	429a      	cmp	r2, r3
 8009768:	d207      	bcs.n	800977a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800976a:	4b0c      	ldr	r3, [pc, #48]	; (800979c <prvAddNewTaskToReadyList+0xdc>)
 800976c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000aac 	.word	0x20000aac
 8009788:	200005dc 	.word	0x200005dc
 800978c:	20000ab8 	.word	0x20000ab8
 8009790:	20000ac8 	.word	0x20000ac8
 8009794:	20000ab4 	.word	0x20000ab4
 8009798:	200005e0 	.word	0x200005e0
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d017      	beq.n	80097e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097b2:	4b13      	ldr	r3, [pc, #76]	; (8009800 <vTaskDelay+0x60>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <vTaskDelay+0x30>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	60bb      	str	r3, [r7, #8]
}
 80097cc:	bf00      	nop
 80097ce:	e7fe      	b.n	80097ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097d0:	f000 f880 	bl	80098d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097d4:	2100      	movs	r1, #0
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 ff64 	bl	800a6a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097dc:	f000 f888 	bl	80098f0 <xTaskResumeAll>
 80097e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d107      	bne.n	80097f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80097e8:	4b06      	ldr	r3, [pc, #24]	; (8009804 <vTaskDelay+0x64>)
 80097ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097f8:	bf00      	nop
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000ad0 	.word	0x20000ad0
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <eTaskGetState+0x28>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	60bb      	str	r3, [r7, #8]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009830:	4b23      	ldr	r3, [pc, #140]	; (80098c0 <eTaskGetState+0xb8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	429a      	cmp	r2, r3
 8009838:	d102      	bne.n	8009840 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800983a:	2300      	movs	r3, #0
 800983c:	77fb      	strb	r3, [r7, #31]
 800983e:	e03a      	b.n	80098b6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009840:	f000 fffa 	bl	800a838 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800984a:	4b1e      	ldr	r3, [pc, #120]	; (80098c4 <eTaskGetState+0xbc>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009850:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <eTaskGetState+0xc0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009856:	f001 f81f 	bl	800a898 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	429a      	cmp	r2, r3
 8009860:	d003      	beq.n	800986a <eTaskGetState+0x62>
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	429a      	cmp	r2, r3
 8009868:	d102      	bne.n	8009870 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800986a:	2302      	movs	r3, #2
 800986c:	77fb      	strb	r3, [r7, #31]
 800986e:	e022      	b.n	80098b6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4a16      	ldr	r2, [pc, #88]	; (80098cc <eTaskGetState+0xc4>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d112      	bne.n	800989e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10b      	bne.n	8009898 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b01      	cmp	r3, #1
 800988a:	d102      	bne.n	8009892 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800988c:	2302      	movs	r3, #2
 800988e:	77fb      	strb	r3, [r7, #31]
 8009890:	e011      	b.n	80098b6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009892:	2303      	movs	r3, #3
 8009894:	77fb      	strb	r3, [r7, #31]
 8009896:	e00e      	b.n	80098b6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009898:	2302      	movs	r3, #2
 800989a:	77fb      	strb	r3, [r7, #31]
 800989c:	e00b      	b.n	80098b6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4a0b      	ldr	r2, [pc, #44]	; (80098d0 <eTaskGetState+0xc8>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d002      	beq.n	80098ac <eTaskGetState+0xa4>
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80098ac:	2304      	movs	r3, #4
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e001      	b.n	80098b6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80098b2:	2301      	movs	r3, #1
 80098b4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80098b6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80098b8:	4618      	mov	r0, r3
 80098ba:	3720      	adds	r7, #32
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	200005dc 	.word	0x200005dc
 80098c4:	20000a68 	.word	0x20000a68
 80098c8:	20000a6c 	.word	0x20000a6c
 80098cc:	20000a98 	.word	0x20000a98
 80098d0:	20000a84 	.word	0x20000a84

080098d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098d4:	b480      	push	{r7}
 80098d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <vTaskSuspendAll+0x18>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3301      	adds	r3, #1
 80098de:	4a03      	ldr	r2, [pc, #12]	; (80098ec <vTaskSuspendAll+0x18>)
 80098e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098e2:	bf00      	nop
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	20000ad0 	.word	0x20000ad0

080098f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80098fe:	4b42      	ldr	r3, [pc, #264]	; (8009a08 <xTaskResumeAll+0x118>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <xTaskResumeAll+0x2c>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	603b      	str	r3, [r7, #0]
}
 8009918:	bf00      	nop
 800991a:	e7fe      	b.n	800991a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800991c:	f000 ff8c 	bl	800a838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009920:	4b39      	ldr	r3, [pc, #228]	; (8009a08 <xTaskResumeAll+0x118>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3b01      	subs	r3, #1
 8009926:	4a38      	ldr	r2, [pc, #224]	; (8009a08 <xTaskResumeAll+0x118>)
 8009928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800992a:	4b37      	ldr	r3, [pc, #220]	; (8009a08 <xTaskResumeAll+0x118>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d162      	bne.n	80099f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009932:	4b36      	ldr	r3, [pc, #216]	; (8009a0c <xTaskResumeAll+0x11c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d05e      	beq.n	80099f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800993a:	e02f      	b.n	800999c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993c:	4b34      	ldr	r3, [pc, #208]	; (8009a10 <xTaskResumeAll+0x120>)
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3318      	adds	r3, #24
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe ff56 	bl	80087fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3304      	adds	r3, #4
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe ff51 	bl	80087fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995c:	4b2d      	ldr	r3, [pc, #180]	; (8009a14 <xTaskResumeAll+0x124>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d903      	bls.n	800996c <xTaskResumeAll+0x7c>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4a2a      	ldr	r2, [pc, #168]	; (8009a14 <xTaskResumeAll+0x124>)
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4a27      	ldr	r2, [pc, #156]	; (8009a18 <xTaskResumeAll+0x128>)
 800997a:	441a      	add	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3304      	adds	r3, #4
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7fe fedc 	bl	8008740 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998c:	4b23      	ldr	r3, [pc, #140]	; (8009a1c <xTaskResumeAll+0x12c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	429a      	cmp	r2, r3
 8009994:	d302      	bcc.n	800999c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009996:	4b22      	ldr	r3, [pc, #136]	; (8009a20 <xTaskResumeAll+0x130>)
 8009998:	2201      	movs	r2, #1
 800999a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800999c:	4b1c      	ldr	r3, [pc, #112]	; (8009a10 <xTaskResumeAll+0x120>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1cb      	bne.n	800993c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099aa:	f000 fc27 	bl	800a1fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099ae:	4b1d      	ldr	r3, [pc, #116]	; (8009a24 <xTaskResumeAll+0x134>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099ba:	f000 f8c9 	bl	8009b50 <xTaskIncrementTick>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80099c4:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <xTaskResumeAll+0x130>)
 80099c6:	2201      	movs	r2, #1
 80099c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1f1      	bne.n	80099ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80099d6:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <xTaskResumeAll+0x134>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099dc:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <xTaskResumeAll+0x130>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099e4:	2301      	movs	r3, #1
 80099e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099e8:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <xTaskResumeAll+0x138>)
 80099ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099f8:	f000 ff4e 	bl	800a898 <vPortExitCritical>

	return xAlreadyYielded;
 80099fc:	68bb      	ldr	r3, [r7, #8]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000ad0 	.word	0x20000ad0
 8009a0c:	20000aac 	.word	0x20000aac
 8009a10:	20000a70 	.word	0x20000a70
 8009a14:	20000ab4 	.word	0x20000ab4
 8009a18:	200005e0 	.word	0x200005e0
 8009a1c:	200005dc 	.word	0x200005dc
 8009a20:	20000ac0 	.word	0x20000ac0
 8009a24:	20000abc 	.word	0x20000abc
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	2338      	movs	r3, #56	; 0x38
 8009a3e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009a40:	f7ff ff48 	bl	80098d4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009a44:	4b3b      	ldr	r3, [pc, #236]	; (8009b34 <uxTaskGetSystemState+0x108>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d36a      	bcc.n	8009b24 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	4613      	mov	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1898      	adds	r0, r3, r2
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4a32      	ldr	r2, [pc, #200]	; (8009b38 <uxTaskGetSystemState+0x10c>)
 8009a70:	4413      	add	r3, r2
 8009a72:	2201      	movs	r2, #1
 8009a74:	4619      	mov	r1, r3
 8009a76:	f000 fb53 	bl	800a120 <prvListTasksWithinSingleList>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	4413      	add	r3, r2
 8009a80:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e2      	bne.n	8009a4e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	461a      	mov	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4413      	add	r3, r2
 8009a98:	4a28      	ldr	r2, [pc, #160]	; (8009b3c <uxTaskGetSystemState+0x110>)
 8009a9a:	6811      	ldr	r1, [r2, #0]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fb3e 	bl	800a120 <prvListTasksWithinSingleList>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4413      	add	r3, r2
 8009abc:	4a20      	ldr	r2, [pc, #128]	; (8009b40 <uxTaskGetSystemState+0x114>)
 8009abe:	6811      	ldr	r1, [r2, #0]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fb2c 	bl	800a120 <prvListTasksWithinSingleList>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	461a      	mov	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	2204      	movs	r2, #4
 8009ae2:	4918      	ldr	r1, [pc, #96]	; (8009b44 <uxTaskGetSystemState+0x118>)
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fb1b 	bl	800a120 <prvListTasksWithinSingleList>
 8009aea:	4602      	mov	r2, r0
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	4413      	add	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4613      	mov	r3, r2
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	461a      	mov	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	2203      	movs	r2, #3
 8009b04:	4910      	ldr	r1, [pc, #64]	; (8009b48 <uxTaskGetSystemState+0x11c>)
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fb0a 	bl	800a120 <prvListTasksWithinSingleList>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4413      	add	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d004      	beq.n	8009b24 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <uxTaskGetSystemState+0x120>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8009b24:	f7ff fee4 	bl	80098f0 <xTaskResumeAll>

		return uxTask;
 8009b28:	697b      	ldr	r3, [r7, #20]
	}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000aac 	.word	0x20000aac
 8009b38:	200005e0 	.word	0x200005e0
 8009b3c:	20000a68 	.word	0x20000a68
 8009b40:	20000a6c 	.word	0x20000a6c
 8009b44:	20000a84 	.word	0x20000a84
 8009b48:	20000a98 	.word	0x20000a98
 8009b4c:	2000011c 	.word	0x2000011c

08009b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b56:	2300      	movs	r3, #0
 8009b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b5a:	4b4f      	ldr	r3, [pc, #316]	; (8009c98 <xTaskIncrementTick+0x148>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 808f 	bne.w	8009c82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b64:	4b4d      	ldr	r3, [pc, #308]	; (8009c9c <xTaskIncrementTick+0x14c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b6c:	4a4b      	ldr	r2, [pc, #300]	; (8009c9c <xTaskIncrementTick+0x14c>)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d120      	bne.n	8009bba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b78:	4b49      	ldr	r3, [pc, #292]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	603b      	str	r3, [r7, #0]
}
 8009b94:	bf00      	nop
 8009b96:	e7fe      	b.n	8009b96 <xTaskIncrementTick+0x46>
 8009b98:	4b41      	ldr	r3, [pc, #260]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	60fb      	str	r3, [r7, #12]
 8009b9e:	4b41      	ldr	r3, [pc, #260]	; (8009ca4 <xTaskIncrementTick+0x154>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3f      	ldr	r2, [pc, #252]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	4a3f      	ldr	r2, [pc, #252]	; (8009ca4 <xTaskIncrementTick+0x154>)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	4b3e      	ldr	r3, [pc, #248]	; (8009ca8 <xTaskIncrementTick+0x158>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	4a3d      	ldr	r2, [pc, #244]	; (8009ca8 <xTaskIncrementTick+0x158>)
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	f000 fb21 	bl	800a1fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bba:	4b3c      	ldr	r3, [pc, #240]	; (8009cac <xTaskIncrementTick+0x15c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d349      	bcc.n	8009c58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bc4:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d104      	bne.n	8009bd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bce:	4b37      	ldr	r3, [pc, #220]	; (8009cac <xTaskIncrementTick+0x15c>)
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd4:	601a      	str	r2, [r3, #0]
					break;
 8009bd6:	e03f      	b.n	8009c58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd8:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d203      	bcs.n	8009bf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bf0:	4a2e      	ldr	r2, [pc, #184]	; (8009cac <xTaskIncrementTick+0x15c>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bf6:	e02f      	b.n	8009c58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fdfc 	bl	80087fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	3318      	adds	r3, #24
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fdf3 	bl	80087fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4b25      	ldr	r3, [pc, #148]	; (8009cb0 <xTaskIncrementTick+0x160>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d903      	bls.n	8009c28 <xTaskIncrementTick+0xd8>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	4a22      	ldr	r2, [pc, #136]	; (8009cb0 <xTaskIncrementTick+0x160>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4a1f      	ldr	r2, [pc, #124]	; (8009cb4 <xTaskIncrementTick+0x164>)
 8009c36:	441a      	add	r2, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f7fe fd7e 	bl	8008740 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c48:	4b1b      	ldr	r3, [pc, #108]	; (8009cb8 <xTaskIncrementTick+0x168>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d3b8      	bcc.n	8009bc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c52:	2301      	movs	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c56:	e7b5      	b.n	8009bc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <xTaskIncrementTick+0x168>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5e:	4915      	ldr	r1, [pc, #84]	; (8009cb4 <xTaskIncrementTick+0x164>)
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d901      	bls.n	8009c74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c74:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <xTaskIncrementTick+0x16c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d007      	beq.n	8009c8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	617b      	str	r3, [r7, #20]
 8009c80:	e004      	b.n	8009c8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c82:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <xTaskIncrementTick+0x170>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3301      	adds	r3, #1
 8009c88:	4a0d      	ldr	r2, [pc, #52]	; (8009cc0 <xTaskIncrementTick+0x170>)
 8009c8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c8c:	697b      	ldr	r3, [r7, #20]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20000ad0 	.word	0x20000ad0
 8009c9c:	20000ab0 	.word	0x20000ab0
 8009ca0:	20000a68 	.word	0x20000a68
 8009ca4:	20000a6c 	.word	0x20000a6c
 8009ca8:	20000ac4 	.word	0x20000ac4
 8009cac:	20000acc 	.word	0x20000acc
 8009cb0:	20000ab4 	.word	0x20000ab4
 8009cb4:	200005e0 	.word	0x200005e0
 8009cb8:	200005dc 	.word	0x200005dc
 8009cbc:	20000ac0 	.word	0x20000ac0
 8009cc0:	20000abc 	.word	0x20000abc

08009cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cca:	4b34      	ldr	r3, [pc, #208]	; (8009d9c <vTaskSwitchContext+0xd8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cd2:	4b33      	ldr	r3, [pc, #204]	; (8009da0 <vTaskSwitchContext+0xdc>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cd8:	e05a      	b.n	8009d90 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8009cda:	4b31      	ldr	r3, [pc, #196]	; (8009da0 <vTaskSwitchContext+0xdc>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009ce0:	4b30      	ldr	r3, [pc, #192]	; (8009da4 <vTaskSwitchContext+0xe0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	4a30      	ldr	r2, [pc, #192]	; (8009da8 <vTaskSwitchContext+0xe4>)
 8009ce8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009cea:	4b2f      	ldr	r3, [pc, #188]	; (8009da8 <vTaskSwitchContext+0xe4>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b2f      	ldr	r3, [pc, #188]	; (8009dac <vTaskSwitchContext+0xe8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d909      	bls.n	8009d0a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009cf6:	4b2e      	ldr	r3, [pc, #184]	; (8009db0 <vTaskSwitchContext+0xec>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cfc:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <vTaskSwitchContext+0xe4>)
 8009cfe:	6810      	ldr	r0, [r2, #0]
 8009d00:	4a2a      	ldr	r2, [pc, #168]	; (8009dac <vTaskSwitchContext+0xe8>)
 8009d02:	6812      	ldr	r2, [r2, #0]
 8009d04:	1a82      	subs	r2, r0, r2
 8009d06:	440a      	add	r2, r1
 8009d08:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d0a:	4b27      	ldr	r3, [pc, #156]	; (8009da8 <vTaskSwitchContext+0xe4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a27      	ldr	r2, [pc, #156]	; (8009dac <vTaskSwitchContext+0xe8>)
 8009d10:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d12:	4b28      	ldr	r3, [pc, #160]	; (8009db4 <vTaskSwitchContext+0xf0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	e010      	b.n	8009d3c <vTaskSwitchContext+0x78>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <vTaskSwitchContext+0x72>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	607b      	str	r3, [r7, #4]
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <vTaskSwitchContext+0x70>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	491e      	ldr	r1, [pc, #120]	; (8009db8 <vTaskSwitchContext+0xf4>)
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0e4      	beq.n	8009d1a <vTaskSwitchContext+0x56>
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4613      	mov	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <vTaskSwitchContext+0xf4>)
 8009d5c:	4413      	add	r3, r2
 8009d5e:	60bb      	str	r3, [r7, #8]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	3308      	adds	r3, #8
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d104      	bne.n	8009d80 <vTaskSwitchContext+0xbc>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	605a      	str	r2, [r3, #4]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4a0a      	ldr	r2, [pc, #40]	; (8009db0 <vTaskSwitchContext+0xec>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	4a0a      	ldr	r2, [pc, #40]	; (8009db4 <vTaskSwitchContext+0xf0>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6013      	str	r3, [r2, #0]
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	20000ad0 	.word	0x20000ad0
 8009da0:	20000ac0 	.word	0x20000ac0
 8009da4:	2000011c 	.word	0x2000011c
 8009da8:	20000ad8 	.word	0x20000ad8
 8009dac:	20000ad4 	.word	0x20000ad4
 8009db0:	200005dc 	.word	0x200005dc
 8009db4:	20000ab4 	.word	0x20000ab4
 8009db8:	200005e0 	.word	0x200005e0

08009dbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	60fb      	str	r3, [r7, #12]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009de2:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <vTaskPlaceOnEventList+0x44>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3318      	adds	r3, #24
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7fe fccc 	bl	8008788 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009df0:	2101      	movs	r1, #1
 8009df2:	6838      	ldr	r0, [r7, #0]
 8009df4:	f000 fc56 	bl	800a6a4 <prvAddCurrentTaskToDelayedList>
}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200005dc 	.word	0x200005dc

08009e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	60fb      	str	r3, [r7, #12]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	3318      	adds	r3, #24
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe fce0 	bl	80087fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e3a:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <xTaskRemoveFromEventList+0xb0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d11d      	bne.n	8009e7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fcd7 	bl	80087fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e50:	4b19      	ldr	r3, [pc, #100]	; (8009eb8 <xTaskRemoveFromEventList+0xb4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d903      	bls.n	8009e60 <xTaskRemoveFromEventList+0x5c>
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	4a16      	ldr	r2, [pc, #88]	; (8009eb8 <xTaskRemoveFromEventList+0xb4>)
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4a13      	ldr	r2, [pc, #76]	; (8009ebc <xTaskRemoveFromEventList+0xb8>)
 8009e6e:	441a      	add	r2, r3
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f7fe fc62 	bl	8008740 <vListInsertEnd>
 8009e7c:	e005      	b.n	8009e8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	3318      	adds	r3, #24
 8009e82:	4619      	mov	r1, r3
 8009e84:	480e      	ldr	r0, [pc, #56]	; (8009ec0 <xTaskRemoveFromEventList+0xbc>)
 8009e86:	f7fe fc5b 	bl	8008740 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <xTaskRemoveFromEventList+0xc0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d905      	bls.n	8009ea4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <xTaskRemoveFromEventList+0xc4>)
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	e001      	b.n	8009ea8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ea8:	697b      	ldr	r3, [r7, #20]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000ad0 	.word	0x20000ad0
 8009eb8:	20000ab4 	.word	0x20000ab4
 8009ebc:	200005e0 	.word	0x200005e0
 8009ec0:	20000a70 	.word	0x20000a70
 8009ec4:	200005dc 	.word	0x200005dc
 8009ec8:	20000ac0 	.word	0x20000ac0

08009ecc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ed4:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <vTaskInternalSetTimeOutState+0x24>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009edc:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <vTaskInternalSetTimeOutState+0x28>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	605a      	str	r2, [r3, #4]
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	20000ac4 	.word	0x20000ac4
 8009ef4:	20000ab0 	.word	0x20000ab0

08009ef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	613b      	str	r3, [r7, #16]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	60fb      	str	r3, [r7, #12]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f3a:	f000 fc7d 	bl	800a838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f3e:	4b1d      	ldr	r3, [pc, #116]	; (8009fb4 <xTaskCheckForTimeOut+0xbc>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f56:	d102      	bne.n	8009f5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	e023      	b.n	8009fa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <xTaskCheckForTimeOut+0xc0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d007      	beq.n	8009f7a <xTaskCheckForTimeOut+0x82>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	69ba      	ldr	r2, [r7, #24]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d302      	bcc.n	8009f7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f74:	2301      	movs	r3, #1
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	e015      	b.n	8009fa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d20b      	bcs.n	8009f9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	1ad2      	subs	r2, r2, r3
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff9b 	bl	8009ecc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e004      	b.n	8009fa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fa6:	f000 fc77 	bl	800a898 <vPortExitCritical>

	return xReturn;
 8009faa:	69fb      	ldr	r3, [r7, #28]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3720      	adds	r7, #32
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20000ab0 	.word	0x20000ab0
 8009fb8:	20000ac4 	.word	0x20000ac4

08009fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fc0:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <vTaskMissedYield+0x14>)
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000ac0 	.word	0x20000ac0

08009fd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fda:	2300      	movs	r3, #0
 8009fdc:	607b      	str	r3, [r7, #4]
 8009fde:	e00c      	b.n	8009ffa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4a12      	ldr	r2, [pc, #72]	; (800a034 <prvInitialiseTaskLists+0x60>)
 8009fec:	4413      	add	r3, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fb79 	bl	80086e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	607b      	str	r3, [r7, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b37      	cmp	r3, #55	; 0x37
 8009ffe:	d9ef      	bls.n	8009fe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a000:	480d      	ldr	r0, [pc, #52]	; (800a038 <prvInitialiseTaskLists+0x64>)
 800a002:	f7fe fb70 	bl	80086e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a006:	480d      	ldr	r0, [pc, #52]	; (800a03c <prvInitialiseTaskLists+0x68>)
 800a008:	f7fe fb6d 	bl	80086e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a00c:	480c      	ldr	r0, [pc, #48]	; (800a040 <prvInitialiseTaskLists+0x6c>)
 800a00e:	f7fe fb6a 	bl	80086e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a012:	480c      	ldr	r0, [pc, #48]	; (800a044 <prvInitialiseTaskLists+0x70>)
 800a014:	f7fe fb67 	bl	80086e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a018:	480b      	ldr	r0, [pc, #44]	; (800a048 <prvInitialiseTaskLists+0x74>)
 800a01a:	f7fe fb64 	bl	80086e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <prvInitialiseTaskLists+0x78>)
 800a020:	4a05      	ldr	r2, [pc, #20]	; (800a038 <prvInitialiseTaskLists+0x64>)
 800a022:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a024:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <prvInitialiseTaskLists+0x7c>)
 800a026:	4a05      	ldr	r2, [pc, #20]	; (800a03c <prvInitialiseTaskLists+0x68>)
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	200005e0 	.word	0x200005e0
 800a038:	20000a40 	.word	0x20000a40
 800a03c:	20000a54 	.word	0x20000a54
 800a040:	20000a70 	.word	0x20000a70
 800a044:	20000a84 	.word	0x20000a84
 800a048:	20000a98 	.word	0x20000a98
 800a04c:	20000a68 	.word	0x20000a68
 800a050:	20000a6c 	.word	0x20000a6c

0800a054 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <vTaskGetInfo+0x1a>
 800a068:	4b2c      	ldr	r3, [pc, #176]	; (800a11c <vTaskGetInfo+0xc8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	e000      	b.n	800a070 <vTaskGetInfo+0x1c>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	2b05      	cmp	r3, #5
 800a0ae:	d01a      	beq.n	800a0e6 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800a0b0:	4b1a      	ldr	r3, [pc, #104]	; (800a11c <vTaskGetInfo+0xc8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d103      	bne.n	800a0c2 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	731a      	strb	r2, [r3, #12]
 800a0c0:	e018      	b.n	800a0f4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d112      	bne.n	800a0f4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800a0ce:	f7ff fc01 	bl	80098d4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a0e0:	f7ff fc06 	bl	80098f0 <xTaskResumeAll>
 800a0e4:	e006      	b.n	800a0f4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a0e6:	6978      	ldr	r0, [r7, #20]
 800a0e8:	f7ff fb8e 	bl	8009808 <eTaskGetState>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d009      	beq.n	800a10e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 f860 	bl	800a1c4 <prvTaskCheckFreeStackSpace>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a10c:	e002      	b.n	800a114 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2200      	movs	r2, #0
 800a112:	841a      	strh	r2, [r3, #32]
	}
 800a114:	bf00      	nop
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200005dc 	.word	0x200005dc

0800a120 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08a      	sub	sp, #40	; 0x28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d03f      	beq.n	800a1ba <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	623b      	str	r3, [r7, #32]
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	3308      	adds	r3, #8
 800a150:	429a      	cmp	r2, r3
 800a152:	d104      	bne.n	800a15e <prvListTasksWithinSingleList+0x3e>
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	61bb      	str	r3, [r7, #24]
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	605a      	str	r2, [r3, #4]
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	3308      	adds	r3, #8
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d104      	bne.n	800a18a <prvListTasksWithinSingleList+0x6a>
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	605a      	str	r2, [r3, #4]
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a194:	4613      	mov	r3, r2
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	461a      	mov	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1899      	adds	r1, r3, r2
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	6978      	ldr	r0, [r7, #20]
 800a1a8:	f7ff ff54 	bl	800a054 <vTaskGetInfo>
				uxTask++;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d1d5      	bne.n	800a166 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3728      	adds	r7, #40	; 0x28
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a1d0:	e005      	b.n	800a1de <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	2ba5      	cmp	r3, #165	; 0xa5
 800a1e4:	d0f5      	beq.n	800a1d2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	089b      	lsrs	r3, r3, #2
 800a1ea:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	b29b      	uxth	r3, r3
	}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a202:	4b0c      	ldr	r3, [pc, #48]	; (800a234 <prvResetNextTaskUnblockTime+0x38>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <prvResetNextTaskUnblockTime+0x3c>)
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a214:	e008      	b.n	800a228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a216:	4b07      	ldr	r3, [pc, #28]	; (800a234 <prvResetNextTaskUnblockTime+0x38>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	4a04      	ldr	r2, [pc, #16]	; (800a238 <prvResetNextTaskUnblockTime+0x3c>)
 800a226:	6013      	str	r3, [r2, #0]
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	20000a68 	.word	0x20000a68
 800a238:	20000acc 	.word	0x20000acc

0800a23c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <xTaskGetSchedulerState+0x34>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a24a:	2301      	movs	r3, #1
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	e008      	b.n	800a262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a250:	4b08      	ldr	r3, [pc, #32]	; (800a274 <xTaskGetSchedulerState+0x38>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a258:	2302      	movs	r3, #2
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	e001      	b.n	800a262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a25e:	2300      	movs	r3, #0
 800a260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a262:	687b      	ldr	r3, [r7, #4]
	}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	20000ab8 	.word	0x20000ab8
 800a274:	20000ad0 	.word	0x20000ad0

0800a278 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d051      	beq.n	800a332 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a292:	4b2a      	ldr	r3, [pc, #168]	; (800a33c <xTaskPriorityInherit+0xc4>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	429a      	cmp	r2, r3
 800a29a:	d241      	bcs.n	800a320 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	db06      	blt.n	800a2b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a4:	4b25      	ldr	r3, [pc, #148]	; (800a33c <xTaskPriorityInherit+0xc4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6959      	ldr	r1, [r3, #20]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <xTaskPriorityInherit+0xc8>)
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4299      	cmp	r1, r3
 800a2c8:	d122      	bne.n	800a310 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fa93 	bl	80087fa <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2d4:	4b19      	ldr	r3, [pc, #100]	; (800a33c <xTaskPriorityInherit+0xc4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e2:	4b18      	ldr	r3, [pc, #96]	; (800a344 <xTaskPriorityInherit+0xcc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d903      	bls.n	800a2f2 <xTaskPriorityInherit+0x7a>
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	4a15      	ldr	r2, [pc, #84]	; (800a344 <xTaskPriorityInherit+0xcc>)
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4a10      	ldr	r2, [pc, #64]	; (800a340 <xTaskPriorityInherit+0xc8>)
 800a300:	441a      	add	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	3304      	adds	r3, #4
 800a306:	4619      	mov	r1, r3
 800a308:	4610      	mov	r0, r2
 800a30a:	f7fe fa19 	bl	8008740 <vListInsertEnd>
 800a30e:	e004      	b.n	800a31a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a310:	4b0a      	ldr	r3, [pc, #40]	; (800a33c <xTaskPriorityInherit+0xc4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a31a:	2301      	movs	r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	e008      	b.n	800a332 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <xTaskPriorityInherit+0xc4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d201      	bcs.n	800a332 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a32e:	2301      	movs	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a332:	68fb      	ldr	r3, [r7, #12]
	}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200005dc 	.word	0x200005dc
 800a340:	200005e0 	.word	0x200005e0
 800a344:	20000ab4 	.word	0x20000ab4

0800a348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a354:	2300      	movs	r3, #0
 800a356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d056      	beq.n	800a40c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a35e:	4b2e      	ldr	r3, [pc, #184]	; (800a418 <xTaskPriorityDisinherit+0xd0>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	429a      	cmp	r2, r3
 800a366:	d00a      	beq.n	800a37e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	60fb      	str	r3, [r7, #12]
}
 800a37a:	bf00      	nop
 800a37c:	e7fe      	b.n	800a37c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	60bb      	str	r3, [r7, #8]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a0:	1e5a      	subs	r2, r3, #1
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d02c      	beq.n	800a40c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d128      	bne.n	800a40c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fa1b 	bl	80087fa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <xTaskPriorityDisinherit+0xd4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d903      	bls.n	800a3ec <xTaskPriorityDisinherit+0xa4>
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	4a0c      	ldr	r2, [pc, #48]	; (800a41c <xTaskPriorityDisinherit+0xd4>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <xTaskPriorityDisinherit+0xd8>)
 800a3fa:	441a      	add	r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f7fe f99c 	bl	8008740 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a40c:	697b      	ldr	r3, [r7, #20]
	}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	200005dc 	.word	0x200005dc
 800a41c:	20000ab4 	.word	0x20000ab4
 800a420:	200005e0 	.word	0x200005e0

0800a424 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a432:	2301      	movs	r3, #1
 800a434:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d06a      	beq.n	800a512 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	60fb      	str	r3, [r7, #12]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d902      	bls.n	800a46a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	e002      	b.n	800a470 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a474:	69fa      	ldr	r2, [r7, #28]
 800a476:	429a      	cmp	r2, r3
 800a478:	d04b      	beq.n	800a512 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	429a      	cmp	r2, r3
 800a482:	d146      	bne.n	800a512 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a484:	4b25      	ldr	r3, [pc, #148]	; (800a51c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d10a      	bne.n	800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	60bb      	str	r3, [r7, #8]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	69fa      	ldr	r2, [r7, #28]
 800a4ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	db04      	blt.n	800a4c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	6959      	ldr	r1, [r3, #20]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4a13      	ldr	r2, [pc, #76]	; (800a520 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4d2:	4413      	add	r3, r2
 800a4d4:	4299      	cmp	r1, r3
 800a4d6:	d11c      	bne.n	800a512 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe f98c 	bl	80087fa <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d903      	bls.n	800a4f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	4a0c      	ldr	r2, [pc, #48]	; (800a524 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4a07      	ldr	r2, [pc, #28]	; (800a520 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a504:	441a      	add	r2, r3
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	3304      	adds	r3, #4
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	f7fe f917 	bl	8008740 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a512:	bf00      	nop
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	200005dc 	.word	0x200005dc
 800a520:	200005e0 	.word	0x200005e0
 800a524:	20000ab4 	.word	0x20000ab4

0800a528 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fe25 	bl	800b184 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7f5 fe68 	bl	8000210 <strlen>
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	e007      	b.n	800a554 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4413      	add	r3, r2
 800a54a:	2220      	movs	r2, #32
 800a54c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3301      	adds	r3, #1
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b0e      	cmp	r3, #14
 800a558:	d9f4      	bls.n	800a544 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4413      	add	r3, r2
	}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800a582:	4b3a      	ldr	r3, [pc, #232]	; (800a66c <vTaskGetRunTimeStats+0xf8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a588:	4b38      	ldr	r3, [pc, #224]	; (800a66c <vTaskGetRunTimeStats+0xf8>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fa41 	bl	800aa1c <pvPortMalloc>
 800a59a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d05f      	beq.n	800a662 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800a5a2:	f107 030c 	add.w	r3, r7, #12
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	69b9      	ldr	r1, [r7, #24]
 800a5aa:	6978      	ldr	r0, [r7, #20]
 800a5ac:	f7ff fa3e 	bl	8009a2c <uxTaskGetSystemState>
 800a5b0:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4a2e      	ldr	r2, [pc, #184]	; (800a670 <vTaskGetRunTimeStats+0xfc>)
 800a5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d04b      	beq.n	800a65c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	61fb      	str	r3, [r7, #28]
 800a5c8:	e044      	b.n	800a654 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	4413      	add	r3, r2
 800a5da:	699a      	ldr	r2, [r3, #24]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	4413      	add	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff ff95 	bl	800a528 <prvWriteNameToBuffer>
 800a5fe:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00e      	beq.n	800a624 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	4613      	mov	r3, r2
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	461a      	mov	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	4413      	add	r3, r2
 800a616:	699a      	ldr	r2, [r3, #24]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	4916      	ldr	r1, [pc, #88]	; (800a674 <vTaskGetRunTimeStats+0x100>)
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fd91 	bl	800b144 <siprintf>
 800a622:	e00d      	b.n	800a640 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	4613      	mov	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	461a      	mov	r2, r3
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	4413      	add	r3, r2
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	461a      	mov	r2, r3
 800a638:	490f      	ldr	r1, [pc, #60]	; (800a678 <vTaskGetRunTimeStats+0x104>)
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fd82 	bl	800b144 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7f5 fde5 	bl	8000210 <strlen>
 800a646:	4602      	mov	r2, r0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4413      	add	r3, r2
 800a64c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	3301      	adds	r3, #1
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	69fa      	ldr	r2, [r7, #28]
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d3b6      	bcc.n	800a5ca <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800a65c:	6978      	ldr	r0, [r7, #20]
 800a65e:	f000 faa9 	bl	800abb4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a662:	bf00      	nop
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000aac 	.word	0x20000aac
 800a670:	51eb851f 	.word	0x51eb851f
 800a674:	0800c7ec 	.word	0x0800c7ec
 800a678:	0800c7f8 	.word	0x0800c7f8

0800a67c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a67c:	b480      	push	{r7}
 800a67e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a68e:	3201      	adds	r2, #1
 800a690:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a692:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a694:	681b      	ldr	r3, [r3, #0]
	}
 800a696:	4618      	mov	r0, r3
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	200005dc 	.word	0x200005dc

0800a6a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6ae:	4b21      	ldr	r3, [pc, #132]	; (800a734 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6b4:	4b20      	ldr	r3, [pc, #128]	; (800a738 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe f89d 	bl	80087fa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c6:	d10a      	bne.n	800a6de <prvAddCurrentTaskToDelayedList+0x3a>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6ce:	4b1a      	ldr	r3, [pc, #104]	; (800a738 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4819      	ldr	r0, [pc, #100]	; (800a73c <prvAddCurrentTaskToDelayedList+0x98>)
 800a6d8:	f7fe f832 	bl	8008740 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6dc:	e026      	b.n	800a72c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6e6:	4b14      	ldr	r3, [pc, #80]	; (800a738 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d209      	bcs.n	800a70a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6f6:	4b12      	ldr	r3, [pc, #72]	; (800a740 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	4b0f      	ldr	r3, [pc, #60]	; (800a738 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4610      	mov	r0, r2
 800a704:	f7fe f840 	bl	8008788 <vListInsert>
}
 800a708:	e010      	b.n	800a72c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a70a:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <prvAddCurrentTaskToDelayedList+0x94>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3304      	adds	r3, #4
 800a714:	4619      	mov	r1, r3
 800a716:	4610      	mov	r0, r2
 800a718:	f7fe f836 	bl	8008788 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a71c:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	429a      	cmp	r2, r3
 800a724:	d202      	bcs.n	800a72c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a726:	4a08      	ldr	r2, [pc, #32]	; (800a748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	6013      	str	r3, [r2, #0]
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20000ab0 	.word	0x20000ab0
 800a738:	200005dc 	.word	0x200005dc
 800a73c:	20000a98 	.word	0x20000a98
 800a740:	20000a6c 	.word	0x20000a6c
 800a744:	20000a68 	.word	0x20000a68
 800a748:	20000acc 	.word	0x20000acc

0800a74c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3b04      	subs	r3, #4
 800a75c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3b04      	subs	r3, #4
 800a76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f023 0201 	bic.w	r2, r3, #1
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3b04      	subs	r3, #4
 800a77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a77c:	4a0c      	ldr	r2, [pc, #48]	; (800a7b0 <pxPortInitialiseStack+0x64>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3b14      	subs	r3, #20
 800a786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3b04      	subs	r3, #4
 800a792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f06f 0202 	mvn.w	r2, #2
 800a79a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3b20      	subs	r3, #32
 800a7a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	0800a7b5 	.word	0x0800a7b5

0800a7b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7be:	4b12      	ldr	r3, [pc, #72]	; (800a808 <prvTaskExitError+0x54>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c6:	d00a      	beq.n	800a7de <prvTaskExitError+0x2a>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	60fb      	str	r3, [r7, #12]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <prvTaskExitError+0x28>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	60bb      	str	r3, [r7, #8]
}
 800a7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7f2:	bf00      	nop
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0fc      	beq.n	800a7f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7fa:	bf00      	nop
 800a7fc:	bf00      	nop
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	2000002c 	.word	0x2000002c
 800a80c:	00000000 	.word	0x00000000

0800a810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <pxCurrentTCBConst2>)
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	6808      	ldr	r0, [r1, #0]
 800a816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f380 8809 	msr	PSP, r0
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f380 8811 	msr	BASEPRI, r0
 800a82a:	4770      	bx	lr
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst2>:
 800a830:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop

0800a838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a852:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <vPortEnterCritical+0x58>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	4a0d      	ldr	r2, [pc, #52]	; (800a890 <vPortEnterCritical+0x58>)
 800a85a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a85c:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <vPortEnterCritical+0x58>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d10f      	bne.n	800a884 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a864:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <vPortEnterCritical+0x5c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <vPortEnterCritical+0x4c>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	603b      	str	r3, [r7, #0]
}
 800a880:	bf00      	nop
 800a882:	e7fe      	b.n	800a882 <vPortEnterCritical+0x4a>
	}
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	2000002c 	.word	0x2000002c
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a89e:	4b12      	ldr	r3, [pc, #72]	; (800a8e8 <vPortExitCritical+0x50>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <vPortExitCritical+0x24>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	607b      	str	r3, [r7, #4]
}
 800a8b8:	bf00      	nop
 800a8ba:	e7fe      	b.n	800a8ba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <vPortExitCritical+0x50>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	4a09      	ldr	r2, [pc, #36]	; (800a8e8 <vPortExitCritical+0x50>)
 800a8c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8c6:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <vPortExitCritical+0x50>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <vPortExitCritical+0x42>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	f383 8811 	msr	BASEPRI, r3
}
 800a8d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	2000002c 	.word	0x2000002c
 800a8ec:	00000000 	.word	0x00000000

0800a8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8f0:	f3ef 8009 	mrs	r0, PSP
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4b15      	ldr	r3, [pc, #84]	; (800a950 <pxCurrentTCBConst>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	f01e 0f10 	tst.w	lr, #16
 800a900:	bf08      	it	eq
 800a902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	6010      	str	r0, [r2, #0]
 800a90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a914:	f380 8811 	msr	BASEPRI, r0
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f7ff f9d0 	bl	8009cc4 <vTaskSwitchContext>
 800a924:	f04f 0000 	mov.w	r0, #0
 800a928:	f380 8811 	msr	BASEPRI, r0
 800a92c:	bc09      	pop	{r0, r3}
 800a92e:	6819      	ldr	r1, [r3, #0]
 800a930:	6808      	ldr	r0, [r1, #0]
 800a932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a936:	f01e 0f10 	tst.w	lr, #16
 800a93a:	bf08      	it	eq
 800a93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a940:	f380 8809 	msr	PSP, r0
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w

0800a950 <pxCurrentTCBConst>:
 800a950:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop

0800a958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	607b      	str	r3, [r7, #4]
}
 800a970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a972:	f7ff f8ed 	bl	8009b50 <xTaskIncrementTick>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <xPortSysTickHandler+0x40>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	2300      	movs	r3, #0
 800a986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	f383 8811 	msr	BASEPRI, r3
}
 800a98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9a2:	f3ef 8305 	mrs	r3, IPSR
 800a9a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b0f      	cmp	r3, #15
 800a9ac:	d914      	bls.n	800a9d8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ae:	4a17      	ldr	r2, [pc, #92]	; (800aa0c <vPortValidateInterruptPriority+0x70>)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9b8:	4b15      	ldr	r3, [pc, #84]	; (800aa10 <vPortValidateInterruptPriority+0x74>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	7afa      	ldrb	r2, [r7, #11]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d20a      	bcs.n	800a9d8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	607b      	str	r3, [r7, #4]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9d8:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <vPortValidateInterruptPriority+0x78>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <vPortValidateInterruptPriority+0x7c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d90a      	bls.n	800a9fe <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	603b      	str	r3, [r7, #0]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <vPortValidateInterruptPriority+0x60>
	}
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	e000e3f0 	.word	0xe000e3f0
 800aa10:	20000adc 	.word	0x20000adc
 800aa14:	e000ed0c 	.word	0xe000ed0c
 800aa18:	20000ae0 	.word	0x20000ae0

0800aa1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa28:	f7fe ff54 	bl	80098d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa2c:	4b5b      	ldr	r3, [pc, #364]	; (800ab9c <pvPortMalloc+0x180>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa34:	f000 f920 	bl	800ac78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa38:	4b59      	ldr	r3, [pc, #356]	; (800aba0 <pvPortMalloc+0x184>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4013      	ands	r3, r2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8093 	bne.w	800ab6c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01d      	beq.n	800aa88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa4c:	2208      	movs	r2, #8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4413      	add	r3, r2
 800aa52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d014      	beq.n	800aa88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	3308      	adds	r3, #8
 800aa66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <pvPortMalloc+0x6c>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	617b      	str	r3, [r7, #20]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d06e      	beq.n	800ab6c <pvPortMalloc+0x150>
 800aa8e:	4b45      	ldr	r3, [pc, #276]	; (800aba4 <pvPortMalloc+0x188>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d869      	bhi.n	800ab6c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa98:	4b43      	ldr	r3, [pc, #268]	; (800aba8 <pvPortMalloc+0x18c>)
 800aa9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa9c:	4b42      	ldr	r3, [pc, #264]	; (800aba8 <pvPortMalloc+0x18c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaa2:	e004      	b.n	800aaae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d903      	bls.n	800aac0 <pvPortMalloc+0xa4>
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1f1      	bne.n	800aaa4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aac0:	4b36      	ldr	r3, [pc, #216]	; (800ab9c <pvPortMalloc+0x180>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d050      	beq.n	800ab6c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2208      	movs	r2, #8
 800aad0:	4413      	add	r3, r2
 800aad2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	1ad2      	subs	r2, r2, r3
 800aae4:	2308      	movs	r3, #8
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d91f      	bls.n	800ab2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	f003 0307 	and.w	r3, r3, #7
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <pvPortMalloc+0xf8>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	613b      	str	r3, [r7, #16]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab26:	69b8      	ldr	r0, [r7, #24]
 800ab28:	f000 f908 	bl	800ad3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab2c:	4b1d      	ldr	r3, [pc, #116]	; (800aba4 <pvPortMalloc+0x188>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	4a1b      	ldr	r2, [pc, #108]	; (800aba4 <pvPortMalloc+0x188>)
 800ab38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab3a:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <pvPortMalloc+0x188>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b1b      	ldr	r3, [pc, #108]	; (800abac <pvPortMalloc+0x190>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d203      	bcs.n	800ab4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab46:	4b17      	ldr	r3, [pc, #92]	; (800aba4 <pvPortMalloc+0x188>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a18      	ldr	r2, [pc, #96]	; (800abac <pvPortMalloc+0x190>)
 800ab4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <pvPortMalloc+0x184>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab62:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <pvPortMalloc+0x194>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a11      	ldr	r2, [pc, #68]	; (800abb0 <pvPortMalloc+0x194>)
 800ab6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab6c:	f7fe fec0 	bl	80098f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <pvPortMalloc+0x174>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	60fb      	str	r3, [r7, #12]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <pvPortMalloc+0x172>
	return pvReturn;
 800ab90:	69fb      	ldr	r3, [r7, #28]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3728      	adds	r7, #40	; 0x28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200046ec 	.word	0x200046ec
 800aba0:	20004700 	.word	0x20004700
 800aba4:	200046f0 	.word	0x200046f0
 800aba8:	200046e4 	.word	0x200046e4
 800abac:	200046f4 	.word	0x200046f4
 800abb0:	200046f8 	.word	0x200046f8

0800abb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d04d      	beq.n	800ac62 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abc6:	2308      	movs	r3, #8
 800abc8:	425b      	negs	r3, r3
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	4413      	add	r3, r2
 800abce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	4b24      	ldr	r3, [pc, #144]	; (800ac6c <vPortFree+0xb8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4013      	ands	r3, r2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <vPortFree+0x44>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	60fb      	str	r3, [r7, #12]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00a      	beq.n	800ac16 <vPortFree+0x62>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	60bb      	str	r3, [r7, #8]
}
 800ac12:	bf00      	nop
 800ac14:	e7fe      	b.n	800ac14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	4b14      	ldr	r3, [pc, #80]	; (800ac6c <vPortFree+0xb8>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01e      	beq.n	800ac62 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d11a      	bne.n	800ac62 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	4b0e      	ldr	r3, [pc, #56]	; (800ac6c <vPortFree+0xb8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	43db      	mvns	r3, r3
 800ac36:	401a      	ands	r2, r3
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac3c:	f7fe fe4a 	bl	80098d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <vPortFree+0xbc>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4413      	add	r3, r2
 800ac4a:	4a09      	ldr	r2, [pc, #36]	; (800ac70 <vPortFree+0xbc>)
 800ac4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac4e:	6938      	ldr	r0, [r7, #16]
 800ac50:	f000 f874 	bl	800ad3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <vPortFree+0xc0>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	4a06      	ldr	r2, [pc, #24]	; (800ac74 <vPortFree+0xc0>)
 800ac5c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac5e:	f7fe fe47 	bl	80098f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac62:	bf00      	nop
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20004700 	.word	0x20004700
 800ac70:	200046f0 	.word	0x200046f0
 800ac74:	200046fc 	.word	0x200046fc

0800ac78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac84:	4b27      	ldr	r3, [pc, #156]	; (800ad24 <prvHeapInit+0xac>)
 800ac86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00c      	beq.n	800acac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3307      	adds	r3, #7
 800ac96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0307 	bic.w	r3, r3, #7
 800ac9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	4a1f      	ldr	r2, [pc, #124]	; (800ad24 <prvHeapInit+0xac>)
 800aca8:	4413      	add	r3, r2
 800acaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acb0:	4a1d      	ldr	r2, [pc, #116]	; (800ad28 <prvHeapInit+0xb0>)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acb6:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <prvHeapInit+0xb0>)
 800acb8:	2200      	movs	r2, #0
 800acba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	4413      	add	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acc4:	2208      	movs	r2, #8
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f023 0307 	bic.w	r3, r3, #7
 800acd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4a15      	ldr	r2, [pc, #84]	; (800ad2c <prvHeapInit+0xb4>)
 800acd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acda:	4b14      	ldr	r3, [pc, #80]	; (800ad2c <prvHeapInit+0xb4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2200      	movs	r2, #0
 800ace0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ace2:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <prvHeapInit+0xb4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	1ad2      	subs	r2, r2, r3
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <prvHeapInit+0xb4>)
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4a0a      	ldr	r2, [pc, #40]	; (800ad30 <prvHeapInit+0xb8>)
 800ad06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	4a09      	ldr	r2, [pc, #36]	; (800ad34 <prvHeapInit+0xbc>)
 800ad0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad10:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <prvHeapInit+0xc0>)
 800ad12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad16:	601a      	str	r2, [r3, #0]
}
 800ad18:	bf00      	nop
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000ae4 	.word	0x20000ae4
 800ad28:	200046e4 	.word	0x200046e4
 800ad2c:	200046ec 	.word	0x200046ec
 800ad30:	200046f4 	.word	0x200046f4
 800ad34:	200046f0 	.word	0x200046f0
 800ad38:	20004700 	.word	0x20004700

0800ad3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad44:	4b28      	ldr	r3, [pc, #160]	; (800ade8 <prvInsertBlockIntoFreeList+0xac>)
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	e002      	b.n	800ad50 <prvInsertBlockIntoFreeList+0x14>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d8f7      	bhi.n	800ad4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	4413      	add	r3, r2
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d108      	bne.n	800ad7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	441a      	add	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d118      	bne.n	800adc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	4b15      	ldr	r3, [pc, #84]	; (800adec <prvInsertBlockIntoFreeList+0xb0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d00d      	beq.n	800adba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	441a      	add	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	e008      	b.n	800adcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <prvInsertBlockIntoFreeList+0xb0>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e003      	b.n	800adcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	429a      	cmp	r2, r3
 800add2:	d002      	beq.n	800adda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	200046e4 	.word	0x200046e4
 800adec:	200046ec 	.word	0x200046ec

0800adf0 <__errno>:
 800adf0:	4b01      	ldr	r3, [pc, #4]	; (800adf8 <__errno+0x8>)
 800adf2:	6818      	ldr	r0, [r3, #0]
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	20000030 	.word	0x20000030

0800adfc <__libc_init_array>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	4d0d      	ldr	r5, [pc, #52]	; (800ae34 <__libc_init_array+0x38>)
 800ae00:	4c0d      	ldr	r4, [pc, #52]	; (800ae38 <__libc_init_array+0x3c>)
 800ae02:	1b64      	subs	r4, r4, r5
 800ae04:	10a4      	asrs	r4, r4, #2
 800ae06:	2600      	movs	r6, #0
 800ae08:	42a6      	cmp	r6, r4
 800ae0a:	d109      	bne.n	800ae20 <__libc_init_array+0x24>
 800ae0c:	4d0b      	ldr	r5, [pc, #44]	; (800ae3c <__libc_init_array+0x40>)
 800ae0e:	4c0c      	ldr	r4, [pc, #48]	; (800ae40 <__libc_init_array+0x44>)
 800ae10:	f001 fb5c 	bl	800c4cc <_init>
 800ae14:	1b64      	subs	r4, r4, r5
 800ae16:	10a4      	asrs	r4, r4, #2
 800ae18:	2600      	movs	r6, #0
 800ae1a:	42a6      	cmp	r6, r4
 800ae1c:	d105      	bne.n	800ae2a <__libc_init_array+0x2e>
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae24:	4798      	blx	r3
 800ae26:	3601      	adds	r6, #1
 800ae28:	e7ee      	b.n	800ae08 <__libc_init_array+0xc>
 800ae2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2e:	4798      	blx	r3
 800ae30:	3601      	adds	r6, #1
 800ae32:	e7f2      	b.n	800ae1a <__libc_init_array+0x1e>
 800ae34:	0800c95c 	.word	0x0800c95c
 800ae38:	0800c95c 	.word	0x0800c95c
 800ae3c:	0800c95c 	.word	0x0800c95c
 800ae40:	0800c960 	.word	0x0800c960

0800ae44 <memcpy>:
 800ae44:	440a      	add	r2, r1
 800ae46:	4291      	cmp	r1, r2
 800ae48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae4c:	d100      	bne.n	800ae50 <memcpy+0xc>
 800ae4e:	4770      	bx	lr
 800ae50:	b510      	push	{r4, lr}
 800ae52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	d1f9      	bne.n	800ae52 <memcpy+0xe>
 800ae5e:	bd10      	pop	{r4, pc}

0800ae60 <memset>:
 800ae60:	4402      	add	r2, r0
 800ae62:	4603      	mov	r3, r0
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d100      	bne.n	800ae6a <memset+0xa>
 800ae68:	4770      	bx	lr
 800ae6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae6e:	e7f9      	b.n	800ae64 <memset+0x4>

0800ae70 <iprintf>:
 800ae70:	b40f      	push	{r0, r1, r2, r3}
 800ae72:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <iprintf+0x2c>)
 800ae74:	b513      	push	{r0, r1, r4, lr}
 800ae76:	681c      	ldr	r4, [r3, #0]
 800ae78:	b124      	cbz	r4, 800ae84 <iprintf+0x14>
 800ae7a:	69a3      	ldr	r3, [r4, #24]
 800ae7c:	b913      	cbnz	r3, 800ae84 <iprintf+0x14>
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fb8a 	bl	800b598 <__sinit>
 800ae84:	ab05      	add	r3, sp, #20
 800ae86:	9a04      	ldr	r2, [sp, #16]
 800ae88:	68a1      	ldr	r1, [r4, #8]
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f000 fef7 	bl	800bc80 <_vfiprintf_r>
 800ae92:	b002      	add	sp, #8
 800ae94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae98:	b004      	add	sp, #16
 800ae9a:	4770      	bx	lr
 800ae9c:	20000030 	.word	0x20000030

0800aea0 <putchar>:
 800aea0:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <putchar+0x28>)
 800aea2:	b513      	push	{r0, r1, r4, lr}
 800aea4:	681c      	ldr	r4, [r3, #0]
 800aea6:	4601      	mov	r1, r0
 800aea8:	b134      	cbz	r4, 800aeb8 <putchar+0x18>
 800aeaa:	69a3      	ldr	r3, [r4, #24]
 800aeac:	b923      	cbnz	r3, 800aeb8 <putchar+0x18>
 800aeae:	9001      	str	r0, [sp, #4]
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fb71 	bl	800b598 <__sinit>
 800aeb6:	9901      	ldr	r1, [sp, #4]
 800aeb8:	68a2      	ldr	r2, [r4, #8]
 800aeba:	4620      	mov	r0, r4
 800aebc:	b002      	add	sp, #8
 800aebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec2:	f001 b9a1 	b.w	800c208 <_putc_r>
 800aec6:	bf00      	nop
 800aec8:	20000030 	.word	0x20000030

0800aecc <_puts_r>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	460e      	mov	r6, r1
 800aed0:	4605      	mov	r5, r0
 800aed2:	b118      	cbz	r0, 800aedc <_puts_r+0x10>
 800aed4:	6983      	ldr	r3, [r0, #24]
 800aed6:	b90b      	cbnz	r3, 800aedc <_puts_r+0x10>
 800aed8:	f000 fb5e 	bl	800b598 <__sinit>
 800aedc:	69ab      	ldr	r3, [r5, #24]
 800aede:	68ac      	ldr	r4, [r5, #8]
 800aee0:	b913      	cbnz	r3, 800aee8 <_puts_r+0x1c>
 800aee2:	4628      	mov	r0, r5
 800aee4:	f000 fb58 	bl	800b598 <__sinit>
 800aee8:	4b2c      	ldr	r3, [pc, #176]	; (800af9c <_puts_r+0xd0>)
 800aeea:	429c      	cmp	r4, r3
 800aeec:	d120      	bne.n	800af30 <_puts_r+0x64>
 800aeee:	686c      	ldr	r4, [r5, #4]
 800aef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aef2:	07db      	lsls	r3, r3, #31
 800aef4:	d405      	bmi.n	800af02 <_puts_r+0x36>
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	0598      	lsls	r0, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_puts_r+0x36>
 800aefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aefe:	f000 fbe9 	bl	800b6d4 <__retarget_lock_acquire_recursive>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	0719      	lsls	r1, r3, #28
 800af06:	d51d      	bpl.n	800af44 <_puts_r+0x78>
 800af08:	6923      	ldr	r3, [r4, #16]
 800af0a:	b1db      	cbz	r3, 800af44 <_puts_r+0x78>
 800af0c:	3e01      	subs	r6, #1
 800af0e:	68a3      	ldr	r3, [r4, #8]
 800af10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af14:	3b01      	subs	r3, #1
 800af16:	60a3      	str	r3, [r4, #8]
 800af18:	bb39      	cbnz	r1, 800af6a <_puts_r+0x9e>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da38      	bge.n	800af90 <_puts_r+0xc4>
 800af1e:	4622      	mov	r2, r4
 800af20:	210a      	movs	r1, #10
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f95e 	bl	800b1e4 <__swbuf_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	d011      	beq.n	800af50 <_puts_r+0x84>
 800af2c:	250a      	movs	r5, #10
 800af2e:	e011      	b.n	800af54 <_puts_r+0x88>
 800af30:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <_puts_r+0xd4>)
 800af32:	429c      	cmp	r4, r3
 800af34:	d101      	bne.n	800af3a <_puts_r+0x6e>
 800af36:	68ac      	ldr	r4, [r5, #8]
 800af38:	e7da      	b.n	800aef0 <_puts_r+0x24>
 800af3a:	4b1a      	ldr	r3, [pc, #104]	; (800afa4 <_puts_r+0xd8>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	bf08      	it	eq
 800af40:	68ec      	ldreq	r4, [r5, #12]
 800af42:	e7d5      	b.n	800aef0 <_puts_r+0x24>
 800af44:	4621      	mov	r1, r4
 800af46:	4628      	mov	r0, r5
 800af48:	f000 f99e 	bl	800b288 <__swsetup_r>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d0dd      	beq.n	800af0c <_puts_r+0x40>
 800af50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800af54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af56:	07da      	lsls	r2, r3, #31
 800af58:	d405      	bmi.n	800af66 <_puts_r+0x9a>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	059b      	lsls	r3, r3, #22
 800af5e:	d402      	bmi.n	800af66 <_puts_r+0x9a>
 800af60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af62:	f000 fbb8 	bl	800b6d6 <__retarget_lock_release_recursive>
 800af66:	4628      	mov	r0, r5
 800af68:	bd70      	pop	{r4, r5, r6, pc}
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da04      	bge.n	800af78 <_puts_r+0xac>
 800af6e:	69a2      	ldr	r2, [r4, #24]
 800af70:	429a      	cmp	r2, r3
 800af72:	dc06      	bgt.n	800af82 <_puts_r+0xb6>
 800af74:	290a      	cmp	r1, #10
 800af76:	d004      	beq.n	800af82 <_puts_r+0xb6>
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	6022      	str	r2, [r4, #0]
 800af7e:	7019      	strb	r1, [r3, #0]
 800af80:	e7c5      	b.n	800af0e <_puts_r+0x42>
 800af82:	4622      	mov	r2, r4
 800af84:	4628      	mov	r0, r5
 800af86:	f000 f92d 	bl	800b1e4 <__swbuf_r>
 800af8a:	3001      	adds	r0, #1
 800af8c:	d1bf      	bne.n	800af0e <_puts_r+0x42>
 800af8e:	e7df      	b.n	800af50 <_puts_r+0x84>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	250a      	movs	r5, #10
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	6022      	str	r2, [r4, #0]
 800af98:	701d      	strb	r5, [r3, #0]
 800af9a:	e7db      	b.n	800af54 <_puts_r+0x88>
 800af9c:	0800c8e0 	.word	0x0800c8e0
 800afa0:	0800c900 	.word	0x0800c900
 800afa4:	0800c8c0 	.word	0x0800c8c0

0800afa8 <puts>:
 800afa8:	4b02      	ldr	r3, [pc, #8]	; (800afb4 <puts+0xc>)
 800afaa:	4601      	mov	r1, r0
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	f7ff bf8d 	b.w	800aecc <_puts_r>
 800afb2:	bf00      	nop
 800afb4:	20000030 	.word	0x20000030

0800afb8 <setvbuf>:
 800afb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afbc:	461d      	mov	r5, r3
 800afbe:	4b5d      	ldr	r3, [pc, #372]	; (800b134 <setvbuf+0x17c>)
 800afc0:	681f      	ldr	r7, [r3, #0]
 800afc2:	4604      	mov	r4, r0
 800afc4:	460e      	mov	r6, r1
 800afc6:	4690      	mov	r8, r2
 800afc8:	b127      	cbz	r7, 800afd4 <setvbuf+0x1c>
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	b913      	cbnz	r3, 800afd4 <setvbuf+0x1c>
 800afce:	4638      	mov	r0, r7
 800afd0:	f000 fae2 	bl	800b598 <__sinit>
 800afd4:	4b58      	ldr	r3, [pc, #352]	; (800b138 <setvbuf+0x180>)
 800afd6:	429c      	cmp	r4, r3
 800afd8:	d167      	bne.n	800b0aa <setvbuf+0xf2>
 800afda:	687c      	ldr	r4, [r7, #4]
 800afdc:	f1b8 0f02 	cmp.w	r8, #2
 800afe0:	d006      	beq.n	800aff0 <setvbuf+0x38>
 800afe2:	f1b8 0f01 	cmp.w	r8, #1
 800afe6:	f200 809f 	bhi.w	800b128 <setvbuf+0x170>
 800afea:	2d00      	cmp	r5, #0
 800afec:	f2c0 809c 	blt.w	800b128 <setvbuf+0x170>
 800aff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aff2:	07db      	lsls	r3, r3, #31
 800aff4:	d405      	bmi.n	800b002 <setvbuf+0x4a>
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	0598      	lsls	r0, r3, #22
 800affa:	d402      	bmi.n	800b002 <setvbuf+0x4a>
 800affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800affe:	f000 fb69 	bl	800b6d4 <__retarget_lock_acquire_recursive>
 800b002:	4621      	mov	r1, r4
 800b004:	4638      	mov	r0, r7
 800b006:	f000 fa33 	bl	800b470 <_fflush_r>
 800b00a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b00c:	b141      	cbz	r1, 800b020 <setvbuf+0x68>
 800b00e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b012:	4299      	cmp	r1, r3
 800b014:	d002      	beq.n	800b01c <setvbuf+0x64>
 800b016:	4638      	mov	r0, r7
 800b018:	f000 fbcc 	bl	800b7b4 <_free_r>
 800b01c:	2300      	movs	r3, #0
 800b01e:	6363      	str	r3, [r4, #52]	; 0x34
 800b020:	2300      	movs	r3, #0
 800b022:	61a3      	str	r3, [r4, #24]
 800b024:	6063      	str	r3, [r4, #4]
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	0619      	lsls	r1, r3, #24
 800b02a:	d503      	bpl.n	800b034 <setvbuf+0x7c>
 800b02c:	6921      	ldr	r1, [r4, #16]
 800b02e:	4638      	mov	r0, r7
 800b030:	f000 fbc0 	bl	800b7b4 <_free_r>
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	f1b8 0f02 	cmp.w	r8, #2
 800b042:	81a3      	strh	r3, [r4, #12]
 800b044:	d06c      	beq.n	800b120 <setvbuf+0x168>
 800b046:	ab01      	add	r3, sp, #4
 800b048:	466a      	mov	r2, sp
 800b04a:	4621      	mov	r1, r4
 800b04c:	4638      	mov	r0, r7
 800b04e:	f000 fb43 	bl	800b6d8 <__swhatbuf_r>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	4318      	orrs	r0, r3
 800b056:	81a0      	strh	r0, [r4, #12]
 800b058:	2d00      	cmp	r5, #0
 800b05a:	d130      	bne.n	800b0be <setvbuf+0x106>
 800b05c:	9d00      	ldr	r5, [sp, #0]
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fba0 	bl	800b7a4 <malloc>
 800b064:	4606      	mov	r6, r0
 800b066:	2800      	cmp	r0, #0
 800b068:	d155      	bne.n	800b116 <setvbuf+0x15e>
 800b06a:	f8dd 9000 	ldr.w	r9, [sp]
 800b06e:	45a9      	cmp	r9, r5
 800b070:	d14a      	bne.n	800b108 <setvbuf+0x150>
 800b072:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b076:	2200      	movs	r2, #0
 800b078:	60a2      	str	r2, [r4, #8]
 800b07a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	6122      	str	r2, [r4, #16]
 800b082:	2201      	movs	r2, #1
 800b084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b088:	6162      	str	r2, [r4, #20]
 800b08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b08c:	f043 0302 	orr.w	r3, r3, #2
 800b090:	07d2      	lsls	r2, r2, #31
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	d405      	bmi.n	800b0a2 <setvbuf+0xea>
 800b096:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b09a:	d102      	bne.n	800b0a2 <setvbuf+0xea>
 800b09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09e:	f000 fb1a 	bl	800b6d6 <__retarget_lock_release_recursive>
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	b003      	add	sp, #12
 800b0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0aa:	4b24      	ldr	r3, [pc, #144]	; (800b13c <setvbuf+0x184>)
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	d101      	bne.n	800b0b4 <setvbuf+0xfc>
 800b0b0:	68bc      	ldr	r4, [r7, #8]
 800b0b2:	e793      	b.n	800afdc <setvbuf+0x24>
 800b0b4:	4b22      	ldr	r3, [pc, #136]	; (800b140 <setvbuf+0x188>)
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	bf08      	it	eq
 800b0ba:	68fc      	ldreq	r4, [r7, #12]
 800b0bc:	e78e      	b.n	800afdc <setvbuf+0x24>
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	d0cd      	beq.n	800b05e <setvbuf+0xa6>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	b913      	cbnz	r3, 800b0cc <setvbuf+0x114>
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f000 fa66 	bl	800b598 <__sinit>
 800b0cc:	f1b8 0f01 	cmp.w	r8, #1
 800b0d0:	bf08      	it	eq
 800b0d2:	89a3      	ldrheq	r3, [r4, #12]
 800b0d4:	6026      	str	r6, [r4, #0]
 800b0d6:	bf04      	itt	eq
 800b0d8:	f043 0301 	orreq.w	r3, r3, #1
 800b0dc:	81a3      	strheq	r3, [r4, #12]
 800b0de:	89a2      	ldrh	r2, [r4, #12]
 800b0e0:	f012 0308 	ands.w	r3, r2, #8
 800b0e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b0e8:	d01c      	beq.n	800b124 <setvbuf+0x16c>
 800b0ea:	07d3      	lsls	r3, r2, #31
 800b0ec:	bf41      	itttt	mi
 800b0ee:	2300      	movmi	r3, #0
 800b0f0:	426d      	negmi	r5, r5
 800b0f2:	60a3      	strmi	r3, [r4, #8]
 800b0f4:	61a5      	strmi	r5, [r4, #24]
 800b0f6:	bf58      	it	pl
 800b0f8:	60a5      	strpl	r5, [r4, #8]
 800b0fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b0fc:	f015 0501 	ands.w	r5, r5, #1
 800b100:	d115      	bne.n	800b12e <setvbuf+0x176>
 800b102:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b106:	e7c8      	b.n	800b09a <setvbuf+0xe2>
 800b108:	4648      	mov	r0, r9
 800b10a:	f000 fb4b 	bl	800b7a4 <malloc>
 800b10e:	4606      	mov	r6, r0
 800b110:	2800      	cmp	r0, #0
 800b112:	d0ae      	beq.n	800b072 <setvbuf+0xba>
 800b114:	464d      	mov	r5, r9
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	e7d0      	b.n	800b0c2 <setvbuf+0x10a>
 800b120:	2500      	movs	r5, #0
 800b122:	e7a8      	b.n	800b076 <setvbuf+0xbe>
 800b124:	60a3      	str	r3, [r4, #8]
 800b126:	e7e8      	b.n	800b0fa <setvbuf+0x142>
 800b128:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b12c:	e7b9      	b.n	800b0a2 <setvbuf+0xea>
 800b12e:	2500      	movs	r5, #0
 800b130:	e7b7      	b.n	800b0a2 <setvbuf+0xea>
 800b132:	bf00      	nop
 800b134:	20000030 	.word	0x20000030
 800b138:	0800c8e0 	.word	0x0800c8e0
 800b13c:	0800c900 	.word	0x0800c900
 800b140:	0800c8c0 	.word	0x0800c8c0

0800b144 <siprintf>:
 800b144:	b40e      	push	{r1, r2, r3}
 800b146:	b500      	push	{lr}
 800b148:	b09c      	sub	sp, #112	; 0x70
 800b14a:	ab1d      	add	r3, sp, #116	; 0x74
 800b14c:	9002      	str	r0, [sp, #8]
 800b14e:	9006      	str	r0, [sp, #24]
 800b150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b154:	4809      	ldr	r0, [pc, #36]	; (800b17c <siprintf+0x38>)
 800b156:	9107      	str	r1, [sp, #28]
 800b158:	9104      	str	r1, [sp, #16]
 800b15a:	4909      	ldr	r1, [pc, #36]	; (800b180 <siprintf+0x3c>)
 800b15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b160:	9105      	str	r1, [sp, #20]
 800b162:	6800      	ldr	r0, [r0, #0]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	a902      	add	r1, sp, #8
 800b168:	f000 fc60 	bl	800ba2c <_svfiprintf_r>
 800b16c:	9b02      	ldr	r3, [sp, #8]
 800b16e:	2200      	movs	r2, #0
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	b01c      	add	sp, #112	; 0x70
 800b174:	f85d eb04 	ldr.w	lr, [sp], #4
 800b178:	b003      	add	sp, #12
 800b17a:	4770      	bx	lr
 800b17c:	20000030 	.word	0x20000030
 800b180:	ffff0208 	.word	0xffff0208

0800b184 <strcpy>:
 800b184:	4603      	mov	r3, r0
 800b186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b18a:	f803 2b01 	strb.w	r2, [r3], #1
 800b18e:	2a00      	cmp	r2, #0
 800b190:	d1f9      	bne.n	800b186 <strcpy+0x2>
 800b192:	4770      	bx	lr

0800b194 <strncmp>:
 800b194:	b510      	push	{r4, lr}
 800b196:	b17a      	cbz	r2, 800b1b8 <strncmp+0x24>
 800b198:	4603      	mov	r3, r0
 800b19a:	3901      	subs	r1, #1
 800b19c:	1884      	adds	r4, r0, r2
 800b19e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b1a6:	4290      	cmp	r0, r2
 800b1a8:	d101      	bne.n	800b1ae <strncmp+0x1a>
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	d101      	bne.n	800b1b2 <strncmp+0x1e>
 800b1ae:	1a80      	subs	r0, r0, r2
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d1f3      	bne.n	800b19e <strncmp+0xa>
 800b1b6:	e7fa      	b.n	800b1ae <strncmp+0x1a>
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	e7f9      	b.n	800b1b0 <strncmp+0x1c>

0800b1bc <strncpy>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	3901      	subs	r1, #1
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	b132      	cbz	r2, 800b1d2 <strncpy+0x16>
 800b1c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1c8:	f803 4b01 	strb.w	r4, [r3], #1
 800b1cc:	3a01      	subs	r2, #1
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	d1f7      	bne.n	800b1c2 <strncpy+0x6>
 800b1d2:	441a      	add	r2, r3
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d100      	bne.n	800b1dc <strncpy+0x20>
 800b1da:	bd10      	pop	{r4, pc}
 800b1dc:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e0:	e7f9      	b.n	800b1d6 <strncpy+0x1a>
	...

0800b1e4 <__swbuf_r>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	460e      	mov	r6, r1
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	b118      	cbz	r0, 800b1f6 <__swbuf_r+0x12>
 800b1ee:	6983      	ldr	r3, [r0, #24]
 800b1f0:	b90b      	cbnz	r3, 800b1f6 <__swbuf_r+0x12>
 800b1f2:	f000 f9d1 	bl	800b598 <__sinit>
 800b1f6:	4b21      	ldr	r3, [pc, #132]	; (800b27c <__swbuf_r+0x98>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	d12b      	bne.n	800b254 <__swbuf_r+0x70>
 800b1fc:	686c      	ldr	r4, [r5, #4]
 800b1fe:	69a3      	ldr	r3, [r4, #24]
 800b200:	60a3      	str	r3, [r4, #8]
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	071a      	lsls	r2, r3, #28
 800b206:	d52f      	bpl.n	800b268 <__swbuf_r+0x84>
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	b36b      	cbz	r3, 800b268 <__swbuf_r+0x84>
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	6820      	ldr	r0, [r4, #0]
 800b210:	1ac0      	subs	r0, r0, r3
 800b212:	6963      	ldr	r3, [r4, #20]
 800b214:	b2f6      	uxtb	r6, r6
 800b216:	4283      	cmp	r3, r0
 800b218:	4637      	mov	r7, r6
 800b21a:	dc04      	bgt.n	800b226 <__swbuf_r+0x42>
 800b21c:	4621      	mov	r1, r4
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 f926 	bl	800b470 <_fflush_r>
 800b224:	bb30      	cbnz	r0, 800b274 <__swbuf_r+0x90>
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	3b01      	subs	r3, #1
 800b22a:	60a3      	str	r3, [r4, #8]
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	6022      	str	r2, [r4, #0]
 800b232:	701e      	strb	r6, [r3, #0]
 800b234:	6963      	ldr	r3, [r4, #20]
 800b236:	3001      	adds	r0, #1
 800b238:	4283      	cmp	r3, r0
 800b23a:	d004      	beq.n	800b246 <__swbuf_r+0x62>
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	07db      	lsls	r3, r3, #31
 800b240:	d506      	bpl.n	800b250 <__swbuf_r+0x6c>
 800b242:	2e0a      	cmp	r6, #10
 800b244:	d104      	bne.n	800b250 <__swbuf_r+0x6c>
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 f911 	bl	800b470 <_fflush_r>
 800b24e:	b988      	cbnz	r0, 800b274 <__swbuf_r+0x90>
 800b250:	4638      	mov	r0, r7
 800b252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b254:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <__swbuf_r+0x9c>)
 800b256:	429c      	cmp	r4, r3
 800b258:	d101      	bne.n	800b25e <__swbuf_r+0x7a>
 800b25a:	68ac      	ldr	r4, [r5, #8]
 800b25c:	e7cf      	b.n	800b1fe <__swbuf_r+0x1a>
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <__swbuf_r+0xa0>)
 800b260:	429c      	cmp	r4, r3
 800b262:	bf08      	it	eq
 800b264:	68ec      	ldreq	r4, [r5, #12]
 800b266:	e7ca      	b.n	800b1fe <__swbuf_r+0x1a>
 800b268:	4621      	mov	r1, r4
 800b26a:	4628      	mov	r0, r5
 800b26c:	f000 f80c 	bl	800b288 <__swsetup_r>
 800b270:	2800      	cmp	r0, #0
 800b272:	d0cb      	beq.n	800b20c <__swbuf_r+0x28>
 800b274:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b278:	e7ea      	b.n	800b250 <__swbuf_r+0x6c>
 800b27a:	bf00      	nop
 800b27c:	0800c8e0 	.word	0x0800c8e0
 800b280:	0800c900 	.word	0x0800c900
 800b284:	0800c8c0 	.word	0x0800c8c0

0800b288 <__swsetup_r>:
 800b288:	4b32      	ldr	r3, [pc, #200]	; (800b354 <__swsetup_r+0xcc>)
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	681d      	ldr	r5, [r3, #0]
 800b28e:	4606      	mov	r6, r0
 800b290:	460c      	mov	r4, r1
 800b292:	b125      	cbz	r5, 800b29e <__swsetup_r+0x16>
 800b294:	69ab      	ldr	r3, [r5, #24]
 800b296:	b913      	cbnz	r3, 800b29e <__swsetup_r+0x16>
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 f97d 	bl	800b598 <__sinit>
 800b29e:	4b2e      	ldr	r3, [pc, #184]	; (800b358 <__swsetup_r+0xd0>)
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	d10f      	bne.n	800b2c4 <__swsetup_r+0x3c>
 800b2a4:	686c      	ldr	r4, [r5, #4]
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ac:	0719      	lsls	r1, r3, #28
 800b2ae:	d42c      	bmi.n	800b30a <__swsetup_r+0x82>
 800b2b0:	06dd      	lsls	r5, r3, #27
 800b2b2:	d411      	bmi.n	800b2d8 <__swsetup_r+0x50>
 800b2b4:	2309      	movs	r3, #9
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c2:	e03e      	b.n	800b342 <__swsetup_r+0xba>
 800b2c4:	4b25      	ldr	r3, [pc, #148]	; (800b35c <__swsetup_r+0xd4>)
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	d101      	bne.n	800b2ce <__swsetup_r+0x46>
 800b2ca:	68ac      	ldr	r4, [r5, #8]
 800b2cc:	e7eb      	b.n	800b2a6 <__swsetup_r+0x1e>
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <__swsetup_r+0xd8>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	bf08      	it	eq
 800b2d4:	68ec      	ldreq	r4, [r5, #12]
 800b2d6:	e7e6      	b.n	800b2a6 <__swsetup_r+0x1e>
 800b2d8:	0758      	lsls	r0, r3, #29
 800b2da:	d512      	bpl.n	800b302 <__swsetup_r+0x7a>
 800b2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2de:	b141      	cbz	r1, 800b2f2 <__swsetup_r+0x6a>
 800b2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2e4:	4299      	cmp	r1, r3
 800b2e6:	d002      	beq.n	800b2ee <__swsetup_r+0x66>
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 fa63 	bl	800b7b4 <_free_r>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	6063      	str	r3, [r4, #4]
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	f043 0308 	orr.w	r3, r3, #8
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	b94b      	cbnz	r3, 800b322 <__swsetup_r+0x9a>
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b318:	d003      	beq.n	800b322 <__swsetup_r+0x9a>
 800b31a:	4621      	mov	r1, r4
 800b31c:	4630      	mov	r0, r6
 800b31e:	f000 fa01 	bl	800b724 <__smakebuf_r>
 800b322:	89a0      	ldrh	r0, [r4, #12]
 800b324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b328:	f010 0301 	ands.w	r3, r0, #1
 800b32c:	d00a      	beq.n	800b344 <__swsetup_r+0xbc>
 800b32e:	2300      	movs	r3, #0
 800b330:	60a3      	str	r3, [r4, #8]
 800b332:	6963      	ldr	r3, [r4, #20]
 800b334:	425b      	negs	r3, r3
 800b336:	61a3      	str	r3, [r4, #24]
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	b943      	cbnz	r3, 800b34e <__swsetup_r+0xc6>
 800b33c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b340:	d1ba      	bne.n	800b2b8 <__swsetup_r+0x30>
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	0781      	lsls	r1, r0, #30
 800b346:	bf58      	it	pl
 800b348:	6963      	ldrpl	r3, [r4, #20]
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	e7f4      	b.n	800b338 <__swsetup_r+0xb0>
 800b34e:	2000      	movs	r0, #0
 800b350:	e7f7      	b.n	800b342 <__swsetup_r+0xba>
 800b352:	bf00      	nop
 800b354:	20000030 	.word	0x20000030
 800b358:	0800c8e0 	.word	0x0800c8e0
 800b35c:	0800c900 	.word	0x0800c900
 800b360:	0800c8c0 	.word	0x0800c8c0

0800b364 <__sflush_r>:
 800b364:	898a      	ldrh	r2, [r1, #12]
 800b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	4605      	mov	r5, r0
 800b36c:	0710      	lsls	r0, r2, #28
 800b36e:	460c      	mov	r4, r1
 800b370:	d458      	bmi.n	800b424 <__sflush_r+0xc0>
 800b372:	684b      	ldr	r3, [r1, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	dc05      	bgt.n	800b384 <__sflush_r+0x20>
 800b378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dc02      	bgt.n	800b384 <__sflush_r+0x20>
 800b37e:	2000      	movs	r0, #0
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b386:	2e00      	cmp	r6, #0
 800b388:	d0f9      	beq.n	800b37e <__sflush_r+0x1a>
 800b38a:	2300      	movs	r3, #0
 800b38c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b390:	682f      	ldr	r7, [r5, #0]
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	d032      	beq.n	800b3fc <__sflush_r+0x98>
 800b396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	075a      	lsls	r2, r3, #29
 800b39c:	d505      	bpl.n	800b3aa <__sflush_r+0x46>
 800b39e:	6863      	ldr	r3, [r4, #4]
 800b3a0:	1ac0      	subs	r0, r0, r3
 800b3a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3a4:	b10b      	cbz	r3, 800b3aa <__sflush_r+0x46>
 800b3a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3a8:	1ac0      	subs	r0, r0, r3
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3b0:	6a21      	ldr	r1, [r4, #32]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b0      	blx	r6
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	d106      	bne.n	800b3ca <__sflush_r+0x66>
 800b3bc:	6829      	ldr	r1, [r5, #0]
 800b3be:	291d      	cmp	r1, #29
 800b3c0:	d82c      	bhi.n	800b41c <__sflush_r+0xb8>
 800b3c2:	4a2a      	ldr	r2, [pc, #168]	; (800b46c <__sflush_r+0x108>)
 800b3c4:	40ca      	lsrs	r2, r1
 800b3c6:	07d6      	lsls	r6, r2, #31
 800b3c8:	d528      	bpl.n	800b41c <__sflush_r+0xb8>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	6062      	str	r2, [r4, #4]
 800b3ce:	04d9      	lsls	r1, r3, #19
 800b3d0:	6922      	ldr	r2, [r4, #16]
 800b3d2:	6022      	str	r2, [r4, #0]
 800b3d4:	d504      	bpl.n	800b3e0 <__sflush_r+0x7c>
 800b3d6:	1c42      	adds	r2, r0, #1
 800b3d8:	d101      	bne.n	800b3de <__sflush_r+0x7a>
 800b3da:	682b      	ldr	r3, [r5, #0]
 800b3dc:	b903      	cbnz	r3, 800b3e0 <__sflush_r+0x7c>
 800b3de:	6560      	str	r0, [r4, #84]	; 0x54
 800b3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3e2:	602f      	str	r7, [r5, #0]
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	d0ca      	beq.n	800b37e <__sflush_r+0x1a>
 800b3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	d002      	beq.n	800b3f6 <__sflush_r+0x92>
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f000 f9df 	bl	800b7b4 <_free_r>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b3fa:	e7c1      	b.n	800b380 <__sflush_r+0x1c>
 800b3fc:	6a21      	ldr	r1, [r4, #32]
 800b3fe:	2301      	movs	r3, #1
 800b400:	4628      	mov	r0, r5
 800b402:	47b0      	blx	r6
 800b404:	1c41      	adds	r1, r0, #1
 800b406:	d1c7      	bne.n	800b398 <__sflush_r+0x34>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0c4      	beq.n	800b398 <__sflush_r+0x34>
 800b40e:	2b1d      	cmp	r3, #29
 800b410:	d001      	beq.n	800b416 <__sflush_r+0xb2>
 800b412:	2b16      	cmp	r3, #22
 800b414:	d101      	bne.n	800b41a <__sflush_r+0xb6>
 800b416:	602f      	str	r7, [r5, #0]
 800b418:	e7b1      	b.n	800b37e <__sflush_r+0x1a>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	e7ad      	b.n	800b380 <__sflush_r+0x1c>
 800b424:	690f      	ldr	r7, [r1, #16]
 800b426:	2f00      	cmp	r7, #0
 800b428:	d0a9      	beq.n	800b37e <__sflush_r+0x1a>
 800b42a:	0793      	lsls	r3, r2, #30
 800b42c:	680e      	ldr	r6, [r1, #0]
 800b42e:	bf08      	it	eq
 800b430:	694b      	ldreq	r3, [r1, #20]
 800b432:	600f      	str	r7, [r1, #0]
 800b434:	bf18      	it	ne
 800b436:	2300      	movne	r3, #0
 800b438:	eba6 0807 	sub.w	r8, r6, r7
 800b43c:	608b      	str	r3, [r1, #8]
 800b43e:	f1b8 0f00 	cmp.w	r8, #0
 800b442:	dd9c      	ble.n	800b37e <__sflush_r+0x1a>
 800b444:	6a21      	ldr	r1, [r4, #32]
 800b446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b448:	4643      	mov	r3, r8
 800b44a:	463a      	mov	r2, r7
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b0      	blx	r6
 800b450:	2800      	cmp	r0, #0
 800b452:	dc06      	bgt.n	800b462 <__sflush_r+0xfe>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b460:	e78e      	b.n	800b380 <__sflush_r+0x1c>
 800b462:	4407      	add	r7, r0
 800b464:	eba8 0800 	sub.w	r8, r8, r0
 800b468:	e7e9      	b.n	800b43e <__sflush_r+0xda>
 800b46a:	bf00      	nop
 800b46c:	20400001 	.word	0x20400001

0800b470 <_fflush_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	690b      	ldr	r3, [r1, #16]
 800b474:	4605      	mov	r5, r0
 800b476:	460c      	mov	r4, r1
 800b478:	b913      	cbnz	r3, 800b480 <_fflush_r+0x10>
 800b47a:	2500      	movs	r5, #0
 800b47c:	4628      	mov	r0, r5
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	b118      	cbz	r0, 800b48a <_fflush_r+0x1a>
 800b482:	6983      	ldr	r3, [r0, #24]
 800b484:	b90b      	cbnz	r3, 800b48a <_fflush_r+0x1a>
 800b486:	f000 f887 	bl	800b598 <__sinit>
 800b48a:	4b14      	ldr	r3, [pc, #80]	; (800b4dc <_fflush_r+0x6c>)
 800b48c:	429c      	cmp	r4, r3
 800b48e:	d11b      	bne.n	800b4c8 <_fflush_r+0x58>
 800b490:	686c      	ldr	r4, [r5, #4]
 800b492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0ef      	beq.n	800b47a <_fflush_r+0xa>
 800b49a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b49c:	07d0      	lsls	r0, r2, #31
 800b49e:	d404      	bmi.n	800b4aa <_fflush_r+0x3a>
 800b4a0:	0599      	lsls	r1, r3, #22
 800b4a2:	d402      	bmi.n	800b4aa <_fflush_r+0x3a>
 800b4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4a6:	f000 f915 	bl	800b6d4 <__retarget_lock_acquire_recursive>
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	f7ff ff59 	bl	800b364 <__sflush_r>
 800b4b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4b4:	07da      	lsls	r2, r3, #31
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	d4e0      	bmi.n	800b47c <_fflush_r+0xc>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	059b      	lsls	r3, r3, #22
 800b4be:	d4dd      	bmi.n	800b47c <_fflush_r+0xc>
 800b4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4c2:	f000 f908 	bl	800b6d6 <__retarget_lock_release_recursive>
 800b4c6:	e7d9      	b.n	800b47c <_fflush_r+0xc>
 800b4c8:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <_fflush_r+0x70>)
 800b4ca:	429c      	cmp	r4, r3
 800b4cc:	d101      	bne.n	800b4d2 <_fflush_r+0x62>
 800b4ce:	68ac      	ldr	r4, [r5, #8]
 800b4d0:	e7df      	b.n	800b492 <_fflush_r+0x22>
 800b4d2:	4b04      	ldr	r3, [pc, #16]	; (800b4e4 <_fflush_r+0x74>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	bf08      	it	eq
 800b4d8:	68ec      	ldreq	r4, [r5, #12]
 800b4da:	e7da      	b.n	800b492 <_fflush_r+0x22>
 800b4dc:	0800c8e0 	.word	0x0800c8e0
 800b4e0:	0800c900 	.word	0x0800c900
 800b4e4:	0800c8c0 	.word	0x0800c8c0

0800b4e8 <std>:
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b4f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4f6:	6083      	str	r3, [r0, #8]
 800b4f8:	8181      	strh	r1, [r0, #12]
 800b4fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b4fc:	81c2      	strh	r2, [r0, #14]
 800b4fe:	6183      	str	r3, [r0, #24]
 800b500:	4619      	mov	r1, r3
 800b502:	2208      	movs	r2, #8
 800b504:	305c      	adds	r0, #92	; 0x5c
 800b506:	f7ff fcab 	bl	800ae60 <memset>
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <std+0x38>)
 800b50c:	6263      	str	r3, [r4, #36]	; 0x24
 800b50e:	4b05      	ldr	r3, [pc, #20]	; (800b524 <std+0x3c>)
 800b510:	62a3      	str	r3, [r4, #40]	; 0x28
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <std+0x40>)
 800b514:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <std+0x44>)
 800b518:	6224      	str	r4, [r4, #32]
 800b51a:	6323      	str	r3, [r4, #48]	; 0x30
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	bf00      	nop
 800b520:	0800c2b9 	.word	0x0800c2b9
 800b524:	0800c2db 	.word	0x0800c2db
 800b528:	0800c313 	.word	0x0800c313
 800b52c:	0800c337 	.word	0x0800c337

0800b530 <_cleanup_r>:
 800b530:	4901      	ldr	r1, [pc, #4]	; (800b538 <_cleanup_r+0x8>)
 800b532:	f000 b8af 	b.w	800b694 <_fwalk_reent>
 800b536:	bf00      	nop
 800b538:	0800b471 	.word	0x0800b471

0800b53c <__sfmoreglue>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	2268      	movs	r2, #104	; 0x68
 800b540:	1e4d      	subs	r5, r1, #1
 800b542:	4355      	muls	r5, r2
 800b544:	460e      	mov	r6, r1
 800b546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b54a:	f000 f99f 	bl	800b88c <_malloc_r>
 800b54e:	4604      	mov	r4, r0
 800b550:	b140      	cbz	r0, 800b564 <__sfmoreglue+0x28>
 800b552:	2100      	movs	r1, #0
 800b554:	e9c0 1600 	strd	r1, r6, [r0]
 800b558:	300c      	adds	r0, #12
 800b55a:	60a0      	str	r0, [r4, #8]
 800b55c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b560:	f7ff fc7e 	bl	800ae60 <memset>
 800b564:	4620      	mov	r0, r4
 800b566:	bd70      	pop	{r4, r5, r6, pc}

0800b568 <__sfp_lock_acquire>:
 800b568:	4801      	ldr	r0, [pc, #4]	; (800b570 <__sfp_lock_acquire+0x8>)
 800b56a:	f000 b8b3 	b.w	800b6d4 <__retarget_lock_acquire_recursive>
 800b56e:	bf00      	nop
 800b570:	20004705 	.word	0x20004705

0800b574 <__sfp_lock_release>:
 800b574:	4801      	ldr	r0, [pc, #4]	; (800b57c <__sfp_lock_release+0x8>)
 800b576:	f000 b8ae 	b.w	800b6d6 <__retarget_lock_release_recursive>
 800b57a:	bf00      	nop
 800b57c:	20004705 	.word	0x20004705

0800b580 <__sinit_lock_acquire>:
 800b580:	4801      	ldr	r0, [pc, #4]	; (800b588 <__sinit_lock_acquire+0x8>)
 800b582:	f000 b8a7 	b.w	800b6d4 <__retarget_lock_acquire_recursive>
 800b586:	bf00      	nop
 800b588:	20004706 	.word	0x20004706

0800b58c <__sinit_lock_release>:
 800b58c:	4801      	ldr	r0, [pc, #4]	; (800b594 <__sinit_lock_release+0x8>)
 800b58e:	f000 b8a2 	b.w	800b6d6 <__retarget_lock_release_recursive>
 800b592:	bf00      	nop
 800b594:	20004706 	.word	0x20004706

0800b598 <__sinit>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	4604      	mov	r4, r0
 800b59c:	f7ff fff0 	bl	800b580 <__sinit_lock_acquire>
 800b5a0:	69a3      	ldr	r3, [r4, #24]
 800b5a2:	b11b      	cbz	r3, 800b5ac <__sinit+0x14>
 800b5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a8:	f7ff bff0 	b.w	800b58c <__sinit_lock_release>
 800b5ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b5b2:	4b13      	ldr	r3, [pc, #76]	; (800b600 <__sinit+0x68>)
 800b5b4:	4a13      	ldr	r2, [pc, #76]	; (800b604 <__sinit+0x6c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	bf04      	itt	eq
 800b5be:	2301      	moveq	r3, #1
 800b5c0:	61a3      	streq	r3, [r4, #24]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 f820 	bl	800b608 <__sfp>
 800b5c8:	6060      	str	r0, [r4, #4]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 f81c 	bl	800b608 <__sfp>
 800b5d0:	60a0      	str	r0, [r4, #8]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 f818 	bl	800b608 <__sfp>
 800b5d8:	2200      	movs	r2, #0
 800b5da:	60e0      	str	r0, [r4, #12]
 800b5dc:	2104      	movs	r1, #4
 800b5de:	6860      	ldr	r0, [r4, #4]
 800b5e0:	f7ff ff82 	bl	800b4e8 <std>
 800b5e4:	68a0      	ldr	r0, [r4, #8]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	2109      	movs	r1, #9
 800b5ea:	f7ff ff7d 	bl	800b4e8 <std>
 800b5ee:	68e0      	ldr	r0, [r4, #12]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	2112      	movs	r1, #18
 800b5f4:	f7ff ff78 	bl	800b4e8 <std>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	61a3      	str	r3, [r4, #24]
 800b5fc:	e7d2      	b.n	800b5a4 <__sinit+0xc>
 800b5fe:	bf00      	nop
 800b600:	0800c8bc 	.word	0x0800c8bc
 800b604:	0800b531 	.word	0x0800b531

0800b608 <__sfp>:
 800b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60a:	4607      	mov	r7, r0
 800b60c:	f7ff ffac 	bl	800b568 <__sfp_lock_acquire>
 800b610:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <__sfp+0x84>)
 800b612:	681e      	ldr	r6, [r3, #0]
 800b614:	69b3      	ldr	r3, [r6, #24]
 800b616:	b913      	cbnz	r3, 800b61e <__sfp+0x16>
 800b618:	4630      	mov	r0, r6
 800b61a:	f7ff ffbd 	bl	800b598 <__sinit>
 800b61e:	3648      	adds	r6, #72	; 0x48
 800b620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b624:	3b01      	subs	r3, #1
 800b626:	d503      	bpl.n	800b630 <__sfp+0x28>
 800b628:	6833      	ldr	r3, [r6, #0]
 800b62a:	b30b      	cbz	r3, 800b670 <__sfp+0x68>
 800b62c:	6836      	ldr	r6, [r6, #0]
 800b62e:	e7f7      	b.n	800b620 <__sfp+0x18>
 800b630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b634:	b9d5      	cbnz	r5, 800b66c <__sfp+0x64>
 800b636:	4b16      	ldr	r3, [pc, #88]	; (800b690 <__sfp+0x88>)
 800b638:	60e3      	str	r3, [r4, #12]
 800b63a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b63e:	6665      	str	r5, [r4, #100]	; 0x64
 800b640:	f000 f847 	bl	800b6d2 <__retarget_lock_init_recursive>
 800b644:	f7ff ff96 	bl	800b574 <__sfp_lock_release>
 800b648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b64c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b650:	6025      	str	r5, [r4, #0]
 800b652:	61a5      	str	r5, [r4, #24]
 800b654:	2208      	movs	r2, #8
 800b656:	4629      	mov	r1, r5
 800b658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b65c:	f7ff fc00 	bl	800ae60 <memset>
 800b660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b668:	4620      	mov	r0, r4
 800b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b66c:	3468      	adds	r4, #104	; 0x68
 800b66e:	e7d9      	b.n	800b624 <__sfp+0x1c>
 800b670:	2104      	movs	r1, #4
 800b672:	4638      	mov	r0, r7
 800b674:	f7ff ff62 	bl	800b53c <__sfmoreglue>
 800b678:	4604      	mov	r4, r0
 800b67a:	6030      	str	r0, [r6, #0]
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1d5      	bne.n	800b62c <__sfp+0x24>
 800b680:	f7ff ff78 	bl	800b574 <__sfp_lock_release>
 800b684:	230c      	movs	r3, #12
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	e7ee      	b.n	800b668 <__sfp+0x60>
 800b68a:	bf00      	nop
 800b68c:	0800c8bc 	.word	0x0800c8bc
 800b690:	ffff0001 	.word	0xffff0001

0800b694 <_fwalk_reent>:
 800b694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b698:	4606      	mov	r6, r0
 800b69a:	4688      	mov	r8, r1
 800b69c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6a0:	2700      	movs	r7, #0
 800b6a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b6aa:	d505      	bpl.n	800b6b8 <_fwalk_reent+0x24>
 800b6ac:	6824      	ldr	r4, [r4, #0]
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	d1f7      	bne.n	800b6a2 <_fwalk_reent+0xe>
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b8:	89ab      	ldrh	r3, [r5, #12]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d907      	bls.n	800b6ce <_fwalk_reent+0x3a>
 800b6be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	d003      	beq.n	800b6ce <_fwalk_reent+0x3a>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	47c0      	blx	r8
 800b6cc:	4307      	orrs	r7, r0
 800b6ce:	3568      	adds	r5, #104	; 0x68
 800b6d0:	e7e9      	b.n	800b6a6 <_fwalk_reent+0x12>

0800b6d2 <__retarget_lock_init_recursive>:
 800b6d2:	4770      	bx	lr

0800b6d4 <__retarget_lock_acquire_recursive>:
 800b6d4:	4770      	bx	lr

0800b6d6 <__retarget_lock_release_recursive>:
 800b6d6:	4770      	bx	lr

0800b6d8 <__swhatbuf_r>:
 800b6d8:	b570      	push	{r4, r5, r6, lr}
 800b6da:	460e      	mov	r6, r1
 800b6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e0:	2900      	cmp	r1, #0
 800b6e2:	b096      	sub	sp, #88	; 0x58
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	461d      	mov	r5, r3
 800b6e8:	da08      	bge.n	800b6fc <__swhatbuf_r+0x24>
 800b6ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	061a      	lsls	r2, r3, #24
 800b6f4:	d410      	bmi.n	800b718 <__swhatbuf_r+0x40>
 800b6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fa:	e00e      	b.n	800b71a <__swhatbuf_r+0x42>
 800b6fc:	466a      	mov	r2, sp
 800b6fe:	f000 fe41 	bl	800c384 <_fstat_r>
 800b702:	2800      	cmp	r0, #0
 800b704:	dbf1      	blt.n	800b6ea <__swhatbuf_r+0x12>
 800b706:	9a01      	ldr	r2, [sp, #4]
 800b708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b70c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b710:	425a      	negs	r2, r3
 800b712:	415a      	adcs	r2, r3
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	e7ee      	b.n	800b6f6 <__swhatbuf_r+0x1e>
 800b718:	2340      	movs	r3, #64	; 0x40
 800b71a:	2000      	movs	r0, #0
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	b016      	add	sp, #88	; 0x58
 800b720:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b724 <__smakebuf_r>:
 800b724:	898b      	ldrh	r3, [r1, #12]
 800b726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b728:	079d      	lsls	r5, r3, #30
 800b72a:	4606      	mov	r6, r0
 800b72c:	460c      	mov	r4, r1
 800b72e:	d507      	bpl.n	800b740 <__smakebuf_r+0x1c>
 800b730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	6123      	str	r3, [r4, #16]
 800b738:	2301      	movs	r3, #1
 800b73a:	6163      	str	r3, [r4, #20]
 800b73c:	b002      	add	sp, #8
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	ab01      	add	r3, sp, #4
 800b742:	466a      	mov	r2, sp
 800b744:	f7ff ffc8 	bl	800b6d8 <__swhatbuf_r>
 800b748:	9900      	ldr	r1, [sp, #0]
 800b74a:	4605      	mov	r5, r0
 800b74c:	4630      	mov	r0, r6
 800b74e:	f000 f89d 	bl	800b88c <_malloc_r>
 800b752:	b948      	cbnz	r0, 800b768 <__smakebuf_r+0x44>
 800b754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b758:	059a      	lsls	r2, r3, #22
 800b75a:	d4ef      	bmi.n	800b73c <__smakebuf_r+0x18>
 800b75c:	f023 0303 	bic.w	r3, r3, #3
 800b760:	f043 0302 	orr.w	r3, r3, #2
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	e7e3      	b.n	800b730 <__smakebuf_r+0xc>
 800b768:	4b0d      	ldr	r3, [pc, #52]	; (800b7a0 <__smakebuf_r+0x7c>)
 800b76a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	9b00      	ldr	r3, [sp, #0]
 800b778:	6163      	str	r3, [r4, #20]
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	6120      	str	r0, [r4, #16]
 800b77e:	b15b      	cbz	r3, 800b798 <__smakebuf_r+0x74>
 800b780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b784:	4630      	mov	r0, r6
 800b786:	f000 fe0f 	bl	800c3a8 <_isatty_r>
 800b78a:	b128      	cbz	r0, 800b798 <__smakebuf_r+0x74>
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	f043 0301 	orr.w	r3, r3, #1
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	89a0      	ldrh	r0, [r4, #12]
 800b79a:	4305      	orrs	r5, r0
 800b79c:	81a5      	strh	r5, [r4, #12]
 800b79e:	e7cd      	b.n	800b73c <__smakebuf_r+0x18>
 800b7a0:	0800b531 	.word	0x0800b531

0800b7a4 <malloc>:
 800b7a4:	4b02      	ldr	r3, [pc, #8]	; (800b7b0 <malloc+0xc>)
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	6818      	ldr	r0, [r3, #0]
 800b7aa:	f000 b86f 	b.w	800b88c <_malloc_r>
 800b7ae:	bf00      	nop
 800b7b0:	20000030 	.word	0x20000030

0800b7b4 <_free_r>:
 800b7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7b6:	2900      	cmp	r1, #0
 800b7b8:	d044      	beq.n	800b844 <_free_r+0x90>
 800b7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7be:	9001      	str	r0, [sp, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b7c6:	bfb8      	it	lt
 800b7c8:	18e4      	addlt	r4, r4, r3
 800b7ca:	f000 fe29 	bl	800c420 <__malloc_lock>
 800b7ce:	4a1e      	ldr	r2, [pc, #120]	; (800b848 <_free_r+0x94>)
 800b7d0:	9801      	ldr	r0, [sp, #4]
 800b7d2:	6813      	ldr	r3, [r2, #0]
 800b7d4:	b933      	cbnz	r3, 800b7e4 <_free_r+0x30>
 800b7d6:	6063      	str	r3, [r4, #4]
 800b7d8:	6014      	str	r4, [r2, #0]
 800b7da:	b003      	add	sp, #12
 800b7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7e0:	f000 be24 	b.w	800c42c <__malloc_unlock>
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	d908      	bls.n	800b7fa <_free_r+0x46>
 800b7e8:	6825      	ldr	r5, [r4, #0]
 800b7ea:	1961      	adds	r1, r4, r5
 800b7ec:	428b      	cmp	r3, r1
 800b7ee:	bf01      	itttt	eq
 800b7f0:	6819      	ldreq	r1, [r3, #0]
 800b7f2:	685b      	ldreq	r3, [r3, #4]
 800b7f4:	1949      	addeq	r1, r1, r5
 800b7f6:	6021      	streq	r1, [r4, #0]
 800b7f8:	e7ed      	b.n	800b7d6 <_free_r+0x22>
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	b10b      	cbz	r3, 800b804 <_free_r+0x50>
 800b800:	42a3      	cmp	r3, r4
 800b802:	d9fa      	bls.n	800b7fa <_free_r+0x46>
 800b804:	6811      	ldr	r1, [r2, #0]
 800b806:	1855      	adds	r5, r2, r1
 800b808:	42a5      	cmp	r5, r4
 800b80a:	d10b      	bne.n	800b824 <_free_r+0x70>
 800b80c:	6824      	ldr	r4, [r4, #0]
 800b80e:	4421      	add	r1, r4
 800b810:	1854      	adds	r4, r2, r1
 800b812:	42a3      	cmp	r3, r4
 800b814:	6011      	str	r1, [r2, #0]
 800b816:	d1e0      	bne.n	800b7da <_free_r+0x26>
 800b818:	681c      	ldr	r4, [r3, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	6053      	str	r3, [r2, #4]
 800b81e:	4421      	add	r1, r4
 800b820:	6011      	str	r1, [r2, #0]
 800b822:	e7da      	b.n	800b7da <_free_r+0x26>
 800b824:	d902      	bls.n	800b82c <_free_r+0x78>
 800b826:	230c      	movs	r3, #12
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	e7d6      	b.n	800b7da <_free_r+0x26>
 800b82c:	6825      	ldr	r5, [r4, #0]
 800b82e:	1961      	adds	r1, r4, r5
 800b830:	428b      	cmp	r3, r1
 800b832:	bf04      	itt	eq
 800b834:	6819      	ldreq	r1, [r3, #0]
 800b836:	685b      	ldreq	r3, [r3, #4]
 800b838:	6063      	str	r3, [r4, #4]
 800b83a:	bf04      	itt	eq
 800b83c:	1949      	addeq	r1, r1, r5
 800b83e:	6021      	streq	r1, [r4, #0]
 800b840:	6054      	str	r4, [r2, #4]
 800b842:	e7ca      	b.n	800b7da <_free_r+0x26>
 800b844:	b003      	add	sp, #12
 800b846:	bd30      	pop	{r4, r5, pc}
 800b848:	20004708 	.word	0x20004708

0800b84c <sbrk_aligned>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	4e0e      	ldr	r6, [pc, #56]	; (800b888 <sbrk_aligned+0x3c>)
 800b850:	460c      	mov	r4, r1
 800b852:	6831      	ldr	r1, [r6, #0]
 800b854:	4605      	mov	r5, r0
 800b856:	b911      	cbnz	r1, 800b85e <sbrk_aligned+0x12>
 800b858:	f000 fd1e 	bl	800c298 <_sbrk_r>
 800b85c:	6030      	str	r0, [r6, #0]
 800b85e:	4621      	mov	r1, r4
 800b860:	4628      	mov	r0, r5
 800b862:	f000 fd19 	bl	800c298 <_sbrk_r>
 800b866:	1c43      	adds	r3, r0, #1
 800b868:	d00a      	beq.n	800b880 <sbrk_aligned+0x34>
 800b86a:	1cc4      	adds	r4, r0, #3
 800b86c:	f024 0403 	bic.w	r4, r4, #3
 800b870:	42a0      	cmp	r0, r4
 800b872:	d007      	beq.n	800b884 <sbrk_aligned+0x38>
 800b874:	1a21      	subs	r1, r4, r0
 800b876:	4628      	mov	r0, r5
 800b878:	f000 fd0e 	bl	800c298 <_sbrk_r>
 800b87c:	3001      	adds	r0, #1
 800b87e:	d101      	bne.n	800b884 <sbrk_aligned+0x38>
 800b880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b884:	4620      	mov	r0, r4
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	2000470c 	.word	0x2000470c

0800b88c <_malloc_r>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	1ccd      	adds	r5, r1, #3
 800b892:	f025 0503 	bic.w	r5, r5, #3
 800b896:	3508      	adds	r5, #8
 800b898:	2d0c      	cmp	r5, #12
 800b89a:	bf38      	it	cc
 800b89c:	250c      	movcc	r5, #12
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	db01      	blt.n	800b8a8 <_malloc_r+0x1c>
 800b8a4:	42a9      	cmp	r1, r5
 800b8a6:	d905      	bls.n	800b8b4 <_malloc_r+0x28>
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	603b      	str	r3, [r7, #0]
 800b8ac:	2600      	movs	r6, #0
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b4:	4e2e      	ldr	r6, [pc, #184]	; (800b970 <_malloc_r+0xe4>)
 800b8b6:	f000 fdb3 	bl	800c420 <__malloc_lock>
 800b8ba:	6833      	ldr	r3, [r6, #0]
 800b8bc:	461c      	mov	r4, r3
 800b8be:	bb34      	cbnz	r4, 800b90e <_malloc_r+0x82>
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	f7ff ffc2 	bl	800b84c <sbrk_aligned>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	d14d      	bne.n	800b96a <_malloc_r+0xde>
 800b8ce:	6834      	ldr	r4, [r6, #0]
 800b8d0:	4626      	mov	r6, r4
 800b8d2:	2e00      	cmp	r6, #0
 800b8d4:	d140      	bne.n	800b958 <_malloc_r+0xcc>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4638      	mov	r0, r7
 800b8dc:	eb04 0803 	add.w	r8, r4, r3
 800b8e0:	f000 fcda 	bl	800c298 <_sbrk_r>
 800b8e4:	4580      	cmp	r8, r0
 800b8e6:	d13a      	bne.n	800b95e <_malloc_r+0xd2>
 800b8e8:	6821      	ldr	r1, [r4, #0]
 800b8ea:	3503      	adds	r5, #3
 800b8ec:	1a6d      	subs	r5, r5, r1
 800b8ee:	f025 0503 	bic.w	r5, r5, #3
 800b8f2:	3508      	adds	r5, #8
 800b8f4:	2d0c      	cmp	r5, #12
 800b8f6:	bf38      	it	cc
 800b8f8:	250c      	movcc	r5, #12
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f7ff ffa5 	bl	800b84c <sbrk_aligned>
 800b902:	3001      	adds	r0, #1
 800b904:	d02b      	beq.n	800b95e <_malloc_r+0xd2>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	442b      	add	r3, r5
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	e00e      	b.n	800b92c <_malloc_r+0xa0>
 800b90e:	6822      	ldr	r2, [r4, #0]
 800b910:	1b52      	subs	r2, r2, r5
 800b912:	d41e      	bmi.n	800b952 <_malloc_r+0xc6>
 800b914:	2a0b      	cmp	r2, #11
 800b916:	d916      	bls.n	800b946 <_malloc_r+0xba>
 800b918:	1961      	adds	r1, r4, r5
 800b91a:	42a3      	cmp	r3, r4
 800b91c:	6025      	str	r5, [r4, #0]
 800b91e:	bf18      	it	ne
 800b920:	6059      	strne	r1, [r3, #4]
 800b922:	6863      	ldr	r3, [r4, #4]
 800b924:	bf08      	it	eq
 800b926:	6031      	streq	r1, [r6, #0]
 800b928:	5162      	str	r2, [r4, r5]
 800b92a:	604b      	str	r3, [r1, #4]
 800b92c:	4638      	mov	r0, r7
 800b92e:	f104 060b 	add.w	r6, r4, #11
 800b932:	f000 fd7b 	bl	800c42c <__malloc_unlock>
 800b936:	f026 0607 	bic.w	r6, r6, #7
 800b93a:	1d23      	adds	r3, r4, #4
 800b93c:	1af2      	subs	r2, r6, r3
 800b93e:	d0b6      	beq.n	800b8ae <_malloc_r+0x22>
 800b940:	1b9b      	subs	r3, r3, r6
 800b942:	50a3      	str	r3, [r4, r2]
 800b944:	e7b3      	b.n	800b8ae <_malloc_r+0x22>
 800b946:	6862      	ldr	r2, [r4, #4]
 800b948:	42a3      	cmp	r3, r4
 800b94a:	bf0c      	ite	eq
 800b94c:	6032      	streq	r2, [r6, #0]
 800b94e:	605a      	strne	r2, [r3, #4]
 800b950:	e7ec      	b.n	800b92c <_malloc_r+0xa0>
 800b952:	4623      	mov	r3, r4
 800b954:	6864      	ldr	r4, [r4, #4]
 800b956:	e7b2      	b.n	800b8be <_malloc_r+0x32>
 800b958:	4634      	mov	r4, r6
 800b95a:	6876      	ldr	r6, [r6, #4]
 800b95c:	e7b9      	b.n	800b8d2 <_malloc_r+0x46>
 800b95e:	230c      	movs	r3, #12
 800b960:	603b      	str	r3, [r7, #0]
 800b962:	4638      	mov	r0, r7
 800b964:	f000 fd62 	bl	800c42c <__malloc_unlock>
 800b968:	e7a1      	b.n	800b8ae <_malloc_r+0x22>
 800b96a:	6025      	str	r5, [r4, #0]
 800b96c:	e7de      	b.n	800b92c <_malloc_r+0xa0>
 800b96e:	bf00      	nop
 800b970:	20004708 	.word	0x20004708

0800b974 <__ssputs_r>:
 800b974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b978:	688e      	ldr	r6, [r1, #8]
 800b97a:	429e      	cmp	r6, r3
 800b97c:	4682      	mov	sl, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	4690      	mov	r8, r2
 800b982:	461f      	mov	r7, r3
 800b984:	d838      	bhi.n	800b9f8 <__ssputs_r+0x84>
 800b986:	898a      	ldrh	r2, [r1, #12]
 800b988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b98c:	d032      	beq.n	800b9f4 <__ssputs_r+0x80>
 800b98e:	6825      	ldr	r5, [r4, #0]
 800b990:	6909      	ldr	r1, [r1, #16]
 800b992:	eba5 0901 	sub.w	r9, r5, r1
 800b996:	6965      	ldr	r5, [r4, #20]
 800b998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b99c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	444b      	add	r3, r9
 800b9a4:	106d      	asrs	r5, r5, #1
 800b9a6:	429d      	cmp	r5, r3
 800b9a8:	bf38      	it	cc
 800b9aa:	461d      	movcc	r5, r3
 800b9ac:	0553      	lsls	r3, r2, #21
 800b9ae:	d531      	bpl.n	800ba14 <__ssputs_r+0xa0>
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7ff ff6b 	bl	800b88c <_malloc_r>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	b950      	cbnz	r0, 800b9d0 <__ssputs_r+0x5c>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	f8ca 3000 	str.w	r3, [sl]
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c6:	81a3      	strh	r3, [r4, #12]
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d0:	6921      	ldr	r1, [r4, #16]
 800b9d2:	464a      	mov	r2, r9
 800b9d4:	f7ff fa36 	bl	800ae44 <memcpy>
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	6126      	str	r6, [r4, #16]
 800b9e6:	6165      	str	r5, [r4, #20]
 800b9e8:	444e      	add	r6, r9
 800b9ea:	eba5 0509 	sub.w	r5, r5, r9
 800b9ee:	6026      	str	r6, [r4, #0]
 800b9f0:	60a5      	str	r5, [r4, #8]
 800b9f2:	463e      	mov	r6, r7
 800b9f4:	42be      	cmp	r6, r7
 800b9f6:	d900      	bls.n	800b9fa <__ssputs_r+0x86>
 800b9f8:	463e      	mov	r6, r7
 800b9fa:	6820      	ldr	r0, [r4, #0]
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	4641      	mov	r1, r8
 800ba00:	f000 fcf4 	bl	800c3ec <memmove>
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	1b9b      	subs	r3, r3, r6
 800ba08:	60a3      	str	r3, [r4, #8]
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	4433      	add	r3, r6
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	2000      	movs	r0, #0
 800ba12:	e7db      	b.n	800b9cc <__ssputs_r+0x58>
 800ba14:	462a      	mov	r2, r5
 800ba16:	f000 fd0f 	bl	800c438 <_realloc_r>
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1e1      	bne.n	800b9e4 <__ssputs_r+0x70>
 800ba20:	6921      	ldr	r1, [r4, #16]
 800ba22:	4650      	mov	r0, sl
 800ba24:	f7ff fec6 	bl	800b7b4 <_free_r>
 800ba28:	e7c7      	b.n	800b9ba <__ssputs_r+0x46>
	...

0800ba2c <_svfiprintf_r>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	4698      	mov	r8, r3
 800ba32:	898b      	ldrh	r3, [r1, #12]
 800ba34:	061b      	lsls	r3, r3, #24
 800ba36:	b09d      	sub	sp, #116	; 0x74
 800ba38:	4607      	mov	r7, r0
 800ba3a:	460d      	mov	r5, r1
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	d50e      	bpl.n	800ba5e <_svfiprintf_r+0x32>
 800ba40:	690b      	ldr	r3, [r1, #16]
 800ba42:	b963      	cbnz	r3, 800ba5e <_svfiprintf_r+0x32>
 800ba44:	2140      	movs	r1, #64	; 0x40
 800ba46:	f7ff ff21 	bl	800b88c <_malloc_r>
 800ba4a:	6028      	str	r0, [r5, #0]
 800ba4c:	6128      	str	r0, [r5, #16]
 800ba4e:	b920      	cbnz	r0, 800ba5a <_svfiprintf_r+0x2e>
 800ba50:	230c      	movs	r3, #12
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba58:	e0d1      	b.n	800bbfe <_svfiprintf_r+0x1d2>
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	616b      	str	r3, [r5, #20]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9309      	str	r3, [sp, #36]	; 0x24
 800ba62:	2320      	movs	r3, #32
 800ba64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba6c:	2330      	movs	r3, #48	; 0x30
 800ba6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc18 <_svfiprintf_r+0x1ec>
 800ba72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba76:	f04f 0901 	mov.w	r9, #1
 800ba7a:	4623      	mov	r3, r4
 800ba7c:	469a      	mov	sl, r3
 800ba7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba82:	b10a      	cbz	r2, 800ba88 <_svfiprintf_r+0x5c>
 800ba84:	2a25      	cmp	r2, #37	; 0x25
 800ba86:	d1f9      	bne.n	800ba7c <_svfiprintf_r+0x50>
 800ba88:	ebba 0b04 	subs.w	fp, sl, r4
 800ba8c:	d00b      	beq.n	800baa6 <_svfiprintf_r+0x7a>
 800ba8e:	465b      	mov	r3, fp
 800ba90:	4622      	mov	r2, r4
 800ba92:	4629      	mov	r1, r5
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7ff ff6d 	bl	800b974 <__ssputs_r>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	f000 80aa 	beq.w	800bbf4 <_svfiprintf_r+0x1c8>
 800baa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa2:	445a      	add	r2, fp
 800baa4:	9209      	str	r2, [sp, #36]	; 0x24
 800baa6:	f89a 3000 	ldrb.w	r3, [sl]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 80a2 	beq.w	800bbf4 <_svfiprintf_r+0x1c8>
 800bab0:	2300      	movs	r3, #0
 800bab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baba:	f10a 0a01 	add.w	sl, sl, #1
 800babe:	9304      	str	r3, [sp, #16]
 800bac0:	9307      	str	r3, [sp, #28]
 800bac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac6:	931a      	str	r3, [sp, #104]	; 0x68
 800bac8:	4654      	mov	r4, sl
 800baca:	2205      	movs	r2, #5
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	4851      	ldr	r0, [pc, #324]	; (800bc18 <_svfiprintf_r+0x1ec>)
 800bad2:	f7f4 fba5 	bl	8000220 <memchr>
 800bad6:	9a04      	ldr	r2, [sp, #16]
 800bad8:	b9d8      	cbnz	r0, 800bb12 <_svfiprintf_r+0xe6>
 800bada:	06d0      	lsls	r0, r2, #27
 800badc:	bf44      	itt	mi
 800bade:	2320      	movmi	r3, #32
 800bae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae4:	0711      	lsls	r1, r2, #28
 800bae6:	bf44      	itt	mi
 800bae8:	232b      	movmi	r3, #43	; 0x2b
 800baea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baee:	f89a 3000 	ldrb.w	r3, [sl]
 800baf2:	2b2a      	cmp	r3, #42	; 0x2a
 800baf4:	d015      	beq.n	800bb22 <_svfiprintf_r+0xf6>
 800baf6:	9a07      	ldr	r2, [sp, #28]
 800baf8:	4654      	mov	r4, sl
 800bafa:	2000      	movs	r0, #0
 800bafc:	f04f 0c0a 	mov.w	ip, #10
 800bb00:	4621      	mov	r1, r4
 800bb02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb06:	3b30      	subs	r3, #48	; 0x30
 800bb08:	2b09      	cmp	r3, #9
 800bb0a:	d94e      	bls.n	800bbaa <_svfiprintf_r+0x17e>
 800bb0c:	b1b0      	cbz	r0, 800bb3c <_svfiprintf_r+0x110>
 800bb0e:	9207      	str	r2, [sp, #28]
 800bb10:	e014      	b.n	800bb3c <_svfiprintf_r+0x110>
 800bb12:	eba0 0308 	sub.w	r3, r0, r8
 800bb16:	fa09 f303 	lsl.w	r3, r9, r3
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	46a2      	mov	sl, r4
 800bb20:	e7d2      	b.n	800bac8 <_svfiprintf_r+0x9c>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	1d19      	adds	r1, r3, #4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	9103      	str	r1, [sp, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfbb      	ittet	lt
 800bb2e:	425b      	neglt	r3, r3
 800bb30:	f042 0202 	orrlt.w	r2, r2, #2
 800bb34:	9307      	strge	r3, [sp, #28]
 800bb36:	9307      	strlt	r3, [sp, #28]
 800bb38:	bfb8      	it	lt
 800bb3a:	9204      	strlt	r2, [sp, #16]
 800bb3c:	7823      	ldrb	r3, [r4, #0]
 800bb3e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb40:	d10c      	bne.n	800bb5c <_svfiprintf_r+0x130>
 800bb42:	7863      	ldrb	r3, [r4, #1]
 800bb44:	2b2a      	cmp	r3, #42	; 0x2a
 800bb46:	d135      	bne.n	800bbb4 <_svfiprintf_r+0x188>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	1d1a      	adds	r2, r3, #4
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	9203      	str	r2, [sp, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	bfb8      	it	lt
 800bb54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb58:	3402      	adds	r4, #2
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc28 <_svfiprintf_r+0x1fc>
 800bb60:	7821      	ldrb	r1, [r4, #0]
 800bb62:	2203      	movs	r2, #3
 800bb64:	4650      	mov	r0, sl
 800bb66:	f7f4 fb5b 	bl	8000220 <memchr>
 800bb6a:	b140      	cbz	r0, 800bb7e <_svfiprintf_r+0x152>
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	eba0 000a 	sub.w	r0, r0, sl
 800bb72:	fa03 f000 	lsl.w	r0, r3, r0
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	4303      	orrs	r3, r0
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	4826      	ldr	r0, [pc, #152]	; (800bc1c <_svfiprintf_r+0x1f0>)
 800bb84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb88:	2206      	movs	r2, #6
 800bb8a:	f7f4 fb49 	bl	8000220 <memchr>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d038      	beq.n	800bc04 <_svfiprintf_r+0x1d8>
 800bb92:	4b23      	ldr	r3, [pc, #140]	; (800bc20 <_svfiprintf_r+0x1f4>)
 800bb94:	bb1b      	cbnz	r3, 800bbde <_svfiprintf_r+0x1b2>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	3307      	adds	r3, #7
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba4:	4433      	add	r3, r6
 800bba6:	9309      	str	r3, [sp, #36]	; 0x24
 800bba8:	e767      	b.n	800ba7a <_svfiprintf_r+0x4e>
 800bbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbae:	460c      	mov	r4, r1
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	e7a5      	b.n	800bb00 <_svfiprintf_r+0xd4>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	3401      	adds	r4, #1
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f04f 0c0a 	mov.w	ip, #10
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc6:	3a30      	subs	r2, #48	; 0x30
 800bbc8:	2a09      	cmp	r2, #9
 800bbca:	d903      	bls.n	800bbd4 <_svfiprintf_r+0x1a8>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c5      	beq.n	800bb5c <_svfiprintf_r+0x130>
 800bbd0:	9105      	str	r1, [sp, #20]
 800bbd2:	e7c3      	b.n	800bb5c <_svfiprintf_r+0x130>
 800bbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd8:	4604      	mov	r4, r0
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7f0      	b.n	800bbc0 <_svfiprintf_r+0x194>
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <_svfiprintf_r+0x1f8>)
 800bbe6:	a904      	add	r1, sp, #16
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f3af 8000 	nop.w
 800bbee:	1c42      	adds	r2, r0, #1
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	d1d6      	bne.n	800bba2 <_svfiprintf_r+0x176>
 800bbf4:	89ab      	ldrh	r3, [r5, #12]
 800bbf6:	065b      	lsls	r3, r3, #25
 800bbf8:	f53f af2c 	bmi.w	800ba54 <_svfiprintf_r+0x28>
 800bbfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbfe:	b01d      	add	sp, #116	; 0x74
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	ab03      	add	r3, sp, #12
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <_svfiprintf_r+0x1f8>)
 800bc0c:	a904      	add	r1, sp, #16
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f000 f9d4 	bl	800bfbc <_printf_i>
 800bc14:	e7eb      	b.n	800bbee <_svfiprintf_r+0x1c2>
 800bc16:	bf00      	nop
 800bc18:	0800c920 	.word	0x0800c920
 800bc1c:	0800c92a 	.word	0x0800c92a
 800bc20:	00000000 	.word	0x00000000
 800bc24:	0800b975 	.word	0x0800b975
 800bc28:	0800c926 	.word	0x0800c926

0800bc2c <__sfputc_r>:
 800bc2c:	6893      	ldr	r3, [r2, #8]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	b410      	push	{r4}
 800bc34:	6093      	str	r3, [r2, #8]
 800bc36:	da08      	bge.n	800bc4a <__sfputc_r+0x1e>
 800bc38:	6994      	ldr	r4, [r2, #24]
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	db01      	blt.n	800bc42 <__sfputc_r+0x16>
 800bc3e:	290a      	cmp	r1, #10
 800bc40:	d103      	bne.n	800bc4a <__sfputc_r+0x1e>
 800bc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc46:	f7ff bacd 	b.w	800b1e4 <__swbuf_r>
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	1c58      	adds	r0, r3, #1
 800bc4e:	6010      	str	r0, [r2, #0]
 800bc50:	7019      	strb	r1, [r3, #0]
 800bc52:	4608      	mov	r0, r1
 800bc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <__sfputs_r>:
 800bc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	460f      	mov	r7, r1
 800bc60:	4614      	mov	r4, r2
 800bc62:	18d5      	adds	r5, r2, r3
 800bc64:	42ac      	cmp	r4, r5
 800bc66:	d101      	bne.n	800bc6c <__sfputs_r+0x12>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e007      	b.n	800bc7c <__sfputs_r+0x22>
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	463a      	mov	r2, r7
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ffda 	bl	800bc2c <__sfputc_r>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d1f3      	bne.n	800bc64 <__sfputs_r+0xa>
 800bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc80 <_vfiprintf_r>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	460d      	mov	r5, r1
 800bc86:	b09d      	sub	sp, #116	; 0x74
 800bc88:	4614      	mov	r4, r2
 800bc8a:	4698      	mov	r8, r3
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	b118      	cbz	r0, 800bc98 <_vfiprintf_r+0x18>
 800bc90:	6983      	ldr	r3, [r0, #24]
 800bc92:	b90b      	cbnz	r3, 800bc98 <_vfiprintf_r+0x18>
 800bc94:	f7ff fc80 	bl	800b598 <__sinit>
 800bc98:	4b89      	ldr	r3, [pc, #548]	; (800bec0 <_vfiprintf_r+0x240>)
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	d11b      	bne.n	800bcd6 <_vfiprintf_r+0x56>
 800bc9e:	6875      	ldr	r5, [r6, #4]
 800bca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca2:	07d9      	lsls	r1, r3, #31
 800bca4:	d405      	bmi.n	800bcb2 <_vfiprintf_r+0x32>
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	059a      	lsls	r2, r3, #22
 800bcaa:	d402      	bmi.n	800bcb2 <_vfiprintf_r+0x32>
 800bcac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcae:	f7ff fd11 	bl	800b6d4 <__retarget_lock_acquire_recursive>
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	071b      	lsls	r3, r3, #28
 800bcb6:	d501      	bpl.n	800bcbc <_vfiprintf_r+0x3c>
 800bcb8:	692b      	ldr	r3, [r5, #16]
 800bcba:	b9eb      	cbnz	r3, 800bcf8 <_vfiprintf_r+0x78>
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7ff fae2 	bl	800b288 <__swsetup_r>
 800bcc4:	b1c0      	cbz	r0, 800bcf8 <_vfiprintf_r+0x78>
 800bcc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc8:	07dc      	lsls	r4, r3, #31
 800bcca:	d50e      	bpl.n	800bcea <_vfiprintf_r+0x6a>
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd0:	b01d      	add	sp, #116	; 0x74
 800bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd6:	4b7b      	ldr	r3, [pc, #492]	; (800bec4 <_vfiprintf_r+0x244>)
 800bcd8:	429d      	cmp	r5, r3
 800bcda:	d101      	bne.n	800bce0 <_vfiprintf_r+0x60>
 800bcdc:	68b5      	ldr	r5, [r6, #8]
 800bcde:	e7df      	b.n	800bca0 <_vfiprintf_r+0x20>
 800bce0:	4b79      	ldr	r3, [pc, #484]	; (800bec8 <_vfiprintf_r+0x248>)
 800bce2:	429d      	cmp	r5, r3
 800bce4:	bf08      	it	eq
 800bce6:	68f5      	ldreq	r5, [r6, #12]
 800bce8:	e7da      	b.n	800bca0 <_vfiprintf_r+0x20>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	0598      	lsls	r0, r3, #22
 800bcee:	d4ed      	bmi.n	800bccc <_vfiprintf_r+0x4c>
 800bcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf2:	f7ff fcf0 	bl	800b6d6 <__retarget_lock_release_recursive>
 800bcf6:	e7e9      	b.n	800bccc <_vfiprintf_r+0x4c>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd02:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd06:	2330      	movs	r3, #48	; 0x30
 800bd08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800becc <_vfiprintf_r+0x24c>
 800bd0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd10:	f04f 0901 	mov.w	r9, #1
 800bd14:	4623      	mov	r3, r4
 800bd16:	469a      	mov	sl, r3
 800bd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd1c:	b10a      	cbz	r2, 800bd22 <_vfiprintf_r+0xa2>
 800bd1e:	2a25      	cmp	r2, #37	; 0x25
 800bd20:	d1f9      	bne.n	800bd16 <_vfiprintf_r+0x96>
 800bd22:	ebba 0b04 	subs.w	fp, sl, r4
 800bd26:	d00b      	beq.n	800bd40 <_vfiprintf_r+0xc0>
 800bd28:	465b      	mov	r3, fp
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ff93 	bl	800bc5a <__sfputs_r>
 800bd34:	3001      	adds	r0, #1
 800bd36:	f000 80aa 	beq.w	800be8e <_vfiprintf_r+0x20e>
 800bd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd3c:	445a      	add	r2, fp
 800bd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd40:	f89a 3000 	ldrb.w	r3, [sl]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 80a2 	beq.w	800be8e <_vfiprintf_r+0x20e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9307      	str	r3, [sp, #28]
 800bd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd60:	931a      	str	r3, [sp, #104]	; 0x68
 800bd62:	4654      	mov	r4, sl
 800bd64:	2205      	movs	r2, #5
 800bd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6a:	4858      	ldr	r0, [pc, #352]	; (800becc <_vfiprintf_r+0x24c>)
 800bd6c:	f7f4 fa58 	bl	8000220 <memchr>
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	b9d8      	cbnz	r0, 800bdac <_vfiprintf_r+0x12c>
 800bd74:	06d1      	lsls	r1, r2, #27
 800bd76:	bf44      	itt	mi
 800bd78:	2320      	movmi	r3, #32
 800bd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd7e:	0713      	lsls	r3, r2, #28
 800bd80:	bf44      	itt	mi
 800bd82:	232b      	movmi	r3, #43	; 0x2b
 800bd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd88:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8e:	d015      	beq.n	800bdbc <_vfiprintf_r+0x13c>
 800bd90:	9a07      	ldr	r2, [sp, #28]
 800bd92:	4654      	mov	r4, sl
 800bd94:	2000      	movs	r0, #0
 800bd96:	f04f 0c0a 	mov.w	ip, #10
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda0:	3b30      	subs	r3, #48	; 0x30
 800bda2:	2b09      	cmp	r3, #9
 800bda4:	d94e      	bls.n	800be44 <_vfiprintf_r+0x1c4>
 800bda6:	b1b0      	cbz	r0, 800bdd6 <_vfiprintf_r+0x156>
 800bda8:	9207      	str	r2, [sp, #28]
 800bdaa:	e014      	b.n	800bdd6 <_vfiprintf_r+0x156>
 800bdac:	eba0 0308 	sub.w	r3, r0, r8
 800bdb0:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	46a2      	mov	sl, r4
 800bdba:	e7d2      	b.n	800bd62 <_vfiprintf_r+0xe2>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	1d19      	adds	r1, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	9103      	str	r1, [sp, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bfbb      	ittet	lt
 800bdc8:	425b      	neglt	r3, r3
 800bdca:	f042 0202 	orrlt.w	r2, r2, #2
 800bdce:	9307      	strge	r3, [sp, #28]
 800bdd0:	9307      	strlt	r3, [sp, #28]
 800bdd2:	bfb8      	it	lt
 800bdd4:	9204      	strlt	r2, [sp, #16]
 800bdd6:	7823      	ldrb	r3, [r4, #0]
 800bdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdda:	d10c      	bne.n	800bdf6 <_vfiprintf_r+0x176>
 800bddc:	7863      	ldrb	r3, [r4, #1]
 800bdde:	2b2a      	cmp	r3, #42	; 0x2a
 800bde0:	d135      	bne.n	800be4e <_vfiprintf_r+0x1ce>
 800bde2:	9b03      	ldr	r3, [sp, #12]
 800bde4:	1d1a      	adds	r2, r3, #4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	9203      	str	r2, [sp, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bfb8      	it	lt
 800bdee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdf2:	3402      	adds	r4, #2
 800bdf4:	9305      	str	r3, [sp, #20]
 800bdf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bedc <_vfiprintf_r+0x25c>
 800bdfa:	7821      	ldrb	r1, [r4, #0]
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	4650      	mov	r0, sl
 800be00:	f7f4 fa0e 	bl	8000220 <memchr>
 800be04:	b140      	cbz	r0, 800be18 <_vfiprintf_r+0x198>
 800be06:	2340      	movs	r3, #64	; 0x40
 800be08:	eba0 000a 	sub.w	r0, r0, sl
 800be0c:	fa03 f000 	lsl.w	r0, r3, r0
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	4303      	orrs	r3, r0
 800be14:	3401      	adds	r4, #1
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1c:	482c      	ldr	r0, [pc, #176]	; (800bed0 <_vfiprintf_r+0x250>)
 800be1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be22:	2206      	movs	r2, #6
 800be24:	f7f4 f9fc 	bl	8000220 <memchr>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d03f      	beq.n	800beac <_vfiprintf_r+0x22c>
 800be2c:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <_vfiprintf_r+0x254>)
 800be2e:	bb1b      	cbnz	r3, 800be78 <_vfiprintf_r+0x1f8>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	3307      	adds	r3, #7
 800be34:	f023 0307 	bic.w	r3, r3, #7
 800be38:	3308      	adds	r3, #8
 800be3a:	9303      	str	r3, [sp, #12]
 800be3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3e:	443b      	add	r3, r7
 800be40:	9309      	str	r3, [sp, #36]	; 0x24
 800be42:	e767      	b.n	800bd14 <_vfiprintf_r+0x94>
 800be44:	fb0c 3202 	mla	r2, ip, r2, r3
 800be48:	460c      	mov	r4, r1
 800be4a:	2001      	movs	r0, #1
 800be4c:	e7a5      	b.n	800bd9a <_vfiprintf_r+0x11a>
 800be4e:	2300      	movs	r3, #0
 800be50:	3401      	adds	r4, #1
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	4619      	mov	r1, r3
 800be56:	f04f 0c0a 	mov.w	ip, #10
 800be5a:	4620      	mov	r0, r4
 800be5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be60:	3a30      	subs	r2, #48	; 0x30
 800be62:	2a09      	cmp	r2, #9
 800be64:	d903      	bls.n	800be6e <_vfiprintf_r+0x1ee>
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0c5      	beq.n	800bdf6 <_vfiprintf_r+0x176>
 800be6a:	9105      	str	r1, [sp, #20]
 800be6c:	e7c3      	b.n	800bdf6 <_vfiprintf_r+0x176>
 800be6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800be72:	4604      	mov	r4, r0
 800be74:	2301      	movs	r3, #1
 800be76:	e7f0      	b.n	800be5a <_vfiprintf_r+0x1da>
 800be78:	ab03      	add	r3, sp, #12
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	462a      	mov	r2, r5
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <_vfiprintf_r+0x258>)
 800be80:	a904      	add	r1, sp, #16
 800be82:	4630      	mov	r0, r6
 800be84:	f3af 8000 	nop.w
 800be88:	4607      	mov	r7, r0
 800be8a:	1c78      	adds	r0, r7, #1
 800be8c:	d1d6      	bne.n	800be3c <_vfiprintf_r+0x1bc>
 800be8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be90:	07d9      	lsls	r1, r3, #31
 800be92:	d405      	bmi.n	800bea0 <_vfiprintf_r+0x220>
 800be94:	89ab      	ldrh	r3, [r5, #12]
 800be96:	059a      	lsls	r2, r3, #22
 800be98:	d402      	bmi.n	800bea0 <_vfiprintf_r+0x220>
 800be9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9c:	f7ff fc1b 	bl	800b6d6 <__retarget_lock_release_recursive>
 800bea0:	89ab      	ldrh	r3, [r5, #12]
 800bea2:	065b      	lsls	r3, r3, #25
 800bea4:	f53f af12 	bmi.w	800bccc <_vfiprintf_r+0x4c>
 800bea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beaa:	e711      	b.n	800bcd0 <_vfiprintf_r+0x50>
 800beac:	ab03      	add	r3, sp, #12
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <_vfiprintf_r+0x258>)
 800beb4:	a904      	add	r1, sp, #16
 800beb6:	4630      	mov	r0, r6
 800beb8:	f000 f880 	bl	800bfbc <_printf_i>
 800bebc:	e7e4      	b.n	800be88 <_vfiprintf_r+0x208>
 800bebe:	bf00      	nop
 800bec0:	0800c8e0 	.word	0x0800c8e0
 800bec4:	0800c900 	.word	0x0800c900
 800bec8:	0800c8c0 	.word	0x0800c8c0
 800becc:	0800c920 	.word	0x0800c920
 800bed0:	0800c92a 	.word	0x0800c92a
 800bed4:	00000000 	.word	0x00000000
 800bed8:	0800bc5b 	.word	0x0800bc5b
 800bedc:	0800c926 	.word	0x0800c926

0800bee0 <_printf_common>:
 800bee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee4:	4616      	mov	r6, r2
 800bee6:	4699      	mov	r9, r3
 800bee8:	688a      	ldr	r2, [r1, #8]
 800beea:	690b      	ldr	r3, [r1, #16]
 800beec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bef0:	4293      	cmp	r3, r2
 800bef2:	bfb8      	it	lt
 800bef4:	4613      	movlt	r3, r2
 800bef6:	6033      	str	r3, [r6, #0]
 800bef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800befc:	4607      	mov	r7, r0
 800befe:	460c      	mov	r4, r1
 800bf00:	b10a      	cbz	r2, 800bf06 <_printf_common+0x26>
 800bf02:	3301      	adds	r3, #1
 800bf04:	6033      	str	r3, [r6, #0]
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	0699      	lsls	r1, r3, #26
 800bf0a:	bf42      	ittt	mi
 800bf0c:	6833      	ldrmi	r3, [r6, #0]
 800bf0e:	3302      	addmi	r3, #2
 800bf10:	6033      	strmi	r3, [r6, #0]
 800bf12:	6825      	ldr	r5, [r4, #0]
 800bf14:	f015 0506 	ands.w	r5, r5, #6
 800bf18:	d106      	bne.n	800bf28 <_printf_common+0x48>
 800bf1a:	f104 0a19 	add.w	sl, r4, #25
 800bf1e:	68e3      	ldr	r3, [r4, #12]
 800bf20:	6832      	ldr	r2, [r6, #0]
 800bf22:	1a9b      	subs	r3, r3, r2
 800bf24:	42ab      	cmp	r3, r5
 800bf26:	dc26      	bgt.n	800bf76 <_printf_common+0x96>
 800bf28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf2c:	1e13      	subs	r3, r2, #0
 800bf2e:	6822      	ldr	r2, [r4, #0]
 800bf30:	bf18      	it	ne
 800bf32:	2301      	movne	r3, #1
 800bf34:	0692      	lsls	r2, r2, #26
 800bf36:	d42b      	bmi.n	800bf90 <_printf_common+0xb0>
 800bf38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	4638      	mov	r0, r7
 800bf40:	47c0      	blx	r8
 800bf42:	3001      	adds	r0, #1
 800bf44:	d01e      	beq.n	800bf84 <_printf_common+0xa4>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	68e5      	ldr	r5, [r4, #12]
 800bf4a:	6832      	ldr	r2, [r6, #0]
 800bf4c:	f003 0306 	and.w	r3, r3, #6
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	bf08      	it	eq
 800bf54:	1aad      	subeq	r5, r5, r2
 800bf56:	68a3      	ldr	r3, [r4, #8]
 800bf58:	6922      	ldr	r2, [r4, #16]
 800bf5a:	bf0c      	ite	eq
 800bf5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf60:	2500      	movne	r5, #0
 800bf62:	4293      	cmp	r3, r2
 800bf64:	bfc4      	itt	gt
 800bf66:	1a9b      	subgt	r3, r3, r2
 800bf68:	18ed      	addgt	r5, r5, r3
 800bf6a:	2600      	movs	r6, #0
 800bf6c:	341a      	adds	r4, #26
 800bf6e:	42b5      	cmp	r5, r6
 800bf70:	d11a      	bne.n	800bfa8 <_printf_common+0xc8>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e008      	b.n	800bf88 <_printf_common+0xa8>
 800bf76:	2301      	movs	r3, #1
 800bf78:	4652      	mov	r2, sl
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	47c0      	blx	r8
 800bf80:	3001      	adds	r0, #1
 800bf82:	d103      	bne.n	800bf8c <_printf_common+0xac>
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8c:	3501      	adds	r5, #1
 800bf8e:	e7c6      	b.n	800bf1e <_printf_common+0x3e>
 800bf90:	18e1      	adds	r1, r4, r3
 800bf92:	1c5a      	adds	r2, r3, #1
 800bf94:	2030      	movs	r0, #48	; 0x30
 800bf96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf9a:	4422      	add	r2, r4
 800bf9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfa4:	3302      	adds	r3, #2
 800bfa6:	e7c7      	b.n	800bf38 <_printf_common+0x58>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	4622      	mov	r2, r4
 800bfac:	4649      	mov	r1, r9
 800bfae:	4638      	mov	r0, r7
 800bfb0:	47c0      	blx	r8
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	d0e6      	beq.n	800bf84 <_printf_common+0xa4>
 800bfb6:	3601      	adds	r6, #1
 800bfb8:	e7d9      	b.n	800bf6e <_printf_common+0x8e>
	...

0800bfbc <_printf_i>:
 800bfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc0:	7e0f      	ldrb	r7, [r1, #24]
 800bfc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfc4:	2f78      	cmp	r7, #120	; 0x78
 800bfc6:	4691      	mov	r9, r2
 800bfc8:	4680      	mov	r8, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	469a      	mov	sl, r3
 800bfce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfd2:	d807      	bhi.n	800bfe4 <_printf_i+0x28>
 800bfd4:	2f62      	cmp	r7, #98	; 0x62
 800bfd6:	d80a      	bhi.n	800bfee <_printf_i+0x32>
 800bfd8:	2f00      	cmp	r7, #0
 800bfda:	f000 80d8 	beq.w	800c18e <_printf_i+0x1d2>
 800bfde:	2f58      	cmp	r7, #88	; 0x58
 800bfe0:	f000 80a3 	beq.w	800c12a <_printf_i+0x16e>
 800bfe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfec:	e03a      	b.n	800c064 <_printf_i+0xa8>
 800bfee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bff2:	2b15      	cmp	r3, #21
 800bff4:	d8f6      	bhi.n	800bfe4 <_printf_i+0x28>
 800bff6:	a101      	add	r1, pc, #4	; (adr r1, 800bffc <_printf_i+0x40>)
 800bff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bffc:	0800c055 	.word	0x0800c055
 800c000:	0800c069 	.word	0x0800c069
 800c004:	0800bfe5 	.word	0x0800bfe5
 800c008:	0800bfe5 	.word	0x0800bfe5
 800c00c:	0800bfe5 	.word	0x0800bfe5
 800c010:	0800bfe5 	.word	0x0800bfe5
 800c014:	0800c069 	.word	0x0800c069
 800c018:	0800bfe5 	.word	0x0800bfe5
 800c01c:	0800bfe5 	.word	0x0800bfe5
 800c020:	0800bfe5 	.word	0x0800bfe5
 800c024:	0800bfe5 	.word	0x0800bfe5
 800c028:	0800c175 	.word	0x0800c175
 800c02c:	0800c099 	.word	0x0800c099
 800c030:	0800c157 	.word	0x0800c157
 800c034:	0800bfe5 	.word	0x0800bfe5
 800c038:	0800bfe5 	.word	0x0800bfe5
 800c03c:	0800c197 	.word	0x0800c197
 800c040:	0800bfe5 	.word	0x0800bfe5
 800c044:	0800c099 	.word	0x0800c099
 800c048:	0800bfe5 	.word	0x0800bfe5
 800c04c:	0800bfe5 	.word	0x0800bfe5
 800c050:	0800c15f 	.word	0x0800c15f
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	1d1a      	adds	r2, r3, #4
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	602a      	str	r2, [r5, #0]
 800c05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c064:	2301      	movs	r3, #1
 800c066:	e0a3      	b.n	800c1b0 <_printf_i+0x1f4>
 800c068:	6820      	ldr	r0, [r4, #0]
 800c06a:	6829      	ldr	r1, [r5, #0]
 800c06c:	0606      	lsls	r6, r0, #24
 800c06e:	f101 0304 	add.w	r3, r1, #4
 800c072:	d50a      	bpl.n	800c08a <_printf_i+0xce>
 800c074:	680e      	ldr	r6, [r1, #0]
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	2e00      	cmp	r6, #0
 800c07a:	da03      	bge.n	800c084 <_printf_i+0xc8>
 800c07c:	232d      	movs	r3, #45	; 0x2d
 800c07e:	4276      	negs	r6, r6
 800c080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c084:	485e      	ldr	r0, [pc, #376]	; (800c200 <_printf_i+0x244>)
 800c086:	230a      	movs	r3, #10
 800c088:	e019      	b.n	800c0be <_printf_i+0x102>
 800c08a:	680e      	ldr	r6, [r1, #0]
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c092:	bf18      	it	ne
 800c094:	b236      	sxthne	r6, r6
 800c096:	e7ef      	b.n	800c078 <_printf_i+0xbc>
 800c098:	682b      	ldr	r3, [r5, #0]
 800c09a:	6820      	ldr	r0, [r4, #0]
 800c09c:	1d19      	adds	r1, r3, #4
 800c09e:	6029      	str	r1, [r5, #0]
 800c0a0:	0601      	lsls	r1, r0, #24
 800c0a2:	d501      	bpl.n	800c0a8 <_printf_i+0xec>
 800c0a4:	681e      	ldr	r6, [r3, #0]
 800c0a6:	e002      	b.n	800c0ae <_printf_i+0xf2>
 800c0a8:	0646      	lsls	r6, r0, #25
 800c0aa:	d5fb      	bpl.n	800c0a4 <_printf_i+0xe8>
 800c0ac:	881e      	ldrh	r6, [r3, #0]
 800c0ae:	4854      	ldr	r0, [pc, #336]	; (800c200 <_printf_i+0x244>)
 800c0b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c0b2:	bf0c      	ite	eq
 800c0b4:	2308      	moveq	r3, #8
 800c0b6:	230a      	movne	r3, #10
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0be:	6865      	ldr	r5, [r4, #4]
 800c0c0:	60a5      	str	r5, [r4, #8]
 800c0c2:	2d00      	cmp	r5, #0
 800c0c4:	bfa2      	ittt	ge
 800c0c6:	6821      	ldrge	r1, [r4, #0]
 800c0c8:	f021 0104 	bicge.w	r1, r1, #4
 800c0cc:	6021      	strge	r1, [r4, #0]
 800c0ce:	b90e      	cbnz	r6, 800c0d4 <_printf_i+0x118>
 800c0d0:	2d00      	cmp	r5, #0
 800c0d2:	d04d      	beq.n	800c170 <_printf_i+0x1b4>
 800c0d4:	4615      	mov	r5, r2
 800c0d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0da:	fb03 6711 	mls	r7, r3, r1, r6
 800c0de:	5dc7      	ldrb	r7, [r0, r7]
 800c0e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0e4:	4637      	mov	r7, r6
 800c0e6:	42bb      	cmp	r3, r7
 800c0e8:	460e      	mov	r6, r1
 800c0ea:	d9f4      	bls.n	800c0d6 <_printf_i+0x11a>
 800c0ec:	2b08      	cmp	r3, #8
 800c0ee:	d10b      	bne.n	800c108 <_printf_i+0x14c>
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	07de      	lsls	r6, r3, #31
 800c0f4:	d508      	bpl.n	800c108 <_printf_i+0x14c>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	6861      	ldr	r1, [r4, #4]
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	bfde      	ittt	le
 800c0fe:	2330      	movle	r3, #48	; 0x30
 800c100:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c104:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c108:	1b52      	subs	r2, r2, r5
 800c10a:	6122      	str	r2, [r4, #16]
 800c10c:	f8cd a000 	str.w	sl, [sp]
 800c110:	464b      	mov	r3, r9
 800c112:	aa03      	add	r2, sp, #12
 800c114:	4621      	mov	r1, r4
 800c116:	4640      	mov	r0, r8
 800c118:	f7ff fee2 	bl	800bee0 <_printf_common>
 800c11c:	3001      	adds	r0, #1
 800c11e:	d14c      	bne.n	800c1ba <_printf_i+0x1fe>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c124:	b004      	add	sp, #16
 800c126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12a:	4835      	ldr	r0, [pc, #212]	; (800c200 <_printf_i+0x244>)
 800c12c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c130:	6829      	ldr	r1, [r5, #0]
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	f851 6b04 	ldr.w	r6, [r1], #4
 800c138:	6029      	str	r1, [r5, #0]
 800c13a:	061d      	lsls	r5, r3, #24
 800c13c:	d514      	bpl.n	800c168 <_printf_i+0x1ac>
 800c13e:	07df      	lsls	r7, r3, #31
 800c140:	bf44      	itt	mi
 800c142:	f043 0320 	orrmi.w	r3, r3, #32
 800c146:	6023      	strmi	r3, [r4, #0]
 800c148:	b91e      	cbnz	r6, 800c152 <_printf_i+0x196>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	f023 0320 	bic.w	r3, r3, #32
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	2310      	movs	r3, #16
 800c154:	e7b0      	b.n	800c0b8 <_printf_i+0xfc>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	f043 0320 	orr.w	r3, r3, #32
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	2378      	movs	r3, #120	; 0x78
 800c160:	4828      	ldr	r0, [pc, #160]	; (800c204 <_printf_i+0x248>)
 800c162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c166:	e7e3      	b.n	800c130 <_printf_i+0x174>
 800c168:	0659      	lsls	r1, r3, #25
 800c16a:	bf48      	it	mi
 800c16c:	b2b6      	uxthmi	r6, r6
 800c16e:	e7e6      	b.n	800c13e <_printf_i+0x182>
 800c170:	4615      	mov	r5, r2
 800c172:	e7bb      	b.n	800c0ec <_printf_i+0x130>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	6826      	ldr	r6, [r4, #0]
 800c178:	6961      	ldr	r1, [r4, #20]
 800c17a:	1d18      	adds	r0, r3, #4
 800c17c:	6028      	str	r0, [r5, #0]
 800c17e:	0635      	lsls	r5, r6, #24
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	d501      	bpl.n	800c188 <_printf_i+0x1cc>
 800c184:	6019      	str	r1, [r3, #0]
 800c186:	e002      	b.n	800c18e <_printf_i+0x1d2>
 800c188:	0670      	lsls	r0, r6, #25
 800c18a:	d5fb      	bpl.n	800c184 <_printf_i+0x1c8>
 800c18c:	8019      	strh	r1, [r3, #0]
 800c18e:	2300      	movs	r3, #0
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	4615      	mov	r5, r2
 800c194:	e7ba      	b.n	800c10c <_printf_i+0x150>
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	1d1a      	adds	r2, r3, #4
 800c19a:	602a      	str	r2, [r5, #0]
 800c19c:	681d      	ldr	r5, [r3, #0]
 800c19e:	6862      	ldr	r2, [r4, #4]
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f7f4 f83c 	bl	8000220 <memchr>
 800c1a8:	b108      	cbz	r0, 800c1ae <_printf_i+0x1f2>
 800c1aa:	1b40      	subs	r0, r0, r5
 800c1ac:	6060      	str	r0, [r4, #4]
 800c1ae:	6863      	ldr	r3, [r4, #4]
 800c1b0:	6123      	str	r3, [r4, #16]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1b8:	e7a8      	b.n	800c10c <_printf_i+0x150>
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	462a      	mov	r2, r5
 800c1be:	4649      	mov	r1, r9
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	47d0      	blx	sl
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d0ab      	beq.n	800c120 <_printf_i+0x164>
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	079b      	lsls	r3, r3, #30
 800c1cc:	d413      	bmi.n	800c1f6 <_printf_i+0x23a>
 800c1ce:	68e0      	ldr	r0, [r4, #12]
 800c1d0:	9b03      	ldr	r3, [sp, #12]
 800c1d2:	4298      	cmp	r0, r3
 800c1d4:	bfb8      	it	lt
 800c1d6:	4618      	movlt	r0, r3
 800c1d8:	e7a4      	b.n	800c124 <_printf_i+0x168>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4632      	mov	r2, r6
 800c1de:	4649      	mov	r1, r9
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	47d0      	blx	sl
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d09b      	beq.n	800c120 <_printf_i+0x164>
 800c1e8:	3501      	adds	r5, #1
 800c1ea:	68e3      	ldr	r3, [r4, #12]
 800c1ec:	9903      	ldr	r1, [sp, #12]
 800c1ee:	1a5b      	subs	r3, r3, r1
 800c1f0:	42ab      	cmp	r3, r5
 800c1f2:	dcf2      	bgt.n	800c1da <_printf_i+0x21e>
 800c1f4:	e7eb      	b.n	800c1ce <_printf_i+0x212>
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	f104 0619 	add.w	r6, r4, #25
 800c1fc:	e7f5      	b.n	800c1ea <_printf_i+0x22e>
 800c1fe:	bf00      	nop
 800c200:	0800c931 	.word	0x0800c931
 800c204:	0800c942 	.word	0x0800c942

0800c208 <_putc_r>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	460d      	mov	r5, r1
 800c20c:	4614      	mov	r4, r2
 800c20e:	4606      	mov	r6, r0
 800c210:	b118      	cbz	r0, 800c21a <_putc_r+0x12>
 800c212:	6983      	ldr	r3, [r0, #24]
 800c214:	b90b      	cbnz	r3, 800c21a <_putc_r+0x12>
 800c216:	f7ff f9bf 	bl	800b598 <__sinit>
 800c21a:	4b1c      	ldr	r3, [pc, #112]	; (800c28c <_putc_r+0x84>)
 800c21c:	429c      	cmp	r4, r3
 800c21e:	d124      	bne.n	800c26a <_putc_r+0x62>
 800c220:	6874      	ldr	r4, [r6, #4]
 800c222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c224:	07d8      	lsls	r0, r3, #31
 800c226:	d405      	bmi.n	800c234 <_putc_r+0x2c>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	0599      	lsls	r1, r3, #22
 800c22c:	d402      	bmi.n	800c234 <_putc_r+0x2c>
 800c22e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c230:	f7ff fa50 	bl	800b6d4 <__retarget_lock_acquire_recursive>
 800c234:	68a3      	ldr	r3, [r4, #8]
 800c236:	3b01      	subs	r3, #1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	60a3      	str	r3, [r4, #8]
 800c23c:	da05      	bge.n	800c24a <_putc_r+0x42>
 800c23e:	69a2      	ldr	r2, [r4, #24]
 800c240:	4293      	cmp	r3, r2
 800c242:	db1c      	blt.n	800c27e <_putc_r+0x76>
 800c244:	b2eb      	uxtb	r3, r5
 800c246:	2b0a      	cmp	r3, #10
 800c248:	d019      	beq.n	800c27e <_putc_r+0x76>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	1c5a      	adds	r2, r3, #1
 800c24e:	6022      	str	r2, [r4, #0]
 800c250:	701d      	strb	r5, [r3, #0]
 800c252:	b2ed      	uxtb	r5, r5
 800c254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c256:	07da      	lsls	r2, r3, #31
 800c258:	d405      	bmi.n	800c266 <_putc_r+0x5e>
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	059b      	lsls	r3, r3, #22
 800c25e:	d402      	bmi.n	800c266 <_putc_r+0x5e>
 800c260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c262:	f7ff fa38 	bl	800b6d6 <__retarget_lock_release_recursive>
 800c266:	4628      	mov	r0, r5
 800c268:	bd70      	pop	{r4, r5, r6, pc}
 800c26a:	4b09      	ldr	r3, [pc, #36]	; (800c290 <_putc_r+0x88>)
 800c26c:	429c      	cmp	r4, r3
 800c26e:	d101      	bne.n	800c274 <_putc_r+0x6c>
 800c270:	68b4      	ldr	r4, [r6, #8]
 800c272:	e7d6      	b.n	800c222 <_putc_r+0x1a>
 800c274:	4b07      	ldr	r3, [pc, #28]	; (800c294 <_putc_r+0x8c>)
 800c276:	429c      	cmp	r4, r3
 800c278:	bf08      	it	eq
 800c27a:	68f4      	ldreq	r4, [r6, #12]
 800c27c:	e7d1      	b.n	800c222 <_putc_r+0x1a>
 800c27e:	4629      	mov	r1, r5
 800c280:	4622      	mov	r2, r4
 800c282:	4630      	mov	r0, r6
 800c284:	f7fe ffae 	bl	800b1e4 <__swbuf_r>
 800c288:	4605      	mov	r5, r0
 800c28a:	e7e3      	b.n	800c254 <_putc_r+0x4c>
 800c28c:	0800c8e0 	.word	0x0800c8e0
 800c290:	0800c900 	.word	0x0800c900
 800c294:	0800c8c0 	.word	0x0800c8c0

0800c298 <_sbrk_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	; (800c2b4 <_sbrk_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f5 f82c 	bl	8001300 <_sbrk>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_sbrk_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_sbrk_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20004710 	.word	0x20004710

0800c2b8 <__sread>:
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c0:	f000 f8ea 	bl	800c498 <_read_r>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	bfab      	itete	ge
 800c2c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c2cc:	181b      	addge	r3, r3, r0
 800c2ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2d2:	bfac      	ite	ge
 800c2d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2d6:	81a3      	strhlt	r3, [r4, #12]
 800c2d8:	bd10      	pop	{r4, pc}

0800c2da <__swrite>:
 800c2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2de:	461f      	mov	r7, r3
 800c2e0:	898b      	ldrh	r3, [r1, #12]
 800c2e2:	05db      	lsls	r3, r3, #23
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	4616      	mov	r6, r2
 800c2ea:	d505      	bpl.n	800c2f8 <__swrite+0x1e>
 800c2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f000 f868 	bl	800c3c8 <_lseek_r>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	4632      	mov	r2, r6
 800c306:	463b      	mov	r3, r7
 800c308:	4628      	mov	r0, r5
 800c30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c30e:	f000 b817 	b.w	800c340 <_write_r>

0800c312 <__sseek>:
 800c312:	b510      	push	{r4, lr}
 800c314:	460c      	mov	r4, r1
 800c316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31a:	f000 f855 	bl	800c3c8 <_lseek_r>
 800c31e:	1c43      	adds	r3, r0, #1
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	bf15      	itete	ne
 800c324:	6560      	strne	r0, [r4, #84]	; 0x54
 800c326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c32a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c32e:	81a3      	strheq	r3, [r4, #12]
 800c330:	bf18      	it	ne
 800c332:	81a3      	strhne	r3, [r4, #12]
 800c334:	bd10      	pop	{r4, pc}

0800c336 <__sclose>:
 800c336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33a:	f000 b813 	b.w	800c364 <_close_r>
	...

0800c340 <_write_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4d07      	ldr	r5, [pc, #28]	; (800c360 <_write_r+0x20>)
 800c344:	4604      	mov	r4, r0
 800c346:	4608      	mov	r0, r1
 800c348:	4611      	mov	r1, r2
 800c34a:	2200      	movs	r2, #0
 800c34c:	602a      	str	r2, [r5, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	f7f4 ff85 	bl	800125e <_write>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_write_r+0x1e>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_write_r+0x1e>
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	20004710 	.word	0x20004710

0800c364 <_close_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d06      	ldr	r5, [pc, #24]	; (800c380 <_close_r+0x1c>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	602b      	str	r3, [r5, #0]
 800c370:	f7f4 ff91 	bl	8001296 <_close>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_close_r+0x1a>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_close_r+0x1a>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	20004710 	.word	0x20004710

0800c384 <_fstat_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d07      	ldr	r5, [pc, #28]	; (800c3a4 <_fstat_r+0x20>)
 800c388:	2300      	movs	r3, #0
 800c38a:	4604      	mov	r4, r0
 800c38c:	4608      	mov	r0, r1
 800c38e:	4611      	mov	r1, r2
 800c390:	602b      	str	r3, [r5, #0]
 800c392:	f7f4 ff8c 	bl	80012ae <_fstat>
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	d102      	bne.n	800c3a0 <_fstat_r+0x1c>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	b103      	cbz	r3, 800c3a0 <_fstat_r+0x1c>
 800c39e:	6023      	str	r3, [r4, #0]
 800c3a0:	bd38      	pop	{r3, r4, r5, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20004710 	.word	0x20004710

0800c3a8 <_isatty_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4d06      	ldr	r5, [pc, #24]	; (800c3c4 <_isatty_r+0x1c>)
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	4608      	mov	r0, r1
 800c3b2:	602b      	str	r3, [r5, #0]
 800c3b4:	f7f4 ff8b 	bl	80012ce <_isatty>
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	d102      	bne.n	800c3c2 <_isatty_r+0x1a>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	b103      	cbz	r3, 800c3c2 <_isatty_r+0x1a>
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	bd38      	pop	{r3, r4, r5, pc}
 800c3c4:	20004710 	.word	0x20004710

0800c3c8 <_lseek_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d07      	ldr	r5, [pc, #28]	; (800c3e8 <_lseek_r+0x20>)
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	4608      	mov	r0, r1
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f7f4 ff84 	bl	80012e4 <_lseek>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_lseek_r+0x1e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_lseek_r+0x1e>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20004710 	.word	0x20004710

0800c3ec <memmove>:
 800c3ec:	4288      	cmp	r0, r1
 800c3ee:	b510      	push	{r4, lr}
 800c3f0:	eb01 0402 	add.w	r4, r1, r2
 800c3f4:	d902      	bls.n	800c3fc <memmove+0x10>
 800c3f6:	4284      	cmp	r4, r0
 800c3f8:	4623      	mov	r3, r4
 800c3fa:	d807      	bhi.n	800c40c <memmove+0x20>
 800c3fc:	1e43      	subs	r3, r0, #1
 800c3fe:	42a1      	cmp	r1, r4
 800c400:	d008      	beq.n	800c414 <memmove+0x28>
 800c402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c40a:	e7f8      	b.n	800c3fe <memmove+0x12>
 800c40c:	4402      	add	r2, r0
 800c40e:	4601      	mov	r1, r0
 800c410:	428a      	cmp	r2, r1
 800c412:	d100      	bne.n	800c416 <memmove+0x2a>
 800c414:	bd10      	pop	{r4, pc}
 800c416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c41e:	e7f7      	b.n	800c410 <memmove+0x24>

0800c420 <__malloc_lock>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__malloc_lock+0x8>)
 800c422:	f7ff b957 	b.w	800b6d4 <__retarget_lock_acquire_recursive>
 800c426:	bf00      	nop
 800c428:	20004704 	.word	0x20004704

0800c42c <__malloc_unlock>:
 800c42c:	4801      	ldr	r0, [pc, #4]	; (800c434 <__malloc_unlock+0x8>)
 800c42e:	f7ff b952 	b.w	800b6d6 <__retarget_lock_release_recursive>
 800c432:	bf00      	nop
 800c434:	20004704 	.word	0x20004704

0800c438 <_realloc_r>:
 800c438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c43c:	4680      	mov	r8, r0
 800c43e:	4614      	mov	r4, r2
 800c440:	460e      	mov	r6, r1
 800c442:	b921      	cbnz	r1, 800c44e <_realloc_r+0x16>
 800c444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c448:	4611      	mov	r1, r2
 800c44a:	f7ff ba1f 	b.w	800b88c <_malloc_r>
 800c44e:	b92a      	cbnz	r2, 800c45c <_realloc_r+0x24>
 800c450:	f7ff f9b0 	bl	800b7b4 <_free_r>
 800c454:	4625      	mov	r5, r4
 800c456:	4628      	mov	r0, r5
 800c458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c45c:	f000 f82e 	bl	800c4bc <_malloc_usable_size_r>
 800c460:	4284      	cmp	r4, r0
 800c462:	4607      	mov	r7, r0
 800c464:	d802      	bhi.n	800c46c <_realloc_r+0x34>
 800c466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c46a:	d812      	bhi.n	800c492 <_realloc_r+0x5a>
 800c46c:	4621      	mov	r1, r4
 800c46e:	4640      	mov	r0, r8
 800c470:	f7ff fa0c 	bl	800b88c <_malloc_r>
 800c474:	4605      	mov	r5, r0
 800c476:	2800      	cmp	r0, #0
 800c478:	d0ed      	beq.n	800c456 <_realloc_r+0x1e>
 800c47a:	42bc      	cmp	r4, r7
 800c47c:	4622      	mov	r2, r4
 800c47e:	4631      	mov	r1, r6
 800c480:	bf28      	it	cs
 800c482:	463a      	movcs	r2, r7
 800c484:	f7fe fcde 	bl	800ae44 <memcpy>
 800c488:	4631      	mov	r1, r6
 800c48a:	4640      	mov	r0, r8
 800c48c:	f7ff f992 	bl	800b7b4 <_free_r>
 800c490:	e7e1      	b.n	800c456 <_realloc_r+0x1e>
 800c492:	4635      	mov	r5, r6
 800c494:	e7df      	b.n	800c456 <_realloc_r+0x1e>
	...

0800c498 <_read_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	; (800c4b8 <_read_r+0x20>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	602a      	str	r2, [r5, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f7f4 febc 	bl	8001224 <_read>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_read_r+0x1e>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_read_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	20004710 	.word	0x20004710

0800c4bc <_malloc_usable_size_r>:
 800c4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c0:	1f18      	subs	r0, r3, #4
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	bfbc      	itt	lt
 800c4c6:	580b      	ldrlt	r3, [r1, r0]
 800c4c8:	18c0      	addlt	r0, r0, r3
 800c4ca:	4770      	bx	lr

0800c4cc <_init>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	bf00      	nop
 800c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d2:	bc08      	pop	{r3}
 800c4d4:	469e      	mov	lr, r3
 800c4d6:	4770      	bx	lr

0800c4d8 <_fini>:
 800c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4da:	bf00      	nop
 800c4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4de:	bc08      	pop	{r3}
 800c4e0:	469e      	mov	lr, r3
 800c4e2:	4770      	bx	lr
