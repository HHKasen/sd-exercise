
sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aec  08007aec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af4  08007af4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000084  08007b80  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08007b80  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee35  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239d  00000000  00000000  0002eee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00031ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023671  00000000  00000000  00032a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011eeb  00000000  00000000  000560c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd214  00000000  00000000  00067fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001351c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  00135210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007824 	.word	0x08007824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08007824 	.word	0x08007824

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	f6ad 0d9c 	subw	sp, sp, #2204	; 0x89c
 80005ba:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fc42 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f92a 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f9f6 	bl	80009b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f9ca 	bl	8000960 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005cc:	f000 f992 	bl	80008f4 <MX_SPI2_Init>
  MX_FATFS_Init();
 80005d0:	f002 fd3e 	bl	8003050 <MX_FATFS_Init>

//  FRESULT f_mkfs (const TCHAR* path, BYTE opt, DWORD au, void* work, UINT len);	/* Create a FAT volume */


  /* Format the default drive with default parameters */
  printf("about to make fs...\r\n");
 80005d4:	4880      	ldr	r0, [pc, #512]	; (80007d8 <main+0x224>)
 80005d6:	f006 f9a7 	bl	8006928 <puts>
  res = f_mkfs("0",FM_ANY,0, work, sizeof work);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	2107      	movs	r1, #7
 80005e8:	487c      	ldr	r0, [pc, #496]	; (80007dc <main+0x228>)
 80005ea:	f005 fc5d 	bl	8005ea8 <f_mkfs>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
  printf("mkfs res:%u\r\n",res);
 80005f4:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 80005f8:	4619      	mov	r1, r3
 80005fa:	4879      	ldr	r0, [pc, #484]	; (80007e0 <main+0x22c>)
 80005fc:	f006 f90e 	bl	800681c <iprintf>

  /* Register work area */
  res = f_mount(&fs, "", 0);
 8000600:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8000604:	2200      	movs	r2, #0
 8000606:	4977      	ldr	r1, [pc, #476]	; (80007e4 <main+0x230>)
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fff3 	bl	80055f4 <f_mount>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
  printf("mnt res:%u\r\n",res);
 8000614:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8000618:	4619      	mov	r1, r3
 800061a:	4873      	ldr	r0, [pc, #460]	; (80007e8 <main+0x234>)
 800061c:	f006 f8fe 	bl	800681c <iprintf>

  /* Create a file as new */
  res = f_open(&fil, "hello.txt", FA_CREATE_NEW | FA_WRITE);
 8000620:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000624:	2206      	movs	r2, #6
 8000626:	4971      	ldr	r1, [pc, #452]	; (80007ec <main+0x238>)
 8000628:	4618      	mov	r0, r3
 800062a:	f005 f829 	bl	8005680 <f_open>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
  printf("open res:%u\r\n",res);
 8000634:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8000638:	4619      	mov	r1, r3
 800063a:	486d      	ldr	r0, [pc, #436]	; (80007f0 <main+0x23c>)
 800063c:	f006 f8ee 	bl	800681c <iprintf>

  /* Write a message */
  res = f_write(&fil, "Hello, World!\r\n", 15, &bw);
 8000640:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000644:	f507 6084 	add.w	r0, r7, #1056	; 0x420
 8000648:	220f      	movs	r2, #15
 800064a:	496a      	ldr	r1, [pc, #424]	; (80007f4 <main+0x240>)
 800064c:	f005 f9d6 	bl	80059fc <f_write>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
  printf("write res:%u\r\n",res);
 8000656:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 800065a:	4619      	mov	r1, r3
 800065c:	4866      	ldr	r0, [pc, #408]	; (80007f8 <main+0x244>)
 800065e:	f006 f8dd 	bl	800681c <iprintf>

  /* Close the file */
  f_close(&fil);
 8000662:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fbbb 	bl	8005de2 <f_close>

  FRESULT fr;
  FILINFO fno;
  const char *fname = "hello.txt";
 800066c:	4b5f      	ldr	r3, [pc, #380]	; (80007ec <main+0x238>)
 800066e:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888


  printf("Test for \"%s\"...\r\n", fname);
 8000672:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 8000676:	4861      	ldr	r0, [pc, #388]	; (80007fc <main+0x248>)
 8000678:	f006 f8d0 	bl	800681c <iprintf>

  fr = f_stat(fname, &fno);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	f8d7 0888 	ldr.w	r0, [r7, #2184]	; 0x888
 8000684:	f005 fbd7 	bl	8005e36 <f_stat>
 8000688:	4603      	mov	r3, r0
 800068a:	f887 3887 	strb.w	r3, [r7, #2183]	; 0x887
  switch (fr) {
 800068e:	f897 3887 	ldrb.w	r3, [r7, #2183]	; 0x887
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <main+0xe8>
 8000696:	2b04      	cmp	r3, #4
 8000698:	d07d      	beq.n	8000796 <main+0x1e2>
 800069a:	e082      	b.n	80007a2 <main+0x1ee>

  case FR_OK:
      printf("Size: %lu\r\n", fno.fsize);
 800069c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80006a0:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4855      	ldr	r0, [pc, #340]	; (8000800 <main+0x24c>)
 80006aa:	f006 f8b7 	bl	800681c <iprintf>
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80006ae:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80006b2:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	0a5b      	lsrs	r3, r3, #9
 80006ba:	b29b      	uxth	r3, r3
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80006bc:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80006c0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80006c4:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80006c8:	889b      	ldrh	r3, [r3, #4]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	f003 020f 	and.w	r2, r3, #15
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80006d2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80006d6:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80006da:	889b      	ldrh	r3, [r3, #4]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80006dc:	f003 001f 	and.w	r0, r3, #31
             fno.ftime >> 11, fno.ftime >> 5 & 63);
 80006e0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80006e4:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80006e8:	88db      	ldrh	r3, [r3, #6]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80006ea:	0adb      	lsrs	r3, r3, #11
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	461c      	mov	r4, r3
             fno.ftime >> 11, fno.ftime >> 5 & 63);
 80006f0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80006f4:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80006f8:	88db      	ldrh	r3, [r3, #6]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	9400      	str	r4, [sp, #0]
 8000706:	4603      	mov	r3, r0
 8000708:	483e      	ldr	r0, [pc, #248]	; (8000804 <main+0x250>)
 800070a:	f006 f887 	bl	800681c <iprintf>
      printf("Attributes: %c%c%c%c%c\r\n",
             (fno.fattrib & AM_DIR) ? 'D' : '-',
 800070e:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8000712:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	f003 0310 	and.w	r3, r3, #16
      printf("Attributes: %c%c%c%c%c\r\n",
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <main+0x170>
 8000720:	2144      	movs	r1, #68	; 0x44
 8000722:	e000      	b.n	8000726 <main+0x172>
 8000724:	212d      	movs	r1, #45	; 0x2d
             (fno.fattrib & AM_RDO) ? 'R' : '-',
 8000726:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800072a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800072e:	7a1b      	ldrb	r3, [r3, #8]
 8000730:	f003 0301 	and.w	r3, r3, #1
      printf("Attributes: %c%c%c%c%c\r\n",
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <main+0x188>
 8000738:	2052      	movs	r0, #82	; 0x52
 800073a:	e000      	b.n	800073e <main+0x18a>
 800073c:	202d      	movs	r0, #45	; 0x2d
             (fno.fattrib & AM_HID) ? 'H' : '-',
 800073e:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8000742:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8000746:	7a1b      	ldrb	r3, [r3, #8]
 8000748:	f003 0302 	and.w	r3, r3, #2
      printf("Attributes: %c%c%c%c%c\r\n",
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <main+0x1a0>
 8000750:	2448      	movs	r4, #72	; 0x48
 8000752:	e000      	b.n	8000756 <main+0x1a2>
 8000754:	242d      	movs	r4, #45	; 0x2d
             (fno.fattrib & AM_SYS) ? 'S' : '-',
 8000756:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800075a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800075e:	7a1b      	ldrb	r3, [r3, #8]
 8000760:	f003 0304 	and.w	r3, r3, #4
      printf("Attributes: %c%c%c%c%c\r\n",
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <main+0x1b8>
 8000768:	2353      	movs	r3, #83	; 0x53
 800076a:	e000      	b.n	800076e <main+0x1ba>
 800076c:	232d      	movs	r3, #45	; 0x2d
             (fno.fattrib & AM_ARC) ? 'A' : '-');
 800076e:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000772:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000776:	7a12      	ldrb	r2, [r2, #8]
 8000778:	f002 0220 	and.w	r2, r2, #32
      printf("Attributes: %c%c%c%c%c\r\n",
 800077c:	2a00      	cmp	r2, #0
 800077e:	d001      	beq.n	8000784 <main+0x1d0>
 8000780:	2241      	movs	r2, #65	; 0x41
 8000782:	e000      	b.n	8000786 <main+0x1d2>
 8000784:	222d      	movs	r2, #45	; 0x2d
 8000786:	9201      	str	r2, [sp, #4]
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	4623      	mov	r3, r4
 800078c:	4602      	mov	r2, r0
 800078e:	481e      	ldr	r0, [pc, #120]	; (8000808 <main+0x254>)
 8000790:	f006 f844 	bl	800681c <iprintf>
      break;
 8000794:	e00b      	b.n	80007ae <main+0x1fa>

  case FR_NO_FILE:
      printf("\"%s\" is not exist.\r\n", fname);
 8000796:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <main+0x258>)
 800079c:	f006 f83e 	bl	800681c <iprintf>
      break;
 80007a0:	e005      	b.n	80007ae <main+0x1fa>

  default:
      printf("An error occured. (%d)\n", fr);
 80007a2:	f897 3887 	ldrb.w	r3, [r7, #2183]	; 0x887
 80007a6:	4619      	mov	r1, r3
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <main+0x25c>)
 80007aa:	f006 f837 	bl	800681c <iprintf>
  }


  /* Unregister work area */
  f_mount(0, "", 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <main+0x230>)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f004 ff1e 	bl	80055f4 <f_mount>

  while (1)
  {
    /* USER CODE END WHILE */

	  int x = HAL_GetTick();
 80007b8:	f000 fbaa 	bl	8000f10 <HAL_GetTick>
 80007bc:	4603      	mov	r3, r0
 80007be:	f8c7 3880 	str.w	r3, [r7, #2176]	; 0x880
	  printf("Tick:%i\r\n",x);
 80007c2:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 80007c6:	4813      	ldr	r0, [pc, #76]	; (8000814 <main+0x260>)
 80007c8:	f006 f828 	bl	800681c <iprintf>
	  HAL_Delay(50000);
 80007cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007d0:	f000 fbaa 	bl	8000f28 <HAL_Delay>
  {
 80007d4:	e7f0      	b.n	80007b8 <main+0x204>
 80007d6:	bf00      	nop
 80007d8:	0800783c 	.word	0x0800783c
 80007dc:	08007854 	.word	0x08007854
 80007e0:	08007858 	.word	0x08007858
 80007e4:	08007868 	.word	0x08007868
 80007e8:	0800786c 	.word	0x0800786c
 80007ec:	0800787c 	.word	0x0800787c
 80007f0:	08007888 	.word	0x08007888
 80007f4:	08007898 	.word	0x08007898
 80007f8:	080078a8 	.word	0x080078a8
 80007fc:	080078b8 	.word	0x080078b8
 8000800:	080078cc 	.word	0x080078cc
 8000804:	080078d8 	.word	0x080078d8
 8000808:	08007900 	.word	0x08007900
 800080c:	0800791c 	.word	0x0800791c
 8000810:	08007934 	.word	0x08007934
 8000814:	0800794c 	.word	0x0800794c

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fff0 	bl	800680c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <SystemClock_Config+0xd4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <SystemClock_Config+0xd4>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0xd4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xd8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <SystemClock_Config+0xd8>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <SystemClock_Config+0xd8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	2310      	movs	r3, #16
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800088c:	2310      	movs	r3, #16
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000890:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000896:	2304      	movs	r3, #4
 8000898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f940 	bl	8001b2c <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008b2:	f000 f8ff 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fde0 	bl	8001498 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008de:	f000 f8e9 	bl	8000ab4 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	; 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI2_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <MX_SPI2_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI2_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI2_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI2_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI2_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI2_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI2_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI2_Init+0x64>)
 8000928:	2230      	movs	r2, #48	; 0x30
 800092a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI2_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI2_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI2_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI2_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI2_Init+0x64>)
 8000946:	f001 fb8f 	bl	8002068 <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 f8b0 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000a0 	.word	0x200000a0
 800095c:	40003800 	.word	0x40003800

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART2_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000998:	f001 ff98 	bl	80028cc <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f887 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000f8 	.word	0x200000f8
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xd4>)
 8000a40:	f000 fd10 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xd8>)
 8000a5c:	f000 fb6e 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xd4>)
 8000a78:	f000 fb60 	bl	800113c <HAL_GPIO_Init>

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020800 	.word	0x40020800

08000a90 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a98:	1d39      	adds	r1, r7, #4
 8000a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <__io_putchar+0x20>)
 8000aa2:	f001 ff60 	bl	8002966 <HAL_UART_Transmit>

  return ch;
 8000aa6:	687b      	ldr	r3, [r7, #4]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000f8 	.word	0x200000f8

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afe:	2007      	movs	r0, #7
 8000b00:	f000 fae8 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_SPI_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b6a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b88:	f000 fad8 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40003800 	.word	0x40003800
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_UART_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12b      	bne.n	8000c1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_UART_MspInit+0x8c>)
 8000c16:	f000 fa91 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f934 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
  }

  return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fed9 	bl	8000a90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
  }
  return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f005 fd12 	bl	80067b8 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000013c 	.word	0x2000013c
 8000dc8:	20000290 	.word	0x20000290

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f005 fcd1 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbc7 	bl	80005b4 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e34:	08007afc 	.word	0x08007afc
  ldr r2, =_sbss
 8000e38:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e3c:	20000290 	.word	0x20000290

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f931 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe22 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	f000 f911 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000140 	.word	0x20000140

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000140 	.word	0x20000140

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e165      	b.n	8001424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8154 	bne.w	800141e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80ae 	beq.w	800141e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x300>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a5c      	ldr	r2, [pc, #368]	; (800143c <HAL_GPIO_Init+0x300>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b5a      	ldr	r3, [pc, #360]	; (800143c <HAL_GPIO_Init+0x300>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_GPIO_Init+0x304>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x308>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x30c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x310>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x314>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x318>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x20a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_GPIO_Init+0x31c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x206>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x320>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x202>
 800133a:	2306      	movs	r3, #6
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800133e:	2307      	movs	r3, #7
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x304>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_GPIO_Init+0x324>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_GPIO_Init+0x324>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_GPIO_Init+0x324>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae96 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0cc      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d90c      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b8      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800150e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d044      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d119      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d003      	beq.n	8001556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	2b03      	cmp	r3, #3
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e06f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e067      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4934      	ldr	r1, [pc, #208]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff fcc2 	bl	8000f10 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff fcbe 	bl	8000f10 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e04f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d20c      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4916      	ldr	r1, [pc, #88]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161e:	f000 f855 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 8001622:	4602      	mov	r2, r0
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	490a      	ldr	r1, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	5ccb      	ldrb	r3, [r1, r3]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1c8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc22 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00
 8001654:	40023800 	.word	0x40023800
 8001658:	0800799c 	.word	0x0800799c
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_RCC_GetHCLKFreq+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000

0800167c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001680:	f7ff fff0 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	0a9b      	lsrs	r3, r3, #10
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	4903      	ldr	r1, [pc, #12]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	080079ac 	.word	0x080079ac

080016a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a8:	f7ff ffdc 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	0b5b      	lsrs	r3, r3, #13
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	4903      	ldr	r1, [pc, #12]	; (80016c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ba:	5ccb      	ldrb	r3, [r1, r3]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	080079ac 	.word	0x080079ac

080016cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d0:	b0ae      	sub	sp, #184	; 0xb8
 80016d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f2:	4bcb      	ldr	r3, [pc, #812]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	f200 8206 	bhi.w	8001b0c <HAL_RCC_GetSysClockFreq+0x440>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	0800173d 	.word	0x0800173d
 800170c:	08001b0d 	.word	0x08001b0d
 8001710:	08001b0d 	.word	0x08001b0d
 8001714:	08001b0d 	.word	0x08001b0d
 8001718:	08001745 	.word	0x08001745
 800171c:	08001b0d 	.word	0x08001b0d
 8001720:	08001b0d 	.word	0x08001b0d
 8001724:	08001b0d 	.word	0x08001b0d
 8001728:	0800174d 	.word	0x0800174d
 800172c:	08001b0d 	.word	0x08001b0d
 8001730:	08001b0d 	.word	0x08001b0d
 8001734:	08001b0d 	.word	0x08001b0d
 8001738:	0800193d 	.word	0x0800193d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4bb9      	ldr	r3, [pc, #740]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x358>)
 800173e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001742:	e1e7      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001744:	4bb8      	ldr	r3, [pc, #736]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800174a:	e1e3      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800174c:	4bb4      	ldr	r3, [pc, #720]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001758:	4bb1      	ldr	r3, [pc, #708]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d071      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	4bae      	ldr	r3, [pc, #696]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	2200      	movs	r2, #0
 800176c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001770:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800177c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800178a:	4622      	mov	r2, r4
 800178c:	462b      	mov	r3, r5
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	0159      	lsls	r1, r3, #5
 8001798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800179c:	0150      	lsls	r0, r2, #5
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4621      	mov	r1, r4
 80017a4:	1a51      	subs	r1, r2, r1
 80017a6:	6439      	str	r1, [r7, #64]	; 0x40
 80017a8:	4629      	mov	r1, r5
 80017aa:	eb63 0301 	sbc.w	r3, r3, r1
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017bc:	4649      	mov	r1, r9
 80017be:	018b      	lsls	r3, r1, #6
 80017c0:	4641      	mov	r1, r8
 80017c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c6:	4641      	mov	r1, r8
 80017c8:	018a      	lsls	r2, r1, #6
 80017ca:	4641      	mov	r1, r8
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80017d0:	4649      	mov	r1, r9
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017e4:	4649      	mov	r1, r9
 80017e6:	00cb      	lsls	r3, r1, #3
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ee:	4641      	mov	r1, r8
 80017f0:	00ca      	lsls	r2, r1, #3
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	4622      	mov	r2, r4
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
 80017fe:	462b      	mov	r3, r5
 8001800:	460a      	mov	r2, r1
 8001802:	eb42 0303 	adc.w	r3, r2, r3
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001814:	4629      	mov	r1, r5
 8001816:	024b      	lsls	r3, r1, #9
 8001818:	4621      	mov	r1, r4
 800181a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800181e:	4621      	mov	r1, r4
 8001820:	024a      	lsls	r2, r1, #9
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800182a:	2200      	movs	r2, #0
 800182c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001830:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001834:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001838:	f7fe fd3a 	bl	80002b0 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001846:	e067      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001848:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	2200      	movs	r2, #0
 8001850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001854:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800185c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001860:	67bb      	str	r3, [r7, #120]	; 0x78
 8001862:	2300      	movs	r3, #0
 8001864:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001866:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800186a:	4622      	mov	r2, r4
 800186c:	462b      	mov	r3, r5
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4621      	mov	r1, r4
 8001884:	1a51      	subs	r1, r2, r1
 8001886:	62b9      	str	r1, [r7, #40]	; 0x28
 8001888:	4629      	mov	r1, r5
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800189c:	4649      	mov	r1, r9
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4641      	mov	r1, r8
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	4641      	mov	r1, r8
 80018a8:	018a      	lsls	r2, r1, #6
 80018aa:	4641      	mov	r1, r8
 80018ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b0:	4649      	mov	r1, r9
 80018b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018ca:	4692      	mov	sl, r2
 80018cc:	469b      	mov	fp, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	eb1a 0303 	adds.w	r3, sl, r3
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	462b      	mov	r3, r5
 80018d8:	eb4b 0303 	adc.w	r3, fp, r3
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018ea:	4629      	mov	r1, r5
 80018ec:	028b      	lsls	r3, r1, #10
 80018ee:	4621      	mov	r1, r4
 80018f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f4:	4621      	mov	r1, r4
 80018f6:	028a      	lsls	r2, r1, #10
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001900:	2200      	movs	r2, #0
 8001902:	673b      	str	r3, [r7, #112]	; 0x70
 8001904:	677a      	str	r2, [r7, #116]	; 0x74
 8001906:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800190a:	f7fe fcd1 	bl	80002b0 <__aeabi_uldivmod>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4613      	mov	r3, r2
 8001914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800192a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800192e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800193a:	e0eb      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d06b      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x354>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	2200      	movs	r2, #0
 800195c:	66bb      	str	r3, [r7, #104]	; 0x68
 800195e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001966:	663b      	str	r3, [r7, #96]	; 0x60
 8001968:	2300      	movs	r3, #0
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
 800196c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001970:	4622      	mov	r2, r4
 8001972:	462b      	mov	r3, r5
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	0159      	lsls	r1, r3, #5
 800197e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001982:	0150      	lsls	r0, r2, #5
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4621      	mov	r1, r4
 800198a:	1a51      	subs	r1, r2, r1
 800198c:	61b9      	str	r1, [r7, #24]
 800198e:	4629      	mov	r1, r5
 8001990:	eb63 0301 	sbc.w	r3, r3, r1
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019a2:	4659      	mov	r1, fp
 80019a4:	018b      	lsls	r3, r1, #6
 80019a6:	4651      	mov	r1, sl
 80019a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ac:	4651      	mov	r1, sl
 80019ae:	018a      	lsls	r2, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ebb2 0801 	subs.w	r8, r2, r1
 80019b6:	4659      	mov	r1, fp
 80019b8:	eb63 0901 	sbc.w	r9, r3, r1
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019d0:	4690      	mov	r8, r2
 80019d2:	4699      	mov	r9, r3
 80019d4:	4623      	mov	r3, r4
 80019d6:	eb18 0303 	adds.w	r3, r8, r3
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	462b      	mov	r3, r5
 80019de:	eb49 0303 	adc.w	r3, r9, r3
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019f0:	4629      	mov	r1, r5
 80019f2:	024b      	lsls	r3, r1, #9
 80019f4:	4621      	mov	r1, r4
 80019f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019fa:	4621      	mov	r1, r4
 80019fc:	024a      	lsls	r2, r1, #9
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a06:	2200      	movs	r2, #0
 8001a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a10:	f7fe fc4e 	bl	80002b0 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a1e:	e065      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x420>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400
 8001a28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	2200      	movs	r2, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	4611      	mov	r1, r2
 8001a38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a3e:	2300      	movs	r3, #0
 8001a40:	657b      	str	r3, [r7, #84]	; 0x54
 8001a42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a46:	4642      	mov	r2, r8
 8001a48:	464b      	mov	r3, r9
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	0159      	lsls	r1, r3, #5
 8001a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a58:	0150      	lsls	r0, r2, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4641      	mov	r1, r8
 8001a60:	1a51      	subs	r1, r2, r1
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	4649      	mov	r1, r9
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a78:	4659      	mov	r1, fp
 8001a7a:	018b      	lsls	r3, r1, #6
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a82:	4651      	mov	r1, sl
 8001a84:	018a      	lsls	r2, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	1a54      	subs	r4, r2, r1
 8001a8a:	4659      	mov	r1, fp
 8001a8c:	eb63 0501 	sbc.w	r5, r3, r1
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	00eb      	lsls	r3, r5, #3
 8001a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9e:	00e2      	lsls	r2, r4, #3
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	18e3      	adds	r3, r4, r3
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	464b      	mov	r3, r9
 8001aac:	eb45 0303 	adc.w	r3, r5, r3
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001abe:	4629      	mov	r1, r5
 8001ac0:	028b      	lsls	r3, r1, #10
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac8:	4621      	mov	r1, r4
 8001aca:	028a      	lsls	r2, r1, #10
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ada:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ade:	f7fe fbe7 	bl	80002b0 <__aeabi_uldivmod>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0f1b      	lsrs	r3, r3, #28
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b0a:	e003      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	37b8      	adds	r7, #184	; 0xb8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400

08001b2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e28d      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8083 	beq.w	8001c52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b4c:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d019      	beq.n	8001b8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b58:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b64:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b70:	d00c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d112      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b84      	ldr	r3, [pc, #528]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x124>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e25a      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x90>
 8001bae:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7b      	ldr	r2, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xcc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0xb4>
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a75      	ldr	r2, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xcc>
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f986 	bl	8000f10 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff f982 	bl	8000f10 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e21f      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xdc>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f972 	bl	8000f10 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f96e 	bl	8000f10 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e20b      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x104>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d06f      	beq.n	8001d3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c5e:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d017      	beq.n	8001c9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c6a:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d105      	bne.n	8001c82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c76:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x186>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1d3      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4937      	ldr	r1, [pc, #220]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f91b 	bl	8000f10 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff f917 	bl	8000f10 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1b4      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4925      	ldr	r1, [pc, #148]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f8fa 	bl	8000f10 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff f8f6 	bl	8000f10 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e193      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d036      	beq.n	8001db8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f8da 	bl	8000f10 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff f8d6 	bl	8000f10 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e173      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x234>
 8001d7e:	e01b      	b.n	8001db8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff f8c3 	bl	8000f10 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	e00e      	b.n	8001dac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff f8bf 	bl	8000f10 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d907      	bls.n	8001dac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e15c      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470000 	.word	0x42470000
 8001da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ea      	bne.n	8001d8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8097 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a7e      	ldr	r2, [pc, #504]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <HAL_RCC_OscConfig+0x4b0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x4b0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x4b0>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f87f 	bl	8000f10 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff f87b 	bl	8000f10 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e118      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x4b0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x31e>
 8001e3c:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	4a65      	ldr	r2, [pc, #404]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6713      	str	r3, [r2, #112]	; 0x70
 8001e48:	e01c      	b.n	8001e84 <HAL_RCC_OscConfig+0x358>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x340>
 8001e52:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a60      	ldr	r2, [pc, #384]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a5d      	ldr	r2, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0x358>
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a59      	ldr	r2, [pc, #356]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f840 	bl	8000f10 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f83c 	bl	8000f10 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0d7      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ee      	beq.n	8001e94 <HAL_RCC_OscConfig+0x368>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f82a 	bl	8000f10 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f826 	bl	8000f10 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0c1      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ee      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80ad 	beq.w	8002058 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efe:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d060      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d145      	bne.n	8001f9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x4b4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fffa 	bl	8000f10 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe fff6 	bl	8000f10 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e093      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	019b      	lsls	r3, r3, #6
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	071b      	lsls	r3, r3, #28
 8001f6a:	491b      	ldr	r1, [pc, #108]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x4b4>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe ffcb 	bl	8000f10 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe ffc7 	bl	8000f10 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e064      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x452>
 8001f9c:	e05c      	b.n	8002058 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_OscConfig+0x4b4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe ffb4 	bl	8000f10 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe ffb0 	bl	8000f10 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e04d      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x480>
 8001fca:	e045      	b.n	8002058 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e040      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_RCC_OscConfig+0x538>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d030      	beq.n	8002054 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d129      	bne.n	8002054 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d122      	bne.n	8002054 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	4293      	cmp	r3, r2
 800201e:	d119      	bne.n	8002054 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d10f      	bne.n	8002054 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d107      	bne.n	8002054 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07b      	b.n	8002172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800208a:	d009      	beq.n	80020a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
 8002092:	e005      	b.n	80020a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fd28 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	ea42 0103 	orr.w	r1, r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	f003 0104 	and.w	r1, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f003 0210 	and.w	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b088      	sub	sp, #32
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_SPI_Transmit+0x22>
 8002198:	2302      	movs	r3, #2
 800219a:	e126      	b.n	80023ea <HAL_SPI_Transmit+0x270>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a4:	f7fe feb4 	bl	8000f10 <HAL_GetTick>
 80021a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d002      	beq.n	80021c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
 80021bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021be:	e10b      	b.n	80023d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_SPI_Transmit+0x52>
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021d0:	e102      	b.n	80023d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002218:	d10f      	bne.n	800223a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002238:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d007      	beq.n	8002258 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002260:	d14b      	bne.n	80022fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_SPI_Transmit+0xf6>
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d13e      	bne.n	80022ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002294:	e02b      	b.n	80022ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d112      	bne.n	80022ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80022c8:	e011      	b.n	80022ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ca:	f7fe fe21 	bl	8000f10 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d803      	bhi.n	80022e2 <HAL_SPI_Transmit+0x168>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e0:	d102      	bne.n	80022e8 <HAL_SPI_Transmit+0x16e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022ec:	e074      	b.n	80023d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ce      	bne.n	8002296 <HAL_SPI_Transmit+0x11c>
 80022f8:	e04c      	b.n	8002394 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_Transmit+0x18e>
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d140      	bne.n	800238a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800232e:	e02c      	b.n	800238a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d113      	bne.n	8002366 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	86da      	strh	r2, [r3, #54]	; 0x36
 8002364:	e011      	b.n	800238a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002366:	f7fe fdd3 	bl	8000f10 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d803      	bhi.n	800237e <HAL_SPI_Transmit+0x204>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237c:	d102      	bne.n	8002384 <HAL_SPI_Transmit+0x20a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002388:	e026      	b.n	80023d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1cd      	bne.n	8002330 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fa55 	bl	8002848 <SPI_EndRxTxTransaction>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	77fb      	strb	r3, [r7, #31]
 80023d4:	e000      	b.n	80023d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80023d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b08c      	sub	sp, #48	; 0x30
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002400:	2301      	movs	r3, #1
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_SPI_TransmitReceive+0x26>
 8002414:	2302      	movs	r3, #2
 8002416:	e18a      	b.n	800272e <HAL_SPI_TransmitReceive+0x33c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002420:	f7fe fd76 	bl	8000f10 <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800242c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800243a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800243e:	2b01      	cmp	r3, #1
 8002440:	d00f      	beq.n	8002462 <HAL_SPI_TransmitReceive+0x70>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002448:	d107      	bne.n	800245a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_SPI_TransmitReceive+0x68>
 8002452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002456:	2b04      	cmp	r3, #4
 8002458:	d003      	beq.n	8002462 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002460:	e15b      	b.n	800271a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x82>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x82>
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800247a:	e14e      	b.n	800271a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b04      	cmp	r3, #4
 8002486:	d003      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2205      	movs	r2, #5
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	887a      	ldrh	r2, [r7, #2]
 80024b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d007      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ec:	d178      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x10a>
 80024f6:	8b7b      	ldrh	r3, [r7, #26]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d166      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002520:	e053      	b.n	80025ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d11b      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x176>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x176>
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d113      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	1c9a      	adds	r2, r3, #2
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d119      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x1b8>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d014      	beq.n	80025aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	b292      	uxth	r2, r2
 800258c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	1c9a      	adds	r2, r3, #2
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025a6:	2301      	movs	r3, #1
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025aa:	f7fe fcb1 	bl	8000f10 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d807      	bhi.n	80025ca <HAL_SPI_TransmitReceive+0x1d8>
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c0:	d003      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025c8:	e0a7      	b.n	800271a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1a6      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x130>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1a1      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x130>
 80025de:	e07c      	b.n	80026da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_SPI_TransmitReceive+0x1fc>
 80025e8:	8b7b      	ldrh	r3, [r7, #26]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d16b      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002614:	e057      	b.n	80026c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d11c      	bne.n	800265e <HAL_SPI_TransmitReceive+0x26c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d017      	beq.n	800265e <HAL_SPI_TransmitReceive+0x26c>
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d114      	bne.n	800265e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d119      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x2ae>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d014      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800269c:	2301      	movs	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026a0:	f7fe fc36 	bl	8000f10 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d803      	bhi.n	80026b8 <HAL_SPI_TransmitReceive+0x2c6>
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b6:	d102      	bne.n	80026be <HAL_SPI_TransmitReceive+0x2cc>
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026c4:	e029      	b.n	800271a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1a2      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x224>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d19d      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8b2 	bl	8002848 <SPI_EndRxTxTransaction>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026f6:	e010      	b.n	800271a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	e000      	b.n	800271a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002718:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800272a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800272e:	4618      	mov	r0, r3
 8002730:	3730      	adds	r7, #48	; 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002748:	f7fe fbe2 	bl	8000f10 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002758:	f7fe fbda 	bl	8000f10 <HAL_GetTick>
 800275c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	0d1b      	lsrs	r3, r3, #20
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276e:	e054      	b.n	800281a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002776:	d050      	beq.n	800281a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002778:	f7fe fbca 	bl	8000f10 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	d902      	bls.n	800278e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13d      	bne.n	800280a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800279c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a6:	d111      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	d004      	beq.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d107      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d4:	d10f      	bne.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e017      	b.n	800283a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3b01      	subs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	429a      	cmp	r2, r3
 8002836:	d19b      	bne.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000

08002848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <SPI_EndRxTxTransaction+0x7c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <SPI_EndRxTxTransaction+0x80>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0d5b      	lsrs	r3, r3, #21
 8002860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002872:	d112      	bne.n	800289a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff5a 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e00f      	b.n	80028ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d0f2      	beq.n	800289a <SPI_EndRxTxTransaction+0x52>
 80028b4:	e000      	b.n	80028b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80028b6:	bf00      	nop
  }

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	165e9f81 	.word	0x165e9f81

080028cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e03f      	b.n	800295e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe f954 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f929 	bl	8002b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b08a      	sub	sp, #40	; 0x28
 800296a:	af02      	add	r7, sp, #8
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	d17c      	bne.n	8002a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_UART_Transmit+0x2c>
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e075      	b.n	8002a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_UART_Transmit+0x3e>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e06e      	b.n	8002a82 <HAL_UART_Transmit+0x11c>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2221      	movs	r2, #33	; 0x21
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ba:	f7fe faa9 	bl	8000f10 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x82>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029f8:	e02a      	b.n	8002a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f840 	bl	8002a8a <UART_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e036      	b.n	8002a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e007      	b.n	8002a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1cf      	bne.n	80029fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2140      	movs	r1, #64	; 0x40
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f810 	bl	8002a8a <UART_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b090      	sub	sp, #64	; 0x40
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9a:	e050      	b.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa2:	d04c      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <UART_WaitOnFlagUntilTimeout+0x30>
 8002aaa:	f7fe fa31 	bl	8000f10 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d241      	bcs.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ada:	637a      	str	r2, [r7, #52]	; 0x34
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e5      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3314      	adds	r3, #20
 8002af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	613b      	str	r3, [r7, #16]
   return(result);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b0e:	623a      	str	r2, [r7, #32]
 8002b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	69f9      	ldr	r1, [r7, #28]
 8002b14:	6a3a      	ldr	r2, [r7, #32]
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e5      	bne.n	8002aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e00f      	b.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d09f      	beq.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3740      	adds	r7, #64	; 0x40
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b6c:	b0c0      	sub	sp, #256	; 0x100
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	68d9      	ldr	r1, [r3, #12]
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	ea40 0301 	orr.w	r3, r0, r1
 8002b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bc0:	f021 010c 	bic.w	r1, r1, #12
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be2:	6999      	ldr	r1, [r3, #24]
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	ea40 0301 	orr.w	r3, r0, r1
 8002bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b8f      	ldr	r3, [pc, #572]	; (8002e34 <UART_SetConfig+0x2cc>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d005      	beq.n	8002c08 <UART_SetConfig+0xa0>
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b8d      	ldr	r3, [pc, #564]	; (8002e38 <UART_SetConfig+0x2d0>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d104      	bne.n	8002c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c08:	f7fe fd4c 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8002c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c10:	e003      	b.n	8002c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c12:	f7fe fd33 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 8002c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	f040 810c 	bne.w	8002e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	462b      	mov	r3, r5
 8002c3e:	1891      	adds	r1, r2, r2
 8002c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c42:	415b      	adcs	r3, r3
 8002c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	eb12 0801 	adds.w	r8, r2, r1
 8002c50:	4629      	mov	r1, r5
 8002c52:	eb43 0901 	adc.w	r9, r3, r1
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c6a:	4690      	mov	r8, r2
 8002c6c:	4699      	mov	r9, r3
 8002c6e:	4623      	mov	r3, r4
 8002c70:	eb18 0303 	adds.w	r3, r8, r3
 8002c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c78:	462b      	mov	r3, r5
 8002c7a:	eb49 0303 	adc.w	r3, r9, r3
 8002c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c96:	460b      	mov	r3, r1
 8002c98:	18db      	adds	r3, r3, r3
 8002c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cac:	f7fd fb00 	bl	80002b0 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <UART_SetConfig+0x2d4>)
 8002cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	011c      	lsls	r4, r3, #4
 8002cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d00:	4692      	mov	sl, r2
 8002d02:	469b      	mov	fp, r3
 8002d04:	4643      	mov	r3, r8
 8002d06:	eb1a 0303 	adds.w	r3, sl, r3
 8002d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	eb4b 0303 	adc.w	r3, fp, r3
 8002d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	18db      	adds	r3, r3, r3
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	4613      	mov	r3, r2
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d42:	f7fd fab5 	bl	80002b0 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <UART_SetConfig+0x2d4>)
 8002d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2264      	movs	r2, #100	; 0x64
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	1acb      	subs	r3, r1, r3
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <UART_SetConfig+0x2d4>)
 8002d64:	fba3 2302 	umull	r2, r3, r3, r2
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d70:	441c      	add	r4, r3
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	1891      	adds	r1, r2, r2
 8002d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d94:	4641      	mov	r1, r8
 8002d96:	1851      	adds	r1, r2, r1
 8002d98:	6339      	str	r1, [r7, #48]	; 0x30
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	414b      	adcs	r3, r1
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dac:	4659      	mov	r1, fp
 8002dae:	00cb      	lsls	r3, r1, #3
 8002db0:	4651      	mov	r1, sl
 8002db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db6:	4651      	mov	r1, sl
 8002db8:	00ca      	lsls	r2, r1, #3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dc8:	464b      	mov	r3, r9
 8002dca:	460a      	mov	r2, r1
 8002dcc:	eb42 0303 	adc.w	r3, r2, r3
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002de8:	460b      	mov	r3, r1
 8002dea:	18db      	adds	r3, r3, r3
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dee:	4613      	mov	r3, r2
 8002df0:	eb42 0303 	adc.w	r3, r2, r3
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dfe:	f7fd fa57 	bl	80002b0 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <UART_SetConfig+0x2d4>)
 8002e08:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	2164      	movs	r1, #100	; 0x64
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3332      	adds	r3, #50	; 0x32
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <UART_SetConfig+0x2d4>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	f003 0207 	and.w	r2, r3, #7
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4422      	add	r2, r4
 8002e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e30:	e105      	b.n	800303e <UART_SetConfig+0x4d6>
 8002e32:	bf00      	nop
 8002e34:	40011000 	.word	0x40011000
 8002e38:	40011400 	.word	0x40011400
 8002e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e52:	4642      	mov	r2, r8
 8002e54:	464b      	mov	r3, r9
 8002e56:	1891      	adds	r1, r2, r2
 8002e58:	6239      	str	r1, [r7, #32]
 8002e5a:	415b      	adcs	r3, r3
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e62:	4641      	mov	r1, r8
 8002e64:	1854      	adds	r4, r2, r1
 8002e66:	4649      	mov	r1, r9
 8002e68:	eb43 0501 	adc.w	r5, r3, r1
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	00eb      	lsls	r3, r5, #3
 8002e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7a:	00e2      	lsls	r2, r4, #3
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	461d      	mov	r5, r3
 8002e80:	4643      	mov	r3, r8
 8002e82:	18e3      	adds	r3, r4, r3
 8002e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e88:	464b      	mov	r3, r9
 8002e8a:	eb45 0303 	adc.w	r3, r5, r3
 8002e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eae:	4629      	mov	r1, r5
 8002eb0:	008b      	lsls	r3, r1, #2
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb8:	4621      	mov	r1, r4
 8002eba:	008a      	lsls	r2, r1, #2
 8002ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ec0:	f7fd f9f6 	bl	80002b0 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4b60      	ldr	r3, [pc, #384]	; (800304c <UART_SetConfig+0x4e4>)
 8002eca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	011c      	lsls	r4, r3, #4
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	1891      	adds	r1, r2, r2
 8002eea:	61b9      	str	r1, [r7, #24]
 8002eec:	415b      	adcs	r3, r3
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	1851      	adds	r1, r2, r1
 8002ef8:	6139      	str	r1, [r7, #16]
 8002efa:	4649      	mov	r1, r9
 8002efc:	414b      	adcs	r3, r1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	00cb      	lsls	r3, r1, #3
 8002f10:	4651      	mov	r1, sl
 8002f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f16:	4651      	mov	r1, sl
 8002f18:	00ca      	lsls	r2, r1, #3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4642      	mov	r2, r8
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f28:	464b      	mov	r3, r9
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	eb42 0303 	adc.w	r3, r2, r3
 8002f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	008b      	lsls	r3, r1, #2
 8002f50:	4641      	mov	r1, r8
 8002f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f56:	4641      	mov	r1, r8
 8002f58:	008a      	lsls	r2, r1, #2
 8002f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f5e:	f7fd f9a7 	bl	80002b0 <__aeabi_uldivmod>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4b39      	ldr	r3, [pc, #228]	; (800304c <UART_SetConfig+0x4e4>)
 8002f68:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	2164      	movs	r1, #100	; 0x64
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	3332      	adds	r3, #50	; 0x32
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <UART_SetConfig+0x4e4>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f86:	441c      	add	r4, r3
 8002f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f90:	677a      	str	r2, [r7, #116]	; 0x74
 8002f92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f96:	4642      	mov	r2, r8
 8002f98:	464b      	mov	r3, r9
 8002f9a:	1891      	adds	r1, r2, r2
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	415b      	adcs	r3, r3
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	1851      	adds	r1, r2, r1
 8002faa:	6039      	str	r1, [r7, #0]
 8002fac:	4649      	mov	r1, r9
 8002fae:	414b      	adcs	r3, r1
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fbe:	4659      	mov	r1, fp
 8002fc0:	00cb      	lsls	r3, r1, #3
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc8:	4651      	mov	r1, sl
 8002fca:	00ca      	lsls	r2, r1, #3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4642      	mov	r2, r8
 8002fd4:	189b      	adds	r3, r3, r2
 8002fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd8:	464b      	mov	r3, r9
 8002fda:	460a      	mov	r2, r1
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	663b      	str	r3, [r7, #96]	; 0x60
 8002fec:	667a      	str	r2, [r7, #100]	; 0x64
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	008b      	lsls	r3, r1, #2
 8002ffe:	4641      	mov	r1, r8
 8003000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003004:	4641      	mov	r1, r8
 8003006:	008a      	lsls	r2, r1, #2
 8003008:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800300c:	f7fd f950 	bl	80002b0 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <UART_SetConfig+0x4e4>)
 8003016:	fba3 1302 	umull	r1, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2164      	movs	r1, #100	; 0x64
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	3332      	adds	r3, #50	; 0x32
 8003028:	4a08      	ldr	r2, [pc, #32]	; (800304c <UART_SetConfig+0x4e4>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4422      	add	r2, r4
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304a:	bf00      	nop
 800304c:	51eb851f 	.word	0x51eb851f

08003050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <MX_FATFS_Init+0x18>)
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <MX_FATFS_Init+0x1c>)
 8003058:	f003 fb9e 	bl	8006798 <FATFS_LinkDriver>
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <MX_FATFS_Init+0x20>)
 8003062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000148 	.word	0x20000148
 800306c:	2000000c 	.word	0x2000000c
 8003070:	20000144 	.word	0x20000144

08003074 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003078:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <GenerateCRCTable>:
void get_trail(uint8_t* ocr);
uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg);


void GenerateCRCTable()
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
  int i, j;
  uint8_t CRCPoly = 0x89;  // the value of our CRC-7 polynomial
 800308a:	2389      	movs	r3, #137	; 0x89
 800308c:	71fb      	strb	r3, [r7, #7]

  // generate a table value for all 256 possible byte values
  for (i = 0; i < 256; ++i) {
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e03c      	b.n	800310e <GenerateCRCTable+0x8a>
    CRCTable[i] = (i & 0x80) ? i ^ CRCPoly : i;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <GenerateCRCTable+0x2a>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	b25a      	sxtb	r2, r3
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	4053      	eors	r3, r2
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e001      	b.n	80030b2 <GenerateCRCTable+0x2e>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	491c      	ldr	r1, [pc, #112]	; (8003124 <GenerateCRCTable+0xa0>)
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	440a      	add	r2, r1
 80030b8:	7013      	strb	r3, [r2, #0]
    for (j = 1; j < 8; ++j) {
 80030ba:	2301      	movs	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	e020      	b.n	8003102 <GenerateCRCTable+0x7e>
        CRCTable[i] <<= 1;
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <GenerateCRCTable+0xa0>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b2d9      	uxtb	r1, r3
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <GenerateCRCTable+0xa0>)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	460a      	mov	r2, r1
 80030d4:	701a      	strb	r2, [r3, #0]
        if (CRCTable[i] & 0x80){
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <GenerateCRCTable+0xa0>)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da0b      	bge.n	80030fc <GenerateCRCTable+0x78>
            CRCTable[i] ^= CRCPoly;
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <GenerateCRCTable+0xa0>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	4053      	eors	r3, r2
 80030f0:	b2d9      	uxtb	r1, r3
 80030f2:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <GenerateCRCTable+0xa0>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	460a      	mov	r2, r1
 80030fa:	701a      	strb	r2, [r3, #0]
    for (j = 1; j < 8; ++j) {
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b07      	cmp	r3, #7
 8003106:	dddb      	ble.n	80030c0 <GenerateCRCTable+0x3c>
  for (i = 0; i < 256; ++i) {
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2bff      	cmp	r3, #255	; 0xff
 8003112:	ddbf      	ble.n	8003094 <GenerateCRCTable+0x10>
        }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000014c 	.word	0x2000014c

08003128 <CRCAdd>:

uint8_t CRCAdd(uint8_t CRC_val , uint8_t message_byte){
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	460a      	mov	r2, r1
 8003132:	71fb      	strb	r3, [r7, #7]
 8003134:	4613      	mov	r3, r2
 8003136:	71bb      	strb	r3, [r7, #6]
	 return CRCTable[(CRC_val << 1) ^ message_byte];
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	005a      	lsls	r2, r3, #1
 800313c:	79bb      	ldrb	r3, [r7, #6]
 800313e:	4053      	eors	r3, r2
 8003140:	4a03      	ldr	r2, [pc, #12]	; (8003150 <CRCAdd+0x28>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	2000014c 	.word	0x2000014c

08003154 <getCRC>:


// returns the CRC-7 for a message of "length" bytes
uint8_t getCRC(uint8_t message[], int length)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]

  int i;
  uint8_t CRC_val = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	72fb      	strb	r3, [r7, #11]

  for (i = 0; i < length; ++i){
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e00d      	b.n	8003184 <getCRC+0x30>
	  CRC_val = CRCAdd(CRC_val, message[i]);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ffd7 	bl	8003128 <CRCAdd>
 800317a:	4603      	mov	r3, r0
 800317c:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length; ++i){
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3301      	adds	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	dbed      	blt.n	8003168 <getCRC+0x14>
  }

  return CRC_val;
 800318c:	7afb      	ldrb	r3, [r7, #11]

}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <send_SD_cmd>:

uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg){
 8003198:	b580      	push	{r7, lr}
 800319a:	b094      	sub	sp, #80	; 0x50
 800319c:	af02      	add	r7, sp, #8
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]

	//should assert that resp!=NULL
	if( (cmd==ACMD41)||(cmd==ACMD23)){
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b29      	cmp	r3, #41	; 0x29
 80031a8:	d002      	beq.n	80031b0 <send_SD_cmd+0x18>
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b57      	cmp	r3, #87	; 0x57
 80031ae:	d10c      	bne.n	80031ca <send_SD_cmd+0x32>
		uint8_t acmd_resp = send_SD_cmd(CMD55,0);
 80031b0:	2100      	movs	r1, #0
 80031b2:	2037      	movs	r0, #55	; 0x37
 80031b4:	f7ff fff0 	bl	8003198 <send_SD_cmd>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(acmd_resp == 0xFF){
 80031be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d101      	bne.n	80031ca <send_SD_cmd+0x32>
			return 0xFF;
 80031c6:	23ff      	movs	r3, #255	; 0xff
 80031c8:	e08e      	b.n	80032e8 <send_SD_cmd+0x150>
		}
	}


	uint8_t tx_high = 0xFF;
 80031ca:	23ff      	movs	r3, #255	; 0xff
 80031cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t MSG[35] = {'\0'};
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	f107 0318 	add.w	r3, r7, #24
 80031d8:	221f      	movs	r2, #31
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fb15 	bl	800680c <memset>
	uint8_t spi_rx = 0xFF;
 80031e2:	23ff      	movs	r3, #255	; 0xff
 80031e4:	74fb      	strb	r3, [r7, #19]
	uint8_t rec_res = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 80031ec:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80031f0:	2332      	movs	r3, #50	; 0x32
 80031f2:	2201      	movs	r2, #1
 80031f4:	483e      	ldr	r0, [pc, #248]	; (80032f0 <send_SD_cmd+0x158>)
 80031f6:	f7fe ffc0 	bl	800217a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 80031fa:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80031fe:	2332      	movs	r3, #50	; 0x32
 8003200:	2201      	movs	r2, #1
 8003202:	483b      	ldr	r0, [pc, #236]	; (80032f0 <send_SD_cmd+0x158>)
 8003204:	f7fe ffb9 	bl	800217a <HAL_SPI_Transmit>


	HAL_StatusTypeDef status;
	uint8_t spi_tx_bf[6] = {0};
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	2300      	movs	r3, #0
 800320e:	823b      	strh	r3, [r7, #16]

	spi_tx_bf[0] = (0x40)| cmd;
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	b2db      	uxtb	r3, r3
 8003218:	733b      	strb	r3, [r7, #12]

	spi_tx_bf[4] =  cmd_arg & 0x000000FF;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	743b      	strb	r3, [r7, #16]
	spi_tx_bf[3] = (cmd_arg & 0x0000FF00) >> 8;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	b2db      	uxtb	r3, r3
 8003226:	73fb      	strb	r3, [r7, #15]
	spi_tx_bf[2] = (cmd_arg & 0x00FF0000) >> 16;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b2db      	uxtb	r3, r3
 800322e:	73bb      	strb	r3, [r7, #14]
	spi_tx_bf[1] = (cmd_arg & 0xFF000000) >> 24;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	0e1b      	lsrs	r3, r3, #24
 8003234:	b2db      	uxtb	r3, r3
 8003236:	737b      	strb	r3, [r7, #13]

	spi_tx_bf[5] = (getCRC(spi_tx_bf,5)<<1)  + 1;
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	2105      	movs	r1, #5
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff88 	bl	8003154 <getCRC>
 8003244:	4603      	mov	r3, r0
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	747b      	strb	r3, [r7, #17]

	//printf(MSG, "cmd:%u %u %u %u %u %u\r\n",spi_tx_bf[0],spi_tx_bf[1],spi_tx_bf[2],spi_tx_bf[3],spi_tx_bf[4],spi_tx_bf[5]);

    HAL_SPI_Transmit(&HSPI, spi_tx_bf , 6, 50);
 8003250:	f107 010c 	add.w	r1, r7, #12
 8003254:	2332      	movs	r3, #50	; 0x32
 8003256:	2206      	movs	r2, #6
 8003258:	4825      	ldr	r0, [pc, #148]	; (80032f0 <send_SD_cmd+0x158>)
 800325a:	f7fe ff8e 	bl	800217a <HAL_SPI_Transmit>

	int count = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	643b      	str	r3, [r7, #64]	; 0x40


	while( count<N_CS && !rec_res  ){
 8003262:	e013      	b.n	800328c <send_SD_cmd+0xf4>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx , 1, 50);
 8003264:	f107 0213 	add.w	r2, r7, #19
 8003268:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800326c:	2332      	movs	r3, #50	; 0x32
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2301      	movs	r3, #1
 8003272:	481f      	ldr	r0, [pc, #124]	; (80032f0 <send_SD_cmd+0x158>)
 8003274:	f7ff f8bd 	bl	80023f2 <HAL_SPI_TransmitReceive>
		if( (spi_rx&0x80) == 0){
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	b25b      	sxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	db02      	blt.n	8003286 <send_SD_cmd+0xee>
			rec_res = 1;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		//printf("resp:%u\r\n",spi_rx);

		count++;
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	3301      	adds	r3, #1
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
	while( count<N_CS && !rec_res  ){
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	2b07      	cmp	r3, #7
 8003290:	dc03      	bgt.n	800329a <send_SD_cmd+0x102>
 8003292:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0e4      	beq.n	8003264 <send_SD_cmd+0xcc>
	}


	if(cmd!=CMD58 && cmd!=CMD8 && cmd!=CMD9 && spi_rx!=0xFF){
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b3a      	cmp	r3, #58	; 0x3a
 800329e:	d022      	beq.n	80032e6 <send_SD_cmd+0x14e>
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d01f      	beq.n	80032e6 <send_SD_cmd+0x14e>
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d01c      	beq.n	80032e6 <send_SD_cmd+0x14e>
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2bff      	cmp	r3, #255	; 0xff
 80032b0:	d019      	beq.n	80032e6 <send_SD_cmd+0x14e>
		uint8_t spi_rx_clear = 0x0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	72fb      	strb	r3, [r7, #11]

		for(int ii=0; ii<8; ii++){
 80032b6:	2300      	movs	r3, #0
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ba:	e00f      	b.n	80032dc <send_SD_cmd+0x144>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 80032bc:	f107 020b 	add.w	r2, r7, #11
 80032c0:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80032c4:	2332      	movs	r3, #50	; 0x32
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	4809      	ldr	r0, [pc, #36]	; (80032f0 <send_SD_cmd+0x158>)
 80032cc:	f7ff f891 	bl	80023f2 <HAL_SPI_TransmitReceive>
			if(spi_rx_clear==0xFF){
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	d006      	beq.n	80032e4 <send_SD_cmd+0x14c>
		for(int ii=0; ii<8; ii++){
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	3301      	adds	r3, #1
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032de:	2b07      	cmp	r3, #7
 80032e0:	ddec      	ble.n	80032bc <send_SD_cmd+0x124>
 80032e2:	e000      	b.n	80032e6 <send_SD_cmd+0x14e>
				break;
 80032e4:	bf00      	nop
			}
		}
	}

	return spi_rx;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3748      	adds	r7, #72	; 0x48
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200000a0 	.word	0x200000a0

080032f4 <get_trail>:

void get_trail(uint8_t* ocr){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	6078      	str	r0, [r7, #4]
	    uint8_t tx_high = 0xFF;
 80032fc:	23ff      	movs	r3, #255	; 0xff
 80032fe:	75fb      	strb	r3, [r7, #23]
		uint8_t rx_buff[4] = {0};
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr, 1, 50);
 8003304:	f107 0117 	add.w	r1, r7, #23
 8003308:	2332      	movs	r3, #50	; 0x32
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2301      	movs	r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	481a      	ldr	r0, [pc, #104]	; (800337c <get_trail+0x88>)
 8003312:	f7ff f86e 	bl	80023f2 <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+1, 1, 50);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	f107 0117 	add.w	r1, r7, #23
 800331e:	2332      	movs	r3, #50	; 0x32
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2301      	movs	r3, #1
 8003324:	4815      	ldr	r0, [pc, #84]	; (800337c <get_trail+0x88>)
 8003326:	f7ff f864 	bl	80023f2 <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+2, 1, 50);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1c9a      	adds	r2, r3, #2
 800332e:	f107 0117 	add.w	r1, r7, #23
 8003332:	2332      	movs	r3, #50	; 0x32
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	4810      	ldr	r0, [pc, #64]	; (800337c <get_trail+0x88>)
 800333a:	f7ff f85a 	bl	80023f2 <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+3, 1, 50);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1cda      	adds	r2, r3, #3
 8003342:	f107 0117 	add.w	r1, r7, #23
 8003346:	2332      	movs	r3, #50	; 0x32
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2301      	movs	r3, #1
 800334c:	480b      	ldr	r0, [pc, #44]	; (800337c <get_trail+0x88>)
 800334e:	f7ff f850 	bl	80023f2 <HAL_SPI_TransmitReceive>


		//sprintf(MSG, "trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
		//printf("trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		uint8_t spi_rx_clear = 0x0;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
		while(spi_rx_clear!=0xFF){
 8003356:	e009      	b.n	800336c <get_trail+0x78>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 8003358:	f107 020f 	add.w	r2, r7, #15
 800335c:	f107 0117 	add.w	r1, r7, #23
 8003360:	2332      	movs	r3, #50	; 0x32
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2301      	movs	r3, #1
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <get_trail+0x88>)
 8003368:	f7ff f843 	bl	80023f2 <HAL_SPI_TransmitReceive>
		while(spi_rx_clear!=0xFF){
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d1f2      	bne.n	8003358 <get_trail+0x64>
		}
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200000a0 	.word	0x200000a0

08003380 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    Stat = STA_NOINIT;
 800338a:	4b4b      	ldr	r3, [pc, #300]	; (80034b8 <USER_initialize+0x138>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
	if(pdrv!=0){
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <USER_initialize+0x1e>
	  return Stat;
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <USER_initialize+0x138>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e088      	b.n	80034b0 <USER_initialize+0x130>
	}

    GenerateCRCTable();
 800339e:	f7ff fe71 	bl	8003084 <GenerateCRCTable>


    uint8_t spi_tx = 0xFF;
 80033a2:	23ff      	movs	r3, #255	; 0xff
 80033a4:	73fb      	strb	r3, [r7, #15]


    SD_CS_HIGH();
 80033a6:	2201      	movs	r2, #1
 80033a8:	2102      	movs	r1, #2
 80033aa:	4844      	ldr	r0, [pc, #272]	; (80034bc <USER_initialize+0x13c>)
 80033ac:	f7fe f85a 	bl	8001464 <HAL_GPIO_WritePin>

    HAL_Delay(50); //delay at least 1 ms
 80033b0:	2032      	movs	r0, #50	; 0x32
 80033b2:	f7fd fdb9 	bl	8000f28 <HAL_Delay>

    //only need 72, do a bunch more
    for(int ii = 0; ii<10; ii++){
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e009      	b.n	80033d0 <USER_initialize+0x50>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 80033bc:	f107 010f 	add.w	r1, r7, #15
 80033c0:	2300      	movs	r3, #0
 80033c2:	2201      	movs	r2, #1
 80033c4:	483e      	ldr	r0, [pc, #248]	; (80034c0 <USER_initialize+0x140>)
 80033c6:	f7fe fed8 	bl	800217a <HAL_SPI_Transmit>
    for(int ii = 0; ii<10; ii++){
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b09      	cmp	r3, #9
 80033d4:	ddf2      	ble.n	80033bc <USER_initialize+0x3c>
    }

    uint8_t R1_resp = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
    uint8_t ocr[4] = {0};
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]


    SD_CS_LOW();
 80033de:	2200      	movs	r2, #0
 80033e0:	2102      	movs	r1, #2
 80033e2:	4836      	ldr	r0, [pc, #216]	; (80034bc <USER_initialize+0x13c>)
 80033e4:	f7fe f83e 	bl	8001464 <HAL_GPIO_WritePin>

    //online comments indicate this makes things more consistent
    for(int ii = 0; ii<2; ii++){
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	e009      	b.n	8003402 <USER_initialize+0x82>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 80033ee:	f107 010f 	add.w	r1, r7, #15
 80033f2:	2300      	movs	r3, #0
 80033f4:	2201      	movs	r2, #1
 80033f6:	4832      	ldr	r0, [pc, #200]	; (80034c0 <USER_initialize+0x140>)
 80033f8:	f7fe febf 	bl	800217a <HAL_SPI_Transmit>
    for(int ii = 0; ii<2; ii++){
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	3301      	adds	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b01      	cmp	r3, #1
 8003406:	ddf2      	ble.n	80033ee <USER_initialize+0x6e>
    }

    R1_resp = send_SD_cmd(CMD0,0);
 8003408:	2100      	movs	r1, #0
 800340a:	2000      	movs	r0, #0
 800340c:	f7ff fec4 	bl	8003198 <send_SD_cmd>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]


    if(R1_resp == 0x01){
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d144      	bne.n	80034a4 <USER_initialize+0x124>


  	  R1_resp = send_SD_cmd(CMD8,0x01AA);
 800341a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800341e:	2008      	movs	r0, #8
 8003420:	f7ff feba 	bl	8003198 <send_SD_cmd>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]
  	  get_trail(ocr);
 8003428:	f107 0308 	add.w	r3, r7, #8
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff61 	bl	80032f4 <get_trail>


  	  if( (R1_resp!=0x01)){ //if error or no response, SD1 or MMC
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d135      	bne.n	80034a4 <USER_initialize+0x124>
  		  //Won't support this

  	  }
  	  else if( (ocr[2] == 0x01)&&(ocr[3] == 0xAA)  ){ //SD v2
 8003438:	7abb      	ldrb	r3, [r7, #10]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d132      	bne.n	80034a4 <USER_initialize+0x124>
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	2baa      	cmp	r3, #170	; 0xaa
 8003442:	d12f      	bne.n	80034a4 <USER_initialize+0x124>
  		  //printf("SD 2.0+\r\n");



  		  uint32_t t_init = HAL_GetTick();
 8003444:	f7fd fd64 	bl	8000f10 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 800344a:	e009      	b.n	8003460 <USER_initialize+0xe0>


  			  R1_resp = send_SD_cmd(ACMD41,0x40000000);
 800344c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003450:	2029      	movs	r0, #41	; 0x29
 8003452:	f7ff fea1 	bl	8003198 <send_SD_cmd>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]

  			  if(R1_resp==0x00){
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <USER_initialize+0xf2>
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 8003460:	f7fd fd56 	bl	8000f10 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800346e:	d3ed      	bcc.n	800344c <USER_initialize+0xcc>
 8003470:	e000      	b.n	8003474 <USER_initialize+0xf4>
  				  break;
 8003472:	bf00      	nop
  		  }




  		  R1_resp = send_SD_cmd(CMD58,0x00000000);
 8003474:	2100      	movs	r1, #0
 8003476:	203a      	movs	r0, #58	; 0x3a
 8003478:	f7ff fe8e 	bl	8003198 <send_SD_cmd>
 800347c:	4603      	mov	r3, r0
 800347e:	75fb      	strb	r3, [r7, #23]
  		  get_trail(ocr);
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff35 	bl	80032f4 <get_trail>

  		  //printf("OCR status:\r\n");
  		  //printf("\tCCS(0=bytes,1=blocks):%u\r\n", (ocr[0]>>6)&0x01 );

  		  //force 512 byte blocks
  		  R1_resp = send_SD_cmd(CMD16,0x00000200);
 800348a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800348e:	2010      	movs	r0, #16
 8003490:	f7ff fe82 	bl	8003198 <send_SD_cmd>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]


  		  //I don't, but could check voltage here
  		  Stat=0;
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <USER_initialize+0x138>)
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
  		  //after init, can speed up spi
  		  HSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <USER_initialize+0x140>)
 80034a0:	2210      	movs	r2, #16
 80034a2:	61da      	str	r2, [r3, #28]
    }
    else{
  	  //printf("error, CMD0 response:%u\r\n",R1_resp);
    }

    Stat = 0;
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <USER_initialize+0x138>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]

    return Stat;
 80034aa:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <USER_initialize+0x138>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000009 	.word	0x20000009
 80034bc:	40020400 	.word	0x40020400
 80034c0:	200000a0 	.word	0x200000a0

080034c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    //Stat = STA_NOINIT;
    return Stat;
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <USER_status+0x1c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	20000009 	.word	0x20000009

080034e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN READ */

	if(pdrv!=0){
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <USER_read+0x1a>
		return RES_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0d7      	b.n	80036ae <USER_read+0x1ca>
	}
	if(USER_status(pdrv)!=0){
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ffdf 	bl	80034c4 <USER_status>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <USER_read+0x2c>
		return RES_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0ce      	b.n	80036ae <USER_read+0x1ca>
	}


	if(count==0){
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <USER_read+0x36>
	    return RES_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e0c9      	b.n	80036ae <USER_read+0x1ca>
	}
	else if(count==1){
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d149      	bne.n	80035b4 <USER_read+0xd0>
	  uint8_t R1_resp = send_SD_cmd(CMD17,sector);
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	2011      	movs	r0, #17
 8003524:	f7ff fe38 	bl	8003198 <send_SD_cmd>
 8003528:	4603      	mov	r3, r0
 800352a:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 800352c:	23ff      	movs	r3, #255	; 0xff
 800352e:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8003530:	23ff      	movs	r3, #255	; 0xff
 8003532:	763b      	strb	r3, [r7, #24]

	  int ii = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 8003538:	e00c      	b.n	8003554 <USER_read+0x70>
		ii++;
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	3301      	adds	r3, #1
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003540:	f107 0218 	add.w	r2, r7, #24
 8003544:	f107 0119 	add.w	r1, r7, #25
 8003548:	2332      	movs	r3, #50	; 0x32
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	485a      	ldr	r0, [pc, #360]	; (80036b8 <USER_read+0x1d4>)
 8003550:	f7fe ff4f 	bl	80023f2 <HAL_SPI_TransmitReceive>
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 8003554:	7e3b      	ldrb	r3, [r7, #24]
 8003556:	2bff      	cmp	r3, #255	; 0xff
 8003558:	d102      	bne.n	8003560 <USER_read+0x7c>
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	2b63      	cmp	r3, #99	; 0x63
 800355e:	ddec      	ble.n	800353a <USER_read+0x56>
	  }

	  //capture data
	  for(ii=0;ii<512;ii++){
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003564:	e00d      	b.n	8003582 <USER_read+0x9e>
	 	HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii , 1, 50);
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	441a      	add	r2, r3
 800356c:	f107 0119 	add.w	r1, r7, #25
 8003570:	2332      	movs	r3, #50	; 0x32
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2301      	movs	r3, #1
 8003576:	4850      	ldr	r0, [pc, #320]	; (80036b8 <USER_read+0x1d4>)
 8003578:	f7fe ff3b 	bl	80023f2 <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<512;ii++){
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	3301      	adds	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003588:	dbed      	blt.n	8003566 <USER_read+0x82>
	  }

		//read CRC - don't use for now
	  for(ii=0;ii<2;ii++){
 800358a:	2300      	movs	r3, #0
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358e:	e00c      	b.n	80035aa <USER_read+0xc6>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 8003590:	f107 0218 	add.w	r2, r7, #24
 8003594:	f107 0119 	add.w	r1, r7, #25
 8003598:	2332      	movs	r3, #50	; 0x32
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2301      	movs	r3, #1
 800359e:	4846      	ldr	r0, [pc, #280]	; (80036b8 <USER_read+0x1d4>)
 80035a0:	f7fe ff27 	bl	80023f2 <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<2;ii++){
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	3301      	adds	r3, #1
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	ddef      	ble.n	8003590 <USER_read+0xac>
	  }

	  return RES_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e07c      	b.n	80036ae <USER_read+0x1ca>

	}
	else{
	  uint8_t R1_resp = send_SD_cmd(CMD18,sector);
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	2012      	movs	r0, #18
 80035b8:	f7ff fdee 	bl	8003198 <send_SD_cmd>
 80035bc:	4603      	mov	r3, r0
 80035be:	76fb      	strb	r3, [r7, #27]

	  uint8_t spi_tx = 0xFF;
 80035c0:	23ff      	movs	r3, #255	; 0xff
 80035c2:	75fb      	strb	r3, [r7, #23]
	  uint8_t spi_rx = 0xFF;
 80035c4:	23ff      	movs	r3, #255	; 0xff
 80035c6:	75bb      	strb	r3, [r7, #22]


	  for(int jj=0; jj<count; jj++){
 80035c8:	2300      	movs	r3, #0
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80035cc:	e046      	b.n	800365c <USER_read+0x178>

		int ii = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
		spi_rx = 0xFF;
 80035d2:	23ff      	movs	r3, #255	; 0xff
 80035d4:	75bb      	strb	r3, [r7, #22]
		while( (spi_rx == 0xFF)&&(ii<100) ){
 80035d6:	e00c      	b.n	80035f2 <USER_read+0x10e>
		  ii++;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	3301      	adds	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80035de:	f107 0216 	add.w	r2, r7, #22
 80035e2:	f107 0117 	add.w	r1, r7, #23
 80035e6:	2332      	movs	r3, #50	; 0x32
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2301      	movs	r3, #1
 80035ec:	4832      	ldr	r0, [pc, #200]	; (80036b8 <USER_read+0x1d4>)
 80035ee:	f7fe ff00 	bl	80023f2 <HAL_SPI_TransmitReceive>
		while( (spi_rx == 0xFF)&&(ii<100) ){
 80035f2:	7dbb      	ldrb	r3, [r7, #22]
 80035f4:	2bff      	cmp	r3, #255	; 0xff
 80035f6:	d102      	bne.n	80035fe <USER_read+0x11a>
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2b63      	cmp	r3, #99	; 0x63
 80035fc:	ddec      	ble.n	80035d8 <USER_read+0xf4>
		}

			//capture data
		for(ii=0;ii<512;ii++){
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	e011      	b.n	8003628 <USER_read+0x144>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii+(jj*512) , 1, 50);
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	025b      	lsls	r3, r3, #9
 8003608:	461a      	mov	r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	4413      	add	r3, r2
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	441a      	add	r2, r3
 8003612:	f107 0117 	add.w	r1, r7, #23
 8003616:	2332      	movs	r3, #50	; 0x32
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2301      	movs	r3, #1
 800361c:	4826      	ldr	r0, [pc, #152]	; (80036b8 <USER_read+0x1d4>)
 800361e:	f7fe fee8 	bl	80023f2 <HAL_SPI_TransmitReceive>
		for(ii=0;ii<512;ii++){
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	3301      	adds	r3, #1
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362e:	dbe9      	blt.n	8003604 <USER_read+0x120>
		}

			//read CRC - don't use for now
		for(ii=0;ii<2;ii++){
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e00c      	b.n	8003650 <USER_read+0x16c>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003636:	f107 0216 	add.w	r2, r7, #22
 800363a:	f107 0117 	add.w	r1, r7, #23
 800363e:	2332      	movs	r3, #50	; 0x32
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2301      	movs	r3, #1
 8003644:	481c      	ldr	r0, [pc, #112]	; (80036b8 <USER_read+0x1d4>)
 8003646:	f7fe fed4 	bl	80023f2 <HAL_SPI_TransmitReceive>
		for(ii=0;ii<2;ii++){
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	3301      	adds	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	2b01      	cmp	r3, #1
 8003654:	ddef      	ble.n	8003636 <USER_read+0x152>
	  for(int jj=0; jj<count; jj++){
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	3301      	adds	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d8b4      	bhi.n	80035ce <USER_read+0xea>
		}
	  }


	  R1_resp = send_SD_cmd(CMD12,0x0);
 8003664:	2100      	movs	r1, #0
 8003666:	200c      	movs	r0, #12
 8003668:	f7ff fd96 	bl	8003198 <send_SD_cmd>
 800366c:	4603      	mov	r3, r0
 800366e:	76fb      	strb	r3, [r7, #27]

	  int busy = 1;
 8003670:	2301      	movs	r3, #1
 8003672:	623b      	str	r3, [r7, #32]
	  int counter = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 8003678:	e011      	b.n	800369e <USER_read+0x1ba>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800367a:	f107 0216 	add.w	r2, r7, #22
 800367e:	f107 0117 	add.w	r1, r7, #23
 8003682:	2332      	movs	r3, #50	; 0x32
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2301      	movs	r3, #1
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <USER_read+0x1d4>)
 800368a:	f7fe feb2 	bl	80023f2 <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 800368e:	7dbb      	ldrb	r3, [r7, #22]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <USER_read+0x1b4>
		  busy = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	623b      	str	r3, [r7, #32]
		}
		counter++;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	3301      	adds	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <USER_read+0x1c8>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036aa:	dbe6      	blt.n	800367a <USER_read+0x196>
	  }

	  return RES_OK;
 80036ac:	2300      	movs	r3, #0
	}

	//shouldn't get here
    return RES_OK;
  /* USER CODE END READ */
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3730      	adds	r7, #48	; 0x30
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200000a0 	.word	0x200000a0

080036bc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b094      	sub	sp, #80	; 0x50
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	if(pdrv!=0){
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <USER_write+0x1a>
		return RES_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e135      	b.n	8003942 <USER_write+0x286>
	}
	if(USER_status(pdrv)!=0){
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fef3 	bl	80034c4 <USER_status>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <USER_write+0x2c>
		return RES_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e12c      	b.n	8003942 <USER_write+0x286>
	}

	if(count==0){
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <USER_write+0x36>
	  return RES_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e127      	b.n	8003942 <USER_write+0x286>
	}
	else if(count==1){
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d169      	bne.n	80037cc <USER_write+0x110>
	  uint8_t R1_resp = send_SD_cmd(CMD24,sector);
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	2018      	movs	r0, #24
 80036fc:	f7ff fd4c 	bl	8003198 <send_SD_cmd>
 8003700:	4603      	mov	r3, r0
 8003702:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 8003704:	23ff      	movs	r3, #255	; 0xff
 8003706:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8003708:	23ff      	movs	r3, #255	; 0xff
 800370a:	763b      	strb	r3, [r7, #24]

	  //1 byte of delat


	  //send data packet
	  spi_tx = 0xFE;
 800370c:	23fe      	movs	r3, #254	; 0xfe
 800370e:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003710:	f107 0218 	add.w	r2, r7, #24
 8003714:	f107 0119 	add.w	r1, r7, #25
 8003718:	2332      	movs	r3, #50	; 0x32
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2301      	movs	r3, #1
 800371e:	488b      	ldr	r0, [pc, #556]	; (800394c <USER_write+0x290>)
 8003720:	f7fe fe67 	bl	80023f2 <HAL_SPI_TransmitReceive>

	  //send data
	  for(int ii=0;ii<512;ii++){
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	; 0x44
 8003728:	e00d      	b.n	8003746 <USER_write+0x8a>
		HAL_SPI_TransmitReceive(&HSPI, buff+ii, &spi_rx, 1, 50);
 800372a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	18d1      	adds	r1, r2, r3
 8003730:	f107 0218 	add.w	r2, r7, #24
 8003734:	2332      	movs	r3, #50	; 0x32
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2301      	movs	r3, #1
 800373a:	4884      	ldr	r0, [pc, #528]	; (800394c <USER_write+0x290>)
 800373c:	f7fe fe59 	bl	80023f2 <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<512;ii++){
 8003740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003742:	3301      	adds	r3, #1
 8003744:	647b      	str	r3, [r7, #68]	; 0x44
 8003746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	dbed      	blt.n	800372a <USER_write+0x6e>
	  }

	  //crc, dummy packets
	  for(int ii=0;ii<2;ii++){
 800374e:	2300      	movs	r3, #0
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	e00c      	b.n	800376e <USER_write+0xb2>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003754:	f107 0218 	add.w	r2, r7, #24
 8003758:	f107 0119 	add.w	r1, r7, #25
 800375c:	2332      	movs	r3, #50	; 0x32
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2301      	movs	r3, #1
 8003762:	487a      	ldr	r0, [pc, #488]	; (800394c <USER_write+0x290>)
 8003764:	f7fe fe45 	bl	80023f2 <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<2;ii++){
 8003768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376a:	3301      	adds	r3, #1
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
 800376e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003770:	2b01      	cmp	r3, #1
 8003772:	ddef      	ble.n	8003754 <USER_write+0x98>
	  }

	    //get data response, fail if not data accepted
	  spi_tx = 0xFF;
 8003774:	23ff      	movs	r3, #255	; 0xff
 8003776:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003778:	f107 0218 	add.w	r2, r7, #24
 800377c:	f107 0119 	add.w	r1, r7, #25
 8003780:	2332      	movs	r3, #50	; 0x32
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2301      	movs	r3, #1
 8003786:	4871      	ldr	r0, [pc, #452]	; (800394c <USER_write+0x290>)
 8003788:	f7fe fe33 	bl	80023f2 <HAL_SPI_TransmitReceive>

	  int busy = 1;
 800378c:	2301      	movs	r3, #1
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int counter = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 8003794:	e011      	b.n	80037ba <USER_write+0xfe>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003796:	f107 0218 	add.w	r2, r7, #24
 800379a:	f107 0119 	add.w	r1, r7, #25
 800379e:	2332      	movs	r3, #50	; 0x32
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2301      	movs	r3, #1
 80037a4:	4869      	ldr	r0, [pc, #420]	; (800394c <USER_write+0x290>)
 80037a6:	f7fe fe24 	bl	80023f2 <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 80037aa:	7e3b      	ldrb	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <USER_write+0xf8>
	  	  busy = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		counter++;
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	3301      	adds	r3, #1
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 80037ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <USER_write+0x10c>
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037c6:	dbe6      	blt.n	8003796 <USER_write+0xda>
	  }

	  return RES_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e0ba      	b.n	8003942 <USER_write+0x286>
	}
	else{
		uint8_t R1_resp = send_SD_cmd(CMD25,sector);
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	2019      	movs	r0, #25
 80037d0:	f7ff fce2 	bl	8003198 <send_SD_cmd>
 80037d4:	4603      	mov	r3, r0
 80037d6:	76fb      	strb	r3, [r7, #27]

		uint8_t spi_tx = 0xFF;
 80037d8:	23ff      	movs	r3, #255	; 0xff
 80037da:	75fb      	strb	r3, [r7, #23]
		uint8_t spi_rx = 0xFF;
 80037dc:	23ff      	movs	r3, #255	; 0xff
 80037de:	75bb      	strb	r3, [r7, #22]

		//one buffer of nothing
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80037e0:	f107 0216 	add.w	r2, r7, #22
 80037e4:	f107 0117 	add.w	r1, r7, #23
 80037e8:	2332      	movs	r3, #50	; 0x32
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2301      	movs	r3, #1
 80037ee:	4857      	ldr	r0, [pc, #348]	; (800394c <USER_write+0x290>)
 80037f0:	f7fe fdff 	bl	80023f2 <HAL_SPI_TransmitReceive>


		for(int jj=0; jj<count; jj++){
 80037f4:	2300      	movs	r3, #0
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
 80037f8:	e068      	b.n	80038cc <USER_write+0x210>


			//send data packet
			spi_tx = 0xFC;
 80037fa:	23fc      	movs	r3, #252	; 0xfc
 80037fc:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80037fe:	f107 0216 	add.w	r2, r7, #22
 8003802:	f107 0117 	add.w	r1, r7, #23
 8003806:	2332      	movs	r3, #50	; 0x32
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2301      	movs	r3, #1
 800380c:	484f      	ldr	r0, [pc, #316]	; (800394c <USER_write+0x290>)
 800380e:	f7fe fdf0 	bl	80023f2 <HAL_SPI_TransmitReceive>

			//send data
			//spi_tx = 0xAC;
			for(int ii=0;ii<512;ii++){
 8003812:	2300      	movs	r3, #0
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
 8003816:	e011      	b.n	800383c <USER_write+0x180>
	//			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
				HAL_SPI_TransmitReceive(&HSPI, buff+ii+(512*jj), &spi_rx, 1, 50);
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	025b      	lsls	r3, r3, #9
 800381c:	461a      	mov	r2, r3
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	4413      	add	r3, r2
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	f107 0216 	add.w	r2, r7, #22
 800382a:	2332      	movs	r3, #50	; 0x32
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2301      	movs	r3, #1
 8003830:	4846      	ldr	r0, [pc, #280]	; (800394c <USER_write+0x290>)
 8003832:	f7fe fdde 	bl	80023f2 <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<512;ii++){
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	3301      	adds	r3, #1
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003842:	dbe9      	blt.n	8003818 <USER_write+0x15c>
			}

			spi_tx = 0x00;
 8003844:	2300      	movs	r3, #0
 8003846:	75fb      	strb	r3, [r7, #23]
			//crc, dummy packets
			for(int ii=0;ii<2;ii++){
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	e00c      	b.n	8003868 <USER_write+0x1ac>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800384e:	f107 0216 	add.w	r2, r7, #22
 8003852:	f107 0117 	add.w	r1, r7, #23
 8003856:	2332      	movs	r3, #50	; 0x32
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2301      	movs	r3, #1
 800385c:	483b      	ldr	r0, [pc, #236]	; (800394c <USER_write+0x290>)
 800385e:	f7fe fdc8 	bl	80023f2 <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<2;ii++){
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	3301      	adds	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b01      	cmp	r3, #1
 800386c:	ddef      	ble.n	800384e <USER_write+0x192>
			}

			//get data response, fail if not data accepted
			spi_tx = 0xFF;
 800386e:	23ff      	movs	r3, #255	; 0xff
 8003870:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003872:	f107 0216 	add.w	r2, r7, #22
 8003876:	f107 0117 	add.w	r1, r7, #23
 800387a:	2332      	movs	r3, #50	; 0x32
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2301      	movs	r3, #1
 8003880:	4832      	ldr	r0, [pc, #200]	; (800394c <USER_write+0x290>)
 8003882:	f7fe fdb6 	bl	80023f2 <HAL_SPI_TransmitReceive>

			int busy = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
			int counter = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
			spi_tx = 0xFF;
 800388e:	23ff      	movs	r3, #255	; 0xff
 8003890:	75fb      	strb	r3, [r7, #23]

			while(busy&&(counter<1000) ){
 8003892:	e011      	b.n	80038b8 <USER_write+0x1fc>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003894:	f107 0216 	add.w	r2, r7, #22
 8003898:	f107 0117 	add.w	r1, r7, #23
 800389c:	2332      	movs	r3, #50	; 0x32
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2301      	movs	r3, #1
 80038a2:	482a      	ldr	r0, [pc, #168]	; (800394c <USER_write+0x290>)
 80038a4:	f7fe fda5 	bl	80023f2 <HAL_SPI_TransmitReceive>
				if(spi_rx!=0){
 80038a8:	7dbb      	ldrb	r3, [r7, #22]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <USER_write+0x1f6>
					busy = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				counter++;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	3301      	adds	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
			while(busy&&(counter<1000) ){
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <USER_write+0x20a>
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c4:	dbe6      	blt.n	8003894 <USER_write+0x1d8>
		for(int jj=0; jj<count; jj++){
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	3301      	adds	r3, #1
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d892      	bhi.n	80037fa <USER_write+0x13e>
			}

		}

		//send stop token
		spi_tx = 0xFD;
 80038d4:	23fd      	movs	r3, #253	; 0xfd
 80038d6:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80038d8:	f107 0216 	add.w	r2, r7, #22
 80038dc:	f107 0117 	add.w	r1, r7, #23
 80038e0:	2332      	movs	r3, #50	; 0x32
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2301      	movs	r3, #1
 80038e6:	4819      	ldr	r0, [pc, #100]	; (800394c <USER_write+0x290>)
 80038e8:	f7fe fd83 	bl	80023f2 <HAL_SPI_TransmitReceive>

		//
		spi_tx = 0xFF;
 80038ec:	23ff      	movs	r3, #255	; 0xff
 80038ee:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80038f0:	f107 0216 	add.w	r2, r7, #22
 80038f4:	f107 0117 	add.w	r1, r7, #23
 80038f8:	2332      	movs	r3, #50	; 0x32
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2301      	movs	r3, #1
 80038fe:	4813      	ldr	r0, [pc, #76]	; (800394c <USER_write+0x290>)
 8003900:	f7fe fd77 	bl	80023f2 <HAL_SPI_TransmitReceive>


		int busy = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	623b      	str	r3, [r7, #32]
		int counter = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 800390c:	e011      	b.n	8003932 <USER_write+0x276>
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800390e:	f107 0216 	add.w	r2, r7, #22
 8003912:	f107 0117 	add.w	r1, r7, #23
 8003916:	2332      	movs	r3, #50	; 0x32
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2301      	movs	r3, #1
 800391c:	480b      	ldr	r0, [pc, #44]	; (800394c <USER_write+0x290>)
 800391e:	f7fe fd68 	bl	80023f2 <HAL_SPI_TransmitReceive>
			if(spi_rx!=0){
 8003922:	7dbb      	ldrb	r3, [r7, #22]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <USER_write+0x270>
				busy = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
			}
			else{
			}
			counter++;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <USER_write+0x284>
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393e:	dbe6      	blt.n	800390e <USER_write+0x252>
		}
	}

	//shouldn't get here
    return RES_OK;
 8003940:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003942:	4618      	mov	r0, r3
 8003944:	3748      	adds	r7, #72	; 0x48
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200000a0 	.word	0x200000a0

08003950 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	; 0x38
 8003954:	af02      	add	r7, sp, #8
 8003956:	4603      	mov	r3, r0
 8003958:	603a      	str	r2, [r7, #0]
 800395a:	71fb      	strb	r3, [r7, #7]
 800395c:	460b      	mov	r3, r1
 800395e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(cmd){
 8003966:	79bb      	ldrb	r3, [r7, #6]
 8003968:	2b04      	cmp	r3, #4
 800396a:	f200 809c 	bhi.w	8003aa6 <USER_ioctl+0x156>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <USER_ioctl+0x24>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003989 	.word	0x08003989
 8003978:	080039af 	.word	0x080039af
 800397c:	0800399f 	.word	0x0800399f
 8003980:	08003991 	.word	0x08003991
 8003984:	08003a9f 	.word	0x08003a9f

	case CTRL_SYNC:
		// nothing to do here
		res = RES_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800398e:	e08d      	b.n	8003aac <USER_ioctl+0x15c>
	case GET_BLOCK_SIZE:
		*(int*)buff = 1; //could check, but doing this for now
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800399c:	e086      	b.n	8003aac <USER_ioctl+0x15c>
	case GET_SECTOR_SIZE:
		*(int*)buff = 512; //buffer size is always 512
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a4:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80039ac:	e07e      	b.n	8003aac <USER_ioctl+0x15c>

	case GET_SECTOR_COUNT:
		if(USER_status(pdrv)!=0){
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fd87 	bl	80034c4 <USER_status>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <USER_ioctl+0x70>
			return RES_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e077      	b.n	8003ab0 <USER_ioctl+0x160>
		}
		else{
			BYTE buffer[16] = {0};
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
			//printf("GET_BLOCK_SIZE\r\n");
			uint8_t R1_resp = send_SD_cmd(CMD9,0x0);
 80039d0:	2100      	movs	r1, #0
 80039d2:	2009      	movs	r0, #9
 80039d4:	f7ff fbe0 	bl	8003198 <send_SD_cmd>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("cmd resp:%u\r\n",R1_resp);
			uint8_t spi_tx = 0xFF;
 80039de:	23ff      	movs	r3, #255	; 0xff
 80039e0:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_rx = 0xFF;
 80039e2:	23ff      	movs	r3, #255	; 0xff
 80039e4:	73bb      	strb	r3, [r7, #14]

			int ii = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 80039ea:	e00c      	b.n	8003a06 <USER_ioctl+0xb6>
				ii++;
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	3301      	adds	r3, #1
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80039f2:	f107 020e 	add.w	r2, r7, #14
 80039f6:	f107 010f 	add.w	r1, r7, #15
 80039fa:	2332      	movs	r3, #50	; 0x32
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2301      	movs	r3, #1
 8003a00:	482d      	ldr	r0, [pc, #180]	; (8003ab8 <USER_ioctl+0x168>)
 8003a02:	f7fe fcf6 	bl	80023f2 <HAL_SPI_TransmitReceive>
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	2bff      	cmp	r3, #255	; 0xff
 8003a0a:	d104      	bne.n	8003a16 <USER_ioctl+0xc6>
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a12:	4293      	cmp	r3, r2
 8003a14:	ddea      	ble.n	80039ec <USER_ioctl+0x9c>

			//printf("ii:%u\r\n",ii);
			//printf("data token:%u\r\n",spi_rx);

			//capture data
			for(ii=0;ii<16;ii++){
 8003a16:	2300      	movs	r3, #0
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1a:	e010      	b.n	8003a3e <USER_ioctl+0xee>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buffer+15-ii , 1, 50);
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	f1c3 030f 	rsb	r3, r3, #15
 8003a22:	f107 0210 	add.w	r2, r7, #16
 8003a26:	441a      	add	r2, r3
 8003a28:	f107 010f 	add.w	r1, r7, #15
 8003a2c:	2332      	movs	r3, #50	; 0x32
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	2301      	movs	r3, #1
 8003a32:	4821      	ldr	r0, [pc, #132]	; (8003ab8 <USER_ioctl+0x168>)
 8003a34:	f7fe fcdd 	bl	80023f2 <HAL_SPI_TransmitReceive>
			for(ii=0;ii<16;ii++){
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	2b0f      	cmp	r3, #15
 8003a42:	ddeb      	ble.n	8003a1c <USER_ioctl+0xcc>
				//printf("(%u,%u)\r\n",8*(15-ii),buffer[15-ii]);

			}


			for(ii=0;ii<2;ii++){
 8003a44:	2300      	movs	r3, #0
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a48:	e00c      	b.n	8003a64 <USER_ioctl+0x114>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 8003a4a:	f107 020e 	add.w	r2, r7, #14
 8003a4e:	f107 010f 	add.w	r1, r7, #15
 8003a52:	2332      	movs	r3, #50	; 0x32
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2301      	movs	r3, #1
 8003a58:	4817      	ldr	r0, [pc, #92]	; (8003ab8 <USER_ioctl+0x168>)
 8003a5a:	f7fe fcca 	bl	80023f2 <HAL_SPI_TransmitReceive>
			for(ii=0;ii<2;ii++){
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	3301      	adds	r3, #1
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	ddef      	ble.n	8003a4a <USER_ioctl+0xfa>
				//printf("rx crc:%u\r\n",spi_rx);
			}

			//printf( "sector size: %u\r\n", ((buffer[5]&0x3F)<<1)|(buffer[4]>>7) );//  | buffer[4]>>7) );
			uint32_t mem_size = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	623b      	str	r3, [r7, #32]
			mem_size = (uint32_t)buffer[6] | ( ((uint32_t) buffer[7])<<8) | (((uint32_t)(buffer[8]&0x3F))<<16) ;
 8003a6e:	7dbb      	ldrb	r3, [r7, #22]
 8003a70:	461a      	mov	r2, r3
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	431a      	orrs	r2, r3
 8003a78:	7e3b      	ldrb	r3, [r7, #24]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003a80:	4313      	orrs	r3, r2
 8003a82:	623b      	str	r3, [r7, #32]
//			printf("64:%u\r\n",buffer[8]);


//			printf("mem size(kB):%u\r\n",(mem_size+1)*512);
//			printf("mem size(sectors):%u\r\n",(mem_size+1)*1000);
		  *(int*)buff = ((mem_size+1)*1000);
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	3301      	adds	r3, #1
 8003a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
	      res =  RES_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}

		break;
 8003a9c:	e006      	b.n	8003aac <USER_ioctl+0x15c>
	case CTRL_TRIM:
//		printf("CTRL_TRIM\r\n");
		//not implementing
	    res =  RES_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		break;
 8003aa4:	e002      	b.n	8003aac <USER_ioctl+0x15c>
	default:
		res = RES_PARERR;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return res;
 8003aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f


  /* USER CODE END IOCTL */
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	; 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200000a0 	.word	0x200000a0

08003abc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <disk_status+0x30>)
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	79fa      	ldrb	r2, [r7, #7]
 8003ad4:	4905      	ldr	r1, [pc, #20]	; (8003aec <disk_status+0x30>)
 8003ad6:	440a      	add	r2, r1
 8003ad8:	7a12      	ldrb	r2, [r2, #8]
 8003ada:	4610      	mov	r0, r2
 8003adc:	4798      	blx	r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000274 	.word	0x20000274

08003af0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <disk_initialize+0x48>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d111      	bne.n	8003b2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <disk_initialize+0x48>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <disk_initialize+0x48>)
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	4906      	ldr	r1, [pc, #24]	; (8003b38 <disk_initialize+0x48>)
 8003b20:	440a      	add	r2, r1
 8003b22:	7a12      	ldrb	r2, [r2, #8]
 8003b24:	4610      	mov	r0, r2
 8003b26:	4798      	blx	r3
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000274 	.word	0x20000274

08003b3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <disk_read+0x3c>)
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	689c      	ldr	r4, [r3, #8]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <disk_read+0x3c>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	7a18      	ldrb	r0, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	47a0      	blx	r4
 8003b68:	4603      	mov	r3, r0
 8003b6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000274 	.word	0x20000274

08003b7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <disk_write+0x3c>)
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68dc      	ldr	r4, [r3, #12]
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <disk_write+0x3c>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	7a18      	ldrb	r0, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	47a0      	blx	r4
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]
  return res;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000274 	.word	0x20000274

08003bbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	603a      	str	r2, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <disk_ioctl+0x38>)
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	79fa      	ldrb	r2, [r7, #7]
 8003bda:	4906      	ldr	r1, [pc, #24]	; (8003bf4 <disk_ioctl+0x38>)
 8003bdc:	440a      	add	r2, r1
 8003bde:	7a10      	ldrb	r0, [r2, #8]
 8003be0:	79b9      	ldrb	r1, [r7, #6]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4798      	blx	r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
  return res;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000274 	.word	0x20000274

08003bf8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3301      	adds	r3, #1
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003c08:	89fb      	ldrh	r3, [r7, #14]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	b21a      	sxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3303      	adds	r3, #3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	3202      	adds	r2, #2
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	3201      	adds	r2, #1
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003c60:	68fb      	ldr	r3, [r7, #12]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	887a      	ldrh	r2, [r7, #2]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	1c53      	adds	r3, r2, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	6179      	str	r1, [r7, #20]
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f1      	bne.n	8003d16 <mem_cpy+0x1a>
	}
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	617a      	str	r2, [r7, #20]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f3      	bne.n	8003d4e <mem_set+0x10>
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003d74:	b480      	push	{r7}
 8003d76:	b089      	sub	sp, #36	; 0x24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	61fa      	str	r2, [r7, #28]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	61ba      	str	r2, [r7, #24]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	1acb      	subs	r3, r1, r3
 8003da0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <mem_cmp+0x40>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0eb      	beq.n	8003d8c <mem_cmp+0x18>

	return r;
 8003db4:	697b      	ldr	r3, [r7, #20]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	; 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003dcc:	e002      	b.n	8003dd4 <chk_chr+0x12>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <chk_chr+0x26>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d1f2      	bne.n	8003dce <chk_chr+0xc>
	return *str;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	781b      	ldrb	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e029      	b.n	8003e60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <chk_lock+0xb4>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	4413      	add	r3, r2
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01d      	beq.n	8003e56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e1a:	4a24      	ldr	r2, [pc, #144]	; (8003eac <chk_lock+0xb4>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	4413      	add	r3, r2
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d116      	bne.n	8003e5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <chk_lock+0xb4>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d10c      	bne.n	8003e5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e40:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <chk_lock+0xb4>)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	4413      	add	r3, r2
 8003e48:	3308      	adds	r3, #8
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d102      	bne.n	8003e5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e54:	e007      	b.n	8003e66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d9d2      	bls.n	8003e0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d109      	bne.n	8003e80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <chk_lock+0x80>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d101      	bne.n	8003e7c <chk_lock+0x84>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e010      	b.n	8003e9e <chk_lock+0xa6>
 8003e7c:	2312      	movs	r3, #18
 8003e7e:	e00e      	b.n	8003e9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <chk_lock+0xa0>
 8003e86:	4a09      	ldr	r2, [pc, #36]	; (8003eac <chk_lock+0xb4>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	4413      	add	r3, r2
 8003e8e:	330c      	adds	r3, #12
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e96:	d101      	bne.n	8003e9c <chk_lock+0xa4>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	e000      	b.n	8003e9e <chk_lock+0xa6>
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000254 	.word	0x20000254

08003eb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	e002      	b.n	8003ec2 <enq_lock+0x12>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d806      	bhi.n	8003ed6 <enq_lock+0x26>
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <enq_lock+0x40>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4413      	add	r3, r2
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f2      	bne.n	8003ebc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000254 	.word	0x20000254

08003ef4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e01f      	b.n	8003f44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003f04:	4a41      	ldr	r2, [pc, #260]	; (800400c <inc_lock+0x118>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d113      	bne.n	8003f3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003f16:	4a3d      	ldr	r2, [pc, #244]	; (800400c <inc_lock+0x118>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3304      	adds	r3, #4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d109      	bne.n	8003f3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003f2a:	4a38      	ldr	r2, [pc, #224]	; (800400c <inc_lock+0x118>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	4413      	add	r3, r2
 8003f32:	3308      	adds	r3, #8
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d006      	beq.n	8003f4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d9dc      	bls.n	8003f04 <inc_lock+0x10>
 8003f4a:	e000      	b.n	8003f4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003f4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d132      	bne.n	8003fba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e002      	b.n	8003f60 <inc_lock+0x6c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d806      	bhi.n	8003f74 <inc_lock+0x80>
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <inc_lock+0x118>)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	4413      	add	r3, r2
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f2      	bne.n	8003f5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d101      	bne.n	8003f7e <inc_lock+0x8a>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e040      	b.n	8004000 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4922      	ldr	r1, [pc, #136]	; (800400c <inc_lock+0x118>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	440b      	add	r3, r1
 8003f8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	491e      	ldr	r1, [pc, #120]	; (800400c <inc_lock+0x118>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	440b      	add	r3, r1
 8003f98:	3304      	adds	r3, #4
 8003f9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	491a      	ldr	r1, [pc, #104]	; (800400c <inc_lock+0x118>)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3308      	adds	r3, #8
 8003faa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <inc_lock+0x118>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	4413      	add	r3, r2
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <inc_lock+0xe0>
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <inc_lock+0x118>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	4413      	add	r3, r2
 8003fc8:	330c      	adds	r3, #12
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <inc_lock+0xe0>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e015      	b.n	8004000 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <inc_lock+0xf8>
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <inc_lock+0x118>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	e001      	b.n	8003ff0 <inc_lock+0xfc>
 8003fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff0:	4906      	ldr	r1, [pc, #24]	; (800400c <inc_lock+0x118>)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	440b      	add	r3, r1
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000254 	.word	0x20000254

08004010 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d825      	bhi.n	8004070 <dec_lock+0x60>
		n = Files[i].ctr;
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <dec_lock+0x74>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	330c      	adds	r3, #12
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004032:	89fb      	ldrh	r3, [r7, #14]
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d101      	bne.n	800403e <dec_lock+0x2e>
 800403a:	2300      	movs	r3, #0
 800403c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800403e:	89fb      	ldrh	r3, [r7, #14]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <dec_lock+0x3a>
 8004044:	89fb      	ldrh	r3, [r7, #14]
 8004046:	3b01      	subs	r3, #1
 8004048:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <dec_lock+0x74>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	4413      	add	r3, r2
 8004052:	330c      	adds	r3, #12
 8004054:	89fa      	ldrh	r2, [r7, #14]
 8004056:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <dec_lock+0x5a>
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <dec_lock+0x74>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	4413      	add	r3, r2
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	737b      	strb	r3, [r7, #13]
 800406e:	e001      	b.n	8004074 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004070:	2302      	movs	r3, #2
 8004072:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004074:	7b7b      	ldrb	r3, [r7, #13]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000254 	.word	0x20000254

08004088 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e010      	b.n	80040b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004096:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <clear_lock+0x44>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4413      	add	r3, r2
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d105      	bne.n	80040b2 <clear_lock+0x2a>
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <clear_lock+0x44>)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	4413      	add	r3, r2
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d9eb      	bls.n	8004096 <clear_lock+0xe>
	}
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000254 	.word	0x20000254

080040d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	78db      	ldrb	r3, [r3, #3]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d034      	beq.n	800414e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7858      	ldrb	r0, [r3, #1]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80040f4:	2301      	movs	r3, #1
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	f7ff fd40 	bl	8003b7c <disk_write>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e022      	b.n	800414e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	1ad2      	subs	r2, r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	429a      	cmp	r2, r3
 800411c:	d217      	bcs.n	800414e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	789b      	ldrb	r3, [r3, #2]
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e010      	b.n	8004148 <sync_window+0x78>
					wsect += fs->fsize;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7858      	ldrb	r0, [r3, #1]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800413a:	2301      	movs	r3, #1
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	f7ff fd1d 	bl	8003b7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3b01      	subs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d8eb      	bhi.n	8004126 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d01b      	beq.n	80041a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ffad 	bl	80040d0 <sync_window>
 8004176:	4603      	mov	r3, r0
 8004178:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d113      	bne.n	80041a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7858      	ldrb	r0, [r3, #1]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800418a:	2301      	movs	r3, #1
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	f7ff fcd5 	bl	8003b3c <disk_read>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff87 	bl	80040d0 <sync_window>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d158      	bne.n	800427e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d148      	bne.n	8004266 <sync_fs+0xb2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	791b      	ldrb	r3, [r3, #4]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d144      	bne.n	8004266 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3330      	adds	r3, #48	; 0x30
 80041e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fda9 	bl	8003d3e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3330      	adds	r3, #48	; 0x30
 80041f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80041f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fd38 	bl	8003c6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3330      	adds	r3, #48	; 0x30
 8004202:	4921      	ldr	r1, [pc, #132]	; (8004288 <sync_fs+0xd4>)
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fd4d 	bl	8003ca4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3330      	adds	r3, #48	; 0x30
 800420e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004212:	491e      	ldr	r1, [pc, #120]	; (800428c <sync_fs+0xd8>)
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fd45 	bl	8003ca4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3330      	adds	r3, #48	; 0x30
 800421e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7ff fd3b 	bl	8003ca4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3330      	adds	r3, #48	; 0x30
 8004232:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7ff fd31 	bl	8003ca4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7858      	ldrb	r0, [r3, #1]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	2301      	movs	r3, #1
 800425c:	f7ff fc8e 	bl	8003b7c <disk_write>
			fs->fsi_flag = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	2200      	movs	r2, #0
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fca4 	bl	8003bbc <disk_ioctl>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <sync_fs+0xca>
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	41615252 	.word	0x41615252
 800428c:	61417272 	.word	0x61417272

08004290 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	3b02      	subs	r3, #2
 800429e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	3b02      	subs	r3, #2
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d301      	bcc.n	80042b0 <clust2sect+0x20>
 80042ac:	2300      	movs	r3, #0
 80042ae:	e008      	b.n	80042c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	895b      	ldrh	r3, [r3, #10]
 80042b4:	461a      	mov	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	fb03 f202 	mul.w	r2, r3, r2
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	4413      	add	r3, r2
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d904      	bls.n	80042ee <get_fat+0x20>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80042ee:	2301      	movs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e08f      	b.n	8004414 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d062      	beq.n	80043c8 <get_fat+0xfa>
 8004302:	2b03      	cmp	r3, #3
 8004304:	dc7c      	bgt.n	8004400 <get_fat+0x132>
 8004306:	2b01      	cmp	r3, #1
 8004308:	d002      	beq.n	8004310 <get_fat+0x42>
 800430a:	2b02      	cmp	r3, #2
 800430c:	d042      	beq.n	8004394 <get_fat+0xc6>
 800430e:	e077      	b.n	8004400 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6a1a      	ldr	r2, [r3, #32]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0a5b      	lsrs	r3, r3, #9
 8004326:	4413      	add	r3, r2
 8004328:	4619      	mov	r1, r3
 800432a:	6938      	ldr	r0, [r7, #16]
 800432c:	f7ff ff14 	bl	8004158 <move_window>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d167      	bne.n	8004406 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	60fa      	str	r2, [r7, #12]
 800433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004348:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	4413      	add	r3, r2
 8004354:	4619      	mov	r1, r3
 8004356:	6938      	ldr	r0, [r7, #16]
 8004358:	f7ff fefe 	bl	8004158 <move_window>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d153      	bne.n	800440a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	461a      	mov	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4313      	orrs	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <get_fat+0xbc>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	e002      	b.n	8004390 <get_fat+0xc2>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	617b      	str	r3, [r7, #20]
			break;
 8004392:	e03f      	b.n	8004414 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	4413      	add	r3, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	6938      	ldr	r0, [r7, #16]
 80043a2:	f7ff fed9 	bl	8004158 <move_window>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d130      	bne.n	800440e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80043ba:	4413      	add	r3, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fc1b 	bl	8003bf8 <ld_word>
 80043c2:	4603      	mov	r3, r0
 80043c4:	617b      	str	r3, [r7, #20]
			break;
 80043c6:	e025      	b.n	8004414 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	09db      	lsrs	r3, r3, #7
 80043d0:	4413      	add	r3, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	6938      	ldr	r0, [r7, #16]
 80043d6:	f7ff febf 	bl	8004158 <move_window>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d118      	bne.n	8004412 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043ee:	4413      	add	r3, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fc19 	bl	8003c28 <ld_dword>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043fc:	617b      	str	r3, [r7, #20]
			break;
 80043fe:	e009      	b.n	8004414 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004400:	2301      	movs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e006      	b.n	8004414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004412:	bf00      	nop
		}
	}

	return val;
 8004414:	697b      	ldr	r3, [r7, #20]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800441e:	b590      	push	{r4, r7, lr}
 8004420:	b089      	sub	sp, #36	; 0x24
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	f240 80d2 	bls.w	80045da <put_fat+0x1bc>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	f080 80cc 	bcs.w	80045da <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b03      	cmp	r3, #3
 8004448:	f000 8096 	beq.w	8004578 <put_fat+0x15a>
 800444c:	2b03      	cmp	r3, #3
 800444e:	f300 80cd 	bgt.w	80045ec <put_fat+0x1ce>
 8004452:	2b01      	cmp	r3, #1
 8004454:	d002      	beq.n	800445c <put_fat+0x3e>
 8004456:	2b02      	cmp	r3, #2
 8004458:	d06e      	beq.n	8004538 <put_fat+0x11a>
 800445a:	e0c7      	b.n	80045ec <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	0a5b      	lsrs	r3, r3, #9
 8004472:	4413      	add	r3, r2
 8004474:	4619      	mov	r1, r3
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fe6e 	bl	8004158 <move_window>
 800447c:	4603      	mov	r3, r0
 800447e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 80ab 	bne.w	80045de <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	61b9      	str	r1, [r7, #24]
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004498:	4413      	add	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <put_fat+0xa4>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	b25a      	sxtb	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e001      	b.n	80044c6 <put_fat+0xa8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	0a5b      	lsrs	r3, r3, #9
 80044d8:	4413      	add	r3, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fe3b 	bl	8004158 <move_window>
 80044e2:	4603      	mov	r3, r0
 80044e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d17a      	bne.n	80045e2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f8:	4413      	add	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <put_fat+0xf0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e00e      	b.n	800452c <put_fat+0x10e>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b25b      	sxtb	r3, r3
 8004514:	f023 030f 	bic.w	r3, r3, #15
 8004518:	b25a      	sxtb	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	b25b      	sxtb	r3, r3
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b25b      	sxtb	r3, r3
 8004526:	4313      	orrs	r3, r2
 8004528:	b25b      	sxtb	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	70da      	strb	r2, [r3, #3]
			break;
 8004536:	e059      	b.n	80045ec <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	4413      	add	r3, r2
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fe07 	bl	8004158 <move_window>
 800454a:	4603      	mov	r3, r0
 800454c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800454e:	7ffb      	ldrb	r3, [r7, #31]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d148      	bne.n	80045e6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004562:	4413      	add	r3, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	b292      	uxth	r2, r2
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fb7f 	bl	8003c6e <st_word>
			fs->wflag = 1;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	70da      	strb	r2, [r3, #3]
			break;
 8004576:	e039      	b.n	80045ec <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	09db      	lsrs	r3, r3, #7
 8004580:	4413      	add	r3, r2
 8004582:	4619      	mov	r1, r3
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff fde7 	bl	8004158 <move_window>
 800458a:	4603      	mov	r3, r0
 800458c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d12a      	bne.n	80045ea <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80045a8:	4413      	add	r3, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fb3c 	bl	8003c28 <ld_dword>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045b6:	4323      	orrs	r3, r4
 80045b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80045c8:	4413      	add	r3, r2
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fb69 	bl	8003ca4 <st_dword>
			fs->wflag = 1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	70da      	strb	r2, [r3, #3]
			break;
 80045d8:	e008      	b.n	80045ec <put_fat+0x1ce>
		}
	}
 80045da:	bf00      	nop
 80045dc:	e006      	b.n	80045ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80045de:	bf00      	nop
 80045e0:	e004      	b.n	80045ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80045ea:	bf00      	nop
	return res;
 80045ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd90      	pop	{r4, r7, pc}

080045f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b088      	sub	sp, #32
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d904      	bls.n	800461c <remove_chain+0x26>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d301      	bcc.n	8004620 <remove_chain+0x2a>
 800461c:	2302      	movs	r3, #2
 800461e:	e04b      	b.n	80046b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	69b8      	ldr	r0, [r7, #24]
 800462e:	f7ff fef6 	bl	800441e <put_fat>
 8004632:	4603      	mov	r3, r0
 8004634:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <remove_chain+0x4a>
 800463c:	7ffb      	ldrb	r3, [r7, #31]
 800463e:	e03b      	b.n	80046b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff fe43 	bl	80042ce <get_fat>
 8004648:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d031      	beq.n	80046b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <remove_chain+0x64>
 8004656:	2302      	movs	r3, #2
 8004658:	e02e      	b.n	80046b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004660:	d101      	bne.n	8004666 <remove_chain+0x70>
 8004662:	2301      	movs	r3, #1
 8004664:	e028      	b.n	80046b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004666:	2200      	movs	r2, #0
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	69b8      	ldr	r0, [r7, #24]
 800466c:	f7ff fed7 	bl	800441e <put_fat>
 8004670:	4603      	mov	r3, r0
 8004672:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004674:	7ffb      	ldrb	r3, [r7, #31]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <remove_chain+0x88>
 800467a:	7ffb      	ldrb	r3, [r7, #31]
 800467c:	e01c      	b.n	80046b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	3b02      	subs	r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d20b      	bcs.n	80046a4 <remove_chain+0xae>
			fs->free_clst++;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3c6      	bcc.n	8004640 <remove_chain+0x4a>
 80046b2:	e000      	b.n	80046b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80046b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <create_chain+0x2c>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d31b      	bcc.n	8004724 <create_chain+0x64>
 80046ec:	2301      	movs	r3, #1
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e018      	b.n	8004724 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fdea 	bl	80042ce <get_fat>
 80046fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d801      	bhi.n	8004706 <create_chain+0x46>
 8004702:	2301      	movs	r3, #1
 8004704:	e070      	b.n	80047e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470c:	d101      	bne.n	8004712 <create_chain+0x52>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	e06a      	b.n	80047e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d201      	bcs.n	8004720 <create_chain+0x60>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	e063      	b.n	80047e8 <create_chain+0x128>
		scl = clst;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3301      	adds	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	429a      	cmp	r2, r3
 8004736:	d307      	bcc.n	8004748 <create_chain+0x88>
				ncl = 2;
 8004738:	2302      	movs	r3, #2
 800473a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	d901      	bls.n	8004748 <create_chain+0x88>
 8004744:	2300      	movs	r3, #0
 8004746:	e04f      	b.n	80047e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004748:	69f9      	ldr	r1, [r7, #28]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fdbf 	bl	80042ce <get_fat>
 8004750:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d003      	beq.n	8004766 <create_chain+0xa6>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004764:	d101      	bne.n	800476a <create_chain+0xaa>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	e03e      	b.n	80047e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	429a      	cmp	r2, r3
 8004770:	d1da      	bne.n	8004728 <create_chain+0x68>
 8004772:	2300      	movs	r3, #0
 8004774:	e038      	b.n	80047e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004776:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	6938      	ldr	r0, [r7, #16]
 8004780:	f7ff fe4d 	bl	800441e <put_fat>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <create_chain+0xe2>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	6938      	ldr	r0, [r7, #16]
 800479a:	f7ff fe40 	bl	800441e <put_fat>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	3b02      	subs	r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d804      	bhi.n	80047c6 <create_chain+0x106>
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	791b      	ldrb	r3, [r3, #4]
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	711a      	strb	r2, [r3, #4]
 80047d4:	e007      	b.n	80047e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d102      	bne.n	80047e2 <create_chain+0x122>
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e0:	e000      	b.n	80047e4 <create_chain+0x124>
 80047e2:	2301      	movs	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80047e6:	69fb      	ldr	r3, [r7, #28]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3720      	adds	r7, #32
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	3304      	adds	r3, #4
 8004806:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	0a5b      	lsrs	r3, r3, #9
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	8952      	ldrh	r2, [r2, #10]
 8004810:	fbb3 f3f2 	udiv	r3, r3, r2
 8004814:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1d1a      	adds	r2, r3, #4
 800481a:	613a      	str	r2, [r7, #16]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <clmt_clust+0x3a>
 8004826:	2300      	movs	r3, #0
 8004828:	e010      	b.n	800484c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	d307      	bcc.n	8004842 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3304      	adds	r3, #4
 800483e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004840:	e7e9      	b.n	8004816 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004842:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	4413      	add	r3, r2
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486e:	d204      	bcs.n	800487a <dir_sdi+0x22>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <dir_sdi+0x26>
		return FR_INT_ERR;
 800487a:	2302      	movs	r3, #2
 800487c:	e063      	b.n	8004946 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <dir_sdi+0x46>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d902      	bls.n	800489e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10c      	bne.n	80048be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	8912      	ldrh	r2, [r2, #8]
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d301      	bcc.n	80048b4 <dir_sdi+0x5c>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e048      	b.n	8004946 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	61da      	str	r2, [r3, #28]
 80048bc:	e029      	b.n	8004912 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	895b      	ldrh	r3, [r3, #10]
 80048c2:	025b      	lsls	r3, r3, #9
 80048c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80048c6:	e019      	b.n	80048fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6979      	ldr	r1, [r7, #20]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fcfe 	bl	80042ce <get_fat>
 80048d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048da:	d101      	bne.n	80048e0 <dir_sdi+0x88>
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d904      	bls.n	80048f0 <dir_sdi+0x98>
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d301      	bcc.n	80048f4 <dir_sdi+0x9c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e028      	b.n	8004946 <dir_sdi+0xee>
			ofs -= csz;
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d2e1      	bcs.n	80048c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004904:	6979      	ldr	r1, [r7, #20]
 8004906:	6938      	ldr	r0, [r7, #16]
 8004908:	f7ff fcc2 	bl	8004290 <clust2sect>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <dir_sdi+0xcc>
 8004920:	2302      	movs	r3, #2
 8004922:	e010      	b.n	8004946 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	3320      	adds	r3, #32
 8004964:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <dir_next+0x28>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004974:	d301      	bcc.n	800497a <dir_next+0x2c>
 8004976:	2304      	movs	r3, #4
 8004978:	e0aa      	b.n	8004ad0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 8098 	bne.w	8004ab6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	8912      	ldrh	r2, [r2, #8]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	f0c0 8088 	bcc.w	8004ab6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	61da      	str	r2, [r3, #28]
 80049ac:	2304      	movs	r3, #4
 80049ae:	e08f      	b.n	8004ad0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	0a5b      	lsrs	r3, r3, #9
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	8952      	ldrh	r2, [r2, #10]
 80049b8:	3a01      	subs	r2, #1
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d17a      	bne.n	8004ab6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7ff fc80 	bl	80042ce <get_fat>
 80049ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d801      	bhi.n	80049da <dir_next+0x8c>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e07a      	b.n	8004ad0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e0:	d101      	bne.n	80049e6 <dir_next+0x98>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e074      	b.n	8004ad0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d358      	bcc.n	8004aa2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	61da      	str	r2, [r3, #28]
 80049fc:	2304      	movs	r3, #4
 80049fe:	e067      	b.n	8004ad0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7ff fe59 	bl	80046c0 <create_chain>
 8004a0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <dir_next+0xcc>
 8004a16:	2307      	movs	r3, #7
 8004a18:	e05a      	b.n	8004ad0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <dir_next+0xd6>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e055      	b.n	8004ad0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2a:	d101      	bne.n	8004a30 <dir_next+0xe2>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e04f      	b.n	8004ad0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff fb4d 	bl	80040d0 <sync_window>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <dir_next+0xf2>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e047      	b.n	8004ad0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3330      	adds	r3, #48	; 0x30
 8004a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff f977 	bl	8003d3e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fc1a 	bl	8004290 <clust2sect>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a62:	e012      	b.n	8004a8a <dir_next+0x13c>
						fs->wflag = 1;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff fb30 	bl	80040d0 <sync_window>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <dir_next+0x12c>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e02a      	b.n	8004ad0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	895b      	ldrh	r3, [r3, #10]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d3e6      	bcc.n	8004a64 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad2      	subs	r2, r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fbf0 	bl	8004290 <clust2sect>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac8:	441a      	add	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004ae8:	2100      	movs	r1, #0
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff feb4 	bl	8004858 <dir_sdi>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d12b      	bne.n	8004b52 <dir_alloc+0x7a>
		n = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4619      	mov	r1, r3
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fb27 	bl	8004158 <move_window>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11d      	bne.n	8004b50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2be5      	cmp	r3, #229	; 0xe5
 8004b1c:	d004      	beq.n	8004b28 <dir_alloc+0x50>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d102      	bne.n	8004b3c <dir_alloc+0x64>
 8004b36:	e00c      	b.n	8004b52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ff05 	bl	800494e <dir_next>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0d7      	beq.n	8004afe <dir_alloc+0x26>
 8004b4e:	e000      	b.n	8004b52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004b50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d101      	bne.n	8004b5c <dir_alloc+0x84>
 8004b58:	2307      	movs	r3, #7
 8004b5a:	75fb      	strb	r3, [r7, #23]
	return res;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	331a      	adds	r3, #26
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff f83f 	bl	8003bf8 <ld_word>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d109      	bne.n	8004b9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	3314      	adds	r3, #20
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff f834 	bl	8003bf8 <ld_word>
 8004b90:	4603      	mov	r3, r0
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	331a      	adds	r3, #26
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f857 	bl	8003c6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d109      	bne.n	8004bdc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f103 0214 	add.w	r2, r3, #20
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7ff f849 	bl	8003c6e <st_word>
	}
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fe2f 	bl	8004858 <dir_sdi>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <dir_find+0x24>
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	e03e      	b.n	8004c86 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6938      	ldr	r0, [r7, #16]
 8004c10:	f7ff faa2 	bl	8004158 <move_window>
 8004c14:	4603      	mov	r3, r0
 8004c16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d12f      	bne.n	8004c7e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <dir_find+0x4e>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	75fb      	strb	r3, [r7, #23]
 8004c30:	e028      	b.n	8004c84 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	330b      	adds	r3, #11
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	330b      	adds	r3, #11
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <dir_find+0x86>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a18      	ldr	r0, [r3, #32]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3324      	adds	r3, #36	; 0x24
 8004c5c:	220b      	movs	r2, #11
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7ff f888 	bl	8003d74 <mem_cmp>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fe6e 	bl	800494e <dir_next>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0c5      	beq.n	8004c08 <dir_find+0x24>
 8004c7c:	e002      	b.n	8004c84 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c82:	bf00      	nop

	return res;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff1a 	bl	8004ad8 <dir_alloc>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11c      	bne.n	8004ce8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f7ff fa4f 	bl	8004158 <move_window>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff f836 	bl	8003d3e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a18      	ldr	r0, [r3, #32]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3324      	adds	r3, #36	; 0x24
 8004cda:	220b      	movs	r2, #11
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f7ff f80d 	bl	8003cfc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04e      	beq.n	8004da8 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8004d12:	e021      	b.n	8004d58 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	6179      	str	r1, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d100      	bne.n	8004d2c <get_fileinfo+0x3a>
 8004d2a:	e015      	b.n	8004d58 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d101      	bne.n	8004d36 <get_fileinfo+0x44>
 8004d32:	23e5      	movs	r3, #229	; 0xe5
 8004d34:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b09      	cmp	r3, #9
 8004d3a:	d106      	bne.n	8004d4a <get_fileinfo+0x58>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	613a      	str	r2, [r7, #16]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	222e      	movs	r2, #46	; 0x2e
 8004d48:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	613a      	str	r2, [r7, #16]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b0a      	cmp	r3, #10
 8004d5c:	d9da      	bls.n	8004d14 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	3309      	adds	r3, #9
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	7ada      	ldrb	r2, [r3, #11]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	331c      	adds	r3, #28
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe ff54 	bl	8003c28 <ld_dword>
 8004d80:	4602      	mov	r2, r0
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	3316      	adds	r3, #22
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe ff4b 	bl	8003c28 <ld_dword>
 8004d92:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	80da      	strh	r2, [r3, #6]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	0c1b      	lsrs	r3, r3, #16
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	809a      	strh	r2, [r3, #4]
 8004da6:	e000      	b.n	8004daa <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004da8:	bf00      	nop
}
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3324      	adds	r3, #36	; 0x24
 8004dc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004dc6:	220b      	movs	r2, #11
 8004dc8:	2120      	movs	r1, #32
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f7fe ffb7 	bl	8003d3e <mem_set>
	si = i = 0; ni = 8;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	2308      	movs	r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	61fa      	str	r2, [r7, #28]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004dea:	7efb      	ldrb	r3, [r7, #27]
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d94e      	bls.n	8004e8e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004df0:	7efb      	ldrb	r3, [r7, #27]
 8004df2:	2b2f      	cmp	r3, #47	; 0x2f
 8004df4:	d006      	beq.n	8004e04 <create_name+0x54>
 8004df6:	7efb      	ldrb	r3, [r7, #27]
 8004df8:	2b5c      	cmp	r3, #92	; 0x5c
 8004dfa:	d110      	bne.n	8004e1e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004dfc:	e002      	b.n	8004e04 <create_name+0x54>
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3301      	adds	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b2f      	cmp	r3, #47	; 0x2f
 8004e0e:	d0f6      	beq.n	8004dfe <create_name+0x4e>
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b5c      	cmp	r3, #92	; 0x5c
 8004e1a:	d0f0      	beq.n	8004dfe <create_name+0x4e>
			break;
 8004e1c:	e038      	b.n	8004e90 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004e1e:	7efb      	ldrb	r3, [r7, #27]
 8004e20:	2b2e      	cmp	r3, #46	; 0x2e
 8004e22:	d003      	beq.n	8004e2c <create_name+0x7c>
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d30c      	bcc.n	8004e46 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b0b      	cmp	r3, #11
 8004e30:	d002      	beq.n	8004e38 <create_name+0x88>
 8004e32:	7efb      	ldrb	r3, [r7, #27]
 8004e34:	2b2e      	cmp	r3, #46	; 0x2e
 8004e36:	d001      	beq.n	8004e3c <create_name+0x8c>
 8004e38:	2306      	movs	r3, #6
 8004e3a:	e044      	b.n	8004ec6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	230b      	movs	r3, #11
 8004e42:	617b      	str	r3, [r7, #20]
			continue;
 8004e44:	e022      	b.n	8004e8c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004e46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	da04      	bge.n	8004e58 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004e4e:	7efb      	ldrb	r3, [r7, #27]
 8004e50:	3b80      	subs	r3, #128	; 0x80
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <create_name+0x120>)
 8004e54:	5cd3      	ldrb	r3, [r2, r3]
 8004e56:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004e58:	7efb      	ldrb	r3, [r7, #27]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	481d      	ldr	r0, [pc, #116]	; (8004ed4 <create_name+0x124>)
 8004e5e:	f7fe ffb0 	bl	8003dc2 <chk_chr>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <create_name+0xbc>
 8004e68:	2306      	movs	r3, #6
 8004e6a:	e02c      	b.n	8004ec6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004e6c:	7efb      	ldrb	r3, [r7, #27]
 8004e6e:	2b60      	cmp	r3, #96	; 0x60
 8004e70:	d905      	bls.n	8004e7e <create_name+0xce>
 8004e72:	7efb      	ldrb	r3, [r7, #27]
 8004e74:	2b7a      	cmp	r3, #122	; 0x7a
 8004e76:	d802      	bhi.n	8004e7e <create_name+0xce>
 8004e78:	7efb      	ldrb	r3, [r7, #27]
 8004e7a:	3b20      	subs	r3, #32
 8004e7c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	613a      	str	r2, [r7, #16]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	4413      	add	r3, r2
 8004e88:	7efa      	ldrb	r2, [r7, #27]
 8004e8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004e8c:	e7a6      	b.n	8004ddc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004e8e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	441a      	add	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <create_name+0xf4>
 8004ea0:	2306      	movs	r3, #6
 8004ea2:	e010      	b.n	8004ec6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2be5      	cmp	r3, #229	; 0xe5
 8004eaa:	d102      	bne.n	8004eb2 <create_name+0x102>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2205      	movs	r2, #5
 8004eb0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004eb2:	7efb      	ldrb	r3, [r7, #27]
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d801      	bhi.n	8004ebc <create_name+0x10c>
 8004eb8:	2204      	movs	r2, #4
 8004eba:	e000      	b.n	8004ebe <create_name+0x10e>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	330b      	adds	r3, #11
 8004ec2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ec4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	080079b4 	.word	0x080079b4
 8004ed4:	08007958 	.word	0x08007958

08004ed8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004eec:	e002      	b.n	8004ef4 <follow_path+0x1c>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8004efa:	d0f8      	beq.n	8004eee <follow_path+0x16>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b5c      	cmp	r3, #92	; 0x5c
 8004f02:	d0f4      	beq.n	8004eee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b1f      	cmp	r3, #31
 8004f10:	d80a      	bhi.n	8004f28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fc9b 	bl	8004858 <dir_sdi>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]
 8004f26:	e043      	b.n	8004fb0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f28:	463b      	mov	r3, r7
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff3f 	bl	8004db0 <create_name>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d134      	bne.n	8004fa6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fe51 	bl	8004be4 <dir_find>
 8004f42:	4603      	mov	r3, r0
 8004f44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d127      	bne.n	8004faa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d122      	bne.n	8004faa <follow_path+0xd2>
 8004f64:	2305      	movs	r3, #5
 8004f66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004f68:	e01f      	b.n	8004faa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11c      	bne.n	8004fae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	799b      	ldrb	r3, [r3, #6]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004f80:	2305      	movs	r3, #5
 8004f82:	75fb      	strb	r3, [r7, #23]
 8004f84:	e014      	b.n	8004fb0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f94:	4413      	add	r3, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fde4 	bl	8004b66 <ld_clust>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fa4:	e7c0      	b.n	8004f28 <follow_path+0x50>
			if (res != FR_OK) break;
 8004fa6:	bf00      	nop
 8004fa8:	e002      	b.n	8004fb0 <follow_path+0xd8>
				break;
 8004faa:	bf00      	nop
 8004fac:	e000      	b.n	8004fb0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004fae:	bf00      	nop
			}
		}
	}

	return res;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d031      	beq.n	8005034 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e002      	b.n	8004fde <get_ldnumber+0x24>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d903      	bls.n	8004fee <get_ldnumber+0x34>
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b3a      	cmp	r3, #58	; 0x3a
 8004fec:	d1f4      	bne.n	8004fd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b3a      	cmp	r3, #58	; 0x3a
 8004ff4:	d11c      	bne.n	8005030 <get_ldnumber+0x76>
			tp = *path;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	60fa      	str	r2, [r7, #12]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	3b30      	subs	r3, #48	; 0x30
 8005006:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b09      	cmp	r3, #9
 800500c:	d80e      	bhi.n	800502c <get_ldnumber+0x72>
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	429a      	cmp	r2, r3
 8005014:	d10a      	bne.n	800502c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <get_ldnumber+0x72>
					vol = (int)i;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3301      	adds	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	e002      	b.n	8005036 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005034:	693b      	ldr	r3, [r7, #16]
}
 8005036:	4618      	mov	r0, r3
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	70da      	strb	r2, [r3, #3]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff f87a 	bl	8004158 <move_window>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <check_fs+0x2a>
 800506a:	2304      	movs	r3, #4
 800506c:	e038      	b.n	80050e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3330      	adds	r3, #48	; 0x30
 8005072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fdbe 	bl	8003bf8 <ld_word>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <check_fs+0x48>
 8005088:	2303      	movs	r3, #3
 800508a:	e029      	b.n	80050e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005092:	2be9      	cmp	r3, #233	; 0xe9
 8005094:	d009      	beq.n	80050aa <check_fs+0x66>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800509c:	2beb      	cmp	r3, #235	; 0xeb
 800509e:	d11e      	bne.n	80050de <check_fs+0x9a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050a6:	2b90      	cmp	r3, #144	; 0x90
 80050a8:	d119      	bne.n	80050de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3330      	adds	r3, #48	; 0x30
 80050ae:	3336      	adds	r3, #54	; 0x36
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe fdb9 	bl	8003c28 <ld_dword>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050bc:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <check_fs+0xa4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <check_fs+0x82>
 80050c2:	2300      	movs	r3, #0
 80050c4:	e00c      	b.n	80050e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3330      	adds	r3, #48	; 0x30
 80050ca:	3352      	adds	r3, #82	; 0x52
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fdab 	bl	8003c28 <ld_dword>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a05      	ldr	r2, [pc, #20]	; (80050ec <check_fs+0xa8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <check_fs+0x9a>
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80050de:	2302      	movs	r3, #2
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	00544146 	.word	0x00544146
 80050ec:	33544146 	.word	0x33544146

080050f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b096      	sub	sp, #88	; 0x58
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff58 	bl	8004fba <get_ldnumber>
 800510a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800510c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510e:	2b00      	cmp	r3, #0
 8005110:	da01      	bge.n	8005116 <find_volume+0x26>
 8005112:	230b      	movs	r3, #11
 8005114:	e22d      	b.n	8005572 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005116:	4aa1      	ldr	r2, [pc, #644]	; (800539c <find_volume+0x2ac>)
 8005118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <find_volume+0x3a>
 8005126:	230c      	movs	r3, #12
 8005128:	e223      	b.n	8005572 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fe fcb9 	bl	8003abc <disk_status>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10c      	bne.n	8005176 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <find_volume+0x82>
 8005162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800516e:	230a      	movs	r3, #10
 8005170:	e1ff      	b.n	8005572 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005172:	2300      	movs	r3, #0
 8005174:	e1fd      	b.n	8005572 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	b2da      	uxtb	r2, r3
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fcb1 	bl	8003af0 <disk_initialize>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80051a0:	2303      	movs	r3, #3
 80051a2:	e1e6      	b.n	8005572 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <find_volume+0xca>
 80051aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80051b6:	230a      	movs	r3, #10
 80051b8:	e1db      	b.n	8005572 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80051be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051c2:	f7ff ff3f 	bl	8005044 <check_fs>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80051cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d149      	bne.n	8005268 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80051d4:	2300      	movs	r3, #0
 80051d6:	643b      	str	r3, [r7, #64]	; 0x40
 80051d8:	e01e      	b.n	8005218 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80051e8:	4413      	add	r3, r2
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	3304      	adds	r3, #4
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <find_volume+0x114>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	3308      	adds	r3, #8
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fd14 	bl	8003c28 <ld_dword>
 8005200:	4602      	mov	r2, r0
 8005202:	e000      	b.n	8005206 <find_volume+0x116>
 8005204:	2200      	movs	r2, #0
 8005206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	3358      	adds	r3, #88	; 0x58
 800520c:	443b      	add	r3, r7
 800520e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	3301      	adds	r3, #1
 8005216:	643b      	str	r3, [r7, #64]	; 0x40
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	2b03      	cmp	r3, #3
 800521c:	d9dd      	bls.n	80051da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800521e:	2300      	movs	r3, #0
 8005220:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <find_volume+0x13e>
 8005228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800522a:	3b01      	subs	r3, #1
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	3358      	adds	r3, #88	; 0x58
 8005234:	443b      	add	r3, r7
 8005236:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800523a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800523c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <find_volume+0x15e>
 8005242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005246:	f7ff fefd 	bl	8005044 <check_fs>
 800524a:	4603      	mov	r3, r0
 800524c:	e000      	b.n	8005250 <find_volume+0x160>
 800524e:	2303      	movs	r3, #3
 8005250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005258:	2b01      	cmp	r3, #1
 800525a:	d905      	bls.n	8005268 <find_volume+0x178>
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	3301      	adds	r3, #1
 8005260:	643b      	str	r3, [r7, #64]	; 0x40
 8005262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005264:	2b03      	cmp	r3, #3
 8005266:	d9e2      	bls.n	800522e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800526c:	2b04      	cmp	r3, #4
 800526e:	d101      	bne.n	8005274 <find_volume+0x184>
 8005270:	2301      	movs	r3, #1
 8005272:	e17e      	b.n	8005572 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005278:	2b01      	cmp	r3, #1
 800527a:	d901      	bls.n	8005280 <find_volume+0x190>
 800527c:	230d      	movs	r3, #13
 800527e:	e178      	b.n	8005572 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	3330      	adds	r3, #48	; 0x30
 8005284:	330b      	adds	r3, #11
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe fcb6 	bl	8003bf8 <ld_word>
 800528c:	4603      	mov	r3, r0
 800528e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005292:	d001      	beq.n	8005298 <find_volume+0x1a8>
 8005294:	230d      	movs	r3, #13
 8005296:	e16c      	b.n	8005572 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	3330      	adds	r3, #48	; 0x30
 800529c:	3316      	adds	r3, #22
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fcaa 	bl	8003bf8 <ld_word>
 80052a4:	4603      	mov	r3, r0
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <find_volume+0x1cc>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	3330      	adds	r3, #48	; 0x30
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fcb7 	bl	8003c28 <ld_dword>
 80052ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d005      	beq.n	80052e0 <find_volume+0x1f0>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	789b      	ldrb	r3, [r3, #2]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d001      	beq.n	80052e0 <find_volume+0x1f0>
 80052dc:	230d      	movs	r3, #13
 80052de:	e148      	b.n	8005572 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	789b      	ldrb	r3, [r3, #2]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	895b      	ldrh	r3, [r3, #10]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <find_volume+0x224>
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	895b      	ldrh	r3, [r3, #10]
 8005306:	461a      	mov	r2, r3
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	895b      	ldrh	r3, [r3, #10]
 800530c:	3b01      	subs	r3, #1
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <find_volume+0x228>
 8005314:	230d      	movs	r3, #13
 8005316:	e12c      	b.n	8005572 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	3330      	adds	r3, #48	; 0x30
 800531c:	3311      	adds	r3, #17
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fc6a 	bl	8003bf8 <ld_word>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	891b      	ldrh	r3, [r3, #8]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <find_volume+0x24e>
 800533a:	230d      	movs	r3, #13
 800533c:	e119      	b.n	8005572 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	3330      	adds	r3, #48	; 0x30
 8005342:	3313      	adds	r3, #19
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fc57 	bl	8003bf8 <ld_word>
 800534a:	4603      	mov	r3, r0
 800534c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800534e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <find_volume+0x272>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	3330      	adds	r3, #48	; 0x30
 8005358:	3320      	adds	r3, #32
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fc64 	bl	8003c28 <ld_dword>
 8005360:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	3330      	adds	r3, #48	; 0x30
 8005366:	330e      	adds	r3, #14
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fc45 	bl	8003bf8 <ld_word>
 800536e:	4603      	mov	r3, r0
 8005370:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <find_volume+0x28c>
 8005378:	230d      	movs	r3, #13
 800537a:	e0fa      	b.n	8005572 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800537c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	4413      	add	r3, r2
 8005382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005384:	8912      	ldrh	r2, [r2, #8]
 8005386:	0912      	lsrs	r2, r2, #4
 8005388:	b292      	uxth	r2, r2
 800538a:	4413      	add	r3, r2
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800538e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	429a      	cmp	r2, r3
 8005394:	d204      	bcs.n	80053a0 <find_volume+0x2b0>
 8005396:	230d      	movs	r3, #13
 8005398:	e0eb      	b.n	8005572 <find_volume+0x482>
 800539a:	bf00      	nop
 800539c:	2000024c 	.word	0x2000024c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80053a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a8:	8952      	ldrh	r2, [r2, #10]
 80053aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <find_volume+0x2ca>
 80053b6:	230d      	movs	r3, #13
 80053b8:	e0db      	b.n	8005572 <find_volume+0x482>
		fmt = FS_FAT32;
 80053ba:	2303      	movs	r3, #3
 80053bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d802      	bhi.n	80053d0 <find_volume+0x2e0>
 80053ca:	2302      	movs	r3, #2
 80053cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d802      	bhi.n	80053e0 <find_volume+0x2f0>
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	1c9a      	adds	r2, r3, #2
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80053ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f2:	441a      	add	r2, r3
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80053f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	441a      	add	r2, r3
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005406:	2b03      	cmp	r3, #3
 8005408:	d11e      	bne.n	8005448 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	3330      	adds	r3, #48	; 0x30
 800540e:	332a      	adds	r3, #42	; 0x2a
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fbf1 	bl	8003bf8 <ld_word>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <find_volume+0x330>
 800541c:	230d      	movs	r3, #13
 800541e:	e0a8      	b.n	8005572 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	891b      	ldrh	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <find_volume+0x33c>
 8005428:	230d      	movs	r3, #13
 800542a:	e0a2      	b.n	8005572 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	3330      	adds	r3, #48	; 0x30
 8005430:	332c      	adds	r3, #44	; 0x2c
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fbf8 	bl	8003c28 <ld_dword>
 8005438:	4602      	mov	r2, r0
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
 8005446:	e01f      	b.n	8005488 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	891b      	ldrh	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <find_volume+0x364>
 8005450:	230d      	movs	r3, #13
 8005452:	e08e      	b.n	8005572 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	441a      	add	r2, r3
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005464:	2b02      	cmp	r3, #2
 8005466:	d103      	bne.n	8005470 <find_volume+0x380>
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	e00a      	b.n	8005486 <find_volume+0x396>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	085a      	lsrs	r2, r3, #1
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005492:	0a5b      	lsrs	r3, r3, #9
 8005494:	429a      	cmp	r2, r3
 8005496:	d201      	bcs.n	800549c <find_volume+0x3ac>
 8005498:	230d      	movs	r3, #13
 800549a:	e06a      	b.n	8005572 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a2:	611a      	str	r2, [r3, #16]
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	2280      	movs	r2, #128	; 0x80
 80054b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80054b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d149      	bne.n	800554e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	3330      	adds	r3, #48	; 0x30
 80054be:	3330      	adds	r3, #48	; 0x30
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fb99 	bl	8003bf8 <ld_word>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d140      	bne.n	800554e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80054cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ce:	3301      	adds	r3, #1
 80054d0:	4619      	mov	r1, r3
 80054d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054d4:	f7fe fe40 	bl	8004158 <move_window>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d137      	bne.n	800554e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2200      	movs	r2, #0
 80054e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	3330      	adds	r3, #48	; 0x30
 80054e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fb83 	bl	8003bf8 <ld_word>
 80054f2:	4603      	mov	r3, r0
 80054f4:	461a      	mov	r2, r3
 80054f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d127      	bne.n	800554e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	3330      	adds	r3, #48	; 0x30
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fb90 	bl	8003c28 <ld_dword>
 8005508:	4603      	mov	r3, r0
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <find_volume+0x48c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d11e      	bne.n	800554e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	3330      	adds	r3, #48	; 0x30
 8005514:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe fb85 	bl	8003c28 <ld_dword>
 800551e:	4603      	mov	r3, r0
 8005520:	4a17      	ldr	r2, [pc, #92]	; (8005580 <find_volume+0x490>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d113      	bne.n	800554e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	3330      	adds	r3, #48	; 0x30
 800552a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fb7a 	bl	8003c28 <ld_dword>
 8005534:	4602      	mov	r2, r0
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	3330      	adds	r3, #48	; 0x30
 800553e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fb70 	bl	8003c28 <ld_dword>
 8005548:	4602      	mov	r2, r0
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005554:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <find_volume+0x494>)
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <find_volume+0x494>)
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <find_volume+0x494>)
 8005564:	881a      	ldrh	r2, [r3, #0]
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800556a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800556c:	f7fe fd8c 	bl	8004088 <clear_lock>
#endif
	return FR_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3758      	adds	r7, #88	; 0x58
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	41615252 	.word	0x41615252
 8005580:	61417272 	.word	0x61417272
 8005584:	20000250 	.word	0x20000250

08005588 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005592:	2309      	movs	r3, #9
 8005594:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01c      	beq.n	80055d6 <validate+0x4e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d018      	beq.n	80055d6 <validate+0x4e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <validate+0x4e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	889a      	ldrh	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	88db      	ldrh	r3, [r3, #6]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d10c      	bne.n	80055d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fa7a 	bl	8003abc <disk_status>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <validate+0x4e>
			res = FR_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <validate+0x5a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	e000      	b.n	80055e4 <validate+0x5c>
 80055e2:	2300      	movs	r3, #0
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	6013      	str	r3, [r2, #0]
	return res;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005606:	f107 0310 	add.w	r3, r7, #16
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fcd5 	bl	8004fba <get_ldnumber>
 8005610:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da01      	bge.n	800561c <f_mount+0x28>
 8005618:	230b      	movs	r3, #11
 800561a:	e02b      	b.n	8005674 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <f_mount+0x88>)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005624:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800562c:	69b8      	ldr	r0, [r7, #24]
 800562e:	f7fe fd2b 	bl	8004088 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	490d      	ldr	r1, [pc, #52]	; (800567c <f_mount+0x88>)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <f_mount+0x66>
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <f_mount+0x6a>
 800565a:	2300      	movs	r3, #0
 800565c:	e00a      	b.n	8005674 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800565e:	f107 010c 	add.w	r1, r7, #12
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	2200      	movs	r2, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fd41 	bl	80050f0 <find_volume>
 800566e:	4603      	mov	r3, r0
 8005670:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005672:	7dfb      	ldrb	r3, [r7, #23]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2000024c 	.word	0x2000024c

08005680 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b098      	sub	sp, #96	; 0x60
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <f_open+0x18>
 8005694:	2309      	movs	r3, #9
 8005696:	e1ad      	b.n	80059f4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80056a0:	79fa      	ldrb	r2, [r7, #7]
 80056a2:	f107 0110 	add.w	r1, r7, #16
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fd20 	bl	80050f0 <find_volume>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80056b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 8191 	bne.w	80059e2 <f_open+0x362>
		dj.obj.fs = fs;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	f107 0314 	add.w	r3, r7, #20
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fc03 	bl	8004ed8 <follow_path>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80056d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11a      	bne.n	8005716 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80056e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da03      	bge.n	80056f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80056ea:	2306      	movs	r3, #6
 80056ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056f0:	e011      	b.n	8005716 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fb74 	bl	8003df8 <chk_lock>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	f003 031c 	and.w	r3, r3, #28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d07f      	beq.n	8005820 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005724:	2b00      	cmp	r3, #0
 8005726:	d017      	beq.n	8005758 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800572c:	2b04      	cmp	r3, #4
 800572e:	d10e      	bne.n	800574e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005730:	f7fe fbbe 	bl	8003eb0 <enq_lock>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <f_open+0xc8>
 800573a:	f107 0314 	add.w	r3, r7, #20
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff faa5 	bl	8004c8e <dir_register>
 8005744:	4603      	mov	r3, r0
 8005746:	e000      	b.n	800574a <f_open+0xca>
 8005748:	2312      	movs	r3, #18
 800574a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f043 0308 	orr.w	r3, r3, #8
 8005754:	71fb      	strb	r3, [r7, #7]
 8005756:	e010      	b.n	800577a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005758:	7ebb      	ldrb	r3, [r7, #26]
 800575a:	f003 0311 	and.w	r3, r3, #17
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <f_open+0xea>
					res = FR_DENIED;
 8005762:	2307      	movs	r3, #7
 8005764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005768:	e007      	b.n	800577a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <f_open+0xfa>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800577a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800577e:	2b00      	cmp	r3, #0
 8005780:	d168      	bne.n	8005854 <f_open+0x1d4>
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d063      	beq.n	8005854 <f_open+0x1d4>
				dw = GET_FATTIME();
 800578c:	f7fd fc72 	bl	8003074 <get_fattime>
 8005790:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	330e      	adds	r3, #14
 8005796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fa83 	bl	8003ca4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	3316      	adds	r3, #22
 80057a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe fa7d 	bl	8003ca4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	330b      	adds	r3, #11
 80057ae:	2220      	movs	r2, #32
 80057b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff f9d4 	bl	8004b66 <ld_clust>
 80057be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057c4:	2200      	movs	r2, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff f9ec 	bl	8004ba4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	331c      	adds	r3, #28
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fa66 	bl	8003ca4 <st_dword>
					fs->wflag = 1;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2201      	movs	r2, #1
 80057dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d037      	beq.n	8005854 <f_open+0x1d4>
						dw = fs->winsect;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80057ea:	f107 0314 	add.w	r3, r7, #20
 80057ee:	2200      	movs	r2, #0
 80057f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe feff 	bl	80045f6 <remove_chain>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80057fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005802:	2b00      	cmp	r3, #0
 8005804:	d126      	bne.n	8005854 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fca4 	bl	8004158 <move_window>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800581a:	3a01      	subs	r2, #1
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e019      	b.n	8005854 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005824:	2b00      	cmp	r3, #0
 8005826:	d115      	bne.n	8005854 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005828:	7ebb      	ldrb	r3, [r7, #26]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <f_open+0x1ba>
					res = FR_NO_FILE;
 8005832:	2304      	movs	r3, #4
 8005834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005838:	e00c      	b.n	8005854 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <f_open+0x1d4>
 8005844:	7ebb      	ldrb	r3, [r7, #26]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <f_open+0x1d4>
						res = FR_DENIED;
 800584e:	2307      	movs	r3, #7
 8005850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005858:	2b00      	cmp	r3, #0
 800585a:	d128      	bne.n	80058ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	4611      	mov	r1, r2
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe fb2d 	bl	8003ef4 <inc_lock>
 800589a:	4602      	mov	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <f_open+0x22e>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80058ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 8095 	bne.w	80059e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff f951 	bl	8004b66 <ld_clust>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	331c      	adds	r3, #28
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe f9aa 	bl	8003c28 <ld_dword>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	88da      	ldrh	r2, [r3, #6]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	79fa      	ldrb	r2, [r7, #7]
 80058f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3330      	adds	r3, #48	; 0x30
 800590a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fa14 	bl	8003d3e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d060      	beq.n	80059e2 <f_open+0x362>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d05c      	beq.n	80059e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	895b      	ldrh	r3, [r3, #10]
 8005934:	025b      	lsls	r3, r3, #9
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	657b      	str	r3, [r7, #84]	; 0x54
 8005944:	e016      	b.n	8005974 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fcbf 	bl	80042ce <get_fat>
 8005950:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005954:	2b01      	cmp	r3, #1
 8005956:	d802      	bhi.n	800595e <f_open+0x2de>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800595e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005964:	d102      	bne.n	800596c <f_open+0x2ec>
 8005966:	2301      	movs	r3, #1
 8005968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800596c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800596e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	657b      	str	r3, [r7, #84]	; 0x54
 8005974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005978:	2b00      	cmp	r3, #0
 800597a:	d103      	bne.n	8005984 <f_open+0x304>
 800597c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800597e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005980:	429a      	cmp	r2, r3
 8005982:	d8e0      	bhi.n	8005946 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005988:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800598a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800598e:	2b00      	cmp	r3, #0
 8005990:	d127      	bne.n	80059e2 <f_open+0x362>
 8005992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fc75 	bl	8004290 <clust2sect>
 80059a6:	6478      	str	r0, [r7, #68]	; 0x44
 80059a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <f_open+0x336>
						res = FR_INT_ERR;
 80059ae:	2302      	movs	r3, #2
 80059b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059b4:	e015      	b.n	80059e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80059b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b8:	0a5a      	lsrs	r2, r3, #9
 80059ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059bc:	441a      	add	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	7858      	ldrb	r0, [r3, #1]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	2301      	movs	r3, #1
 80059d2:	f7fe f8b3 	bl	8003b3c <disk_read>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <f_open+0x362>
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80059e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <f_open+0x370>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80059f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3760      	adds	r7, #96	; 0x60
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	; 0x30
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f107 0210 	add.w	r2, r7, #16
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fdb3 	bl	8005588 <validate>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <f_write+0x44>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	7d5b      	ldrb	r3, [r3, #21]
 8005a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <f_write+0x4a>
 8005a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a44:	e14b      	b.n	8005cde <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	7d1b      	ldrb	r3, [r3, #20]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <f_write+0x5a>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e143      	b.n	8005cde <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	441a      	add	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	f080 812d 	bcs.w	8005cc2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005a70:	e127      	b.n	8005cc2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 80e3 	bne.w	8005c46 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	8952      	ldrh	r2, [r2, #10]
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d143      	bne.n	8005b1e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10c      	bne.n	8005ab8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11a      	bne.n	8005ae0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fe06 	bl	80046c0 <create_chain>
 8005ab4:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ab6:	e013      	b.n	8005ae0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7fe fe92 	bl	80047f0 <clmt_clust>
 8005acc:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ace:	e007      	b.n	8005ae0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7fe fdf1 	bl	80046c0 <create_chain>
 8005ade:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80f2 	beq.w	8005ccc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d104      	bne.n	8005af8 <f_write+0xfc>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2202      	movs	r2, #2
 8005af2:	755a      	strb	r2, [r3, #21]
 8005af4:	2302      	movs	r3, #2
 8005af6:	e0f2      	b.n	8005cde <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afe:	d104      	bne.n	8005b0a <f_write+0x10e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	755a      	strb	r2, [r3, #21]
 8005b06:	2301      	movs	r3, #1
 8005b08:	e0e9      	b.n	8005cde <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <f_write+0x122>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	7d1b      	ldrb	r3, [r3, #20]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da18      	bge.n	8005b5a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	7858      	ldrb	r0, [r3, #1]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	2301      	movs	r3, #1
 8005b38:	f7fe f820 	bl	8003b7c <disk_write>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <f_write+0x150>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	755a      	strb	r2, [r3, #21]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0c8      	b.n	8005cde <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	7d1b      	ldrb	r3, [r3, #20]
 8005b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f7fe fb94 	bl	8004290 <clust2sect>
 8005b68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <f_write+0x17e>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2202      	movs	r2, #2
 8005b74:	755a      	strb	r2, [r3, #21]
 8005b76:	2302      	movs	r3, #2
 8005b78:	e0b1      	b.n	8005cde <f_write+0x2e2>
			sect += csect;
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0a5b      	lsrs	r3, r3, #9
 8005b86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03c      	beq.n	8005c08 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	4413      	add	r3, r2
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	8952      	ldrh	r2, [r2, #10]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d905      	bls.n	8005ba8 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	895b      	ldrh	r3, [r3, #10]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	7858      	ldrb	r0, [r3, #1]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	69f9      	ldr	r1, [r7, #28]
 8005bb2:	f7fd ffe3 	bl	8003b7c <disk_write>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <f_write+0x1ca>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	755a      	strb	r2, [r3, #21]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e08b      	b.n	8005cde <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d915      	bls.n	8005c00 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	025b      	lsls	r3, r3, #9
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bec:	4619      	mov	r1, r3
 8005bee:	f7fe f885 	bl	8003cfc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	7d1b      	ldrb	r3, [r3, #20]
 8005bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	025b      	lsls	r3, r3, #9
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005c06:	e03f      	b.n	8005c88 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d016      	beq.n	8005c40 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d210      	bcs.n	8005c40 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	7858      	ldrb	r0, [r3, #1]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c28:	2301      	movs	r3, #1
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	f7fd ff86 	bl	8003b3c <disk_read>
 8005c30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	755a      	strb	r2, [r3, #21]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e04e      	b.n	8005cde <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d901      	bls.n	8005c60 <f_write+0x264>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	4413      	add	r3, r2
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	69f9      	ldr	r1, [r7, #28]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe f841 	bl	8003cfc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	7d1b      	ldrb	r3, [r3, #20]
 8005c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	4413      	add	r3, r2
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	441a      	add	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	619a      	str	r2, [r3, #24]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	bf38      	it	cc
 8005ca8:	461a      	movcc	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	441a      	add	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f aed4 	bne.w	8005a72 <f_write+0x76>
 8005cca:	e000      	b.n	8005cce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ccc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	7d1b      	ldrb	r3, [r3, #20]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3730      	adds	r7, #48	; 0x30
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f107 0208 	add.w	r2, r7, #8
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fc46 	bl	8005588 <validate>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d168      	bne.n	8005dd8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7d1b      	ldrb	r3, [r3, #20]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d062      	beq.n	8005dd8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7d1b      	ldrb	r3, [r3, #20]
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da15      	bge.n	8005d48 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	7858      	ldrb	r0, [r3, #1]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1a      	ldr	r2, [r3, #32]
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f7fd ff26 	bl	8003b7c <disk_write>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <f_sync+0x54>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e04f      	b.n	8005dda <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	7d1b      	ldrb	r3, [r3, #20]
 8005d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005d48:	f7fd f994 	bl	8003074 <get_fattime>
 8005d4c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe f9fe 	bl	8004158 <move_window>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d138      	bne.n	8005dd8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	330b      	adds	r3, #11
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	330b      	adds	r3, #11
 8005d76:	f042 0220 	orr.w	r2, r2, #32
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	461a      	mov	r2, r3
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	f7fe ff0b 	bl	8004ba4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f103 021c 	add.w	r2, r3, #28
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fd ff82 	bl	8003ca4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3316      	adds	r3, #22
 8005da4:	6939      	ldr	r1, [r7, #16]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fd ff7c 	bl	8003ca4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3312      	adds	r3, #18
 8005db0:	2100      	movs	r1, #0
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fd ff5b 	bl	8003c6e <st_word>
					fs->wflag = 1;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe f9f7 	bl	80041b4 <sync_fs>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7d1b      	ldrb	r3, [r3, #20]
 8005dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff ff7b 	bl	8005ce6 <f_sync>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d118      	bne.n	8005e2c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f107 0208 	add.w	r2, r7, #8
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fbc0 	bl	8005588 <validate>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10c      	bne.n	8005e2c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe f8fa 	bl	8004010 <dec_lock>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b090      	sub	sp, #64	; 0x40
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8005e40:	f107 010c 	add.w	r1, r7, #12
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	2200      	movs	r2, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff f951 	bl	80050f0 <find_volume>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8005e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d11f      	bne.n	8005e9c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff f837 	bl	8004ed8 <follow_path>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8005e70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d111      	bne.n	8005e9c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8005e78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da03      	bge.n	8005e8a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8005e82:	2306      	movs	r3, #6
 8005e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005e88:	e008      	b.n	8005e9c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <f_stat+0x66>
 8005e90:	f107 030c 	add.w	r3, r7, #12
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe ff2b 	bl	8004cf2 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8005e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3740      	adds	r7, #64	; 0x40
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b09d      	sub	sp, #116	; 0x74
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8005eb8:	2301      	movs	r3, #1
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8005ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8005ec2:	f107 030c 	add.w	r3, r7, #12
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f877 	bl	8004fba <get_ldnumber>
 8005ecc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da02      	bge.n	8005eda <f_mkfs+0x32>
 8005ed4:	230b      	movs	r3, #11
 8005ed6:	f000 bc0d 	b.w	80066f4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8005eda:	4a94      	ldr	r2, [pc, #592]	; (800612c <f_mkfs+0x284>)
 8005edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <f_mkfs+0x4a>
 8005ee6:	4a91      	ldr	r2, [pc, #580]	; (800612c <f_mkfs+0x284>)
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8005efe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fdf4 	bl	8003af0 <disk_initialize>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8005f0e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <f_mkfs+0x76>
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e3ea      	b.n	80066f4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8005f1e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <f_mkfs+0x86>
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	e3e2      	b.n	80066f4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8005f2e:	f107 0214 	add.w	r2, r7, #20
 8005f32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f36:	2103      	movs	r1, #3
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fe3f 	bl	8003bbc <disk_ioctl>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10c      	bne.n	8005f5e <f_mkfs+0xb6>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <f_mkfs+0xb6>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f50:	d805      	bhi.n	8005f5e <f_mkfs+0xb6>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1e5a      	subs	r2, r3, #1
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <f_mkfs+0xba>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8005f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f66:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <f_mkfs+0xce>
 8005f6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d309      	bcc.n	8005f8a <f_mkfs+0xe2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f7c:	d805      	bhi.n	8005f8a <f_mkfs+0xe2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <f_mkfs+0xe6>
 8005f8a:	2313      	movs	r3, #19
 8005f8c:	e3b2      	b.n	80066f4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8005f8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8005f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8005fa8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	fb02 f303 	mul.w	r3, r2, r3
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <f_mkfs+0x114>
 8005fb8:	230e      	movs	r3, #14
 8005fba:	e39b      	b.n	80066f4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8005fbc:	f107 0210 	add.w	r2, r7, #16
 8005fc0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd fdf8 	bl	8003bbc <disk_ioctl>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <f_mkfs+0x12e>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e38e      	b.n	80066f4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <f_mkfs+0x13c>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <f_mkfs+0x13e>
 8005fe4:	233f      	movs	r3, #63	; 0x3f
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d901      	bls.n	8005ff4 <f_mkfs+0x14c>
 8005ff0:	230e      	movs	r3, #14
 8005ff2:	e37f      	b.n	80066f4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8006000:	d801      	bhi.n	8006006 <f_mkfs+0x15e>
 8006002:	230e      	movs	r3, #14
 8006004:	e376      	b.n	80066f4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b80      	cmp	r3, #128	; 0x80
 800600a:	d901      	bls.n	8006010 <f_mkfs+0x168>
 800600c:	2313      	movs	r3, #19
 800600e:	e371      	b.n	80066f4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00d      	beq.n	8006036 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	2b02      	cmp	r3, #2
 8006022:	d004      	beq.n	800602e <f_mkfs+0x186>
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800602e:	2303      	movs	r3, #3
 8006030:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006034:	e009      	b.n	800604a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <f_mkfs+0x19c>
 8006040:	2313      	movs	r3, #19
 8006042:	e357      	b.n	80066f4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8006044:	2302      	movs	r3, #2
 8006046:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800604e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006052:	2b03      	cmp	r3, #3
 8006054:	d13c      	bne.n	80060d0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8006056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006058:	2b00      	cmp	r3, #0
 800605a:	d11b      	bne.n	8006094 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	0c5b      	lsrs	r3, r3, #17
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006062:	2300      	movs	r3, #0
 8006064:	64bb      	str	r3, [r7, #72]	; 0x48
 8006066:	2301      	movs	r3, #1
 8006068:	653b      	str	r3, [r7, #80]	; 0x50
 800606a:	e005      	b.n	8006078 <f_mkfs+0x1d0>
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	3301      	adds	r3, #1
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
 8006072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	653b      	str	r3, [r7, #80]	; 0x50
 8006078:	4a2d      	ldr	r2, [pc, #180]	; (8006130 <f_mkfs+0x288>)
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <f_mkfs+0x1ec>
 8006084:	4a2a      	ldr	r2, [pc, #168]	; (8006130 <f_mkfs+0x288>)
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800608c:	461a      	mov	r2, r3
 800608e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006090:	4293      	cmp	r3, r2
 8006092:	d2eb      	bcs.n	800606c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	3302      	adds	r3, #2
 80060a2:	009a      	lsls	r2, r3, #2
 80060a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060a6:	4413      	add	r3, r2
 80060a8:	1e5a      	subs	r2, r3, #1
 80060aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80060b2:	2320      	movs	r3, #32
 80060b4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80060b6:	2300      	movs	r3, #0
 80060b8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d903      	bls.n	80060cc <f_mkfs+0x224>
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <f_mkfs+0x28c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d952      	bls.n	8006172 <f_mkfs+0x2ca>
 80060cc:	230e      	movs	r3, #14
 80060ce:	e311      	b.n	80066f4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80060d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11b      	bne.n	800610e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	0b1b      	lsrs	r3, r3, #12
 80060da:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80060dc:	2300      	movs	r3, #0
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e0:	2301      	movs	r3, #1
 80060e2:	653b      	str	r3, [r7, #80]	; 0x50
 80060e4:	e005      	b.n	80060f2 <f_mkfs+0x24a>
 80060e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e8:	3301      	adds	r3, #1
 80060ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	653b      	str	r3, [r7, #80]	; 0x50
 80060f2:	4a11      	ldr	r2, [pc, #68]	; (8006138 <f_mkfs+0x290>)
 80060f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <f_mkfs+0x266>
 80060fe:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <f_mkfs+0x290>)
 8006100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006106:	461a      	mov	r2, r3
 8006108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610a:	4293      	cmp	r3, r2
 800610c:	d2eb      	bcs.n	80060e6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800611e:	4293      	cmp	r3, r2
 8006120:	d90c      	bls.n	800613c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	3302      	adds	r3, #2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612a:	e012      	b.n	8006152 <f_mkfs+0x2aa>
 800612c:	2000024c 	.word	0x2000024c
 8006130:	08007a34 	.word	0x08007a34
 8006134:	0ffffff5 	.word	0x0ffffff5
 8006138:	08007a44 	.word	0x08007a44
				} else {
					fmt = FS_FAT12;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	3301      	adds	r3, #1
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	3303      	adds	r3, #3
 8006150:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006152:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006156:	4413      	add	r3, r2
 8006158:	1e5a      	subs	r2, r3, #1
 800615a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8006162:	2301      	movs	r3, #1
 8006164:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006176:	4413      	add	r3, r2
 8006178:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800617a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800617c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617e:	fb03 f202 	mul.w	r2, r3, r2
 8006182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006184:	4413      	add	r3, r2
 8006186:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006188:	4413      	add	r3, r2
 800618a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	425b      	negs	r3, r3
 8006198:	401a      	ands	r2, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80061a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d108      	bne.n	80061ba <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80061a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ac:	4413      	add	r3, r2
 80061ae:	657b      	str	r3, [r7, #84]	; 0x54
 80061b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b4:	4413      	add	r3, r2
 80061b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80061b8:	e006      	b.n	80061c8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80061ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061c4:	4413      	add	r3, r2
 80061c6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80061c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ca:	011a      	lsls	r2, r3, #4
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	441a      	add	r2, r3
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d901      	bls.n	80061de <f_mkfs+0x336>
 80061da:	230e      	movs	r3, #14
 80061dc:	e28a      	b.n	80066f4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad2      	subs	r2, r2, r3
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80061fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d10f      	bne.n	8006222 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006208:	4293      	cmp	r3, r2
 800620a:	d80a      	bhi.n	8006222 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <f_mkfs+0x376>
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d144      	bne.n	80062a8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800621e:	230e      	movs	r3, #14
 8006220:	e268      	b.n	80066f4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8006222:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006226:	2b02      	cmp	r3, #2
 8006228:	d133      	bne.n	8006292 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006230:	4293      	cmp	r3, r2
 8006232:	d91e      	bls.n	8006272 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d107      	bne.n	800624a <f_mkfs+0x3a2>
 800623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d803      	bhi.n	800624a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8006242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	607b      	str	r3, [r7, #4]
 8006248:	e033      	b.n	80062b2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8006254:	2303      	movs	r3, #3
 8006256:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800625a:	e02a      	b.n	80062b2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <f_mkfs+0x3c6>
 8006262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d91e      	bls.n	80062ac <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800626e:	230e      	movs	r3, #14
 8006270:	e240      	b.n	80066f4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006278:	4293      	cmp	r3, r2
 800627a:	d80a      	bhi.n	8006292 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <f_mkfs+0x3e6>
 8006282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d910      	bls.n	80062b0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800628e:	230e      	movs	r3, #14
 8006290:	e230      	b.n	80066f4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8006292:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10c      	bne.n	80062b4 <f_mkfs+0x40c>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d907      	bls.n	80062b4 <f_mkfs+0x40c>
 80062a4:	230e      	movs	r3, #14
 80062a6:	e225      	b.n	80066f4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80062a8:	bf00      	nop
 80062aa:	e6ce      	b.n	800604a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80062ac:	bf00      	nop
 80062ae:	e6cc      	b.n	800604a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80062b0:	bf00      	nop
			pau = au;
 80062b2:	e6ca      	b.n	800604a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80062b4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80062b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062b8:	461a      	mov	r2, r3
 80062ba:	2100      	movs	r1, #0
 80062bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062be:	f7fd fd3e 	bl	8003d3e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80062c2:	220b      	movs	r2, #11
 80062c4:	49b2      	ldr	r1, [pc, #712]	; (8006590 <f_mkfs+0x6e8>)
 80062c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c8:	f7fd fd18 	bl	8003cfc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	330b      	adds	r3, #11
 80062d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80062d2:	4611      	mov	r1, r2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fd fcca 	bl	8003c6e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	330d      	adds	r3, #13
 80062de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	330e      	adds	r3, #14
 80062e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062ea:	b292      	uxth	r2, r2
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fd fcbd 	bl	8003c6e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	3310      	adds	r3, #16
 80062f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	f103 0211 	add.w	r2, r3, #17
 8006304:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006308:	2b03      	cmp	r3, #3
 800630a:	d002      	beq.n	8006312 <f_mkfs+0x46a>
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	b29b      	uxth	r3, r3
 8006310:	e000      	b.n	8006314 <f_mkfs+0x46c>
 8006312:	2300      	movs	r3, #0
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fd fca9 	bl	8003c6e <st_word>
		if (sz_vol < 0x10000) {
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006322:	d208      	bcs.n	8006336 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	3313      	adds	r3, #19
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	b292      	uxth	r2, r2
 800632c:	4611      	mov	r1, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd fc9d 	bl	8003c6e <st_word>
 8006334:	e006      	b.n	8006344 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	3320      	adds	r3, #32
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7fd fcb0 	bl	8003ca4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	3315      	adds	r3, #21
 8006348:	22f8      	movs	r2, #248	; 0xf8
 800634a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	3318      	adds	r3, #24
 8006350:	213f      	movs	r1, #63	; 0x3f
 8006352:	4618      	mov	r0, r3
 8006354:	f7fd fc8b 	bl	8003c6e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	331a      	adds	r3, #26
 800635c:	21ff      	movs	r1, #255	; 0xff
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd fc85 	bl	8003c6e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	331c      	adds	r3, #28
 8006368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fc9a 	bl	8003ca4 <st_dword>
		if (fmt == FS_FAT32) {
 8006370:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006374:	2b03      	cmp	r3, #3
 8006376:	d131      	bne.n	80063dc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800637e:	f7fc fe79 	bl	8003074 <get_fattime>
 8006382:	4603      	mov	r3, r0
 8006384:	4619      	mov	r1, r3
 8006386:	4620      	mov	r0, r4
 8006388:	f7fd fc8c 	bl	8003ca4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006392:	4618      	mov	r0, r3
 8006394:	f7fd fc86 	bl	8003ca4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	332c      	adds	r3, #44	; 0x2c
 800639c:	2102      	movs	r1, #2
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fd fc80 	bl	8003ca4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	3330      	adds	r3, #48	; 0x30
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fd fc5f 	bl	8003c6e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	3332      	adds	r3, #50	; 0x32
 80063b4:	2106      	movs	r1, #6
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd fc59 	bl	8003c6e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	3340      	adds	r3, #64	; 0x40
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	3342      	adds	r3, #66	; 0x42
 80063c8:	2229      	movs	r2, #41	; 0x29
 80063ca:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	3347      	adds	r3, #71	; 0x47
 80063d0:	2213      	movs	r2, #19
 80063d2:	4970      	ldr	r1, [pc, #448]	; (8006594 <f_mkfs+0x6ec>)
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fd fc91 	bl	8003cfc <mem_cpy>
 80063da:	e020      	b.n	800641e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80063e2:	f7fc fe47 	bl	8003074 <get_fattime>
 80063e6:	4603      	mov	r3, r0
 80063e8:	4619      	mov	r1, r3
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7fd fc5a 	bl	8003ca4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	3316      	adds	r3, #22
 80063f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063f6:	b292      	uxth	r2, r2
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fc37 	bl	8003c6e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	2280      	movs	r2, #128	; 0x80
 8006406:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	3326      	adds	r3, #38	; 0x26
 800640c:	2229      	movs	r2, #41	; 0x29
 800640e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	332b      	adds	r3, #43	; 0x2b
 8006414:	2213      	movs	r2, #19
 8006416:	4960      	ldr	r1, [pc, #384]	; (8006598 <f_mkfs+0x6f0>)
 8006418:	4618      	mov	r0, r3
 800641a:	f7fd fc6f 	bl	8003cfc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006424:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006428:	4618      	mov	r0, r3
 800642a:	f7fd fc20 	bl	8003c6e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800642e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006432:	2301      	movs	r3, #1
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006438:	f7fd fba0 	bl	8003b7c <disk_write>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <f_mkfs+0x59e>
 8006442:	2301      	movs	r3, #1
 8006444:	e156      	b.n	80066f4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8006446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800644a:	2b03      	cmp	r3, #3
 800644c:	d140      	bne.n	80064d0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	1d9a      	adds	r2, r3, #6
 8006452:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006456:	2301      	movs	r3, #1
 8006458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800645a:	f7fd fb8f 	bl	8003b7c <disk_write>
			mem_set(buf, 0, ss);
 800645e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006460:	461a      	mov	r2, r3
 8006462:	2100      	movs	r1, #0
 8006464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006466:	f7fd fc6a 	bl	8003d3e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800646a:	494c      	ldr	r1, [pc, #304]	; (800659c <f_mkfs+0x6f4>)
 800646c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800646e:	f7fd fc19 	bl	8003ca4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006478:	4949      	ldr	r1, [pc, #292]	; (80065a0 <f_mkfs+0x6f8>)
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd fc12 	bl	8003ca4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	3b01      	subs	r3, #1
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fd fc09 	bl	8003ca4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006498:	2102      	movs	r1, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd fc02 	bl	8003ca4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fd fbdf 	bl	8003c6e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1dda      	adds	r2, r3, #7
 80064b4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80064b8:	2301      	movs	r3, #1
 80064ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064bc:	f7fd fb5e 	bl	8003b7c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80064c8:	2301      	movs	r3, #1
 80064ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064cc:	f7fd fb56 	bl	8003b7c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80064d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d2:	2100      	movs	r1, #0
 80064d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d6:	f7fd fc32 	bl	8003d3e <mem_set>
		sect = b_fat;		/* FAT start sector */
 80064da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064dc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80064de:	2300      	movs	r3, #0
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e2:	e04b      	b.n	800657c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80064e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d113      	bne.n	8006514 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80064ec:	f06f 0107 	mvn.w	r1, #7
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f7fd fbd7 	bl	8003ca4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	3304      	adds	r3, #4
 80064fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fd fbd0 	bl	8003ca4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	3308      	adds	r3, #8
 8006508:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd fbc9 	bl	8003ca4 <st_dword>
 8006512:	e00b      	b.n	800652c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8006514:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <f_mkfs+0x678>
 800651c:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <f_mkfs+0x6fc>)
 800651e:	e001      	b.n	8006524 <f_mkfs+0x67c>
 8006520:	f06f 0307 	mvn.w	r3, #7
 8006524:	4619      	mov	r1, r3
 8006526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006528:	f7fd fbbc 	bl	8003ca4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800652c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800652e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8006530:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	4293      	cmp	r3, r2
 8006536:	bf28      	it	cs
 8006538:	4613      	movcs	r3, r2
 800653a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800653c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006542:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006546:	f7fd fb19 	bl	8003b7c <disk_write>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <f_mkfs+0x6ac>
 8006550:	2301      	movs	r3, #1
 8006552:	e0cf      	b.n	80066f4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8006554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006556:	461a      	mov	r2, r3
 8006558:	2100      	movs	r1, #0
 800655a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800655c:	f7fd fbef 	bl	8003d3e <mem_set>
				sect += n; nsect -= n;
 8006560:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006564:	4413      	add	r3, r2
 8006566:	667b      	str	r3, [r7, #100]	; 0x64
 8006568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800656a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8006570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1dc      	bne.n	8006530 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006578:	3301      	adds	r3, #1
 800657a:	64bb      	str	r3, [r7, #72]	; 0x48
 800657c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800657e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006580:	429a      	cmp	r2, r3
 8006582:	d3af      	bcc.n	80064e4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8006584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006588:	2b03      	cmp	r3, #3
 800658a:	d10d      	bne.n	80065a8 <f_mkfs+0x700>
 800658c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658e:	e00c      	b.n	80065aa <f_mkfs+0x702>
 8006590:	08007968 	.word	0x08007968
 8006594:	08007974 	.word	0x08007974
 8006598:	08007988 	.word	0x08007988
 800659c:	41615252 	.word	0x41615252
 80065a0:	61417272 	.word	0x61417272
 80065a4:	00fffff8 	.word	0x00fffff8
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80065ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bf28      	it	cs
 80065b4:	4613      	movcs	r3, r2
 80065b6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80065b8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80065bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c2:	f7fd fadb 	bl	8003b7c <disk_write>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <f_mkfs+0x728>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e091      	b.n	80066f4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80065d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d4:	4413      	add	r3, r2
 80065d6:	667b      	str	r3, [r7, #100]	; 0x64
 80065d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80065e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e2      	bne.n	80065ac <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80065e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d103      	bne.n	80065f6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80065ee:	230c      	movs	r3, #12
 80065f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80065f4:	e010      	b.n	8006618 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d303      	bcc.n	8006606 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80065fe:	2306      	movs	r3, #6
 8006600:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006604:	e008      	b.n	8006618 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8006606:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800660a:	2b02      	cmp	r3, #2
 800660c:	d101      	bne.n	8006612 <f_mkfs+0x76a>
 800660e:	2304      	movs	r3, #4
 8006610:	e000      	b.n	8006614 <f_mkfs+0x76c>
 8006612:	2301      	movs	r3, #1
 8006614:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d15b      	bne.n	80066da <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8006622:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006624:	461a      	mov	r2, r3
 8006626:	2100      	movs	r1, #0
 8006628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800662a:	f7fd fb88 	bl	8003d3e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006634:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006638:	4618      	mov	r0, r3
 800663a:	f7fd fb18 	bl	8003c6e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006644:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	3301      	adds	r3, #1
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	3302      	adds	r3, #2
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	3303      	adds	r3, #3
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	3304      	adds	r3, #4
 8006668:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800666c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	441a      	add	r2, r3
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <f_mkfs+0x854>)
 8006676:	fba3 1302 	umull	r1, r3, r3, r2
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	0852      	lsrs	r2, r2, #1
 800667e:	4413      	add	r3, r2
 8006680:	0b5b      	lsrs	r3, r3, #13
 8006682:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	3305      	adds	r3, #5
 8006688:	22fe      	movs	r2, #254	; 0xfe
 800668a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800668c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	b2da      	uxtb	r2, r3
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	3306      	adds	r3, #6
 8006696:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	3307      	adds	r3, #7
 80066a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	3308      	adds	r3, #8
 80066ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fd faf8 	bl	8003ca4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	330c      	adds	r3, #12
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fd faf1 	bl	8003ca4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80066c2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80066c6:	2301      	movs	r3, #1
 80066c8:	2200      	movs	r2, #0
 80066ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066cc:	f7fd fa56 	bl	8003b7c <disk_write>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <f_mkfs+0x832>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e00c      	b.n	80066f4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80066da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80066de:	2200      	movs	r2, #0
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd fa6a 	bl	8003bbc <disk_ioctl>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <f_mkfs+0x84a>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <f_mkfs+0x84c>

	return FR_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3774      	adds	r7, #116	; 0x74
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd90      	pop	{r4, r7, pc}
 80066fc:	0515565b 	.word	0x0515565b

08006700 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006716:	4b1f      	ldr	r3, [pc, #124]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006718:	7a5b      	ldrb	r3, [r3, #9]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d131      	bne.n	8006784 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006720:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006722:	7a5b      	ldrb	r3, [r3, #9]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 800672a:	2100      	movs	r1, #0
 800672c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006730:	7a5b      	ldrb	r3, [r3, #9]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4a17      	ldr	r2, [pc, #92]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800673e:	4b15      	ldr	r3, [pc, #84]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006740:	7a5b      	ldrb	r3, [r3, #9]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006748:	4413      	add	r3, r2
 800674a:	79fa      	ldrb	r2, [r7, #7]
 800674c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 8006750:	7a5b      	ldrb	r3, [r3, #9]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	b2d1      	uxtb	r1, r2
 8006758:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <FATFS_LinkDriverEx+0x94>)
 800675a:	7251      	strb	r1, [r2, #9]
 800675c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800675e:	7dbb      	ldrb	r3, [r7, #22]
 8006760:	3330      	adds	r3, #48	; 0x30
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	3301      	adds	r3, #1
 800676c:	223a      	movs	r2, #58	; 0x3a
 800676e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3302      	adds	r3, #2
 8006774:	222f      	movs	r2, #47	; 0x2f
 8006776:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	3303      	adds	r3, #3
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000274 	.word	0x20000274

08006798 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80067a2:	2200      	movs	r2, #0
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff ffaa 	bl	8006700 <FATFS_LinkDriverEx>
 80067ac:	4603      	mov	r3, r0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <__errno>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	; (80067c0 <__errno+0x8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20000020 	.word	0x20000020

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	4d0d      	ldr	r5, [pc, #52]	; (80067fc <__libc_init_array+0x38>)
 80067c8:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067ca:	1b64      	subs	r4, r4, r5
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	2600      	movs	r6, #0
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	4d0b      	ldr	r5, [pc, #44]	; (8006804 <__libc_init_array+0x40>)
 80067d6:	4c0c      	ldr	r4, [pc, #48]	; (8006808 <__libc_init_array+0x44>)
 80067d8:	f001 f824 	bl	8007824 <_init>
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	2600      	movs	r6, #0
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	08007af4 	.word	0x08007af4
 8006800:	08007af4 	.word	0x08007af4
 8006804:	08007af4 	.word	0x08007af4
 8006808:	08007af8 	.word	0x08007af8

0800680c <memset>:
 800680c:	4402      	add	r2, r0
 800680e:	4603      	mov	r3, r0
 8006810:	4293      	cmp	r3, r2
 8006812:	d100      	bne.n	8006816 <memset+0xa>
 8006814:	4770      	bx	lr
 8006816:	f803 1b01 	strb.w	r1, [r3], #1
 800681a:	e7f9      	b.n	8006810 <memset+0x4>

0800681c <iprintf>:
 800681c:	b40f      	push	{r0, r1, r2, r3}
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <iprintf+0x2c>)
 8006820:	b513      	push	{r0, r1, r4, lr}
 8006822:	681c      	ldr	r4, [r3, #0]
 8006824:	b124      	cbz	r4, 8006830 <iprintf+0x14>
 8006826:	69a3      	ldr	r3, [r4, #24]
 8006828:	b913      	cbnz	r3, 8006830 <iprintf+0x14>
 800682a:	4620      	mov	r0, r4
 800682c:	f000 fa5e 	bl	8006cec <__sinit>
 8006830:	ab05      	add	r3, sp, #20
 8006832:	9a04      	ldr	r2, [sp, #16]
 8006834:	68a1      	ldr	r1, [r4, #8]
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fc67 	bl	800710c <_vfiprintf_r>
 800683e:	b002      	add	sp, #8
 8006840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006844:	b004      	add	sp, #16
 8006846:	4770      	bx	lr
 8006848:	20000020 	.word	0x20000020

0800684c <_puts_r>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	460e      	mov	r6, r1
 8006850:	4605      	mov	r5, r0
 8006852:	b118      	cbz	r0, 800685c <_puts_r+0x10>
 8006854:	6983      	ldr	r3, [r0, #24]
 8006856:	b90b      	cbnz	r3, 800685c <_puts_r+0x10>
 8006858:	f000 fa48 	bl	8006cec <__sinit>
 800685c:	69ab      	ldr	r3, [r5, #24]
 800685e:	68ac      	ldr	r4, [r5, #8]
 8006860:	b913      	cbnz	r3, 8006868 <_puts_r+0x1c>
 8006862:	4628      	mov	r0, r5
 8006864:	f000 fa42 	bl	8006cec <__sinit>
 8006868:	4b2c      	ldr	r3, [pc, #176]	; (800691c <_puts_r+0xd0>)
 800686a:	429c      	cmp	r4, r3
 800686c:	d120      	bne.n	80068b0 <_puts_r+0x64>
 800686e:	686c      	ldr	r4, [r5, #4]
 8006870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006872:	07db      	lsls	r3, r3, #31
 8006874:	d405      	bmi.n	8006882 <_puts_r+0x36>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	0598      	lsls	r0, r3, #22
 800687a:	d402      	bmi.n	8006882 <_puts_r+0x36>
 800687c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800687e:	f000 fad3 	bl	8006e28 <__retarget_lock_acquire_recursive>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	0719      	lsls	r1, r3, #28
 8006886:	d51d      	bpl.n	80068c4 <_puts_r+0x78>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	b1db      	cbz	r3, 80068c4 <_puts_r+0x78>
 800688c:	3e01      	subs	r6, #1
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006894:	3b01      	subs	r3, #1
 8006896:	60a3      	str	r3, [r4, #8]
 8006898:	bb39      	cbnz	r1, 80068ea <_puts_r+0x9e>
 800689a:	2b00      	cmp	r3, #0
 800689c:	da38      	bge.n	8006910 <_puts_r+0xc4>
 800689e:	4622      	mov	r2, r4
 80068a0:	210a      	movs	r1, #10
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 f848 	bl	8006938 <__swbuf_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d011      	beq.n	80068d0 <_puts_r+0x84>
 80068ac:	250a      	movs	r5, #10
 80068ae:	e011      	b.n	80068d4 <_puts_r+0x88>
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <_puts_r+0xd4>)
 80068b2:	429c      	cmp	r4, r3
 80068b4:	d101      	bne.n	80068ba <_puts_r+0x6e>
 80068b6:	68ac      	ldr	r4, [r5, #8]
 80068b8:	e7da      	b.n	8006870 <_puts_r+0x24>
 80068ba:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <_puts_r+0xd8>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	bf08      	it	eq
 80068c0:	68ec      	ldreq	r4, [r5, #12]
 80068c2:	e7d5      	b.n	8006870 <_puts_r+0x24>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f888 	bl	80069dc <__swsetup_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d0dd      	beq.n	800688c <_puts_r+0x40>
 80068d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80068d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068d6:	07da      	lsls	r2, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_puts_r+0x9a>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	059b      	lsls	r3, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_puts_r+0x9a>
 80068e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068e2:	f000 faa2 	bl	8006e2a <__retarget_lock_release_recursive>
 80068e6:	4628      	mov	r0, r5
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	da04      	bge.n	80068f8 <_puts_r+0xac>
 80068ee:	69a2      	ldr	r2, [r4, #24]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	dc06      	bgt.n	8006902 <_puts_r+0xb6>
 80068f4:	290a      	cmp	r1, #10
 80068f6:	d004      	beq.n	8006902 <_puts_r+0xb6>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	6022      	str	r2, [r4, #0]
 80068fe:	7019      	strb	r1, [r3, #0]
 8006900:	e7c5      	b.n	800688e <_puts_r+0x42>
 8006902:	4622      	mov	r2, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f817 	bl	8006938 <__swbuf_r>
 800690a:	3001      	adds	r0, #1
 800690c:	d1bf      	bne.n	800688e <_puts_r+0x42>
 800690e:	e7df      	b.n	80068d0 <_puts_r+0x84>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	250a      	movs	r5, #10
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	6022      	str	r2, [r4, #0]
 8006918:	701d      	strb	r5, [r3, #0]
 800691a:	e7db      	b.n	80068d4 <_puts_r+0x88>
 800691c:	08007a78 	.word	0x08007a78
 8006920:	08007a98 	.word	0x08007a98
 8006924:	08007a58 	.word	0x08007a58

08006928 <puts>:
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <puts+0xc>)
 800692a:	4601      	mov	r1, r0
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	f7ff bf8d 	b.w	800684c <_puts_r>
 8006932:	bf00      	nop
 8006934:	20000020 	.word	0x20000020

08006938 <__swbuf_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	460e      	mov	r6, r1
 800693c:	4614      	mov	r4, r2
 800693e:	4605      	mov	r5, r0
 8006940:	b118      	cbz	r0, 800694a <__swbuf_r+0x12>
 8006942:	6983      	ldr	r3, [r0, #24]
 8006944:	b90b      	cbnz	r3, 800694a <__swbuf_r+0x12>
 8006946:	f000 f9d1 	bl	8006cec <__sinit>
 800694a:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <__swbuf_r+0x98>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d12b      	bne.n	80069a8 <__swbuf_r+0x70>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	69a3      	ldr	r3, [r4, #24]
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	071a      	lsls	r2, r3, #28
 800695a:	d52f      	bpl.n	80069bc <__swbuf_r+0x84>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	b36b      	cbz	r3, 80069bc <__swbuf_r+0x84>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	1ac0      	subs	r0, r0, r3
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	b2f6      	uxtb	r6, r6
 800696a:	4283      	cmp	r3, r0
 800696c:	4637      	mov	r7, r6
 800696e:	dc04      	bgt.n	800697a <__swbuf_r+0x42>
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f926 	bl	8006bc4 <_fflush_r>
 8006978:	bb30      	cbnz	r0, 80069c8 <__swbuf_r+0x90>
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	3b01      	subs	r3, #1
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	6022      	str	r2, [r4, #0]
 8006986:	701e      	strb	r6, [r3, #0]
 8006988:	6963      	ldr	r3, [r4, #20]
 800698a:	3001      	adds	r0, #1
 800698c:	4283      	cmp	r3, r0
 800698e:	d004      	beq.n	800699a <__swbuf_r+0x62>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	07db      	lsls	r3, r3, #31
 8006994:	d506      	bpl.n	80069a4 <__swbuf_r+0x6c>
 8006996:	2e0a      	cmp	r6, #10
 8006998:	d104      	bne.n	80069a4 <__swbuf_r+0x6c>
 800699a:	4621      	mov	r1, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f000 f911 	bl	8006bc4 <_fflush_r>
 80069a2:	b988      	cbnz	r0, 80069c8 <__swbuf_r+0x90>
 80069a4:	4638      	mov	r0, r7
 80069a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <__swbuf_r+0x9c>)
 80069aa:	429c      	cmp	r4, r3
 80069ac:	d101      	bne.n	80069b2 <__swbuf_r+0x7a>
 80069ae:	68ac      	ldr	r4, [r5, #8]
 80069b0:	e7cf      	b.n	8006952 <__swbuf_r+0x1a>
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <__swbuf_r+0xa0>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	bf08      	it	eq
 80069b8:	68ec      	ldreq	r4, [r5, #12]
 80069ba:	e7ca      	b.n	8006952 <__swbuf_r+0x1a>
 80069bc:	4621      	mov	r1, r4
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 f80c 	bl	80069dc <__swsetup_r>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d0cb      	beq.n	8006960 <__swbuf_r+0x28>
 80069c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069cc:	e7ea      	b.n	80069a4 <__swbuf_r+0x6c>
 80069ce:	bf00      	nop
 80069d0:	08007a78 	.word	0x08007a78
 80069d4:	08007a98 	.word	0x08007a98
 80069d8:	08007a58 	.word	0x08007a58

080069dc <__swsetup_r>:
 80069dc:	4b32      	ldr	r3, [pc, #200]	; (8006aa8 <__swsetup_r+0xcc>)
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	681d      	ldr	r5, [r3, #0]
 80069e2:	4606      	mov	r6, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	b125      	cbz	r5, 80069f2 <__swsetup_r+0x16>
 80069e8:	69ab      	ldr	r3, [r5, #24]
 80069ea:	b913      	cbnz	r3, 80069f2 <__swsetup_r+0x16>
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 f97d 	bl	8006cec <__sinit>
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <__swsetup_r+0xd0>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d10f      	bne.n	8006a18 <__swsetup_r+0x3c>
 80069f8:	686c      	ldr	r4, [r5, #4]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a00:	0719      	lsls	r1, r3, #28
 8006a02:	d42c      	bmi.n	8006a5e <__swsetup_r+0x82>
 8006a04:	06dd      	lsls	r5, r3, #27
 8006a06:	d411      	bmi.n	8006a2c <__swsetup_r+0x50>
 8006a08:	2309      	movs	r3, #9
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a16:	e03e      	b.n	8006a96 <__swsetup_r+0xba>
 8006a18:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <__swsetup_r+0xd4>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d101      	bne.n	8006a22 <__swsetup_r+0x46>
 8006a1e:	68ac      	ldr	r4, [r5, #8]
 8006a20:	e7eb      	b.n	80069fa <__swsetup_r+0x1e>
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <__swsetup_r+0xd8>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	bf08      	it	eq
 8006a28:	68ec      	ldreq	r4, [r5, #12]
 8006a2a:	e7e6      	b.n	80069fa <__swsetup_r+0x1e>
 8006a2c:	0758      	lsls	r0, r3, #29
 8006a2e:	d512      	bpl.n	8006a56 <__swsetup_r+0x7a>
 8006a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a32:	b141      	cbz	r1, 8006a46 <__swsetup_r+0x6a>
 8006a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d002      	beq.n	8006a42 <__swsetup_r+0x66>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f000 fa5b 	bl	8006ef8 <_free_r>
 8006a42:	2300      	movs	r3, #0
 8006a44:	6363      	str	r3, [r4, #52]	; 0x34
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	b94b      	cbnz	r3, 8006a76 <__swsetup_r+0x9a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0x9a>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 fa01 	bl	8006e78 <__smakebuf_r>
 8006a76:	89a0      	ldrh	r0, [r4, #12]
 8006a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a7c:	f010 0301 	ands.w	r3, r0, #1
 8006a80:	d00a      	beq.n	8006a98 <__swsetup_r+0xbc>
 8006a82:	2300      	movs	r3, #0
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	6963      	ldr	r3, [r4, #20]
 8006a88:	425b      	negs	r3, r3
 8006a8a:	61a3      	str	r3, [r4, #24]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	b943      	cbnz	r3, 8006aa2 <__swsetup_r+0xc6>
 8006a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a94:	d1ba      	bne.n	8006a0c <__swsetup_r+0x30>
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	0781      	lsls	r1, r0, #30
 8006a9a:	bf58      	it	pl
 8006a9c:	6963      	ldrpl	r3, [r4, #20]
 8006a9e:	60a3      	str	r3, [r4, #8]
 8006aa0:	e7f4      	b.n	8006a8c <__swsetup_r+0xb0>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e7f7      	b.n	8006a96 <__swsetup_r+0xba>
 8006aa6:	bf00      	nop
 8006aa8:	20000020 	.word	0x20000020
 8006aac:	08007a78 	.word	0x08007a78
 8006ab0:	08007a98 	.word	0x08007a98
 8006ab4:	08007a58 	.word	0x08007a58

08006ab8 <__sflush_r>:
 8006ab8:	898a      	ldrh	r2, [r1, #12]
 8006aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abe:	4605      	mov	r5, r0
 8006ac0:	0710      	lsls	r0, r2, #28
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	d458      	bmi.n	8006b78 <__sflush_r+0xc0>
 8006ac6:	684b      	ldr	r3, [r1, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dc05      	bgt.n	8006ad8 <__sflush_r+0x20>
 8006acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dc02      	bgt.n	8006ad8 <__sflush_r+0x20>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d0f9      	beq.n	8006ad2 <__sflush_r+0x1a>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ae4:	682f      	ldr	r7, [r5, #0]
 8006ae6:	602b      	str	r3, [r5, #0]
 8006ae8:	d032      	beq.n	8006b50 <__sflush_r+0x98>
 8006aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	075a      	lsls	r2, r3, #29
 8006af0:	d505      	bpl.n	8006afe <__sflush_r+0x46>
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	1ac0      	subs	r0, r0, r3
 8006af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006af8:	b10b      	cbz	r3, 8006afe <__sflush_r+0x46>
 8006afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006afc:	1ac0      	subs	r0, r0, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	4602      	mov	r2, r0
 8006b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b04:	6a21      	ldr	r1, [r4, #32]
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b0      	blx	r6
 8006b0a:	1c43      	adds	r3, r0, #1
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	d106      	bne.n	8006b1e <__sflush_r+0x66>
 8006b10:	6829      	ldr	r1, [r5, #0]
 8006b12:	291d      	cmp	r1, #29
 8006b14:	d82c      	bhi.n	8006b70 <__sflush_r+0xb8>
 8006b16:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <__sflush_r+0x108>)
 8006b18:	40ca      	lsrs	r2, r1
 8006b1a:	07d6      	lsls	r6, r2, #31
 8006b1c:	d528      	bpl.n	8006b70 <__sflush_r+0xb8>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	6062      	str	r2, [r4, #4]
 8006b22:	04d9      	lsls	r1, r3, #19
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	6022      	str	r2, [r4, #0]
 8006b28:	d504      	bpl.n	8006b34 <__sflush_r+0x7c>
 8006b2a:	1c42      	adds	r2, r0, #1
 8006b2c:	d101      	bne.n	8006b32 <__sflush_r+0x7a>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	b903      	cbnz	r3, 8006b34 <__sflush_r+0x7c>
 8006b32:	6560      	str	r0, [r4, #84]	; 0x54
 8006b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b36:	602f      	str	r7, [r5, #0]
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d0ca      	beq.n	8006ad2 <__sflush_r+0x1a>
 8006b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b40:	4299      	cmp	r1, r3
 8006b42:	d002      	beq.n	8006b4a <__sflush_r+0x92>
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 f9d7 	bl	8006ef8 <_free_r>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b4e:	e7c1      	b.n	8006ad4 <__sflush_r+0x1c>
 8006b50:	6a21      	ldr	r1, [r4, #32]
 8006b52:	2301      	movs	r3, #1
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b0      	blx	r6
 8006b58:	1c41      	adds	r1, r0, #1
 8006b5a:	d1c7      	bne.n	8006aec <__sflush_r+0x34>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0c4      	beq.n	8006aec <__sflush_r+0x34>
 8006b62:	2b1d      	cmp	r3, #29
 8006b64:	d001      	beq.n	8006b6a <__sflush_r+0xb2>
 8006b66:	2b16      	cmp	r3, #22
 8006b68:	d101      	bne.n	8006b6e <__sflush_r+0xb6>
 8006b6a:	602f      	str	r7, [r5, #0]
 8006b6c:	e7b1      	b.n	8006ad2 <__sflush_r+0x1a>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	e7ad      	b.n	8006ad4 <__sflush_r+0x1c>
 8006b78:	690f      	ldr	r7, [r1, #16]
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	d0a9      	beq.n	8006ad2 <__sflush_r+0x1a>
 8006b7e:	0793      	lsls	r3, r2, #30
 8006b80:	680e      	ldr	r6, [r1, #0]
 8006b82:	bf08      	it	eq
 8006b84:	694b      	ldreq	r3, [r1, #20]
 8006b86:	600f      	str	r7, [r1, #0]
 8006b88:	bf18      	it	ne
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	eba6 0807 	sub.w	r8, r6, r7
 8006b90:	608b      	str	r3, [r1, #8]
 8006b92:	f1b8 0f00 	cmp.w	r8, #0
 8006b96:	dd9c      	ble.n	8006ad2 <__sflush_r+0x1a>
 8006b98:	6a21      	ldr	r1, [r4, #32]
 8006b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b9c:	4643      	mov	r3, r8
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b0      	blx	r6
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	dc06      	bgt.n	8006bb6 <__sflush_r+0xfe>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb4:	e78e      	b.n	8006ad4 <__sflush_r+0x1c>
 8006bb6:	4407      	add	r7, r0
 8006bb8:	eba8 0800 	sub.w	r8, r8, r0
 8006bbc:	e7e9      	b.n	8006b92 <__sflush_r+0xda>
 8006bbe:	bf00      	nop
 8006bc0:	20400001 	.word	0x20400001

08006bc4 <_fflush_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	690b      	ldr	r3, [r1, #16]
 8006bc8:	4605      	mov	r5, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	b913      	cbnz	r3, 8006bd4 <_fflush_r+0x10>
 8006bce:	2500      	movs	r5, #0
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	b118      	cbz	r0, 8006bde <_fflush_r+0x1a>
 8006bd6:	6983      	ldr	r3, [r0, #24]
 8006bd8:	b90b      	cbnz	r3, 8006bde <_fflush_r+0x1a>
 8006bda:	f000 f887 	bl	8006cec <__sinit>
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <_fflush_r+0x6c>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d11b      	bne.n	8006c1c <_fflush_r+0x58>
 8006be4:	686c      	ldr	r4, [r5, #4]
 8006be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0ef      	beq.n	8006bce <_fflush_r+0xa>
 8006bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bf0:	07d0      	lsls	r0, r2, #31
 8006bf2:	d404      	bmi.n	8006bfe <_fflush_r+0x3a>
 8006bf4:	0599      	lsls	r1, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_fflush_r+0x3a>
 8006bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bfa:	f000 f915 	bl	8006e28 <__retarget_lock_acquire_recursive>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	4621      	mov	r1, r4
 8006c02:	f7ff ff59 	bl	8006ab8 <__sflush_r>
 8006c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c08:	07da      	lsls	r2, r3, #31
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	d4e0      	bmi.n	8006bd0 <_fflush_r+0xc>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	059b      	lsls	r3, r3, #22
 8006c12:	d4dd      	bmi.n	8006bd0 <_fflush_r+0xc>
 8006c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c16:	f000 f908 	bl	8006e2a <__retarget_lock_release_recursive>
 8006c1a:	e7d9      	b.n	8006bd0 <_fflush_r+0xc>
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <_fflush_r+0x70>)
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	d101      	bne.n	8006c26 <_fflush_r+0x62>
 8006c22:	68ac      	ldr	r4, [r5, #8]
 8006c24:	e7df      	b.n	8006be6 <_fflush_r+0x22>
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <_fflush_r+0x74>)
 8006c28:	429c      	cmp	r4, r3
 8006c2a:	bf08      	it	eq
 8006c2c:	68ec      	ldreq	r4, [r5, #12]
 8006c2e:	e7da      	b.n	8006be6 <_fflush_r+0x22>
 8006c30:	08007a78 	.word	0x08007a78
 8006c34:	08007a98 	.word	0x08007a98
 8006c38:	08007a58 	.word	0x08007a58

08006c3c <std>:
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	4604      	mov	r4, r0
 8006c42:	e9c0 3300 	strd	r3, r3, [r0]
 8006c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c4a:	6083      	str	r3, [r0, #8]
 8006c4c:	8181      	strh	r1, [r0, #12]
 8006c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c50:	81c2      	strh	r2, [r0, #14]
 8006c52:	6183      	str	r3, [r0, #24]
 8006c54:	4619      	mov	r1, r3
 8006c56:	2208      	movs	r2, #8
 8006c58:	305c      	adds	r0, #92	; 0x5c
 8006c5a:	f7ff fdd7 	bl	800680c <memset>
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <std+0x38>)
 8006c60:	6263      	str	r3, [r4, #36]	; 0x24
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <std+0x3c>)
 8006c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <std+0x40>)
 8006c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <std+0x44>)
 8006c6c:	6224      	str	r4, [r4, #32]
 8006c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	080076b5 	.word	0x080076b5
 8006c78:	080076d7 	.word	0x080076d7
 8006c7c:	0800770f 	.word	0x0800770f
 8006c80:	08007733 	.word	0x08007733

08006c84 <_cleanup_r>:
 8006c84:	4901      	ldr	r1, [pc, #4]	; (8006c8c <_cleanup_r+0x8>)
 8006c86:	f000 b8af 	b.w	8006de8 <_fwalk_reent>
 8006c8a:	bf00      	nop
 8006c8c:	08006bc5 	.word	0x08006bc5

08006c90 <__sfmoreglue>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	2268      	movs	r2, #104	; 0x68
 8006c94:	1e4d      	subs	r5, r1, #1
 8006c96:	4355      	muls	r5, r2
 8006c98:	460e      	mov	r6, r1
 8006c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c9e:	f000 f997 	bl	8006fd0 <_malloc_r>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	b140      	cbz	r0, 8006cb8 <__sfmoreglue+0x28>
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cac:	300c      	adds	r0, #12
 8006cae:	60a0      	str	r0, [r4, #8]
 8006cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cb4:	f7ff fdaa 	bl	800680c <memset>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	bd70      	pop	{r4, r5, r6, pc}

08006cbc <__sfp_lock_acquire>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	; (8006cc4 <__sfp_lock_acquire+0x8>)
 8006cbe:	f000 b8b3 	b.w	8006e28 <__retarget_lock_acquire_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	20000281 	.word	0x20000281

08006cc8 <__sfp_lock_release>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__sfp_lock_release+0x8>)
 8006cca:	f000 b8ae 	b.w	8006e2a <__retarget_lock_release_recursive>
 8006cce:	bf00      	nop
 8006cd0:	20000281 	.word	0x20000281

08006cd4 <__sinit_lock_acquire>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sinit_lock_acquire+0x8>)
 8006cd6:	f000 b8a7 	b.w	8006e28 <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20000282 	.word	0x20000282

08006ce0 <__sinit_lock_release>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__sinit_lock_release+0x8>)
 8006ce2:	f000 b8a2 	b.w	8006e2a <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20000282 	.word	0x20000282

08006cec <__sinit>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	f7ff fff0 	bl	8006cd4 <__sinit_lock_acquire>
 8006cf4:	69a3      	ldr	r3, [r4, #24]
 8006cf6:	b11b      	cbz	r3, 8006d00 <__sinit+0x14>
 8006cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfc:	f7ff bff0 	b.w	8006ce0 <__sinit_lock_release>
 8006d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d04:	6523      	str	r3, [r4, #80]	; 0x50
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <__sinit+0x68>)
 8006d08:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <__sinit+0x6c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	bf04      	itt	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	61a3      	streq	r3, [r4, #24]
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 f820 	bl	8006d5c <__sfp>
 8006d1c:	6060      	str	r0, [r4, #4]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 f81c 	bl	8006d5c <__sfp>
 8006d24:	60a0      	str	r0, [r4, #8]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f818 	bl	8006d5c <__sfp>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	60e0      	str	r0, [r4, #12]
 8006d30:	2104      	movs	r1, #4
 8006d32:	6860      	ldr	r0, [r4, #4]
 8006d34:	f7ff ff82 	bl	8006c3c <std>
 8006d38:	68a0      	ldr	r0, [r4, #8]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2109      	movs	r1, #9
 8006d3e:	f7ff ff7d 	bl	8006c3c <std>
 8006d42:	68e0      	ldr	r0, [r4, #12]
 8006d44:	2202      	movs	r2, #2
 8006d46:	2112      	movs	r1, #18
 8006d48:	f7ff ff78 	bl	8006c3c <std>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	61a3      	str	r3, [r4, #24]
 8006d50:	e7d2      	b.n	8006cf8 <__sinit+0xc>
 8006d52:	bf00      	nop
 8006d54:	08007a54 	.word	0x08007a54
 8006d58:	08006c85 	.word	0x08006c85

08006d5c <__sfp>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f7ff ffac 	bl	8006cbc <__sfp_lock_acquire>
 8006d64:	4b1e      	ldr	r3, [pc, #120]	; (8006de0 <__sfp+0x84>)
 8006d66:	681e      	ldr	r6, [r3, #0]
 8006d68:	69b3      	ldr	r3, [r6, #24]
 8006d6a:	b913      	cbnz	r3, 8006d72 <__sfp+0x16>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff ffbd 	bl	8006cec <__sinit>
 8006d72:	3648      	adds	r6, #72	; 0x48
 8006d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	d503      	bpl.n	8006d84 <__sfp+0x28>
 8006d7c:	6833      	ldr	r3, [r6, #0]
 8006d7e:	b30b      	cbz	r3, 8006dc4 <__sfp+0x68>
 8006d80:	6836      	ldr	r6, [r6, #0]
 8006d82:	e7f7      	b.n	8006d74 <__sfp+0x18>
 8006d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d88:	b9d5      	cbnz	r5, 8006dc0 <__sfp+0x64>
 8006d8a:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <__sfp+0x88>)
 8006d8c:	60e3      	str	r3, [r4, #12]
 8006d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d92:	6665      	str	r5, [r4, #100]	; 0x64
 8006d94:	f000 f847 	bl	8006e26 <__retarget_lock_init_recursive>
 8006d98:	f7ff ff96 	bl	8006cc8 <__sfp_lock_release>
 8006d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006da4:	6025      	str	r5, [r4, #0]
 8006da6:	61a5      	str	r5, [r4, #24]
 8006da8:	2208      	movs	r2, #8
 8006daa:	4629      	mov	r1, r5
 8006dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006db0:	f7ff fd2c 	bl	800680c <memset>
 8006db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc0:	3468      	adds	r4, #104	; 0x68
 8006dc2:	e7d9      	b.n	8006d78 <__sfp+0x1c>
 8006dc4:	2104      	movs	r1, #4
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7ff ff62 	bl	8006c90 <__sfmoreglue>
 8006dcc:	4604      	mov	r4, r0
 8006dce:	6030      	str	r0, [r6, #0]
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1d5      	bne.n	8006d80 <__sfp+0x24>
 8006dd4:	f7ff ff78 	bl	8006cc8 <__sfp_lock_release>
 8006dd8:	230c      	movs	r3, #12
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	e7ee      	b.n	8006dbc <__sfp+0x60>
 8006dde:	bf00      	nop
 8006de0:	08007a54 	.word	0x08007a54
 8006de4:	ffff0001 	.word	0xffff0001

08006de8 <_fwalk_reent>:
 8006de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dec:	4606      	mov	r6, r0
 8006dee:	4688      	mov	r8, r1
 8006df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006df4:	2700      	movs	r7, #0
 8006df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8006dfe:	d505      	bpl.n	8006e0c <_fwalk_reent+0x24>
 8006e00:	6824      	ldr	r4, [r4, #0]
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	d1f7      	bne.n	8006df6 <_fwalk_reent+0xe>
 8006e06:	4638      	mov	r0, r7
 8006e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0c:	89ab      	ldrh	r3, [r5, #12]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d907      	bls.n	8006e22 <_fwalk_reent+0x3a>
 8006e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e16:	3301      	adds	r3, #1
 8006e18:	d003      	beq.n	8006e22 <_fwalk_reent+0x3a>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	47c0      	blx	r8
 8006e20:	4307      	orrs	r7, r0
 8006e22:	3568      	adds	r5, #104	; 0x68
 8006e24:	e7e9      	b.n	8006dfa <_fwalk_reent+0x12>

08006e26 <__retarget_lock_init_recursive>:
 8006e26:	4770      	bx	lr

08006e28 <__retarget_lock_acquire_recursive>:
 8006e28:	4770      	bx	lr

08006e2a <__retarget_lock_release_recursive>:
 8006e2a:	4770      	bx	lr

08006e2c <__swhatbuf_r>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	460e      	mov	r6, r1
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	2900      	cmp	r1, #0
 8006e36:	b096      	sub	sp, #88	; 0x58
 8006e38:	4614      	mov	r4, r2
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	da08      	bge.n	8006e50 <__swhatbuf_r+0x24>
 8006e3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	602a      	str	r2, [r5, #0]
 8006e46:	061a      	lsls	r2, r3, #24
 8006e48:	d410      	bmi.n	8006e6c <__swhatbuf_r+0x40>
 8006e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4e:	e00e      	b.n	8006e6e <__swhatbuf_r+0x42>
 8006e50:	466a      	mov	r2, sp
 8006e52:	f000 fc95 	bl	8007780 <_fstat_r>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	dbf1      	blt.n	8006e3e <__swhatbuf_r+0x12>
 8006e5a:	9a01      	ldr	r2, [sp, #4]
 8006e5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e64:	425a      	negs	r2, r3
 8006e66:	415a      	adcs	r2, r3
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	e7ee      	b.n	8006e4a <__swhatbuf_r+0x1e>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	2000      	movs	r0, #0
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	b016      	add	sp, #88	; 0x58
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e78 <__smakebuf_r>:
 8006e78:	898b      	ldrh	r3, [r1, #12]
 8006e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e7c:	079d      	lsls	r5, r3, #30
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	d507      	bpl.n	8006e94 <__smakebuf_r+0x1c>
 8006e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	6163      	str	r3, [r4, #20]
 8006e90:	b002      	add	sp, #8
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	ab01      	add	r3, sp, #4
 8006e96:	466a      	mov	r2, sp
 8006e98:	f7ff ffc8 	bl	8006e2c <__swhatbuf_r>
 8006e9c:	9900      	ldr	r1, [sp, #0]
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f000 f895 	bl	8006fd0 <_malloc_r>
 8006ea6:	b948      	cbnz	r0, 8006ebc <__smakebuf_r+0x44>
 8006ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eac:	059a      	lsls	r2, r3, #22
 8006eae:	d4ef      	bmi.n	8006e90 <__smakebuf_r+0x18>
 8006eb0:	f023 0303 	bic.w	r3, r3, #3
 8006eb4:	f043 0302 	orr.w	r3, r3, #2
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	e7e3      	b.n	8006e84 <__smakebuf_r+0xc>
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <__smakebuf_r+0x7c>)
 8006ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	6020      	str	r0, [r4, #0]
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	9b00      	ldr	r3, [sp, #0]
 8006ecc:	6163      	str	r3, [r4, #20]
 8006ece:	9b01      	ldr	r3, [sp, #4]
 8006ed0:	6120      	str	r0, [r4, #16]
 8006ed2:	b15b      	cbz	r3, 8006eec <__smakebuf_r+0x74>
 8006ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f000 fc63 	bl	80077a4 <_isatty_r>
 8006ede:	b128      	cbz	r0, 8006eec <__smakebuf_r+0x74>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	89a0      	ldrh	r0, [r4, #12]
 8006eee:	4305      	orrs	r5, r0
 8006ef0:	81a5      	strh	r5, [r4, #12]
 8006ef2:	e7cd      	b.n	8006e90 <__smakebuf_r+0x18>
 8006ef4:	08006c85 	.word	0x08006c85

08006ef8 <_free_r>:
 8006ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006efa:	2900      	cmp	r1, #0
 8006efc:	d044      	beq.n	8006f88 <_free_r+0x90>
 8006efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f02:	9001      	str	r0, [sp, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f1a1 0404 	sub.w	r4, r1, #4
 8006f0a:	bfb8      	it	lt
 8006f0c:	18e4      	addlt	r4, r4, r3
 8006f0e:	f000 fc6b 	bl	80077e8 <__malloc_lock>
 8006f12:	4a1e      	ldr	r2, [pc, #120]	; (8006f8c <_free_r+0x94>)
 8006f14:	9801      	ldr	r0, [sp, #4]
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	b933      	cbnz	r3, 8006f28 <_free_r+0x30>
 8006f1a:	6063      	str	r3, [r4, #4]
 8006f1c:	6014      	str	r4, [r2, #0]
 8006f1e:	b003      	add	sp, #12
 8006f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f24:	f000 bc66 	b.w	80077f4 <__malloc_unlock>
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d908      	bls.n	8006f3e <_free_r+0x46>
 8006f2c:	6825      	ldr	r5, [r4, #0]
 8006f2e:	1961      	adds	r1, r4, r5
 8006f30:	428b      	cmp	r3, r1
 8006f32:	bf01      	itttt	eq
 8006f34:	6819      	ldreq	r1, [r3, #0]
 8006f36:	685b      	ldreq	r3, [r3, #4]
 8006f38:	1949      	addeq	r1, r1, r5
 8006f3a:	6021      	streq	r1, [r4, #0]
 8006f3c:	e7ed      	b.n	8006f1a <_free_r+0x22>
 8006f3e:	461a      	mov	r2, r3
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	b10b      	cbz	r3, 8006f48 <_free_r+0x50>
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	d9fa      	bls.n	8006f3e <_free_r+0x46>
 8006f48:	6811      	ldr	r1, [r2, #0]
 8006f4a:	1855      	adds	r5, r2, r1
 8006f4c:	42a5      	cmp	r5, r4
 8006f4e:	d10b      	bne.n	8006f68 <_free_r+0x70>
 8006f50:	6824      	ldr	r4, [r4, #0]
 8006f52:	4421      	add	r1, r4
 8006f54:	1854      	adds	r4, r2, r1
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	6011      	str	r1, [r2, #0]
 8006f5a:	d1e0      	bne.n	8006f1e <_free_r+0x26>
 8006f5c:	681c      	ldr	r4, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	6053      	str	r3, [r2, #4]
 8006f62:	4421      	add	r1, r4
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	e7da      	b.n	8006f1e <_free_r+0x26>
 8006f68:	d902      	bls.n	8006f70 <_free_r+0x78>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	6003      	str	r3, [r0, #0]
 8006f6e:	e7d6      	b.n	8006f1e <_free_r+0x26>
 8006f70:	6825      	ldr	r5, [r4, #0]
 8006f72:	1961      	adds	r1, r4, r5
 8006f74:	428b      	cmp	r3, r1
 8006f76:	bf04      	itt	eq
 8006f78:	6819      	ldreq	r1, [r3, #0]
 8006f7a:	685b      	ldreq	r3, [r3, #4]
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	bf04      	itt	eq
 8006f80:	1949      	addeq	r1, r1, r5
 8006f82:	6021      	streq	r1, [r4, #0]
 8006f84:	6054      	str	r4, [r2, #4]
 8006f86:	e7ca      	b.n	8006f1e <_free_r+0x26>
 8006f88:	b003      	add	sp, #12
 8006f8a:	bd30      	pop	{r4, r5, pc}
 8006f8c:	20000284 	.word	0x20000284

08006f90 <sbrk_aligned>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4e0e      	ldr	r6, [pc, #56]	; (8006fcc <sbrk_aligned+0x3c>)
 8006f94:	460c      	mov	r4, r1
 8006f96:	6831      	ldr	r1, [r6, #0]
 8006f98:	4605      	mov	r5, r0
 8006f9a:	b911      	cbnz	r1, 8006fa2 <sbrk_aligned+0x12>
 8006f9c:	f000 fb7a 	bl	8007694 <_sbrk_r>
 8006fa0:	6030      	str	r0, [r6, #0]
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 fb75 	bl	8007694 <_sbrk_r>
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	d00a      	beq.n	8006fc4 <sbrk_aligned+0x34>
 8006fae:	1cc4      	adds	r4, r0, #3
 8006fb0:	f024 0403 	bic.w	r4, r4, #3
 8006fb4:	42a0      	cmp	r0, r4
 8006fb6:	d007      	beq.n	8006fc8 <sbrk_aligned+0x38>
 8006fb8:	1a21      	subs	r1, r4, r0
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 fb6a 	bl	8007694 <_sbrk_r>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d101      	bne.n	8006fc8 <sbrk_aligned+0x38>
 8006fc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fc8:	4620      	mov	r0, r4
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	20000288 	.word	0x20000288

08006fd0 <_malloc_r>:
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	1ccd      	adds	r5, r1, #3
 8006fd6:	f025 0503 	bic.w	r5, r5, #3
 8006fda:	3508      	adds	r5, #8
 8006fdc:	2d0c      	cmp	r5, #12
 8006fde:	bf38      	it	cc
 8006fe0:	250c      	movcc	r5, #12
 8006fe2:	2d00      	cmp	r5, #0
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	db01      	blt.n	8006fec <_malloc_r+0x1c>
 8006fe8:	42a9      	cmp	r1, r5
 8006fea:	d905      	bls.n	8006ff8 <_malloc_r+0x28>
 8006fec:	230c      	movs	r3, #12
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff8:	4e2e      	ldr	r6, [pc, #184]	; (80070b4 <_malloc_r+0xe4>)
 8006ffa:	f000 fbf5 	bl	80077e8 <__malloc_lock>
 8006ffe:	6833      	ldr	r3, [r6, #0]
 8007000:	461c      	mov	r4, r3
 8007002:	bb34      	cbnz	r4, 8007052 <_malloc_r+0x82>
 8007004:	4629      	mov	r1, r5
 8007006:	4638      	mov	r0, r7
 8007008:	f7ff ffc2 	bl	8006f90 <sbrk_aligned>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	4604      	mov	r4, r0
 8007010:	d14d      	bne.n	80070ae <_malloc_r+0xde>
 8007012:	6834      	ldr	r4, [r6, #0]
 8007014:	4626      	mov	r6, r4
 8007016:	2e00      	cmp	r6, #0
 8007018:	d140      	bne.n	800709c <_malloc_r+0xcc>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	4631      	mov	r1, r6
 800701e:	4638      	mov	r0, r7
 8007020:	eb04 0803 	add.w	r8, r4, r3
 8007024:	f000 fb36 	bl	8007694 <_sbrk_r>
 8007028:	4580      	cmp	r8, r0
 800702a:	d13a      	bne.n	80070a2 <_malloc_r+0xd2>
 800702c:	6821      	ldr	r1, [r4, #0]
 800702e:	3503      	adds	r5, #3
 8007030:	1a6d      	subs	r5, r5, r1
 8007032:	f025 0503 	bic.w	r5, r5, #3
 8007036:	3508      	adds	r5, #8
 8007038:	2d0c      	cmp	r5, #12
 800703a:	bf38      	it	cc
 800703c:	250c      	movcc	r5, #12
 800703e:	4629      	mov	r1, r5
 8007040:	4638      	mov	r0, r7
 8007042:	f7ff ffa5 	bl	8006f90 <sbrk_aligned>
 8007046:	3001      	adds	r0, #1
 8007048:	d02b      	beq.n	80070a2 <_malloc_r+0xd2>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	442b      	add	r3, r5
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	e00e      	b.n	8007070 <_malloc_r+0xa0>
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	1b52      	subs	r2, r2, r5
 8007056:	d41e      	bmi.n	8007096 <_malloc_r+0xc6>
 8007058:	2a0b      	cmp	r2, #11
 800705a:	d916      	bls.n	800708a <_malloc_r+0xba>
 800705c:	1961      	adds	r1, r4, r5
 800705e:	42a3      	cmp	r3, r4
 8007060:	6025      	str	r5, [r4, #0]
 8007062:	bf18      	it	ne
 8007064:	6059      	strne	r1, [r3, #4]
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	bf08      	it	eq
 800706a:	6031      	streq	r1, [r6, #0]
 800706c:	5162      	str	r2, [r4, r5]
 800706e:	604b      	str	r3, [r1, #4]
 8007070:	4638      	mov	r0, r7
 8007072:	f104 060b 	add.w	r6, r4, #11
 8007076:	f000 fbbd 	bl	80077f4 <__malloc_unlock>
 800707a:	f026 0607 	bic.w	r6, r6, #7
 800707e:	1d23      	adds	r3, r4, #4
 8007080:	1af2      	subs	r2, r6, r3
 8007082:	d0b6      	beq.n	8006ff2 <_malloc_r+0x22>
 8007084:	1b9b      	subs	r3, r3, r6
 8007086:	50a3      	str	r3, [r4, r2]
 8007088:	e7b3      	b.n	8006ff2 <_malloc_r+0x22>
 800708a:	6862      	ldr	r2, [r4, #4]
 800708c:	42a3      	cmp	r3, r4
 800708e:	bf0c      	ite	eq
 8007090:	6032      	streq	r2, [r6, #0]
 8007092:	605a      	strne	r2, [r3, #4]
 8007094:	e7ec      	b.n	8007070 <_malloc_r+0xa0>
 8007096:	4623      	mov	r3, r4
 8007098:	6864      	ldr	r4, [r4, #4]
 800709a:	e7b2      	b.n	8007002 <_malloc_r+0x32>
 800709c:	4634      	mov	r4, r6
 800709e:	6876      	ldr	r6, [r6, #4]
 80070a0:	e7b9      	b.n	8007016 <_malloc_r+0x46>
 80070a2:	230c      	movs	r3, #12
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	4638      	mov	r0, r7
 80070a8:	f000 fba4 	bl	80077f4 <__malloc_unlock>
 80070ac:	e7a1      	b.n	8006ff2 <_malloc_r+0x22>
 80070ae:	6025      	str	r5, [r4, #0]
 80070b0:	e7de      	b.n	8007070 <_malloc_r+0xa0>
 80070b2:	bf00      	nop
 80070b4:	20000284 	.word	0x20000284

080070b8 <__sfputc_r>:
 80070b8:	6893      	ldr	r3, [r2, #8]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	b410      	push	{r4}
 80070c0:	6093      	str	r3, [r2, #8]
 80070c2:	da08      	bge.n	80070d6 <__sfputc_r+0x1e>
 80070c4:	6994      	ldr	r4, [r2, #24]
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	db01      	blt.n	80070ce <__sfputc_r+0x16>
 80070ca:	290a      	cmp	r1, #10
 80070cc:	d103      	bne.n	80070d6 <__sfputc_r+0x1e>
 80070ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070d2:	f7ff bc31 	b.w	8006938 <__swbuf_r>
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	1c58      	adds	r0, r3, #1
 80070da:	6010      	str	r0, [r2, #0]
 80070dc:	7019      	strb	r1, [r3, #0]
 80070de:	4608      	mov	r0, r1
 80070e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <__sfputs_r>:
 80070e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e8:	4606      	mov	r6, r0
 80070ea:	460f      	mov	r7, r1
 80070ec:	4614      	mov	r4, r2
 80070ee:	18d5      	adds	r5, r2, r3
 80070f0:	42ac      	cmp	r4, r5
 80070f2:	d101      	bne.n	80070f8 <__sfputs_r+0x12>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e007      	b.n	8007108 <__sfputs_r+0x22>
 80070f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fc:	463a      	mov	r2, r7
 80070fe:	4630      	mov	r0, r6
 8007100:	f7ff ffda 	bl	80070b8 <__sfputc_r>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d1f3      	bne.n	80070f0 <__sfputs_r+0xa>
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800710c <_vfiprintf_r>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	460d      	mov	r5, r1
 8007112:	b09d      	sub	sp, #116	; 0x74
 8007114:	4614      	mov	r4, r2
 8007116:	4698      	mov	r8, r3
 8007118:	4606      	mov	r6, r0
 800711a:	b118      	cbz	r0, 8007124 <_vfiprintf_r+0x18>
 800711c:	6983      	ldr	r3, [r0, #24]
 800711e:	b90b      	cbnz	r3, 8007124 <_vfiprintf_r+0x18>
 8007120:	f7ff fde4 	bl	8006cec <__sinit>
 8007124:	4b89      	ldr	r3, [pc, #548]	; (800734c <_vfiprintf_r+0x240>)
 8007126:	429d      	cmp	r5, r3
 8007128:	d11b      	bne.n	8007162 <_vfiprintf_r+0x56>
 800712a:	6875      	ldr	r5, [r6, #4]
 800712c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800712e:	07d9      	lsls	r1, r3, #31
 8007130:	d405      	bmi.n	800713e <_vfiprintf_r+0x32>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	059a      	lsls	r2, r3, #22
 8007136:	d402      	bmi.n	800713e <_vfiprintf_r+0x32>
 8007138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713a:	f7ff fe75 	bl	8006e28 <__retarget_lock_acquire_recursive>
 800713e:	89ab      	ldrh	r3, [r5, #12]
 8007140:	071b      	lsls	r3, r3, #28
 8007142:	d501      	bpl.n	8007148 <_vfiprintf_r+0x3c>
 8007144:	692b      	ldr	r3, [r5, #16]
 8007146:	b9eb      	cbnz	r3, 8007184 <_vfiprintf_r+0x78>
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff fc46 	bl	80069dc <__swsetup_r>
 8007150:	b1c0      	cbz	r0, 8007184 <_vfiprintf_r+0x78>
 8007152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007154:	07dc      	lsls	r4, r3, #31
 8007156:	d50e      	bpl.n	8007176 <_vfiprintf_r+0x6a>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800715c:	b01d      	add	sp, #116	; 0x74
 800715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007162:	4b7b      	ldr	r3, [pc, #492]	; (8007350 <_vfiprintf_r+0x244>)
 8007164:	429d      	cmp	r5, r3
 8007166:	d101      	bne.n	800716c <_vfiprintf_r+0x60>
 8007168:	68b5      	ldr	r5, [r6, #8]
 800716a:	e7df      	b.n	800712c <_vfiprintf_r+0x20>
 800716c:	4b79      	ldr	r3, [pc, #484]	; (8007354 <_vfiprintf_r+0x248>)
 800716e:	429d      	cmp	r5, r3
 8007170:	bf08      	it	eq
 8007172:	68f5      	ldreq	r5, [r6, #12]
 8007174:	e7da      	b.n	800712c <_vfiprintf_r+0x20>
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d4ed      	bmi.n	8007158 <_vfiprintf_r+0x4c>
 800717c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717e:	f7ff fe54 	bl	8006e2a <__retarget_lock_release_recursive>
 8007182:	e7e9      	b.n	8007158 <_vfiprintf_r+0x4c>
 8007184:	2300      	movs	r3, #0
 8007186:	9309      	str	r3, [sp, #36]	; 0x24
 8007188:	2320      	movs	r3, #32
 800718a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007192:	2330      	movs	r3, #48	; 0x30
 8007194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007358 <_vfiprintf_r+0x24c>
 8007198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800719c:	f04f 0901 	mov.w	r9, #1
 80071a0:	4623      	mov	r3, r4
 80071a2:	469a      	mov	sl, r3
 80071a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a8:	b10a      	cbz	r2, 80071ae <_vfiprintf_r+0xa2>
 80071aa:	2a25      	cmp	r2, #37	; 0x25
 80071ac:	d1f9      	bne.n	80071a2 <_vfiprintf_r+0x96>
 80071ae:	ebba 0b04 	subs.w	fp, sl, r4
 80071b2:	d00b      	beq.n	80071cc <_vfiprintf_r+0xc0>
 80071b4:	465b      	mov	r3, fp
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ff93 	bl	80070e6 <__sfputs_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f000 80aa 	beq.w	800731a <_vfiprintf_r+0x20e>
 80071c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c8:	445a      	add	r2, fp
 80071ca:	9209      	str	r2, [sp, #36]	; 0x24
 80071cc:	f89a 3000 	ldrb.w	r3, [sl]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a2 	beq.w	800731a <_vfiprintf_r+0x20e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ec:	931a      	str	r3, [sp, #104]	; 0x68
 80071ee:	4654      	mov	r4, sl
 80071f0:	2205      	movs	r2, #5
 80071f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f6:	4858      	ldr	r0, [pc, #352]	; (8007358 <_vfiprintf_r+0x24c>)
 80071f8:	f7f9 f80a 	bl	8000210 <memchr>
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	b9d8      	cbnz	r0, 8007238 <_vfiprintf_r+0x12c>
 8007200:	06d1      	lsls	r1, r2, #27
 8007202:	bf44      	itt	mi
 8007204:	2320      	movmi	r3, #32
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720a:	0713      	lsls	r3, r2, #28
 800720c:	bf44      	itt	mi
 800720e:	232b      	movmi	r3, #43	; 0x2b
 8007210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007214:	f89a 3000 	ldrb.w	r3, [sl]
 8007218:	2b2a      	cmp	r3, #42	; 0x2a
 800721a:	d015      	beq.n	8007248 <_vfiprintf_r+0x13c>
 800721c:	9a07      	ldr	r2, [sp, #28]
 800721e:	4654      	mov	r4, sl
 8007220:	2000      	movs	r0, #0
 8007222:	f04f 0c0a 	mov.w	ip, #10
 8007226:	4621      	mov	r1, r4
 8007228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722c:	3b30      	subs	r3, #48	; 0x30
 800722e:	2b09      	cmp	r3, #9
 8007230:	d94e      	bls.n	80072d0 <_vfiprintf_r+0x1c4>
 8007232:	b1b0      	cbz	r0, 8007262 <_vfiprintf_r+0x156>
 8007234:	9207      	str	r2, [sp, #28]
 8007236:	e014      	b.n	8007262 <_vfiprintf_r+0x156>
 8007238:	eba0 0308 	sub.w	r3, r0, r8
 800723c:	fa09 f303 	lsl.w	r3, r9, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	46a2      	mov	sl, r4
 8007246:	e7d2      	b.n	80071ee <_vfiprintf_r+0xe2>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfbb      	ittet	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f042 0202 	orrlt.w	r2, r2, #2
 800725a:	9307      	strge	r3, [sp, #28]
 800725c:	9307      	strlt	r3, [sp, #28]
 800725e:	bfb8      	it	lt
 8007260:	9204      	strlt	r2, [sp, #16]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	2b2e      	cmp	r3, #46	; 0x2e
 8007266:	d10c      	bne.n	8007282 <_vfiprintf_r+0x176>
 8007268:	7863      	ldrb	r3, [r4, #1]
 800726a:	2b2a      	cmp	r3, #42	; 0x2a
 800726c:	d135      	bne.n	80072da <_vfiprintf_r+0x1ce>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9203      	str	r2, [sp, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfb8      	it	lt
 800727a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800727e:	3402      	adds	r4, #2
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007368 <_vfiprintf_r+0x25c>
 8007286:	7821      	ldrb	r1, [r4, #0]
 8007288:	2203      	movs	r2, #3
 800728a:	4650      	mov	r0, sl
 800728c:	f7f8 ffc0 	bl	8000210 <memchr>
 8007290:	b140      	cbz	r0, 80072a4 <_vfiprintf_r+0x198>
 8007292:	2340      	movs	r3, #64	; 0x40
 8007294:	eba0 000a 	sub.w	r0, r0, sl
 8007298:	fa03 f000 	lsl.w	r0, r3, r0
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	4303      	orrs	r3, r0
 80072a0:	3401      	adds	r4, #1
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a8:	482c      	ldr	r0, [pc, #176]	; (800735c <_vfiprintf_r+0x250>)
 80072aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ae:	2206      	movs	r2, #6
 80072b0:	f7f8 ffae 	bl	8000210 <memchr>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d03f      	beq.n	8007338 <_vfiprintf_r+0x22c>
 80072b8:	4b29      	ldr	r3, [pc, #164]	; (8007360 <_vfiprintf_r+0x254>)
 80072ba:	bb1b      	cbnz	r3, 8007304 <_vfiprintf_r+0x1f8>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	3307      	adds	r3, #7
 80072c0:	f023 0307 	bic.w	r3, r3, #7
 80072c4:	3308      	adds	r3, #8
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ca:	443b      	add	r3, r7
 80072cc:	9309      	str	r3, [sp, #36]	; 0x24
 80072ce:	e767      	b.n	80071a0 <_vfiprintf_r+0x94>
 80072d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d4:	460c      	mov	r4, r1
 80072d6:	2001      	movs	r0, #1
 80072d8:	e7a5      	b.n	8007226 <_vfiprintf_r+0x11a>
 80072da:	2300      	movs	r3, #0
 80072dc:	3401      	adds	r4, #1
 80072de:	9305      	str	r3, [sp, #20]
 80072e0:	4619      	mov	r1, r3
 80072e2:	f04f 0c0a 	mov.w	ip, #10
 80072e6:	4620      	mov	r0, r4
 80072e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ec:	3a30      	subs	r2, #48	; 0x30
 80072ee:	2a09      	cmp	r2, #9
 80072f0:	d903      	bls.n	80072fa <_vfiprintf_r+0x1ee>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0c5      	beq.n	8007282 <_vfiprintf_r+0x176>
 80072f6:	9105      	str	r1, [sp, #20]
 80072f8:	e7c3      	b.n	8007282 <_vfiprintf_r+0x176>
 80072fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fe:	4604      	mov	r4, r0
 8007300:	2301      	movs	r3, #1
 8007302:	e7f0      	b.n	80072e6 <_vfiprintf_r+0x1da>
 8007304:	ab03      	add	r3, sp, #12
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462a      	mov	r2, r5
 800730a:	4b16      	ldr	r3, [pc, #88]	; (8007364 <_vfiprintf_r+0x258>)
 800730c:	a904      	add	r1, sp, #16
 800730e:	4630      	mov	r0, r6
 8007310:	f3af 8000 	nop.w
 8007314:	4607      	mov	r7, r0
 8007316:	1c78      	adds	r0, r7, #1
 8007318:	d1d6      	bne.n	80072c8 <_vfiprintf_r+0x1bc>
 800731a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d405      	bmi.n	800732c <_vfiprintf_r+0x220>
 8007320:	89ab      	ldrh	r3, [r5, #12]
 8007322:	059a      	lsls	r2, r3, #22
 8007324:	d402      	bmi.n	800732c <_vfiprintf_r+0x220>
 8007326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007328:	f7ff fd7f 	bl	8006e2a <__retarget_lock_release_recursive>
 800732c:	89ab      	ldrh	r3, [r5, #12]
 800732e:	065b      	lsls	r3, r3, #25
 8007330:	f53f af12 	bmi.w	8007158 <_vfiprintf_r+0x4c>
 8007334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007336:	e711      	b.n	800715c <_vfiprintf_r+0x50>
 8007338:	ab03      	add	r3, sp, #12
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	462a      	mov	r2, r5
 800733e:	4b09      	ldr	r3, [pc, #36]	; (8007364 <_vfiprintf_r+0x258>)
 8007340:	a904      	add	r1, sp, #16
 8007342:	4630      	mov	r0, r6
 8007344:	f000 f880 	bl	8007448 <_printf_i>
 8007348:	e7e4      	b.n	8007314 <_vfiprintf_r+0x208>
 800734a:	bf00      	nop
 800734c:	08007a78 	.word	0x08007a78
 8007350:	08007a98 	.word	0x08007a98
 8007354:	08007a58 	.word	0x08007a58
 8007358:	08007ab8 	.word	0x08007ab8
 800735c:	08007ac2 	.word	0x08007ac2
 8007360:	00000000 	.word	0x00000000
 8007364:	080070e7 	.word	0x080070e7
 8007368:	08007abe 	.word	0x08007abe

0800736c <_printf_common>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	4616      	mov	r6, r2
 8007372:	4699      	mov	r9, r3
 8007374:	688a      	ldr	r2, [r1, #8]
 8007376:	690b      	ldr	r3, [r1, #16]
 8007378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800737c:	4293      	cmp	r3, r2
 800737e:	bfb8      	it	lt
 8007380:	4613      	movlt	r3, r2
 8007382:	6033      	str	r3, [r6, #0]
 8007384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007388:	4607      	mov	r7, r0
 800738a:	460c      	mov	r4, r1
 800738c:	b10a      	cbz	r2, 8007392 <_printf_common+0x26>
 800738e:	3301      	adds	r3, #1
 8007390:	6033      	str	r3, [r6, #0]
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	0699      	lsls	r1, r3, #26
 8007396:	bf42      	ittt	mi
 8007398:	6833      	ldrmi	r3, [r6, #0]
 800739a:	3302      	addmi	r3, #2
 800739c:	6033      	strmi	r3, [r6, #0]
 800739e:	6825      	ldr	r5, [r4, #0]
 80073a0:	f015 0506 	ands.w	r5, r5, #6
 80073a4:	d106      	bne.n	80073b4 <_printf_common+0x48>
 80073a6:	f104 0a19 	add.w	sl, r4, #25
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	6832      	ldr	r2, [r6, #0]
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dc26      	bgt.n	8007402 <_printf_common+0x96>
 80073b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073b8:	1e13      	subs	r3, r2, #0
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	bf18      	it	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	0692      	lsls	r2, r2, #26
 80073c2:	d42b      	bmi.n	800741c <_printf_common+0xb0>
 80073c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c8:	4649      	mov	r1, r9
 80073ca:	4638      	mov	r0, r7
 80073cc:	47c0      	blx	r8
 80073ce:	3001      	adds	r0, #1
 80073d0:	d01e      	beq.n	8007410 <_printf_common+0xa4>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	68e5      	ldr	r5, [r4, #12]
 80073d6:	6832      	ldr	r2, [r6, #0]
 80073d8:	f003 0306 	and.w	r3, r3, #6
 80073dc:	2b04      	cmp	r3, #4
 80073de:	bf08      	it	eq
 80073e0:	1aad      	subeq	r5, r5, r2
 80073e2:	68a3      	ldr	r3, [r4, #8]
 80073e4:	6922      	ldr	r2, [r4, #16]
 80073e6:	bf0c      	ite	eq
 80073e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ec:	2500      	movne	r5, #0
 80073ee:	4293      	cmp	r3, r2
 80073f0:	bfc4      	itt	gt
 80073f2:	1a9b      	subgt	r3, r3, r2
 80073f4:	18ed      	addgt	r5, r5, r3
 80073f6:	2600      	movs	r6, #0
 80073f8:	341a      	adds	r4, #26
 80073fa:	42b5      	cmp	r5, r6
 80073fc:	d11a      	bne.n	8007434 <_printf_common+0xc8>
 80073fe:	2000      	movs	r0, #0
 8007400:	e008      	b.n	8007414 <_printf_common+0xa8>
 8007402:	2301      	movs	r3, #1
 8007404:	4652      	mov	r2, sl
 8007406:	4649      	mov	r1, r9
 8007408:	4638      	mov	r0, r7
 800740a:	47c0      	blx	r8
 800740c:	3001      	adds	r0, #1
 800740e:	d103      	bne.n	8007418 <_printf_common+0xac>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007418:	3501      	adds	r5, #1
 800741a:	e7c6      	b.n	80073aa <_printf_common+0x3e>
 800741c:	18e1      	adds	r1, r4, r3
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	2030      	movs	r0, #48	; 0x30
 8007422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007426:	4422      	add	r2, r4
 8007428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800742c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007430:	3302      	adds	r3, #2
 8007432:	e7c7      	b.n	80073c4 <_printf_common+0x58>
 8007434:	2301      	movs	r3, #1
 8007436:	4622      	mov	r2, r4
 8007438:	4649      	mov	r1, r9
 800743a:	4638      	mov	r0, r7
 800743c:	47c0      	blx	r8
 800743e:	3001      	adds	r0, #1
 8007440:	d0e6      	beq.n	8007410 <_printf_common+0xa4>
 8007442:	3601      	adds	r6, #1
 8007444:	e7d9      	b.n	80073fa <_printf_common+0x8e>
	...

08007448 <_printf_i>:
 8007448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	7e0f      	ldrb	r7, [r1, #24]
 800744e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007450:	2f78      	cmp	r7, #120	; 0x78
 8007452:	4691      	mov	r9, r2
 8007454:	4680      	mov	r8, r0
 8007456:	460c      	mov	r4, r1
 8007458:	469a      	mov	sl, r3
 800745a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800745e:	d807      	bhi.n	8007470 <_printf_i+0x28>
 8007460:	2f62      	cmp	r7, #98	; 0x62
 8007462:	d80a      	bhi.n	800747a <_printf_i+0x32>
 8007464:	2f00      	cmp	r7, #0
 8007466:	f000 80d8 	beq.w	800761a <_printf_i+0x1d2>
 800746a:	2f58      	cmp	r7, #88	; 0x58
 800746c:	f000 80a3 	beq.w	80075b6 <_printf_i+0x16e>
 8007470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007478:	e03a      	b.n	80074f0 <_printf_i+0xa8>
 800747a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800747e:	2b15      	cmp	r3, #21
 8007480:	d8f6      	bhi.n	8007470 <_printf_i+0x28>
 8007482:	a101      	add	r1, pc, #4	; (adr r1, 8007488 <_printf_i+0x40>)
 8007484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074f5 	.word	0x080074f5
 8007490:	08007471 	.word	0x08007471
 8007494:	08007471 	.word	0x08007471
 8007498:	08007471 	.word	0x08007471
 800749c:	08007471 	.word	0x08007471
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	08007471 	.word	0x08007471
 80074a8:	08007471 	.word	0x08007471
 80074ac:	08007471 	.word	0x08007471
 80074b0:	08007471 	.word	0x08007471
 80074b4:	08007601 	.word	0x08007601
 80074b8:	08007525 	.word	0x08007525
 80074bc:	080075e3 	.word	0x080075e3
 80074c0:	08007471 	.word	0x08007471
 80074c4:	08007471 	.word	0x08007471
 80074c8:	08007623 	.word	0x08007623
 80074cc:	08007471 	.word	0x08007471
 80074d0:	08007525 	.word	0x08007525
 80074d4:	08007471 	.word	0x08007471
 80074d8:	08007471 	.word	0x08007471
 80074dc:	080075eb 	.word	0x080075eb
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	1d1a      	adds	r2, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	602a      	str	r2, [r5, #0]
 80074e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0a3      	b.n	800763c <_printf_i+0x1f4>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	6829      	ldr	r1, [r5, #0]
 80074f8:	0606      	lsls	r6, r0, #24
 80074fa:	f101 0304 	add.w	r3, r1, #4
 80074fe:	d50a      	bpl.n	8007516 <_printf_i+0xce>
 8007500:	680e      	ldr	r6, [r1, #0]
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	2e00      	cmp	r6, #0
 8007506:	da03      	bge.n	8007510 <_printf_i+0xc8>
 8007508:	232d      	movs	r3, #45	; 0x2d
 800750a:	4276      	negs	r6, r6
 800750c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007510:	485e      	ldr	r0, [pc, #376]	; (800768c <_printf_i+0x244>)
 8007512:	230a      	movs	r3, #10
 8007514:	e019      	b.n	800754a <_printf_i+0x102>
 8007516:	680e      	ldr	r6, [r1, #0]
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800751e:	bf18      	it	ne
 8007520:	b236      	sxthne	r6, r6
 8007522:	e7ef      	b.n	8007504 <_printf_i+0xbc>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	6820      	ldr	r0, [r4, #0]
 8007528:	1d19      	adds	r1, r3, #4
 800752a:	6029      	str	r1, [r5, #0]
 800752c:	0601      	lsls	r1, r0, #24
 800752e:	d501      	bpl.n	8007534 <_printf_i+0xec>
 8007530:	681e      	ldr	r6, [r3, #0]
 8007532:	e002      	b.n	800753a <_printf_i+0xf2>
 8007534:	0646      	lsls	r6, r0, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0xe8>
 8007538:	881e      	ldrh	r6, [r3, #0]
 800753a:	4854      	ldr	r0, [pc, #336]	; (800768c <_printf_i+0x244>)
 800753c:	2f6f      	cmp	r7, #111	; 0x6f
 800753e:	bf0c      	ite	eq
 8007540:	2308      	moveq	r3, #8
 8007542:	230a      	movne	r3, #10
 8007544:	2100      	movs	r1, #0
 8007546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800754a:	6865      	ldr	r5, [r4, #4]
 800754c:	60a5      	str	r5, [r4, #8]
 800754e:	2d00      	cmp	r5, #0
 8007550:	bfa2      	ittt	ge
 8007552:	6821      	ldrge	r1, [r4, #0]
 8007554:	f021 0104 	bicge.w	r1, r1, #4
 8007558:	6021      	strge	r1, [r4, #0]
 800755a:	b90e      	cbnz	r6, 8007560 <_printf_i+0x118>
 800755c:	2d00      	cmp	r5, #0
 800755e:	d04d      	beq.n	80075fc <_printf_i+0x1b4>
 8007560:	4615      	mov	r5, r2
 8007562:	fbb6 f1f3 	udiv	r1, r6, r3
 8007566:	fb03 6711 	mls	r7, r3, r1, r6
 800756a:	5dc7      	ldrb	r7, [r0, r7]
 800756c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007570:	4637      	mov	r7, r6
 8007572:	42bb      	cmp	r3, r7
 8007574:	460e      	mov	r6, r1
 8007576:	d9f4      	bls.n	8007562 <_printf_i+0x11a>
 8007578:	2b08      	cmp	r3, #8
 800757a:	d10b      	bne.n	8007594 <_printf_i+0x14c>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	07de      	lsls	r6, r3, #31
 8007580:	d508      	bpl.n	8007594 <_printf_i+0x14c>
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	6861      	ldr	r1, [r4, #4]
 8007586:	4299      	cmp	r1, r3
 8007588:	bfde      	ittt	le
 800758a:	2330      	movle	r3, #48	; 0x30
 800758c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007590:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007594:	1b52      	subs	r2, r2, r5
 8007596:	6122      	str	r2, [r4, #16]
 8007598:	f8cd a000 	str.w	sl, [sp]
 800759c:	464b      	mov	r3, r9
 800759e:	aa03      	add	r2, sp, #12
 80075a0:	4621      	mov	r1, r4
 80075a2:	4640      	mov	r0, r8
 80075a4:	f7ff fee2 	bl	800736c <_printf_common>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d14c      	bne.n	8007646 <_printf_i+0x1fe>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b0:	b004      	add	sp, #16
 80075b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b6:	4835      	ldr	r0, [pc, #212]	; (800768c <_printf_i+0x244>)
 80075b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075bc:	6829      	ldr	r1, [r5, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075c4:	6029      	str	r1, [r5, #0]
 80075c6:	061d      	lsls	r5, r3, #24
 80075c8:	d514      	bpl.n	80075f4 <_printf_i+0x1ac>
 80075ca:	07df      	lsls	r7, r3, #31
 80075cc:	bf44      	itt	mi
 80075ce:	f043 0320 	orrmi.w	r3, r3, #32
 80075d2:	6023      	strmi	r3, [r4, #0]
 80075d4:	b91e      	cbnz	r6, 80075de <_printf_i+0x196>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	f023 0320 	bic.w	r3, r3, #32
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	2310      	movs	r3, #16
 80075e0:	e7b0      	b.n	8007544 <_printf_i+0xfc>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	f043 0320 	orr.w	r3, r3, #32
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	2378      	movs	r3, #120	; 0x78
 80075ec:	4828      	ldr	r0, [pc, #160]	; (8007690 <_printf_i+0x248>)
 80075ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075f2:	e7e3      	b.n	80075bc <_printf_i+0x174>
 80075f4:	0659      	lsls	r1, r3, #25
 80075f6:	bf48      	it	mi
 80075f8:	b2b6      	uxthmi	r6, r6
 80075fa:	e7e6      	b.n	80075ca <_printf_i+0x182>
 80075fc:	4615      	mov	r5, r2
 80075fe:	e7bb      	b.n	8007578 <_printf_i+0x130>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	6826      	ldr	r6, [r4, #0]
 8007604:	6961      	ldr	r1, [r4, #20]
 8007606:	1d18      	adds	r0, r3, #4
 8007608:	6028      	str	r0, [r5, #0]
 800760a:	0635      	lsls	r5, r6, #24
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	d501      	bpl.n	8007614 <_printf_i+0x1cc>
 8007610:	6019      	str	r1, [r3, #0]
 8007612:	e002      	b.n	800761a <_printf_i+0x1d2>
 8007614:	0670      	lsls	r0, r6, #25
 8007616:	d5fb      	bpl.n	8007610 <_printf_i+0x1c8>
 8007618:	8019      	strh	r1, [r3, #0]
 800761a:	2300      	movs	r3, #0
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	4615      	mov	r5, r2
 8007620:	e7ba      	b.n	8007598 <_printf_i+0x150>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	1d1a      	adds	r2, r3, #4
 8007626:	602a      	str	r2, [r5, #0]
 8007628:	681d      	ldr	r5, [r3, #0]
 800762a:	6862      	ldr	r2, [r4, #4]
 800762c:	2100      	movs	r1, #0
 800762e:	4628      	mov	r0, r5
 8007630:	f7f8 fdee 	bl	8000210 <memchr>
 8007634:	b108      	cbz	r0, 800763a <_printf_i+0x1f2>
 8007636:	1b40      	subs	r0, r0, r5
 8007638:	6060      	str	r0, [r4, #4]
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	2300      	movs	r3, #0
 8007640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007644:	e7a8      	b.n	8007598 <_printf_i+0x150>
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	462a      	mov	r2, r5
 800764a:	4649      	mov	r1, r9
 800764c:	4640      	mov	r0, r8
 800764e:	47d0      	blx	sl
 8007650:	3001      	adds	r0, #1
 8007652:	d0ab      	beq.n	80075ac <_printf_i+0x164>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	079b      	lsls	r3, r3, #30
 8007658:	d413      	bmi.n	8007682 <_printf_i+0x23a>
 800765a:	68e0      	ldr	r0, [r4, #12]
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	4298      	cmp	r0, r3
 8007660:	bfb8      	it	lt
 8007662:	4618      	movlt	r0, r3
 8007664:	e7a4      	b.n	80075b0 <_printf_i+0x168>
 8007666:	2301      	movs	r3, #1
 8007668:	4632      	mov	r2, r6
 800766a:	4649      	mov	r1, r9
 800766c:	4640      	mov	r0, r8
 800766e:	47d0      	blx	sl
 8007670:	3001      	adds	r0, #1
 8007672:	d09b      	beq.n	80075ac <_printf_i+0x164>
 8007674:	3501      	adds	r5, #1
 8007676:	68e3      	ldr	r3, [r4, #12]
 8007678:	9903      	ldr	r1, [sp, #12]
 800767a:	1a5b      	subs	r3, r3, r1
 800767c:	42ab      	cmp	r3, r5
 800767e:	dcf2      	bgt.n	8007666 <_printf_i+0x21e>
 8007680:	e7eb      	b.n	800765a <_printf_i+0x212>
 8007682:	2500      	movs	r5, #0
 8007684:	f104 0619 	add.w	r6, r4, #25
 8007688:	e7f5      	b.n	8007676 <_printf_i+0x22e>
 800768a:	bf00      	nop
 800768c:	08007ac9 	.word	0x08007ac9
 8007690:	08007ada 	.word	0x08007ada

08007694 <_sbrk_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	; (80076b0 <_sbrk_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7f9 fb5e 	bl	8000d60 <_sbrk>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_sbrk_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_sbrk_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	2000028c 	.word	0x2000028c

080076b4 <__sread>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	460c      	mov	r4, r1
 80076b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076bc:	f000 f8a0 	bl	8007800 <_read_r>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	bfab      	itete	ge
 80076c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076c6:	89a3      	ldrhlt	r3, [r4, #12]
 80076c8:	181b      	addge	r3, r3, r0
 80076ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ce:	bfac      	ite	ge
 80076d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80076d2:	81a3      	strhlt	r3, [r4, #12]
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <__swrite>:
 80076d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	461f      	mov	r7, r3
 80076dc:	898b      	ldrh	r3, [r1, #12]
 80076de:	05db      	lsls	r3, r3, #23
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	4616      	mov	r6, r2
 80076e6:	d505      	bpl.n	80076f4 <__swrite+0x1e>
 80076e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ec:	2302      	movs	r3, #2
 80076ee:	2200      	movs	r2, #0
 80076f0:	f000 f868 	bl	80077c4 <_lseek_r>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	4632      	mov	r2, r6
 8007702:	463b      	mov	r3, r7
 8007704:	4628      	mov	r0, r5
 8007706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770a:	f000 b817 	b.w	800773c <_write_r>

0800770e <__sseek>:
 800770e:	b510      	push	{r4, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007716:	f000 f855 	bl	80077c4 <_lseek_r>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	bf15      	itete	ne
 8007720:	6560      	strne	r0, [r4, #84]	; 0x54
 8007722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800772a:	81a3      	strheq	r3, [r4, #12]
 800772c:	bf18      	it	ne
 800772e:	81a3      	strhne	r3, [r4, #12]
 8007730:	bd10      	pop	{r4, pc}

08007732 <__sclose>:
 8007732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007736:	f000 b813 	b.w	8007760 <_close_r>
	...

0800773c <_write_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d07      	ldr	r5, [pc, #28]	; (800775c <_write_r+0x20>)
 8007740:	4604      	mov	r4, r0
 8007742:	4608      	mov	r0, r1
 8007744:	4611      	mov	r1, r2
 8007746:	2200      	movs	r2, #0
 8007748:	602a      	str	r2, [r5, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	f7f9 fab7 	bl	8000cbe <_write>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_write_r+0x1e>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_write_r+0x1e>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	2000028c 	.word	0x2000028c

08007760 <_close_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d06      	ldr	r5, [pc, #24]	; (800777c <_close_r+0x1c>)
 8007764:	2300      	movs	r3, #0
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	f7f9 fac3 	bl	8000cf6 <_close>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_close_r+0x1a>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_close_r+0x1a>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	2000028c 	.word	0x2000028c

08007780 <_fstat_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	; (80077a0 <_fstat_r+0x20>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	f7f9 fabe 	bl	8000d0e <_fstat>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	d102      	bne.n	800779c <_fstat_r+0x1c>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	b103      	cbz	r3, 800779c <_fstat_r+0x1c>
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	bd38      	pop	{r3, r4, r5, pc}
 800779e:	bf00      	nop
 80077a0:	2000028c 	.word	0x2000028c

080077a4 <_isatty_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d06      	ldr	r5, [pc, #24]	; (80077c0 <_isatty_r+0x1c>)
 80077a8:	2300      	movs	r3, #0
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	602b      	str	r3, [r5, #0]
 80077b0:	f7f9 fabd 	bl	8000d2e <_isatty>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_isatty_r+0x1a>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_isatty_r+0x1a>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	2000028c 	.word	0x2000028c

080077c4 <_lseek_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d07      	ldr	r5, [pc, #28]	; (80077e4 <_lseek_r+0x20>)
 80077c8:	4604      	mov	r4, r0
 80077ca:	4608      	mov	r0, r1
 80077cc:	4611      	mov	r1, r2
 80077ce:	2200      	movs	r2, #0
 80077d0:	602a      	str	r2, [r5, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f7f9 fab6 	bl	8000d44 <_lseek>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_lseek_r+0x1e>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_lseek_r+0x1e>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	2000028c 	.word	0x2000028c

080077e8 <__malloc_lock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_lock+0x8>)
 80077ea:	f7ff bb1d 	b.w	8006e28 <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000280 	.word	0x20000280

080077f4 <__malloc_unlock>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__malloc_unlock+0x8>)
 80077f6:	f7ff bb18 	b.w	8006e2a <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000280 	.word	0x20000280

08007800 <_read_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	; (8007820 <_read_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7f9 fa38 	bl	8000c84 <_read>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_read_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_read_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	2000028c 	.word	0x2000028c

08007824 <_init>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr

08007830 <_fini>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr
