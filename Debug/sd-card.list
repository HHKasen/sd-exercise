
sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c24  08004c24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c2c  08004c2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08004ca4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004ca4  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba32  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd9  00000000  00000000  0002bad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022580  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd04  00000000  00000000  00050fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbe5b  00000000  00000000  0005dccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef0  00000000  00000000  00129b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a70 	.word	0x08004a70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004a70 	.word	0x08004a70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fbe6 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f8ce 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f99a 	bl	80008fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f96e 	bl	80008a8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005cc:	f000 f936 	bl	800083c <MX_SPI2_Init>
//  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */

  printf("\r\n-------------\r\n-------------\r\n  Starting...\r\n-------------\r\n-------------\r\n\r\n\r\n");
 80005d0:	485b      	ldr	r0, [pc, #364]	; (8000740 <main+0x18c>)
 80005d2:	f003 facf 	bl	8003b74 <puts>
//  sd_init();


  uint8_t buff[1024] = {0};
 80005d6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80005da:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fa34 	bl	8003a58 <memset>
  uint8_t buff2[1024] = {0};
 80005f0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80005f4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	3304      	adds	r3, #4
 80005fe:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fa27 	bl	8003a58 <memset>
  DSTATUS status = USER_initialize(0);
 800060a:	2000      	movs	r0, #0
 800060c:	f002 fe42 	bl	8003294 <USER_initialize>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
  printf("init status: %u\r\n",status);
 8000616:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 800061a:	4619      	mov	r1, r3
 800061c:	4849      	ldr	r0, [pc, #292]	; (8000744 <main+0x190>)
 800061e:	f003 fa23 	bl	8003a68 <iprintf>


  for(int ii=0; ii<1024; ii++){
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8000628:	e00d      	b.n	8000646 <main+0x92>
//	  buff2[ii] = ii&0xFF;
	  buff2[ii] = 0xAA;
 800062a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800062e:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 8000632:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000636:	4413      	add	r3, r2
 8000638:	22aa      	movs	r2, #170	; 0xaa
 800063a:	701a      	strb	r2, [r3, #0]
  for(int ii=0; ii<1024; ii++){
 800063c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000640:	3301      	adds	r3, #1
 8000642:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8000646:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800064a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800064e:	dbec      	blt.n	800062a <main+0x76>
  }
  status = USER_write(0,buff2,0,1);
 8000650:	f107 0108 	add.w	r1, r7, #8
 8000654:	2301      	movs	r3, #1
 8000656:	2200      	movs	r2, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f002 ffb7 	bl	80035cc <USER_write>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f

  printf("write status: %u\r\n",status);
 8000664:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 8000668:	4619      	mov	r1, r3
 800066a:	4837      	ldr	r0, [pc, #220]	; (8000748 <main+0x194>)
 800066c:	f003 f9fc 	bl	8003a68 <iprintf>

  status = USER_read(0,buff,0,2);
 8000670:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8000674:	2302      	movs	r3, #2
 8000676:	2200      	movs	r2, #0
 8000678:	2000      	movs	r0, #0
 800067a:	f002 febb 	bl	80033f4 <USER_read>
 800067e:	4603      	mov	r3, r0
 8000680:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
  printf("read status: %u\r\n",status);
 8000684:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 8000688:	4619      	mov	r1, r3
 800068a:	4830      	ldr	r0, [pc, #192]	; (800074c <main+0x198>)
 800068c:	f003 f9ec 	bl	8003a68 <iprintf>

//  read_block(0x0,buff);
//  read_block(0x1,buff);

  //Debug - print out block
  for(int ii=0; ii<1024; ii++){
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8000696:	e012      	b.n	80006be <main+0x10a>
	  printf("(%i,%i)\r\n",ii,buff[ii]);
 8000698:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800069c:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 80006a0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 80006ae:	4828      	ldr	r0, [pc, #160]	; (8000750 <main+0x19c>)
 80006b0:	f003 f9da 	bl	8003a68 <iprintf>
  for(int ii=0; ii<1024; ii++){
 80006b4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80006b8:	3301      	adds	r3, #1
 80006ba:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 80006be:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80006c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006c6:	dbe7      	blt.n	8000698 <main+0xe4>

  //Debug - print out block
  //for(int ii=0; ii<512; ii++){
//	  printf("(%i,%i)\r\n",ii,buff[ii]);
//  }
  int cbuff = 0;
 80006c8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80006cc:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
  status = USER_ioctl(0,CTRL_SYNC,NULL);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	2000      	movs	r0, #0
 80006da:	f003 f8c1 	bl	8003860 <USER_ioctl>
 80006de:	4603      	mov	r3, r0
 80006e0:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
  printf("status:%u \r\n",status);
 80006e4:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 80006e8:	4619      	mov	r1, r3
 80006ea:	481a      	ldr	r0, [pc, #104]	; (8000754 <main+0x1a0>)
 80006ec:	f003 f9bc 	bl	8003a68 <iprintf>
  //USER_ioctl(0,GET_SECTOR_COUNT,NULL);
  status = USER_ioctl(0,GET_BLOCK_SIZE, &cbuff);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	461a      	mov	r2, r3
 80006f4:	2103      	movs	r1, #3
 80006f6:	2000      	movs	r0, #0
 80006f8:	f003 f8b2 	bl	8003860 <USER_ioctl>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
  printf("status:%u \r\n",status);
 8000702:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 8000706:	4619      	mov	r1, r3
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <main+0x1a0>)
 800070a:	f003 f9ad 	bl	8003a68 <iprintf>
  printf("\tbuffer:%u \r\n",cbuff);
 800070e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8000712:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <main+0x1a4>)
 800071c:	f003 f9a4 	bl	8003a68 <iprintf>

  while (1)
  {
    /* USER CODE END WHILE */

	  int x = HAL_GetTick();
 8000720:	f000 fb9a 	bl	8000e58 <HAL_GetTick>
 8000724:	4603      	mov	r3, r0
 8000726:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
	  printf("Tick:%i\r\n",x);
 800072a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0x1a8>)
 8000730:	f003 f99a 	bl	8003a68 <iprintf>
	  HAL_Delay(50000);
 8000734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000738:	f000 fb9a 	bl	8000e70 <HAL_Delay>
  {
 800073c:	e7f0      	b.n	8000720 <main+0x16c>
 800073e:	bf00      	nop
 8000740:	08004a88 	.word	0x08004a88
 8000744:	08004adc 	.word	0x08004adc
 8000748:	08004af0 	.word	0x08004af0
 800074c:	08004b04 	.word	0x08004b04
 8000750:	08004b18 	.word	0x08004b18
 8000754:	08004b24 	.word	0x08004b24
 8000758:	08004b34 	.word	0x08004b34
 800075c:	08004b44 	.word	0x08004b44

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 f972 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemClock_Config+0xd4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a29      	ldr	r2, [pc, #164]	; (8000834 <SystemClock_Config+0xd4>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <SystemClock_Config+0xd8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a22      	ldr	r2, [pc, #136]	; (8000838 <SystemClock_Config+0xd8>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <SystemClock_Config+0xd8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d4:	2310      	movs	r3, #16
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f940 	bl	8001a74 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007fa:	f000 f8ff 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fde0 	bl	80013e0 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000826:	f000 f8e9 	bl	80009fc <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_SPI2_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000870:	2230      	movs	r2, #48	; 0x30
 8000872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI2_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_SPI2_Init+0x64>)
 800088e:	f001 fb8f 	bl	8001fb0 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f8b0 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	40003800 	.word	0x40003800

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f001 ff98 	bl	8002814 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f887 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000e4 	.word	0x200000e4
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <MX_GPIO_Init+0xd0>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <MX_GPIO_Init+0xd4>)
 8000988:	f000 fd10 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_GPIO_Init+0xd8>)
 80009a4:	f000 fb6e 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0xd4>)
 80009c0:	f000 fb60 	bl	8001084 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40020800 	.word	0x40020800

080009d8 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009e0:	1d39      	adds	r1, r7, #4
 80009e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e6:	2201      	movs	r2, #1
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <__io_putchar+0x20>)
 80009ea:	f001 ff60 	bl	80028ae <HAL_UART_Transmit>

  return ch;
 80009ee:	687b      	ldr	r3, [r7, #4]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000e4 	.word	0x200000e4

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f000 fae8 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_SPI_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12c      	bne.n	8000ad4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_SPI_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_SPI_MspInit+0x88>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_SPI_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_SPI_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_SPI_MspInit+0x88>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_SPI_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ab2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_SPI_MspInit+0x8c>)
 8000ad0:	f000 fad8 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40003800 	.word	0x40003800
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12b      	bne.n	8000b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x8c>)
 8000b5e:	f000 fa91 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f934 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bde:	f3af 8000 	nop.w
 8000be2:	4601      	mov	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
  }

  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e009      	b.n	8000c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fed9 	bl	80009d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf1      	blt.n	8000c18 <_write+0x12>
  }
  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
  return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f002 fe94 	bl	8003a04 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000128 	.word	0x20000128
 8000d10:	20000240 	.word	0x20000240

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 fe53 	bl	8003a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc23 	bl	80005b4 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d7c:	08004c34 	.word	0x08004c34
  ldr r2, =_sbss
 8000d80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d84:	20000240 	.word	0x20000240

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f931 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe22 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f93b 	bl	800106a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f000 f911 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000012c 	.word	0x2000012c

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000012c 	.word	0x2000012c

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff47 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff5c 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffb0 	bl	8000fd8 <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e165      	b.n	800136c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8154 	bne.w	8001366 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80ae 	beq.w	8001366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a5c      	ldr	r2, [pc, #368]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <HAL_GPIO_Init+0x300>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a58      	ldr	r2, [pc, #352]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x308>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x21a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x216>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_GPIO_Init+0x310>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x212>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x314>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_Init+0x318>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x20a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4a      	ldr	r2, [pc, #296]	; (80013a0 <HAL_GPIO_Init+0x31c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x206>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x320>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x202>
 8001282:	2306      	movs	r3, #6
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 8001286:	2307      	movs	r3, #7
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_GPIO_Init+0x324>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e2:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <HAL_GPIO_Init+0x324>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x324>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x324>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_GPIO_Init+0x324>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_GPIO_Init+0x324>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x324>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_GPIO_Init+0x324>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae96 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0cc      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d90c      	bls.n	800141c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0b8      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001434:	4b59      	ldr	r3, [pc, #356]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800143e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001458:	4b50      	ldr	r3, [pc, #320]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	494d      	ldr	r1, [pc, #308]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d044      	beq.n	8001500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d119      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e07f      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d003      	beq.n	800149e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149a:	2b03      	cmp	r3, #3
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06f      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e067      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4934      	ldr	r1, [pc, #208]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d0:	f7ff fcc2 	bl	8000e58 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff fcbe 	bl	8000e58 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e04f      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d20c      	bcs.n	8001528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e032      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4916      	ldr	r1, [pc, #88]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	490e      	ldr	r1, [pc, #56]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001566:	f000 f855 	bl	8001614 <HAL_RCC_GetSysClockFreq>
 800156a:	4602      	mov	r2, r0
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	5ccb      	ldrb	r3, [r1, r3]
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc22 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00
 800159c:	40023800 	.word	0x40023800
 80015a0:	08004b74 	.word	0x08004b74
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015c8:	f7ff fff0 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	0a9b      	lsrs	r3, r3, #10
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4903      	ldr	r1, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	08004b84 	.word	0x08004b84

080015ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015f0:	f7ff ffdc 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	0b5b      	lsrs	r3, r3, #13
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4903      	ldr	r1, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	08004b84 	.word	0x08004b84

08001614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001618:	b0ae      	sub	sp, #184	; 0xb8
 800161a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163a:	4bcb      	ldr	r3, [pc, #812]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b0c      	cmp	r3, #12
 8001644:	f200 8206 	bhi.w	8001a54 <HAL_RCC_GetSysClockFreq+0x440>
 8001648:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <HAL_RCC_GetSysClockFreq+0x3c>)
 800164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164e:	bf00      	nop
 8001650:	08001685 	.word	0x08001685
 8001654:	08001a55 	.word	0x08001a55
 8001658:	08001a55 	.word	0x08001a55
 800165c:	08001a55 	.word	0x08001a55
 8001660:	0800168d 	.word	0x0800168d
 8001664:	08001a55 	.word	0x08001a55
 8001668:	08001a55 	.word	0x08001a55
 800166c:	08001a55 	.word	0x08001a55
 8001670:	08001695 	.word	0x08001695
 8001674:	08001a55 	.word	0x08001a55
 8001678:	08001a55 	.word	0x08001a55
 800167c:	08001a55 	.word	0x08001a55
 8001680:	08001885 	.word	0x08001885
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4bb9      	ldr	r3, [pc, #740]	; (800196c <HAL_RCC_GetSysClockFreq+0x358>)
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800168a:	e1e7      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168c:	4bb8      	ldr	r3, [pc, #736]	; (8001970 <HAL_RCC_GetSysClockFreq+0x35c>)
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001692:	e1e3      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	4bb4      	ldr	r3, [pc, #720]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a0:	4bb1      	ldr	r3, [pc, #708]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d071      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4bae      	ldr	r3, [pc, #696]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016d2:	4622      	mov	r2, r4
 80016d4:	462b      	mov	r3, r5
 80016d6:	f04f 0000 	mov.w	r0, #0
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	0159      	lsls	r1, r3, #5
 80016e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e4:	0150      	lsls	r0, r2, #5
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4621      	mov	r1, r4
 80016ec:	1a51      	subs	r1, r2, r1
 80016ee:	6439      	str	r1, [r7, #64]	; 0x40
 80016f0:	4629      	mov	r1, r5
 80016f2:	eb63 0301 	sbc.w	r3, r3, r1
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001704:	4649      	mov	r1, r9
 8001706:	018b      	lsls	r3, r1, #6
 8001708:	4641      	mov	r1, r8
 800170a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800170e:	4641      	mov	r1, r8
 8001710:	018a      	lsls	r2, r1, #6
 8001712:	4641      	mov	r1, r8
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	63b9      	str	r1, [r7, #56]	; 0x38
 8001718:	4649      	mov	r1, r9
 800171a:	eb63 0301 	sbc.w	r3, r3, r1
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800172c:	4649      	mov	r1, r9
 800172e:	00cb      	lsls	r3, r1, #3
 8001730:	4641      	mov	r1, r8
 8001732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001736:	4641      	mov	r1, r8
 8001738:	00ca      	lsls	r2, r1, #3
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	4603      	mov	r3, r0
 8001740:	4622      	mov	r2, r4
 8001742:	189b      	adds	r3, r3, r2
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
 8001746:	462b      	mov	r3, r5
 8001748:	460a      	mov	r2, r1
 800174a:	eb42 0303 	adc.w	r3, r2, r3
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800175c:	4629      	mov	r1, r5
 800175e:	024b      	lsls	r3, r1, #9
 8001760:	4621      	mov	r1, r4
 8001762:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001766:	4621      	mov	r1, r4
 8001768:	024a      	lsls	r2, r1, #9
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001772:	2200      	movs	r2, #0
 8001774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800177c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001780:	f7fe fd96 	bl	80002b0 <__aeabi_uldivmod>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4613      	mov	r3, r2
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800178e:	e067      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4b75      	ldr	r3, [pc, #468]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800179c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017aa:	2300      	movs	r3, #0
 80017ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4621      	mov	r1, r4
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80017d0:	4629      	mov	r1, r5
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800180a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800180e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001812:	4692      	mov	sl, r2
 8001814:	469b      	mov	fp, r3
 8001816:	4623      	mov	r3, r4
 8001818:	eb1a 0303 	adds.w	r3, sl, r3
 800181c:	623b      	str	r3, [r7, #32]
 800181e:	462b      	mov	r3, r5
 8001820:	eb4b 0303 	adc.w	r3, fp, r3
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001832:	4629      	mov	r1, r5
 8001834:	028b      	lsls	r3, r1, #10
 8001836:	4621      	mov	r1, r4
 8001838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800183c:	4621      	mov	r1, r4
 800183e:	028a      	lsls	r2, r1, #10
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001848:	2200      	movs	r2, #0
 800184a:	673b      	str	r3, [r7, #112]	; 0x70
 800184c:	677a      	str	r2, [r7, #116]	; 0x74
 800184e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001852:	f7fe fd2d 	bl	80002b0 <__aeabi_uldivmod>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4613      	mov	r3, r2
 800185c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	3301      	adds	r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001882:	e0eb      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800188c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d06b      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_GetSysClockFreq+0x354>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	2200      	movs	r2, #0
 80018a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80018a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ae:	663b      	str	r3, [r7, #96]	; 0x60
 80018b0:	2300      	movs	r3, #0
 80018b2:	667b      	str	r3, [r7, #100]	; 0x64
 80018b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018b8:	4622      	mov	r2, r4
 80018ba:	462b      	mov	r3, r5
 80018bc:	f04f 0000 	mov.w	r0, #0
 80018c0:	f04f 0100 	mov.w	r1, #0
 80018c4:	0159      	lsls	r1, r3, #5
 80018c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ca:	0150      	lsls	r0, r2, #5
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4621      	mov	r1, r4
 80018d2:	1a51      	subs	r1, r2, r1
 80018d4:	61b9      	str	r1, [r7, #24]
 80018d6:	4629      	mov	r1, r5
 80018d8:	eb63 0301 	sbc.w	r3, r3, r1
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018ea:	4659      	mov	r1, fp
 80018ec:	018b      	lsls	r3, r1, #6
 80018ee:	4651      	mov	r1, sl
 80018f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018f4:	4651      	mov	r1, sl
 80018f6:	018a      	lsls	r2, r1, #6
 80018f8:	4651      	mov	r1, sl
 80018fa:	ebb2 0801 	subs.w	r8, r2, r1
 80018fe:	4659      	mov	r1, fp
 8001900:	eb63 0901 	sbc.w	r9, r3, r1
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001910:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001914:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001918:	4690      	mov	r8, r2
 800191a:	4699      	mov	r9, r3
 800191c:	4623      	mov	r3, r4
 800191e:	eb18 0303 	adds.w	r3, r8, r3
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	462b      	mov	r3, r5
 8001926:	eb49 0303 	adc.w	r3, r9, r3
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001938:	4629      	mov	r1, r5
 800193a:	024b      	lsls	r3, r1, #9
 800193c:	4621      	mov	r1, r4
 800193e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001942:	4621      	mov	r1, r4
 8001944:	024a      	lsls	r2, r1, #9
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800194e:	2200      	movs	r2, #0
 8001950:	65bb      	str	r3, [r7, #88]	; 0x58
 8001952:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001954:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001958:	f7fe fcaa 	bl	80002b0 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001966:	e065      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x420>
 8001968:	40023800 	.word	0x40023800
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001974:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x458>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	2200      	movs	r2, #0
 800197c:	4618      	mov	r0, r3
 800197e:	4611      	mov	r1, r2
 8001980:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001984:	653b      	str	r3, [r7, #80]	; 0x50
 8001986:	2300      	movs	r3, #0
 8001988:	657b      	str	r3, [r7, #84]	; 0x54
 800198a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800198e:	4642      	mov	r2, r8
 8001990:	464b      	mov	r3, r9
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0159      	lsls	r1, r3, #5
 800199c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a0:	0150      	lsls	r0, r2, #5
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4641      	mov	r1, r8
 80019a8:	1a51      	subs	r1, r2, r1
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	4649      	mov	r1, r9
 80019ae:	eb63 0301 	sbc.w	r3, r3, r1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019c0:	4659      	mov	r1, fp
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	4651      	mov	r1, sl
 80019c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ca:	4651      	mov	r1, sl
 80019cc:	018a      	lsls	r2, r1, #6
 80019ce:	4651      	mov	r1, sl
 80019d0:	1a54      	subs	r4, r2, r1
 80019d2:	4659      	mov	r1, fp
 80019d4:	eb63 0501 	sbc.w	r5, r3, r1
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	00eb      	lsls	r3, r5, #3
 80019e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e6:	00e2      	lsls	r2, r4, #3
 80019e8:	4614      	mov	r4, r2
 80019ea:	461d      	mov	r5, r3
 80019ec:	4643      	mov	r3, r8
 80019ee:	18e3      	adds	r3, r4, r3
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	464b      	mov	r3, r9
 80019f4:	eb45 0303 	adc.w	r3, r5, r3
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a06:	4629      	mov	r1, r5
 8001a08:	028b      	lsls	r3, r1, #10
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a10:	4621      	mov	r1, r4
 8001a12:	028a      	lsls	r2, r1, #10
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a26:	f7fe fc43 	bl	80002b0 <__aeabi_uldivmod>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4613      	mov	r3, r2
 8001a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0f1b      	lsrs	r3, r3, #28
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a52:	e003      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	37b8      	adds	r7, #184	; 0xb8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	00f42400 	.word	0x00f42400

08001a74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e28d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8083 	beq.w	8001b9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a94:	4b94      	ldr	r3, [pc, #592]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d019      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa0:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aac:	4b8e      	ldr	r3, [pc, #568]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b8b      	ldr	r3, [pc, #556]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d112      	bne.n	8001aec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad2:	d10b      	bne.n	8001aec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	4b84      	ldr	r3, [pc, #528]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d05b      	beq.n	8001b98 <HAL_RCC_OscConfig+0x124>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d157      	bne.n	8001b98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e25a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d106      	bne.n	8001b04 <HAL_RCC_OscConfig+0x90>
 8001af6:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7b      	ldr	r2, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xcc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0xb4>
 8001b0e:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a72      	ldr	r2, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xcc>
 8001b28:	4b6f      	ldr	r3, [pc, #444]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f986 	bl	8000e58 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f982 	bl	8000e58 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e21f      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xdc>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f972 	bl	8000e58 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f96e 	bl	8000e58 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e20b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x104>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d06f      	beq.n	8001c86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ba6:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d017      	beq.n	8001be2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bb2:	4b4d      	ldr	r3, [pc, #308]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x186>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1d3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x278>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f91b 	bl	8000e58 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f917 	bl	8000e58 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1b4      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x278>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f8fa 	bl	8000e58 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff f8f6 	bl	8000e58 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e193      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d036      	beq.n	8001d00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f8da 	bl	8000e58 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f8d6 	bl	8000e58 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e173      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x234>
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f8c3 	bl	8000e58 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	e00e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f8bf 	bl	8000e58 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d907      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e15c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	42470000 	.word	0x42470000
 8001cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b8a      	ldr	r3, [pc, #552]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ea      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8097 	beq.w	8001e3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a7e      	ldr	r2, [pc, #504]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <HAL_RCC_OscConfig+0x4b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x4b0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x4b0>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7ff f87f 	bl	8000e58 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff f87b 	bl	8000e58 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e118      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <HAL_RCC_OscConfig+0x4b0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x31e>
 8001d84:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x358>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x340>
 8001d9a:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	4a60      	ldr	r2, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
 8001da6:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6713      	str	r3, [r2, #112]	; 0x70
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x358>
 8001db4:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4a59      	ldr	r2, [pc, #356]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc0:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f840 	bl	8000e58 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff f83c 	bl	8000e58 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0d7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ee      	beq.n	8001ddc <HAL_RCC_OscConfig+0x368>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f82a 	bl	8000e58 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f826 	bl	8000e58 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0c1      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ee      	bne.n	8001e08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80ad 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d060      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d145      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x4b4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fffa 	bl	8000e58 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fff6 	bl	8000e58 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e093      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	071b      	lsls	r3, r3, #28
 8001eb2:	491b      	ldr	r1, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4b4>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7fe ffcb 	bl	8000e58 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe ffc7 	bl	8000e58 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e064      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x452>
 8001ee4:	e05c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_RCC_OscConfig+0x4b4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe ffb4 	bl	8000e58 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe ffb0 	bl	8000e58 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e04d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x480>
 8001f12:	e045      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e040      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40007000 	.word	0x40007000
 8001f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_RCC_OscConfig+0x538>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d030      	beq.n	8001f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d129      	bne.n	8001f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d122      	bne.n	8001f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d119      	bne.n	8001f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10f      	bne.n	8001f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07b      	b.n	80020ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d108      	bne.n	8001fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd2:	d009      	beq.n	8001fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
 8001fda:	e005      	b.n	8001fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fd28 	bl	8000a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	ea42 0103 	orr.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	f003 0104 	and.w	r1, r3, #4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f003 0210 	and.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b088      	sub	sp, #32
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_SPI_Transmit+0x22>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e126      	b.n	8002332 <HAL_SPI_Transmit+0x270>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ec:	f7fe feb4 	bl	8000e58 <HAL_GetTick>
 80020f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d002      	beq.n	8002108 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002102:	2302      	movs	r3, #2
 8002104:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002106:	e10b      	b.n	8002320 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_SPI_Transmit+0x52>
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002118:	e102      	b.n	8002320 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2203      	movs	r2, #3
 800211e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002160:	d10f      	bne.n	8002182 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002170:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002180:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d007      	beq.n	80021a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a8:	d14b      	bne.n	8002242 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_SPI_Transmit+0xf6>
 80021b2:	8afb      	ldrh	r3, [r7, #22]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d13e      	bne.n	8002236 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	1c9a      	adds	r2, r3, #2
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021dc:	e02b      	b.n	8002236 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d112      	bne.n	8002212 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	881a      	ldrh	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	1c9a      	adds	r2, r3, #2
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002210:	e011      	b.n	8002236 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002212:	f7fe fe21 	bl	8000e58 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d803      	bhi.n	800222a <HAL_SPI_Transmit+0x168>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002228:	d102      	bne.n	8002230 <HAL_SPI_Transmit+0x16e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002234:	e074      	b.n	8002320 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ce      	bne.n	80021de <HAL_SPI_Transmit+0x11c>
 8002240:	e04c      	b.n	80022dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Transmit+0x18e>
 800224a:	8afb      	ldrh	r3, [r7, #22]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d140      	bne.n	80022d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002276:	e02c      	b.n	80022d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d113      	bne.n	80022ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80022ac:	e011      	b.n	80022d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ae:	f7fe fdd3 	bl	8000e58 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d803      	bhi.n	80022c6 <HAL_SPI_Transmit+0x204>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c4:	d102      	bne.n	80022cc <HAL_SPI_Transmit+0x20a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022d0:	e026      	b.n	8002320 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1cd      	bne.n	8002278 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fa55 	bl	8002790 <SPI_EndRxTxTransaction>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	77fb      	strb	r3, [r7, #31]
 800231c:	e000      	b.n	8002320 <HAL_SPI_Transmit+0x25e>
  }

error:
 800231e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002330:	7ffb      	ldrb	r3, [r7, #31]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b08c      	sub	sp, #48	; 0x30
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002348:	2301      	movs	r3, #1
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_SPI_TransmitReceive+0x26>
 800235c:	2302      	movs	r3, #2
 800235e:	e18a      	b.n	8002676 <HAL_SPI_TransmitReceive+0x33c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002368:	f7fe fd76 	bl	8000e58 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002386:	2b01      	cmp	r3, #1
 8002388:	d00f      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x70>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002390:	d107      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x68>
 800239a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d003      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
 80023a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023a8:	e15b      	b.n	8002662 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x82>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x82>
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023c2:	e14e      	b.n	8002662 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d003      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d007      	beq.n	800242c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002434:	d178      	bne.n	8002528 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x10a>
 800243e:	8b7b      	ldrh	r3, [r7, #26]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d166      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	1c9a      	adds	r2, r3, #2
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002468:	e053      	b.n	8002512 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d11b      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x176>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x176>
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d113      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	1c9a      	adds	r2, r3, #2
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d119      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x1b8>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d014      	beq.n	80024f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	b292      	uxth	r2, r2
 80024d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	1c9a      	adds	r2, r3, #2
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024ee:	2301      	movs	r3, #1
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024f2:	f7fe fcb1 	bl	8000e58 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024fe:	429a      	cmp	r2, r3
 8002500:	d807      	bhi.n	8002512 <HAL_SPI_TransmitReceive+0x1d8>
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002508:	d003      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002510:	e0a7      	b.n	8002662 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1a6      	bne.n	800246a <HAL_SPI_TransmitReceive+0x130>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1a1      	bne.n	800246a <HAL_SPI_TransmitReceive+0x130>
 8002526:	e07c      	b.n	8002622 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x1fc>
 8002530:	8b7b      	ldrh	r3, [r7, #26]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d16b      	bne.n	800260e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800255c:	e057      	b.n	800260e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d11c      	bne.n	80025a6 <HAL_SPI_TransmitReceive+0x26c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d017      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x26c>
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d114      	bne.n	80025a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d119      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x2ae>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d014      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025e8:	f7fe fc36 	bl	8000e58 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d803      	bhi.n	8002600 <HAL_SPI_TransmitReceive+0x2c6>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025fe:	d102      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x2cc>
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800260c:	e029      	b.n	8002662 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1a2      	bne.n	800255e <HAL_SPI_TransmitReceive+0x224>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d19d      	bne.n	800255e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f8b2 	bl	8002790 <SPI_EndRxTxTransaction>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800263e:	e010      	b.n	8002662 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	e000      	b.n	8002662 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002676:	4618      	mov	r0, r3
 8002678:	3730      	adds	r7, #48	; 0x30
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002690:	f7fe fbe2 	bl	8000e58 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026a0:	f7fe fbda 	bl	8000e58 <HAL_GetTick>
 80026a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	0d1b      	lsrs	r3, r3, #20
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026b6:	e054      	b.n	8002762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026be:	d050      	beq.n	8002762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026c0:	f7fe fbca 	bl	8000e58 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d902      	bls.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d13d      	bne.n	8002752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ee:	d111      	bne.n	8002714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f8:	d004      	beq.n	8002704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	d107      	bne.n	8002714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271c:	d10f      	bne.n	800273e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800273c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e017      	b.n	8002782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3b01      	subs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4013      	ands	r3, r2
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	429a      	cmp	r2, r3
 800277e:	d19b      	bne.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000

08002790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <SPI_EndRxTxTransaction+0x7c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <SPI_EndRxTxTransaction+0x80>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0d5b      	lsrs	r3, r3, #21
 80027a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d112      	bne.n	80027e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff ff5a 	bl	8002680 <SPI_WaitFlagStateUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e00f      	b.n	8002802 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d0f2      	beq.n	80027e2 <SPI_EndRxTxTransaction+0x52>
 80027fc:	e000      	b.n	8002800 <SPI_EndRxTxTransaction+0x70>
        break;
 80027fe:	bf00      	nop
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000000 	.word	0x20000000
 8002810:	165e9f81 	.word	0x165e9f81

08002814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e03f      	b.n	80028a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe f954 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f929 	bl	8002ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800286c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800287c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800288c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b08a      	sub	sp, #40	; 0x28
 80028b2:	af02      	add	r7, sp, #8
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d17c      	bne.n	80029c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_UART_Transmit+0x2c>
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e075      	b.n	80029ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_UART_Transmit+0x3e>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e06e      	b.n	80029ca <HAL_UART_Transmit+0x11c>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	; 0x21
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002902:	f7fe faa9 	bl	8000e58 <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d108      	bne.n	8002930 <HAL_UART_Transmit+0x82>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d104      	bne.n	8002930 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	e003      	b.n	8002938 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002940:	e02a      	b.n	8002998 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f840 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e036      	b.n	80029ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	3302      	adds	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e007      	b.n	800298a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1cf      	bne.n	8002942 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f810 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e006      	b.n	80029ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b090      	sub	sp, #64	; 0x40
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e2:	e050      	b.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ea:	d04c      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80029f2:	f7fe fa31 	bl	8000e58 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d241      	bcs.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a22:	637a      	str	r2, [r7, #52]	; 0x34
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	613b      	str	r3, [r7, #16]
   return(result);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3314      	adds	r3, #20
 8002a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a56:	623a      	str	r2, [r7, #32]
 8002a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	69f9      	ldr	r1, [r7, #28]
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e5      	bne.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d09f      	beq.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3740      	adds	r7, #64	; 0x40
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b0c0      	sub	sp, #256	; 0x100
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	ea40 0301 	orr.w	r3, r0, r1
 8002ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b08:	f021 010c 	bic.w	r1, r1, #12
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b16:	430b      	orrs	r3, r1
 8002b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	6999      	ldr	r1, [r3, #24]
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	ea40 0301 	orr.w	r3, r0, r1
 8002b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b8f      	ldr	r3, [pc, #572]	; (8002d7c <UART_SetConfig+0x2cc>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d005      	beq.n	8002b50 <UART_SetConfig+0xa0>
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <UART_SetConfig+0x2d0>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d104      	bne.n	8002b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7fe fd4c 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8002b54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b58:	e003      	b.n	8002b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7fe fd33 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8002b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6c:	f040 810c 	bne.w	8002d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b92:	4621      	mov	r1, r4
 8002b94:	eb12 0801 	adds.w	r8, r2, r1
 8002b98:	4629      	mov	r1, r5
 8002b9a:	eb43 0901 	adc.w	r9, r3, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb2:	4690      	mov	r8, r2
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	eb18 0303 	adds.w	r3, r8, r3
 8002bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	eb49 0303 	adc.w	r3, r9, r3
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bde:	460b      	mov	r3, r1
 8002be0:	18db      	adds	r3, r3, r3
 8002be2:	653b      	str	r3, [r7, #80]	; 0x50
 8002be4:	4613      	mov	r3, r2
 8002be6:	eb42 0303 	adc.w	r3, r2, r3
 8002bea:	657b      	str	r3, [r7, #84]	; 0x54
 8002bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bf4:	f7fd fb5c 	bl	80002b0 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	011c      	lsls	r4, r3, #4
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c20:	415b      	adcs	r3, r3
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c28:	4641      	mov	r1, r8
 8002c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c2e:	4649      	mov	r1, r9
 8002c30:	eb43 0b01 	adc.w	fp, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c48:	4692      	mov	sl, r2
 8002c4a:	469b      	mov	fp, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c56:	464b      	mov	r3, r9
 8002c58:	eb4b 0303 	adc.w	r3, fp, r3
 8002c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	647b      	str	r3, [r7, #68]	; 0x44
 8002c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c8a:	f7fd fb11 	bl	80002b0 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002c96:	fba3 2301 	umull	r2, r3, r3, r1
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2264      	movs	r2, #100	; 0x64
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	1acb      	subs	r3, r1, r3
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002cac:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cb8:	441c      	add	r4, r3
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d30:	460b      	mov	r3, r1
 8002d32:	18db      	adds	r3, r3, r3
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d36:	4613      	mov	r3, r2
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d46:	f7fd fab3 	bl	80002b0 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <UART_SetConfig+0x2d4>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4422      	add	r2, r4
 8002d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d78:	e105      	b.n	8002f86 <UART_SetConfig+0x4d6>
 8002d7a:	bf00      	nop
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40011400 	.word	0x40011400
 8002d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	1891      	adds	r1, r2, r2
 8002da0:	6239      	str	r1, [r7, #32]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002daa:	4641      	mov	r1, r8
 8002dac:	1854      	adds	r4, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb43 0501 	adc.w	r5, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dd0:	464b      	mov	r3, r9
 8002dd2:	eb45 0303 	adc.w	r3, r5, r3
 8002dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002df6:	4629      	mov	r1, r5
 8002df8:	008b      	lsls	r3, r1, #2
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e00:	4621      	mov	r1, r4
 8002e02:	008a      	lsls	r2, r1, #2
 8002e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e08:	f7fd fa52 	bl	80002b0 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002e12:	fba3 2302 	umull	r2, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	011c      	lsls	r4, r3, #4
 8002e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	464b      	mov	r3, r9
 8002e30:	1891      	adds	r1, r2, r2
 8002e32:	61b9      	str	r1, [r7, #24]
 8002e34:	415b      	adcs	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	1851      	adds	r1, r2, r1
 8002e40:	6139      	str	r1, [r7, #16]
 8002e42:	4649      	mov	r1, r9
 8002e44:	414b      	adcs	r3, r1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e54:	4659      	mov	r1, fp
 8002e56:	00cb      	lsls	r3, r1, #3
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5e:	4651      	mov	r1, sl
 8002e60:	00ca      	lsls	r2, r1, #3
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	4642      	mov	r2, r8
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e70:	464b      	mov	r3, r9
 8002e72:	460a      	mov	r2, r1
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e94:	4649      	mov	r1, r9
 8002e96:	008b      	lsls	r3, r1, #2
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	008a      	lsls	r2, r1, #2
 8002ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ea6:	f7fd fa03 	bl	80002b0 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	2164      	movs	r1, #100	; 0x64
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	3332      	adds	r3, #50	; 0x32
 8002ec2:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ece:	441c      	add	r4, r3
 8002ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ed8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ede:	4642      	mov	r2, r8
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	1891      	adds	r1, r2, r2
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	415b      	adcs	r3, r3
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eee:	4641      	mov	r1, r8
 8002ef0:	1851      	adds	r1, r2, r1
 8002ef2:	6039      	str	r1, [r7, #0]
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	414b      	adcs	r3, r1
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f06:	4659      	mov	r1, fp
 8002f08:	00cb      	lsls	r3, r1, #3
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f10:	4651      	mov	r1, sl
 8002f12:	00ca      	lsls	r2, r1, #3
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f20:	464b      	mov	r3, r9
 8002f22:	460a      	mov	r2, r1
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	663b      	str	r3, [r7, #96]	; 0x60
 8002f34:	667a      	str	r2, [r7, #100]	; 0x64
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f42:	4649      	mov	r1, r9
 8002f44:	008b      	lsls	r3, r1, #2
 8002f46:	4641      	mov	r1, r8
 8002f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	008a      	lsls	r2, r1, #2
 8002f50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f54:	f7fd f9ac 	bl	80002b0 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2164      	movs	r1, #100	; 0x64
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	3332      	adds	r3, #50	; 0x32
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <UART_SetConfig+0x4e4>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4422      	add	r2, r4
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	bf00      	nop
 8002f88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f92:	bf00      	nop
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <GenerateCRCTable>:
void get_trail(uint8_t* ocr);
uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg);


void GenerateCRCTable()
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
  int i, j;
  uint8_t CRCPoly = 0x89;  // the value of our CRC-7 polynomial
 8002f9e:	2389      	movs	r3, #137	; 0x89
 8002fa0:	71fb      	strb	r3, [r7, #7]

  // generate a table value for all 256 possible byte values
  for (i = 0; i < 256; ++i) {
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e03c      	b.n	8003022 <GenerateCRCTable+0x8a>
    CRCTable[i] = (i & 0x80) ? i ^ CRCPoly : i;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <GenerateCRCTable+0x2a>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	4053      	eors	r3, r2
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e001      	b.n	8002fc6 <GenerateCRCTable+0x2e>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	491c      	ldr	r1, [pc, #112]	; (8003038 <GenerateCRCTable+0xa0>)
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	440a      	add	r2, r1
 8002fcc:	7013      	strb	r3, [r2, #0]
    for (j = 1; j < 8; ++j) {
 8002fce:	2301      	movs	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	e020      	b.n	8003016 <GenerateCRCTable+0x7e>
        CRCTable[i] <<= 1;
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <GenerateCRCTable+0xa0>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	b2d9      	uxtb	r1, r3
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <GenerateCRCTable+0xa0>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]
        if (CRCTable[i] & 0x80){
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <GenerateCRCTable+0xa0>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0b      	bge.n	8003010 <GenerateCRCTable+0x78>
            CRCTable[i] ^= CRCPoly;
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <GenerateCRCTable+0xa0>)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4053      	eors	r3, r2
 8003004:	b2d9      	uxtb	r1, r3
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <GenerateCRCTable+0xa0>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	460a      	mov	r2, r1
 800300e:	701a      	strb	r2, [r3, #0]
    for (j = 1; j < 8; ++j) {
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3301      	adds	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b07      	cmp	r3, #7
 800301a:	dddb      	ble.n	8002fd4 <GenerateCRCTable+0x3c>
  for (i = 0; i < 256; ++i) {
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2bff      	cmp	r3, #255	; 0xff
 8003026:	ddbf      	ble.n	8002fa8 <GenerateCRCTable+0x10>
        }
    }
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000130 	.word	0x20000130

0800303c <CRCAdd>:

uint8_t CRCAdd(uint8_t CRC_val , uint8_t message_byte){
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	460a      	mov	r2, r1
 8003046:	71fb      	strb	r3, [r7, #7]
 8003048:	4613      	mov	r3, r2
 800304a:	71bb      	strb	r3, [r7, #6]
	 return CRCTable[(CRC_val << 1) ^ message_byte];
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	005a      	lsls	r2, r3, #1
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	4053      	eors	r3, r2
 8003054:	4a03      	ldr	r2, [pc, #12]	; (8003064 <CRCAdd+0x28>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	20000130 	.word	0x20000130

08003068 <getCRC>:


// returns the CRC-7 for a message of "length" bytes
uint8_t getCRC(uint8_t message[], int length)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]

  int i;
  uint8_t CRC_val = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	72fb      	strb	r3, [r7, #11]

  for (i = 0; i < length; ++i){
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e00d      	b.n	8003098 <getCRC+0x30>
	  CRC_val = CRCAdd(CRC_val, message[i]);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	7afb      	ldrb	r3, [r7, #11]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ffd7 	bl	800303c <CRCAdd>
 800308e:	4603      	mov	r3, r0
 8003090:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length; ++i){
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbed      	blt.n	800307c <getCRC+0x14>
  }

  return CRC_val;
 80030a0:	7afb      	ldrb	r3, [r7, #11]

}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <send_SD_cmd>:

uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b094      	sub	sp, #80	; 0x50
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]

	//should assert that resp!=NULL
	if( (cmd==ACMD41)||(cmd==ACMD23)){
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b29      	cmp	r3, #41	; 0x29
 80030bc:	d002      	beq.n	80030c4 <send_SD_cmd+0x18>
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b57      	cmp	r3, #87	; 0x57
 80030c2:	d10c      	bne.n	80030de <send_SD_cmd+0x32>
		uint8_t acmd_resp = send_SD_cmd(CMD55,0);
 80030c4:	2100      	movs	r1, #0
 80030c6:	2037      	movs	r0, #55	; 0x37
 80030c8:	f7ff fff0 	bl	80030ac <send_SD_cmd>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(acmd_resp == 0xFF){
 80030d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d101      	bne.n	80030de <send_SD_cmd+0x32>
			return 0xFF;
 80030da:	23ff      	movs	r3, #255	; 0xff
 80030dc:	e08e      	b.n	80031fc <send_SD_cmd+0x150>
		}
	}


	uint8_t tx_high = 0xFF;
 80030de:	23ff      	movs	r3, #255	; 0xff
 80030e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t MSG[35] = {'\0'};
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	f107 0318 	add.w	r3, r7, #24
 80030ec:	221f      	movs	r2, #31
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fcb1 	bl	8003a58 <memset>
	uint8_t spi_rx = 0xFF;
 80030f6:	23ff      	movs	r3, #255	; 0xff
 80030f8:	74fb      	strb	r3, [r7, #19]
	uint8_t rec_res = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 8003100:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003104:	2332      	movs	r3, #50	; 0x32
 8003106:	2201      	movs	r2, #1
 8003108:	483e      	ldr	r0, [pc, #248]	; (8003204 <send_SD_cmd+0x158>)
 800310a:	f7fe ffda 	bl	80020c2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 800310e:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003112:	2332      	movs	r3, #50	; 0x32
 8003114:	2201      	movs	r2, #1
 8003116:	483b      	ldr	r0, [pc, #236]	; (8003204 <send_SD_cmd+0x158>)
 8003118:	f7fe ffd3 	bl	80020c2 <HAL_SPI_Transmit>


	HAL_StatusTypeDef status;
	uint8_t spi_tx_bf[6] = {0};
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	2300      	movs	r3, #0
 8003122:	823b      	strh	r3, [r7, #16]

	spi_tx_bf[0] = (0x40)| cmd;
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312a:	b2db      	uxtb	r3, r3
 800312c:	733b      	strb	r3, [r7, #12]

	spi_tx_bf[4] =  cmd_arg & 0x000000FF;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	743b      	strb	r3, [r7, #16]
	spi_tx_bf[3] = (cmd_arg & 0x0000FF00) >> 8;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b2db      	uxtb	r3, r3
 800313a:	73fb      	strb	r3, [r7, #15]
	spi_tx_bf[2] = (cmd_arg & 0x00FF0000) >> 16;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	b2db      	uxtb	r3, r3
 8003142:	73bb      	strb	r3, [r7, #14]
	spi_tx_bf[1] = (cmd_arg & 0xFF000000) >> 24;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	0e1b      	lsrs	r3, r3, #24
 8003148:	b2db      	uxtb	r3, r3
 800314a:	737b      	strb	r3, [r7, #13]

	spi_tx_bf[5] = (getCRC(spi_tx_bf,5)<<1)  + 1;
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	2105      	movs	r1, #5
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff88 	bl	8003068 <getCRC>
 8003158:	4603      	mov	r3, r0
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	747b      	strb	r3, [r7, #17]

	//printf(MSG, "cmd:%u %u %u %u %u %u\r\n",spi_tx_bf[0],spi_tx_bf[1],spi_tx_bf[2],spi_tx_bf[3],spi_tx_bf[4],spi_tx_bf[5]);

    HAL_SPI_Transmit(&HSPI, spi_tx_bf , 6, 50);
 8003164:	f107 010c 	add.w	r1, r7, #12
 8003168:	2332      	movs	r3, #50	; 0x32
 800316a:	2206      	movs	r2, #6
 800316c:	4825      	ldr	r0, [pc, #148]	; (8003204 <send_SD_cmd+0x158>)
 800316e:	f7fe ffa8 	bl	80020c2 <HAL_SPI_Transmit>

	int count = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	643b      	str	r3, [r7, #64]	; 0x40


	while( count<N_CS && !rec_res  ){
 8003176:	e013      	b.n	80031a0 <send_SD_cmd+0xf4>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx , 1, 50);
 8003178:	f107 0213 	add.w	r2, r7, #19
 800317c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003180:	2332      	movs	r3, #50	; 0x32
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2301      	movs	r3, #1
 8003186:	481f      	ldr	r0, [pc, #124]	; (8003204 <send_SD_cmd+0x158>)
 8003188:	f7ff f8d7 	bl	800233a <HAL_SPI_TransmitReceive>
		if( (spi_rx&0x80) == 0){
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	b25b      	sxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	db02      	blt.n	800319a <send_SD_cmd+0xee>
			rec_res = 1;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		//printf("resp:%u\r\n",spi_rx);

		count++;
 800319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319c:	3301      	adds	r3, #1
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
	while( count<N_CS && !rec_res  ){
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	2b07      	cmp	r3, #7
 80031a4:	dc03      	bgt.n	80031ae <send_SD_cmd+0x102>
 80031a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0e4      	beq.n	8003178 <send_SD_cmd+0xcc>
	}


	if(cmd!=CMD58 && cmd!=CMD8 && cmd!=CMD9 && spi_rx!=0xFF){
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b3a      	cmp	r3, #58	; 0x3a
 80031b2:	d022      	beq.n	80031fa <send_SD_cmd+0x14e>
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d01f      	beq.n	80031fa <send_SD_cmd+0x14e>
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d01c      	beq.n	80031fa <send_SD_cmd+0x14e>
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d019      	beq.n	80031fa <send_SD_cmd+0x14e>
		uint8_t spi_rx_clear = 0x0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	72fb      	strb	r3, [r7, #11]

		for(int ii=0; ii<8; ii++){
 80031ca:	2300      	movs	r3, #0
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ce:	e00f      	b.n	80031f0 <send_SD_cmd+0x144>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 80031d0:	f107 020b 	add.w	r2, r7, #11
 80031d4:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80031d8:	2332      	movs	r3, #50	; 0x32
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2301      	movs	r3, #1
 80031de:	4809      	ldr	r0, [pc, #36]	; (8003204 <send_SD_cmd+0x158>)
 80031e0:	f7ff f8ab 	bl	800233a <HAL_SPI_TransmitReceive>
			if(spi_rx_clear==0xFF){
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	2bff      	cmp	r3, #255	; 0xff
 80031e8:	d006      	beq.n	80031f8 <send_SD_cmd+0x14c>
		for(int ii=0; ii<8; ii++){
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	3301      	adds	r3, #1
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	2b07      	cmp	r3, #7
 80031f4:	ddec      	ble.n	80031d0 <send_SD_cmd+0x124>
 80031f6:	e000      	b.n	80031fa <send_SD_cmd+0x14e>
				break;
 80031f8:	bf00      	nop
			}
		}
	}

	return spi_rx;
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3748      	adds	r7, #72	; 0x48
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	2000008c 	.word	0x2000008c

08003208 <get_trail>:

void get_trail(uint8_t* ocr){
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
	    uint8_t tx_high = 0xFF;
 8003210:	23ff      	movs	r3, #255	; 0xff
 8003212:	75fb      	strb	r3, [r7, #23]
		uint8_t rx_buff[4] = {0};
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr, 1, 50);
 8003218:	f107 0117 	add.w	r1, r7, #23
 800321c:	2332      	movs	r3, #50	; 0x32
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	481a      	ldr	r0, [pc, #104]	; (8003290 <get_trail+0x88>)
 8003226:	f7ff f888 	bl	800233a <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+1, 1, 50);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	f107 0117 	add.w	r1, r7, #23
 8003232:	2332      	movs	r3, #50	; 0x32
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2301      	movs	r3, #1
 8003238:	4815      	ldr	r0, [pc, #84]	; (8003290 <get_trail+0x88>)
 800323a:	f7ff f87e 	bl	800233a <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+2, 1, 50);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1c9a      	adds	r2, r3, #2
 8003242:	f107 0117 	add.w	r1, r7, #23
 8003246:	2332      	movs	r3, #50	; 0x32
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2301      	movs	r3, #1
 800324c:	4810      	ldr	r0, [pc, #64]	; (8003290 <get_trail+0x88>)
 800324e:	f7ff f874 	bl	800233a <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+3, 1, 50);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1cda      	adds	r2, r3, #3
 8003256:	f107 0117 	add.w	r1, r7, #23
 800325a:	2332      	movs	r3, #50	; 0x32
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2301      	movs	r3, #1
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <get_trail+0x88>)
 8003262:	f7ff f86a 	bl	800233a <HAL_SPI_TransmitReceive>


		//sprintf(MSG, "trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
		//printf("trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		uint8_t spi_rx_clear = 0x0;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
		while(spi_rx_clear!=0xFF){
 800326a:	e009      	b.n	8003280 <get_trail+0x78>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 800326c:	f107 020f 	add.w	r2, r7, #15
 8003270:	f107 0117 	add.w	r1, r7, #23
 8003274:	2332      	movs	r3, #50	; 0x32
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2301      	movs	r3, #1
 800327a:	4805      	ldr	r0, [pc, #20]	; (8003290 <get_trail+0x88>)
 800327c:	f7ff f85d 	bl	800233a <HAL_SPI_TransmitReceive>
		while(spi_rx_clear!=0xFF){
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2bff      	cmp	r3, #255	; 0xff
 8003284:	d1f2      	bne.n	800326c <get_trail+0x64>
		}
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	2000008c 	.word	0x2000008c

08003294 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    Stat = STA_NOINIT;
 800329e:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <USER_initialize+0x134>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
	if(pdrv!=0){
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <USER_initialize+0x1e>
	  return Stat;
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <USER_initialize+0x134>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e085      	b.n	80033be <USER_initialize+0x12a>
	}

    GenerateCRCTable();
 80032b2:	f7ff fe71 	bl	8002f98 <GenerateCRCTable>


    uint8_t spi_tx = 0xFF;
 80032b6:	23ff      	movs	r3, #255	; 0xff
 80032b8:	73fb      	strb	r3, [r7, #15]


    SD_CS_HIGH();
 80032ba:	2201      	movs	r2, #1
 80032bc:	2102      	movs	r1, #2
 80032be:	4843      	ldr	r0, [pc, #268]	; (80033cc <USER_initialize+0x138>)
 80032c0:	f7fe f874 	bl	80013ac <HAL_GPIO_WritePin>

    HAL_Delay(50); //delay at least 1 ms
 80032c4:	2032      	movs	r0, #50	; 0x32
 80032c6:	f7fd fdd3 	bl	8000e70 <HAL_Delay>

    //only need 72, do a bunch more
    for(int ii = 0; ii<10; ii++){
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e009      	b.n	80032e4 <USER_initialize+0x50>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 80032d0:	f107 010f 	add.w	r1, r7, #15
 80032d4:	2300      	movs	r3, #0
 80032d6:	2201      	movs	r2, #1
 80032d8:	483d      	ldr	r0, [pc, #244]	; (80033d0 <USER_initialize+0x13c>)
 80032da:	f7fe fef2 	bl	80020c2 <HAL_SPI_Transmit>
    for(int ii = 0; ii<10; ii++){
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b09      	cmp	r3, #9
 80032e8:	ddf2      	ble.n	80032d0 <USER_initialize+0x3c>
    }

    uint8_t R1_resp = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    uint8_t ocr[4] = {0};
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]


    SD_CS_LOW();
 80032f2:	2200      	movs	r2, #0
 80032f4:	2102      	movs	r1, #2
 80032f6:	4835      	ldr	r0, [pc, #212]	; (80033cc <USER_initialize+0x138>)
 80032f8:	f7fe f858 	bl	80013ac <HAL_GPIO_WritePin>

    //online comments indicate this makes things more consistent
    for(int ii = 0; ii<2; ii++){
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e009      	b.n	8003316 <USER_initialize+0x82>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 8003302:	f107 010f 	add.w	r1, r7, #15
 8003306:	2300      	movs	r3, #0
 8003308:	2201      	movs	r2, #1
 800330a:	4831      	ldr	r0, [pc, #196]	; (80033d0 <USER_initialize+0x13c>)
 800330c:	f7fe fed9 	bl	80020c2 <HAL_SPI_Transmit>
    for(int ii = 0; ii<2; ii++){
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	3301      	adds	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b01      	cmp	r3, #1
 800331a:	ddf2      	ble.n	8003302 <USER_initialize+0x6e>
    }

    R1_resp = send_SD_cmd(CMD0,0);
 800331c:	2100      	movs	r1, #0
 800331e:	2000      	movs	r0, #0
 8003320:	f7ff fec4 	bl	80030ac <send_SD_cmd>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]


    if(R1_resp == 0x01){
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d144      	bne.n	80033b8 <USER_initialize+0x124>


  	  R1_resp = send_SD_cmd(CMD8,0x01AA);
 800332e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003332:	2008      	movs	r0, #8
 8003334:	f7ff feba 	bl	80030ac <send_SD_cmd>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]
  	  get_trail(ocr);
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff61 	bl	8003208 <get_trail>


  	  if( (R1_resp!=0x01)){ //if error or no response, SD1 or MMC
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d135      	bne.n	80033b8 <USER_initialize+0x124>
  		  //Won't support this

  	  }
  	  else if( (ocr[2] == 0x01)&&(ocr[3] == 0xAA)  ){ //SD v2
 800334c:	7abb      	ldrb	r3, [r7, #10]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d132      	bne.n	80033b8 <USER_initialize+0x124>
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	2baa      	cmp	r3, #170	; 0xaa
 8003356:	d12f      	bne.n	80033b8 <USER_initialize+0x124>
  		  //printf("SD 2.0+\r\n");



  		  uint32_t t_init = HAL_GetTick();
 8003358:	f7fd fd7e 	bl	8000e58 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 800335e:	e009      	b.n	8003374 <USER_initialize+0xe0>


  			  R1_resp = send_SD_cmd(ACMD41,0x40000000);
 8003360:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003364:	2029      	movs	r0, #41	; 0x29
 8003366:	f7ff fea1 	bl	80030ac <send_SD_cmd>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]

  			  if(R1_resp==0x00){
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <USER_initialize+0xf2>
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 8003374:	f7fd fd70 	bl	8000e58 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003382:	d3ed      	bcc.n	8003360 <USER_initialize+0xcc>
 8003384:	e000      	b.n	8003388 <USER_initialize+0xf4>
  				  break;
 8003386:	bf00      	nop
  		  }




  		  R1_resp = send_SD_cmd(CMD58,0x00000000);
 8003388:	2100      	movs	r1, #0
 800338a:	203a      	movs	r0, #58	; 0x3a
 800338c:	f7ff fe8e 	bl	80030ac <send_SD_cmd>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]
  		  get_trail(ocr);
 8003394:	f107 0308 	add.w	r3, r7, #8
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff35 	bl	8003208 <get_trail>

  		  //printf("OCR status:\r\n");
  		  //printf("\tCCS(0=bytes,1=blocks):%u\r\n", (ocr[0]>>6)&0x01 );

  		  //force 512 byte blocks
  		  R1_resp = send_SD_cmd(CMD16,0x00000200);
 800339e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a2:	2010      	movs	r0, #16
 80033a4:	f7ff fe82 	bl	80030ac <send_SD_cmd>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]


  		  //I don't, but could check voltage here
  		  Stat=0;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <USER_initialize+0x134>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
  		  //after init, can speed up spi
  		  HSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <USER_initialize+0x13c>)
 80033b4:	2210      	movs	r2, #16
 80033b6:	61da      	str	r2, [r3, #28]
    else{
  	  //printf("error, CMD0 response:%u\r\n",R1_resp);
    }


    return Stat;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <USER_initialize+0x134>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000009 	.word	0x20000009
 80033cc:	40020400 	.word	0x40020400
 80033d0:	2000008c 	.word	0x2000008c

080033d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    //Stat = STA_NOINIT;
    return Stat;
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <USER_status+0x1c>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	20000009 	.word	0x20000009

080033f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	; 0x38
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN READ */

	if(pdrv!=0){
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <USER_read+0x1a>
		return RES_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0d7      	b.n	80035be <USER_read+0x1ca>
	}
	if(USER_status(pdrv)!=0){
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ffdf 	bl	80033d4 <USER_status>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <USER_read+0x2c>
		return RES_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0ce      	b.n	80035be <USER_read+0x1ca>
	}


	if(count==0){
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <USER_read+0x36>
	    return RES_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e0c9      	b.n	80035be <USER_read+0x1ca>
	}
	else if(count==1){
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d149      	bne.n	80034c4 <USER_read+0xd0>
	  uint8_t R1_resp = send_SD_cmd(CMD17,sector);
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	2011      	movs	r0, #17
 8003434:	f7ff fe3a 	bl	80030ac <send_SD_cmd>
 8003438:	4603      	mov	r3, r0
 800343a:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 800343c:	23ff      	movs	r3, #255	; 0xff
 800343e:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8003440:	23ff      	movs	r3, #255	; 0xff
 8003442:	763b      	strb	r3, [r7, #24]

	  int ii = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 8003448:	e00c      	b.n	8003464 <USER_read+0x70>
		ii++;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	3301      	adds	r3, #1
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003450:	f107 0218 	add.w	r2, r7, #24
 8003454:	f107 0119 	add.w	r1, r7, #25
 8003458:	2332      	movs	r3, #50	; 0x32
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2301      	movs	r3, #1
 800345e:	485a      	ldr	r0, [pc, #360]	; (80035c8 <USER_read+0x1d4>)
 8003460:	f7fe ff6b 	bl	800233a <HAL_SPI_TransmitReceive>
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 8003464:	7e3b      	ldrb	r3, [r7, #24]
 8003466:	2bff      	cmp	r3, #255	; 0xff
 8003468:	d102      	bne.n	8003470 <USER_read+0x7c>
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	2b63      	cmp	r3, #99	; 0x63
 800346e:	ddec      	ble.n	800344a <USER_read+0x56>
	  }

	  //capture data
	  for(ii=0;ii<512;ii++){
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	e00d      	b.n	8003492 <USER_read+0x9e>
	 	HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii , 1, 50);
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	441a      	add	r2, r3
 800347c:	f107 0119 	add.w	r1, r7, #25
 8003480:	2332      	movs	r3, #50	; 0x32
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2301      	movs	r3, #1
 8003486:	4850      	ldr	r0, [pc, #320]	; (80035c8 <USER_read+0x1d4>)
 8003488:	f7fe ff57 	bl	800233a <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<512;ii++){
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	3301      	adds	r3, #1
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	dbed      	blt.n	8003476 <USER_read+0x82>
	  }

		//read CRC - don't use for now
	  for(ii=0;ii<2;ii++){
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349e:	e00c      	b.n	80034ba <USER_read+0xc6>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 80034a0:	f107 0218 	add.w	r2, r7, #24
 80034a4:	f107 0119 	add.w	r1, r7, #25
 80034a8:	2332      	movs	r3, #50	; 0x32
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2301      	movs	r3, #1
 80034ae:	4846      	ldr	r0, [pc, #280]	; (80035c8 <USER_read+0x1d4>)
 80034b0:	f7fe ff43 	bl	800233a <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<2;ii++){
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	3301      	adds	r3, #1
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	ddef      	ble.n	80034a0 <USER_read+0xac>
	  }

	  return RES_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e07c      	b.n	80035be <USER_read+0x1ca>

	}
	else{
	  uint8_t R1_resp = send_SD_cmd(CMD18,sector);
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	2012      	movs	r0, #18
 80034c8:	f7ff fdf0 	bl	80030ac <send_SD_cmd>
 80034cc:	4603      	mov	r3, r0
 80034ce:	76fb      	strb	r3, [r7, #27]

	  uint8_t spi_tx = 0xFF;
 80034d0:	23ff      	movs	r3, #255	; 0xff
 80034d2:	75fb      	strb	r3, [r7, #23]
	  uint8_t spi_rx = 0xFF;
 80034d4:	23ff      	movs	r3, #255	; 0xff
 80034d6:	75bb      	strb	r3, [r7, #22]


	  for(int jj=0; jj<count; jj++){
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
 80034dc:	e046      	b.n	800356c <USER_read+0x178>

		int ii = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
		spi_rx = 0xFF;
 80034e2:	23ff      	movs	r3, #255	; 0xff
 80034e4:	75bb      	strb	r3, [r7, #22]
		while( (spi_rx == 0xFF)&&(ii<100) ){
 80034e6:	e00c      	b.n	8003502 <USER_read+0x10e>
		  ii++;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80034ee:	f107 0216 	add.w	r2, r7, #22
 80034f2:	f107 0117 	add.w	r1, r7, #23
 80034f6:	2332      	movs	r3, #50	; 0x32
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2301      	movs	r3, #1
 80034fc:	4832      	ldr	r0, [pc, #200]	; (80035c8 <USER_read+0x1d4>)
 80034fe:	f7fe ff1c 	bl	800233a <HAL_SPI_TransmitReceive>
		while( (spi_rx == 0xFF)&&(ii<100) ){
 8003502:	7dbb      	ldrb	r3, [r7, #22]
 8003504:	2bff      	cmp	r3, #255	; 0xff
 8003506:	d102      	bne.n	800350e <USER_read+0x11a>
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	2b63      	cmp	r3, #99	; 0x63
 800350c:	ddec      	ble.n	80034e8 <USER_read+0xf4>
		}

			//capture data
		for(ii=0;ii<512;ii++){
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	e011      	b.n	8003538 <USER_read+0x144>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii+(jj*512) , 1, 50);
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	025b      	lsls	r3, r3, #9
 8003518:	461a      	mov	r2, r3
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	4413      	add	r3, r2
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	441a      	add	r2, r3
 8003522:	f107 0117 	add.w	r1, r7, #23
 8003526:	2332      	movs	r3, #50	; 0x32
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2301      	movs	r3, #1
 800352c:	4826      	ldr	r0, [pc, #152]	; (80035c8 <USER_read+0x1d4>)
 800352e:	f7fe ff04 	bl	800233a <HAL_SPI_TransmitReceive>
		for(ii=0;ii<512;ii++){
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353e:	dbe9      	blt.n	8003514 <USER_read+0x120>
		}

			//read CRC - don't use for now
		for(ii=0;ii<2;ii++){
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	e00c      	b.n	8003560 <USER_read+0x16c>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003546:	f107 0216 	add.w	r2, r7, #22
 800354a:	f107 0117 	add.w	r1, r7, #23
 800354e:	2332      	movs	r3, #50	; 0x32
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2301      	movs	r3, #1
 8003554:	481c      	ldr	r0, [pc, #112]	; (80035c8 <USER_read+0x1d4>)
 8003556:	f7fe fef0 	bl	800233a <HAL_SPI_TransmitReceive>
		for(ii=0;ii<2;ii++){
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	ddef      	ble.n	8003546 <USER_read+0x152>
	  for(int jj=0; jj<count; jj++){
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	3301      	adds	r3, #1
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d8b4      	bhi.n	80034de <USER_read+0xea>
		}
	  }


	  R1_resp = send_SD_cmd(CMD12,0x0);
 8003574:	2100      	movs	r1, #0
 8003576:	200c      	movs	r0, #12
 8003578:	f7ff fd98 	bl	80030ac <send_SD_cmd>
 800357c:	4603      	mov	r3, r0
 800357e:	76fb      	strb	r3, [r7, #27]

	  int busy = 1;
 8003580:	2301      	movs	r3, #1
 8003582:	623b      	str	r3, [r7, #32]
	  int counter = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 8003588:	e011      	b.n	80035ae <USER_read+0x1ba>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800358a:	f107 0216 	add.w	r2, r7, #22
 800358e:	f107 0117 	add.w	r1, r7, #23
 8003592:	2332      	movs	r3, #50	; 0x32
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2301      	movs	r3, #1
 8003598:	480b      	ldr	r0, [pc, #44]	; (80035c8 <USER_read+0x1d4>)
 800359a:	f7fe fece 	bl	800233a <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 800359e:	7dbb      	ldrb	r3, [r7, #22]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <USER_read+0x1b4>
		  busy = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
		}
		counter++;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <USER_read+0x1c8>
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ba:	dbe6      	blt.n	800358a <USER_read+0x196>
	  }

	  return RES_OK;
 80035bc:	2300      	movs	r3, #0
	}

	//shouldn't get here
    return RES_OK;
  /* USER CODE END READ */
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3730      	adds	r7, #48	; 0x30
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000008c 	.word	0x2000008c

080035cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b094      	sub	sp, #80	; 0x50
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	if(pdrv!=0){
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <USER_write+0x1a>
		return RES_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e135      	b.n	8003852 <USER_write+0x286>
	}
	if(USER_status(pdrv)!=0){
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fef3 	bl	80033d4 <USER_status>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <USER_write+0x2c>
		return RES_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e12c      	b.n	8003852 <USER_write+0x286>
	}

	if(count==0){
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <USER_write+0x36>
	  return RES_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e127      	b.n	8003852 <USER_write+0x286>
	}
	else if(count==1){
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d169      	bne.n	80036dc <USER_write+0x110>
	  uint8_t R1_resp = send_SD_cmd(CMD24,sector);
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	2018      	movs	r0, #24
 800360c:	f7ff fd4e 	bl	80030ac <send_SD_cmd>
 8003610:	4603      	mov	r3, r0
 8003612:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 8003614:	23ff      	movs	r3, #255	; 0xff
 8003616:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8003618:	23ff      	movs	r3, #255	; 0xff
 800361a:	763b      	strb	r3, [r7, #24]

	  //1 byte of delat


	  //send data packet
	  spi_tx = 0xFE;
 800361c:	23fe      	movs	r3, #254	; 0xfe
 800361e:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003620:	f107 0218 	add.w	r2, r7, #24
 8003624:	f107 0119 	add.w	r1, r7, #25
 8003628:	2332      	movs	r3, #50	; 0x32
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2301      	movs	r3, #1
 800362e:	488b      	ldr	r0, [pc, #556]	; (800385c <USER_write+0x290>)
 8003630:	f7fe fe83 	bl	800233a <HAL_SPI_TransmitReceive>

	  //send data
	  for(int ii=0;ii<512;ii++){
 8003634:	2300      	movs	r3, #0
 8003636:	647b      	str	r3, [r7, #68]	; 0x44
 8003638:	e00d      	b.n	8003656 <USER_write+0x8a>
		HAL_SPI_TransmitReceive(&HSPI, buff+ii, &spi_rx, 1, 50);
 800363a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	18d1      	adds	r1, r2, r3
 8003640:	f107 0218 	add.w	r2, r7, #24
 8003644:	2332      	movs	r3, #50	; 0x32
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2301      	movs	r3, #1
 800364a:	4884      	ldr	r0, [pc, #528]	; (800385c <USER_write+0x290>)
 800364c:	f7fe fe75 	bl	800233a <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<512;ii++){
 8003650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003652:	3301      	adds	r3, #1
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
 8003656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	dbed      	blt.n	800363a <USER_write+0x6e>
	  }

	  //crc, dummy packets
	  for(int ii=0;ii<2;ii++){
 800365e:	2300      	movs	r3, #0
 8003660:	643b      	str	r3, [r7, #64]	; 0x40
 8003662:	e00c      	b.n	800367e <USER_write+0xb2>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003664:	f107 0218 	add.w	r2, r7, #24
 8003668:	f107 0119 	add.w	r1, r7, #25
 800366c:	2332      	movs	r3, #50	; 0x32
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2301      	movs	r3, #1
 8003672:	487a      	ldr	r0, [pc, #488]	; (800385c <USER_write+0x290>)
 8003674:	f7fe fe61 	bl	800233a <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<2;ii++){
 8003678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367a:	3301      	adds	r3, #1
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	2b01      	cmp	r3, #1
 8003682:	ddef      	ble.n	8003664 <USER_write+0x98>
	  }

	    //get data response, fail if not data accepted
	  spi_tx = 0xFF;
 8003684:	23ff      	movs	r3, #255	; 0xff
 8003686:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003688:	f107 0218 	add.w	r2, r7, #24
 800368c:	f107 0119 	add.w	r1, r7, #25
 8003690:	2332      	movs	r3, #50	; 0x32
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2301      	movs	r3, #1
 8003696:	4871      	ldr	r0, [pc, #452]	; (800385c <USER_write+0x290>)
 8003698:	f7fe fe4f 	bl	800233a <HAL_SPI_TransmitReceive>

	  int busy = 1;
 800369c:	2301      	movs	r3, #1
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int counter = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 80036a4:	e011      	b.n	80036ca <USER_write+0xfe>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80036a6:	f107 0218 	add.w	r2, r7, #24
 80036aa:	f107 0119 	add.w	r1, r7, #25
 80036ae:	2332      	movs	r3, #50	; 0x32
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2301      	movs	r3, #1
 80036b4:	4869      	ldr	r0, [pc, #420]	; (800385c <USER_write+0x290>)
 80036b6:	f7fe fe40 	bl	800233a <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 80036ba:	7e3b      	ldrb	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <USER_write+0xf8>
	  	  busy = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		counter++;
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	3301      	adds	r3, #1
 80036c8:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <USER_write+0x10c>
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036d6:	dbe6      	blt.n	80036a6 <USER_write+0xda>
	  }

	  return RES_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e0ba      	b.n	8003852 <USER_write+0x286>
	}
	else{
		uint8_t R1_resp = send_SD_cmd(CMD25,sector);
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	2019      	movs	r0, #25
 80036e0:	f7ff fce4 	bl	80030ac <send_SD_cmd>
 80036e4:	4603      	mov	r3, r0
 80036e6:	76fb      	strb	r3, [r7, #27]

		uint8_t spi_tx = 0xFF;
 80036e8:	23ff      	movs	r3, #255	; 0xff
 80036ea:	75fb      	strb	r3, [r7, #23]
		uint8_t spi_rx = 0xFF;
 80036ec:	23ff      	movs	r3, #255	; 0xff
 80036ee:	75bb      	strb	r3, [r7, #22]

		//one buffer of nothing
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80036f0:	f107 0216 	add.w	r2, r7, #22
 80036f4:	f107 0117 	add.w	r1, r7, #23
 80036f8:	2332      	movs	r3, #50	; 0x32
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2301      	movs	r3, #1
 80036fe:	4857      	ldr	r0, [pc, #348]	; (800385c <USER_write+0x290>)
 8003700:	f7fe fe1b 	bl	800233a <HAL_SPI_TransmitReceive>


		for(int jj=0; jj<count; jj++){
 8003704:	2300      	movs	r3, #0
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	e068      	b.n	80037dc <USER_write+0x210>


			//send data packet
			spi_tx = 0xFC;
 800370a:	23fc      	movs	r3, #252	; 0xfc
 800370c:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800370e:	f107 0216 	add.w	r2, r7, #22
 8003712:	f107 0117 	add.w	r1, r7, #23
 8003716:	2332      	movs	r3, #50	; 0x32
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2301      	movs	r3, #1
 800371c:	484f      	ldr	r0, [pc, #316]	; (800385c <USER_write+0x290>)
 800371e:	f7fe fe0c 	bl	800233a <HAL_SPI_TransmitReceive>

			//send data
			//spi_tx = 0xAC;
			for(int ii=0;ii<512;ii++){
 8003722:	2300      	movs	r3, #0
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
 8003726:	e011      	b.n	800374c <USER_write+0x180>
	//			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
				HAL_SPI_TransmitReceive(&HSPI, buff+ii+(512*jj), &spi_rx, 1, 50);
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	025b      	lsls	r3, r3, #9
 800372c:	461a      	mov	r2, r3
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	4413      	add	r3, r2
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	18d1      	adds	r1, r2, r3
 8003736:	f107 0216 	add.w	r2, r7, #22
 800373a:	2332      	movs	r3, #50	; 0x32
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2301      	movs	r3, #1
 8003740:	4846      	ldr	r0, [pc, #280]	; (800385c <USER_write+0x290>)
 8003742:	f7fe fdfa 	bl	800233a <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<512;ii++){
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	3301      	adds	r3, #1
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003752:	dbe9      	blt.n	8003728 <USER_write+0x15c>
			}

			spi_tx = 0x00;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
			//crc, dummy packets
			for(int ii=0;ii<2;ii++){
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375c:	e00c      	b.n	8003778 <USER_write+0x1ac>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800375e:	f107 0216 	add.w	r2, r7, #22
 8003762:	f107 0117 	add.w	r1, r7, #23
 8003766:	2332      	movs	r3, #50	; 0x32
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2301      	movs	r3, #1
 800376c:	483b      	ldr	r0, [pc, #236]	; (800385c <USER_write+0x290>)
 800376e:	f7fe fde4 	bl	800233a <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<2;ii++){
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	3301      	adds	r3, #1
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	2b01      	cmp	r3, #1
 800377c:	ddef      	ble.n	800375e <USER_write+0x192>
			}

			//get data response, fail if not data accepted
			spi_tx = 0xFF;
 800377e:	23ff      	movs	r3, #255	; 0xff
 8003780:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003782:	f107 0216 	add.w	r2, r7, #22
 8003786:	f107 0117 	add.w	r1, r7, #23
 800378a:	2332      	movs	r3, #50	; 0x32
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2301      	movs	r3, #1
 8003790:	4832      	ldr	r0, [pc, #200]	; (800385c <USER_write+0x290>)
 8003792:	f7fe fdd2 	bl	800233a <HAL_SPI_TransmitReceive>

			int busy = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
			int counter = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
			spi_tx = 0xFF;
 800379e:	23ff      	movs	r3, #255	; 0xff
 80037a0:	75fb      	strb	r3, [r7, #23]

			while(busy&&(counter<1000) ){
 80037a2:	e011      	b.n	80037c8 <USER_write+0x1fc>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80037a4:	f107 0216 	add.w	r2, r7, #22
 80037a8:	f107 0117 	add.w	r1, r7, #23
 80037ac:	2332      	movs	r3, #50	; 0x32
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	482a      	ldr	r0, [pc, #168]	; (800385c <USER_write+0x290>)
 80037b4:	f7fe fdc1 	bl	800233a <HAL_SPI_TransmitReceive>
				if(spi_rx!=0){
 80037b8:	7dbb      	ldrb	r3, [r7, #22]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <USER_write+0x1f6>
					busy = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				counter++;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	3301      	adds	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
			while(busy&&(counter<1000) ){
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <USER_write+0x20a>
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d4:	dbe6      	blt.n	80037a4 <USER_write+0x1d8>
		for(int jj=0; jj<count; jj++){
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	3301      	adds	r3, #1
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d892      	bhi.n	800370a <USER_write+0x13e>
			}

		}

		//send stop token
		spi_tx = 0xFD;
 80037e4:	23fd      	movs	r3, #253	; 0xfd
 80037e6:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80037e8:	f107 0216 	add.w	r2, r7, #22
 80037ec:	f107 0117 	add.w	r1, r7, #23
 80037f0:	2332      	movs	r3, #50	; 0x32
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2301      	movs	r3, #1
 80037f6:	4819      	ldr	r0, [pc, #100]	; (800385c <USER_write+0x290>)
 80037f8:	f7fe fd9f 	bl	800233a <HAL_SPI_TransmitReceive>

		//
		spi_tx = 0xFF;
 80037fc:	23ff      	movs	r3, #255	; 0xff
 80037fe:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003800:	f107 0216 	add.w	r2, r7, #22
 8003804:	f107 0117 	add.w	r1, r7, #23
 8003808:	2332      	movs	r3, #50	; 0x32
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	4813      	ldr	r0, [pc, #76]	; (800385c <USER_write+0x290>)
 8003810:	f7fe fd93 	bl	800233a <HAL_SPI_TransmitReceive>


		int busy = 1;
 8003814:	2301      	movs	r3, #1
 8003816:	623b      	str	r3, [r7, #32]
		int counter = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 800381c:	e011      	b.n	8003842 <USER_write+0x276>
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800381e:	f107 0216 	add.w	r2, r7, #22
 8003822:	f107 0117 	add.w	r1, r7, #23
 8003826:	2332      	movs	r3, #50	; 0x32
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	2301      	movs	r3, #1
 800382c:	480b      	ldr	r0, [pc, #44]	; (800385c <USER_write+0x290>)
 800382e:	f7fe fd84 	bl	800233a <HAL_SPI_TransmitReceive>
			if(spi_rx!=0){
 8003832:	7dbb      	ldrb	r3, [r7, #22]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <USER_write+0x270>
				busy = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
			}
			else{
			}
			counter++;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <USER_write+0x284>
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800384e:	dbe6      	blt.n	800381e <USER_write+0x252>
		}
	}

	//shouldn't get here
    return RES_OK;
 8003850:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003852:	4618      	mov	r0, r3
 8003854:	3748      	adds	r7, #72	; 0x48
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000008c 	.word	0x2000008c

08003860 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af02      	add	r7, sp, #8
 8003866:	4603      	mov	r3, r0
 8003868:	603a      	str	r2, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
 800386c:	460b      	mov	r3, r1
 800386e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(cmd){
 8003876:	79bb      	ldrb	r3, [r7, #6]
 8003878:	2b04      	cmp	r3, #4
 800387a:	f200 80b1 	bhi.w	80039e0 <USER_ioctl+0x180>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <USER_ioctl+0x24>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003899 	.word	0x08003899
 8003888:	080038c1 	.word	0x080038c1
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080039d9 	.word	0x080039d9

	case CTRL_SYNC:
		// nothing to do here
		res = RES_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800389e:	e0a2      	b.n	80039e6 <USER_ioctl+0x186>
	case GET_BLOCK_SIZE:
		*(int*)buff = 512; //buffer size is always 512
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80038ae:	e09a      	b.n	80039e6 <USER_ioctl+0x186>
	case GET_SECTOR_SIZE:
		*(int*)buff = 512; //buffer size is always 512
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80038be:	e092      	b.n	80039e6 <USER_ioctl+0x186>

	case GET_SECTOR_COUNT:
		if(USER_status(pdrv)!=0){
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fd86 	bl	80033d4 <USER_status>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <USER_ioctl+0x72>
			return RES_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e08b      	b.n	80039ea <USER_ioctl+0x18a>
		}
		else{
			BYTE buffer[16] = {0};
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
			//printf("GET_BLOCK_SIZE\r\n");
			uint8_t R1_resp = send_SD_cmd(CMD9,0x0);
 80038e2:	2100      	movs	r1, #0
 80038e4:	2009      	movs	r0, #9
 80038e6:	f7ff fbe1 	bl	80030ac <send_SD_cmd>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("cmd resp:%u\r\n",R1_resp);
			uint8_t spi_tx = 0xFF;
 80038f0:	23ff      	movs	r3, #255	; 0xff
 80038f2:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_rx = 0xFF;
 80038f4:	23ff      	movs	r3, #255	; 0xff
 80038f6:	73bb      	strb	r3, [r7, #14]

			int ii = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 80038fc:	e00c      	b.n	8003918 <USER_ioctl+0xb8>
				ii++;
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	3301      	adds	r3, #1
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003904:	f107 020e 	add.w	r2, r7, #14
 8003908:	f107 010f 	add.w	r1, r7, #15
 800390c:	2332      	movs	r3, #50	; 0x32
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2301      	movs	r3, #1
 8003912:	4838      	ldr	r0, [pc, #224]	; (80039f4 <USER_ioctl+0x194>)
 8003914:	f7fe fd11 	bl	800233a <HAL_SPI_TransmitReceive>
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 8003918:	7bbb      	ldrb	r3, [r7, #14]
 800391a:	2bff      	cmp	r3, #255	; 0xff
 800391c:	d104      	bne.n	8003928 <USER_ioctl+0xc8>
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	f242 720f 	movw	r2, #9999	; 0x270f
 8003924:	4293      	cmp	r3, r2
 8003926:	ddea      	ble.n	80038fe <USER_ioctl+0x9e>

			//printf("ii:%u\r\n",ii);
			//printf("data token:%u\r\n",spi_rx);

			//capture data
			for(ii=0;ii<16;ii++){
 8003928:	2300      	movs	r3, #0
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
 800392c:	e01f      	b.n	800396e <USER_ioctl+0x10e>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buffer+15-ii , 1, 50);
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	f1c3 030f 	rsb	r3, r3, #15
 8003934:	f107 0210 	add.w	r2, r7, #16
 8003938:	441a      	add	r2, r3
 800393a:	f107 010f 	add.w	r1, r7, #15
 800393e:	2332      	movs	r3, #50	; 0x32
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2301      	movs	r3, #1
 8003944:	482b      	ldr	r0, [pc, #172]	; (80039f4 <USER_ioctl+0x194>)
 8003946:	f7fe fcf8 	bl	800233a <HAL_SPI_TransmitReceive>
				//printf("(%u,%u)\r\n",8*(15-ii),buffer[ii]);
				printf("(%u,%u)\r\n",8*(15-ii),buffer[15-ii]);
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	f1c3 030f 	rsb	r3, r3, #15
 8003950:	00d9      	lsls	r1, r3, #3
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	f1c3 030f 	rsb	r3, r3, #15
 8003958:	3330      	adds	r3, #48	; 0x30
 800395a:	443b      	add	r3, r7
 800395c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003960:	461a      	mov	r2, r3
 8003962:	4825      	ldr	r0, [pc, #148]	; (80039f8 <USER_ioctl+0x198>)
 8003964:	f000 f880 	bl	8003a68 <iprintf>
			for(ii=0;ii<16;ii++){
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	3301      	adds	r3, #1
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2b0f      	cmp	r3, #15
 8003972:	dddc      	ble.n	800392e <USER_ioctl+0xce>

			}


			for(ii=0;ii<2;ii++){
 8003974:	2300      	movs	r3, #0
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
 8003978:	e011      	b.n	800399e <USER_ioctl+0x13e>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 800397a:	f107 020e 	add.w	r2, r7, #14
 800397e:	f107 010f 	add.w	r1, r7, #15
 8003982:	2332      	movs	r3, #50	; 0x32
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2301      	movs	r3, #1
 8003988:	481a      	ldr	r0, [pc, #104]	; (80039f4 <USER_ioctl+0x194>)
 800398a:	f7fe fcd6 	bl	800233a <HAL_SPI_TransmitReceive>
				printf("rx crc:%u\r\n",spi_rx);
 800398e:	7bbb      	ldrb	r3, [r7, #14]
 8003990:	4619      	mov	r1, r3
 8003992:	481a      	ldr	r0, [pc, #104]	; (80039fc <USER_ioctl+0x19c>)
 8003994:	f000 f868 	bl	8003a68 <iprintf>
			for(ii=0;ii<2;ii++){
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	3301      	adds	r3, #1
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	ddea      	ble.n	800397a <USER_ioctl+0x11a>
			}

			//printf( "sector size: %u\r\n", ((buffer[5]&0x3F)<<1)|(buffer[4]>>7) );//  | buffer[4]>>7) );
			uint32_t mem_size = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	623b      	str	r3, [r7, #32]
			mem_size = (uint32_t)buffer[6] | ( ((uint32_t) buffer[7])<<8) | (((uint32_t)(buffer[8]&0x3F))<<16) ;
 80039a8:	7dbb      	ldrb	r3, [r7, #22]
 80039aa:	461a      	mov	r2, r3
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	431a      	orrs	r2, r3
 80039b2:	7e3b      	ldrb	r3, [r7, #24]
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80039ba:	4313      	orrs	r3, r2
 80039bc:	623b      	str	r3, [r7, #32]
//			printf("64:%u\r\n",buffer[8]);


//			printf("mem size(kB):%u\r\n",(mem_size+1)*512);
//			printf("mem size(sectors):%u\r\n",(mem_size+1)*1000);
		  *(int*)buff = ((mem_size+1)*1000);
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	3301      	adds	r3, #1
 80039c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	601a      	str	r2, [r3, #0]
	      res =  RES_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}

		break;
 80039d6:	e006      	b.n	80039e6 <USER_ioctl+0x186>
	case CTRL_TRIM:
		printf("CTRL_TRIM\r\n");
 80039d8:	4809      	ldr	r0, [pc, #36]	; (8003a00 <USER_ioctl+0x1a0>)
 80039da:	f000 f8cb 	bl	8003b74 <puts>
		break;
 80039de:	e002      	b.n	80039e6 <USER_ioctl+0x186>
	default:
		res = RES_PARERR;
 80039e0:	2304      	movs	r3, #4
 80039e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return res;
 80039e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f


  /* USER CODE END IOCTL */
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3730      	adds	r7, #48	; 0x30
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000008c 	.word	0x2000008c
 80039f8:	08004b50 	.word	0x08004b50
 80039fc:	08004b5c 	.word	0x08004b5c
 8003a00:	08004b68 	.word	0x08004b68

08003a04 <__errno>:
 8003a04:	4b01      	ldr	r3, [pc, #4]	; (8003a0c <__errno+0x8>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4d0d      	ldr	r5, [pc, #52]	; (8003a48 <__libc_init_array+0x38>)
 8003a14:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	42a6      	cmp	r6, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	4d0b      	ldr	r5, [pc, #44]	; (8003a50 <__libc_init_array+0x40>)
 8003a22:	4c0c      	ldr	r4, [pc, #48]	; (8003a54 <__libc_init_array+0x44>)
 8003a24:	f001 f824 	bl	8004a70 <_init>
 8003a28:	1b64      	subs	r4, r4, r5
 8003a2a:	10a4      	asrs	r4, r4, #2
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	42a6      	cmp	r6, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a38:	4798      	blx	r3
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a42:	4798      	blx	r3
 8003a44:	3601      	adds	r6, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08004c2c 	.word	0x08004c2c
 8003a4c:	08004c2c 	.word	0x08004c2c
 8003a50:	08004c2c 	.word	0x08004c2c
 8003a54:	08004c30 	.word	0x08004c30

08003a58 <memset>:
 8003a58:	4402      	add	r2, r0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <iprintf>:
 8003a68:	b40f      	push	{r0, r1, r2, r3}
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <iprintf+0x2c>)
 8003a6c:	b513      	push	{r0, r1, r4, lr}
 8003a6e:	681c      	ldr	r4, [r3, #0]
 8003a70:	b124      	cbz	r4, 8003a7c <iprintf+0x14>
 8003a72:	69a3      	ldr	r3, [r4, #24]
 8003a74:	b913      	cbnz	r3, 8003a7c <iprintf+0x14>
 8003a76:	4620      	mov	r0, r4
 8003a78:	f000 fa5e 	bl	8003f38 <__sinit>
 8003a7c:	ab05      	add	r3, sp, #20
 8003a7e:	9a04      	ldr	r2, [sp, #16]
 8003a80:	68a1      	ldr	r1, [r4, #8]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	4620      	mov	r0, r4
 8003a86:	f000 fc67 	bl	8004358 <_vfiprintf_r>
 8003a8a:	b002      	add	sp, #8
 8003a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a90:	b004      	add	sp, #16
 8003a92:	4770      	bx	lr
 8003a94:	2000000c 	.word	0x2000000c

08003a98 <_puts_r>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	460e      	mov	r6, r1
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	b118      	cbz	r0, 8003aa8 <_puts_r+0x10>
 8003aa0:	6983      	ldr	r3, [r0, #24]
 8003aa2:	b90b      	cbnz	r3, 8003aa8 <_puts_r+0x10>
 8003aa4:	f000 fa48 	bl	8003f38 <__sinit>
 8003aa8:	69ab      	ldr	r3, [r5, #24]
 8003aaa:	68ac      	ldr	r4, [r5, #8]
 8003aac:	b913      	cbnz	r3, 8003ab4 <_puts_r+0x1c>
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f000 fa42 	bl	8003f38 <__sinit>
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <_puts_r+0xd0>)
 8003ab6:	429c      	cmp	r4, r3
 8003ab8:	d120      	bne.n	8003afc <_puts_r+0x64>
 8003aba:	686c      	ldr	r4, [r5, #4]
 8003abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003abe:	07db      	lsls	r3, r3, #31
 8003ac0:	d405      	bmi.n	8003ace <_puts_r+0x36>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	0598      	lsls	r0, r3, #22
 8003ac6:	d402      	bmi.n	8003ace <_puts_r+0x36>
 8003ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aca:	f000 fad3 	bl	8004074 <__retarget_lock_acquire_recursive>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	0719      	lsls	r1, r3, #28
 8003ad2:	d51d      	bpl.n	8003b10 <_puts_r+0x78>
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	b1db      	cbz	r3, 8003b10 <_puts_r+0x78>
 8003ad8:	3e01      	subs	r6, #1
 8003ada:	68a3      	ldr	r3, [r4, #8]
 8003adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	60a3      	str	r3, [r4, #8]
 8003ae4:	bb39      	cbnz	r1, 8003b36 <_puts_r+0x9e>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da38      	bge.n	8003b5c <_puts_r+0xc4>
 8003aea:	4622      	mov	r2, r4
 8003aec:	210a      	movs	r1, #10
 8003aee:	4628      	mov	r0, r5
 8003af0:	f000 f848 	bl	8003b84 <__swbuf_r>
 8003af4:	3001      	adds	r0, #1
 8003af6:	d011      	beq.n	8003b1c <_puts_r+0x84>
 8003af8:	250a      	movs	r5, #10
 8003afa:	e011      	b.n	8003b20 <_puts_r+0x88>
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <_puts_r+0xd4>)
 8003afe:	429c      	cmp	r4, r3
 8003b00:	d101      	bne.n	8003b06 <_puts_r+0x6e>
 8003b02:	68ac      	ldr	r4, [r5, #8]
 8003b04:	e7da      	b.n	8003abc <_puts_r+0x24>
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <_puts_r+0xd8>)
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	bf08      	it	eq
 8003b0c:	68ec      	ldreq	r4, [r5, #12]
 8003b0e:	e7d5      	b.n	8003abc <_puts_r+0x24>
 8003b10:	4621      	mov	r1, r4
 8003b12:	4628      	mov	r0, r5
 8003b14:	f000 f888 	bl	8003c28 <__swsetup_r>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d0dd      	beq.n	8003ad8 <_puts_r+0x40>
 8003b1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b22:	07da      	lsls	r2, r3, #31
 8003b24:	d405      	bmi.n	8003b32 <_puts_r+0x9a>
 8003b26:	89a3      	ldrh	r3, [r4, #12]
 8003b28:	059b      	lsls	r3, r3, #22
 8003b2a:	d402      	bmi.n	8003b32 <_puts_r+0x9a>
 8003b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b2e:	f000 faa2 	bl	8004076 <__retarget_lock_release_recursive>
 8003b32:	4628      	mov	r0, r5
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da04      	bge.n	8003b44 <_puts_r+0xac>
 8003b3a:	69a2      	ldr	r2, [r4, #24]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dc06      	bgt.n	8003b4e <_puts_r+0xb6>
 8003b40:	290a      	cmp	r1, #10
 8003b42:	d004      	beq.n	8003b4e <_puts_r+0xb6>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	6022      	str	r2, [r4, #0]
 8003b4a:	7019      	strb	r1, [r3, #0]
 8003b4c:	e7c5      	b.n	8003ada <_puts_r+0x42>
 8003b4e:	4622      	mov	r2, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f000 f817 	bl	8003b84 <__swbuf_r>
 8003b56:	3001      	adds	r0, #1
 8003b58:	d1bf      	bne.n	8003ada <_puts_r+0x42>
 8003b5a:	e7df      	b.n	8003b1c <_puts_r+0x84>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	250a      	movs	r5, #10
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	6022      	str	r2, [r4, #0]
 8003b64:	701d      	strb	r5, [r3, #0]
 8003b66:	e7db      	b.n	8003b20 <_puts_r+0x88>
 8003b68:	08004bb0 	.word	0x08004bb0
 8003b6c:	08004bd0 	.word	0x08004bd0
 8003b70:	08004b90 	.word	0x08004b90

08003b74 <puts>:
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <puts+0xc>)
 8003b76:	4601      	mov	r1, r0
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f7ff bf8d 	b.w	8003a98 <_puts_r>
 8003b7e:	bf00      	nop
 8003b80:	2000000c 	.word	0x2000000c

08003b84 <__swbuf_r>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	460e      	mov	r6, r1
 8003b88:	4614      	mov	r4, r2
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	b118      	cbz	r0, 8003b96 <__swbuf_r+0x12>
 8003b8e:	6983      	ldr	r3, [r0, #24]
 8003b90:	b90b      	cbnz	r3, 8003b96 <__swbuf_r+0x12>
 8003b92:	f000 f9d1 	bl	8003f38 <__sinit>
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <__swbuf_r+0x98>)
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	d12b      	bne.n	8003bf4 <__swbuf_r+0x70>
 8003b9c:	686c      	ldr	r4, [r5, #4]
 8003b9e:	69a3      	ldr	r3, [r4, #24]
 8003ba0:	60a3      	str	r3, [r4, #8]
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	071a      	lsls	r2, r3, #28
 8003ba6:	d52f      	bpl.n	8003c08 <__swbuf_r+0x84>
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	b36b      	cbz	r3, 8003c08 <__swbuf_r+0x84>
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	1ac0      	subs	r0, r0, r3
 8003bb2:	6963      	ldr	r3, [r4, #20]
 8003bb4:	b2f6      	uxtb	r6, r6
 8003bb6:	4283      	cmp	r3, r0
 8003bb8:	4637      	mov	r7, r6
 8003bba:	dc04      	bgt.n	8003bc6 <__swbuf_r+0x42>
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 f926 	bl	8003e10 <_fflush_r>
 8003bc4:	bb30      	cbnz	r0, 8003c14 <__swbuf_r+0x90>
 8003bc6:	68a3      	ldr	r3, [r4, #8]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	60a3      	str	r3, [r4, #8]
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	6022      	str	r2, [r4, #0]
 8003bd2:	701e      	strb	r6, [r3, #0]
 8003bd4:	6963      	ldr	r3, [r4, #20]
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	4283      	cmp	r3, r0
 8003bda:	d004      	beq.n	8003be6 <__swbuf_r+0x62>
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	07db      	lsls	r3, r3, #31
 8003be0:	d506      	bpl.n	8003bf0 <__swbuf_r+0x6c>
 8003be2:	2e0a      	cmp	r6, #10
 8003be4:	d104      	bne.n	8003bf0 <__swbuf_r+0x6c>
 8003be6:	4621      	mov	r1, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 f911 	bl	8003e10 <_fflush_r>
 8003bee:	b988      	cbnz	r0, 8003c14 <__swbuf_r+0x90>
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <__swbuf_r+0x9c>)
 8003bf6:	429c      	cmp	r4, r3
 8003bf8:	d101      	bne.n	8003bfe <__swbuf_r+0x7a>
 8003bfa:	68ac      	ldr	r4, [r5, #8]
 8003bfc:	e7cf      	b.n	8003b9e <__swbuf_r+0x1a>
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <__swbuf_r+0xa0>)
 8003c00:	429c      	cmp	r4, r3
 8003c02:	bf08      	it	eq
 8003c04:	68ec      	ldreq	r4, [r5, #12]
 8003c06:	e7ca      	b.n	8003b9e <__swbuf_r+0x1a>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 f80c 	bl	8003c28 <__swsetup_r>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d0cb      	beq.n	8003bac <__swbuf_r+0x28>
 8003c14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003c18:	e7ea      	b.n	8003bf0 <__swbuf_r+0x6c>
 8003c1a:	bf00      	nop
 8003c1c:	08004bb0 	.word	0x08004bb0
 8003c20:	08004bd0 	.word	0x08004bd0
 8003c24:	08004b90 	.word	0x08004b90

08003c28 <__swsetup_r>:
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <__swsetup_r+0xcc>)
 8003c2a:	b570      	push	{r4, r5, r6, lr}
 8003c2c:	681d      	ldr	r5, [r3, #0]
 8003c2e:	4606      	mov	r6, r0
 8003c30:	460c      	mov	r4, r1
 8003c32:	b125      	cbz	r5, 8003c3e <__swsetup_r+0x16>
 8003c34:	69ab      	ldr	r3, [r5, #24]
 8003c36:	b913      	cbnz	r3, 8003c3e <__swsetup_r+0x16>
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 f97d 	bl	8003f38 <__sinit>
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <__swsetup_r+0xd0>)
 8003c40:	429c      	cmp	r4, r3
 8003c42:	d10f      	bne.n	8003c64 <__swsetup_r+0x3c>
 8003c44:	686c      	ldr	r4, [r5, #4]
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c4c:	0719      	lsls	r1, r3, #28
 8003c4e:	d42c      	bmi.n	8003caa <__swsetup_r+0x82>
 8003c50:	06dd      	lsls	r5, r3, #27
 8003c52:	d411      	bmi.n	8003c78 <__swsetup_r+0x50>
 8003c54:	2309      	movs	r3, #9
 8003c56:	6033      	str	r3, [r6, #0]
 8003c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c62:	e03e      	b.n	8003ce2 <__swsetup_r+0xba>
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <__swsetup_r+0xd4>)
 8003c66:	429c      	cmp	r4, r3
 8003c68:	d101      	bne.n	8003c6e <__swsetup_r+0x46>
 8003c6a:	68ac      	ldr	r4, [r5, #8]
 8003c6c:	e7eb      	b.n	8003c46 <__swsetup_r+0x1e>
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <__swsetup_r+0xd8>)
 8003c70:	429c      	cmp	r4, r3
 8003c72:	bf08      	it	eq
 8003c74:	68ec      	ldreq	r4, [r5, #12]
 8003c76:	e7e6      	b.n	8003c46 <__swsetup_r+0x1e>
 8003c78:	0758      	lsls	r0, r3, #29
 8003c7a:	d512      	bpl.n	8003ca2 <__swsetup_r+0x7a>
 8003c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c7e:	b141      	cbz	r1, 8003c92 <__swsetup_r+0x6a>
 8003c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d002      	beq.n	8003c8e <__swsetup_r+0x66>
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 fa5b 	bl	8004144 <_free_r>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6363      	str	r3, [r4, #52]	; 0x34
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c98:	81a3      	strh	r3, [r4, #12]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f043 0308 	orr.w	r3, r3, #8
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	b94b      	cbnz	r3, 8003cc2 <__swsetup_r+0x9a>
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb8:	d003      	beq.n	8003cc2 <__swsetup_r+0x9a>
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f000 fa01 	bl	80040c4 <__smakebuf_r>
 8003cc2:	89a0      	ldrh	r0, [r4, #12]
 8003cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cc8:	f010 0301 	ands.w	r3, r0, #1
 8003ccc:	d00a      	beq.n	8003ce4 <__swsetup_r+0xbc>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60a3      	str	r3, [r4, #8]
 8003cd2:	6963      	ldr	r3, [r4, #20]
 8003cd4:	425b      	negs	r3, r3
 8003cd6:	61a3      	str	r3, [r4, #24]
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	b943      	cbnz	r3, 8003cee <__swsetup_r+0xc6>
 8003cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ce0:	d1ba      	bne.n	8003c58 <__swsetup_r+0x30>
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	0781      	lsls	r1, r0, #30
 8003ce6:	bf58      	it	pl
 8003ce8:	6963      	ldrpl	r3, [r4, #20]
 8003cea:	60a3      	str	r3, [r4, #8]
 8003cec:	e7f4      	b.n	8003cd8 <__swsetup_r+0xb0>
 8003cee:	2000      	movs	r0, #0
 8003cf0:	e7f7      	b.n	8003ce2 <__swsetup_r+0xba>
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c
 8003cf8:	08004bb0 	.word	0x08004bb0
 8003cfc:	08004bd0 	.word	0x08004bd0
 8003d00:	08004b90 	.word	0x08004b90

08003d04 <__sflush_r>:
 8003d04:	898a      	ldrh	r2, [r1, #12]
 8003d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	0710      	lsls	r0, r2, #28
 8003d0e:	460c      	mov	r4, r1
 8003d10:	d458      	bmi.n	8003dc4 <__sflush_r+0xc0>
 8003d12:	684b      	ldr	r3, [r1, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	dc05      	bgt.n	8003d24 <__sflush_r+0x20>
 8003d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	dc02      	bgt.n	8003d24 <__sflush_r+0x20>
 8003d1e:	2000      	movs	r0, #0
 8003d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d26:	2e00      	cmp	r6, #0
 8003d28:	d0f9      	beq.n	8003d1e <__sflush_r+0x1a>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d30:	682f      	ldr	r7, [r5, #0]
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	d032      	beq.n	8003d9c <__sflush_r+0x98>
 8003d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	075a      	lsls	r2, r3, #29
 8003d3c:	d505      	bpl.n	8003d4a <__sflush_r+0x46>
 8003d3e:	6863      	ldr	r3, [r4, #4]
 8003d40:	1ac0      	subs	r0, r0, r3
 8003d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d44:	b10b      	cbz	r3, 8003d4a <__sflush_r+0x46>
 8003d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d48:	1ac0      	subs	r0, r0, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d50:	6a21      	ldr	r1, [r4, #32]
 8003d52:	4628      	mov	r0, r5
 8003d54:	47b0      	blx	r6
 8003d56:	1c43      	adds	r3, r0, #1
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	d106      	bne.n	8003d6a <__sflush_r+0x66>
 8003d5c:	6829      	ldr	r1, [r5, #0]
 8003d5e:	291d      	cmp	r1, #29
 8003d60:	d82c      	bhi.n	8003dbc <__sflush_r+0xb8>
 8003d62:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <__sflush_r+0x108>)
 8003d64:	40ca      	lsrs	r2, r1
 8003d66:	07d6      	lsls	r6, r2, #31
 8003d68:	d528      	bpl.n	8003dbc <__sflush_r+0xb8>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	6062      	str	r2, [r4, #4]
 8003d6e:	04d9      	lsls	r1, r3, #19
 8003d70:	6922      	ldr	r2, [r4, #16]
 8003d72:	6022      	str	r2, [r4, #0]
 8003d74:	d504      	bpl.n	8003d80 <__sflush_r+0x7c>
 8003d76:	1c42      	adds	r2, r0, #1
 8003d78:	d101      	bne.n	8003d7e <__sflush_r+0x7a>
 8003d7a:	682b      	ldr	r3, [r5, #0]
 8003d7c:	b903      	cbnz	r3, 8003d80 <__sflush_r+0x7c>
 8003d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8003d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d82:	602f      	str	r7, [r5, #0]
 8003d84:	2900      	cmp	r1, #0
 8003d86:	d0ca      	beq.n	8003d1e <__sflush_r+0x1a>
 8003d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	d002      	beq.n	8003d96 <__sflush_r+0x92>
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f9d7 	bl	8004144 <_free_r>
 8003d96:	2000      	movs	r0, #0
 8003d98:	6360      	str	r0, [r4, #52]	; 0x34
 8003d9a:	e7c1      	b.n	8003d20 <__sflush_r+0x1c>
 8003d9c:	6a21      	ldr	r1, [r4, #32]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4628      	mov	r0, r5
 8003da2:	47b0      	blx	r6
 8003da4:	1c41      	adds	r1, r0, #1
 8003da6:	d1c7      	bne.n	8003d38 <__sflush_r+0x34>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0c4      	beq.n	8003d38 <__sflush_r+0x34>
 8003dae:	2b1d      	cmp	r3, #29
 8003db0:	d001      	beq.n	8003db6 <__sflush_r+0xb2>
 8003db2:	2b16      	cmp	r3, #22
 8003db4:	d101      	bne.n	8003dba <__sflush_r+0xb6>
 8003db6:	602f      	str	r7, [r5, #0]
 8003db8:	e7b1      	b.n	8003d1e <__sflush_r+0x1a>
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc0:	81a3      	strh	r3, [r4, #12]
 8003dc2:	e7ad      	b.n	8003d20 <__sflush_r+0x1c>
 8003dc4:	690f      	ldr	r7, [r1, #16]
 8003dc6:	2f00      	cmp	r7, #0
 8003dc8:	d0a9      	beq.n	8003d1e <__sflush_r+0x1a>
 8003dca:	0793      	lsls	r3, r2, #30
 8003dcc:	680e      	ldr	r6, [r1, #0]
 8003dce:	bf08      	it	eq
 8003dd0:	694b      	ldreq	r3, [r1, #20]
 8003dd2:	600f      	str	r7, [r1, #0]
 8003dd4:	bf18      	it	ne
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	eba6 0807 	sub.w	r8, r6, r7
 8003ddc:	608b      	str	r3, [r1, #8]
 8003dde:	f1b8 0f00 	cmp.w	r8, #0
 8003de2:	dd9c      	ble.n	8003d1e <__sflush_r+0x1a>
 8003de4:	6a21      	ldr	r1, [r4, #32]
 8003de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003de8:	4643      	mov	r3, r8
 8003dea:	463a      	mov	r2, r7
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b0      	blx	r6
 8003df0:	2800      	cmp	r0, #0
 8003df2:	dc06      	bgt.n	8003e02 <__sflush_r+0xfe>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e00:	e78e      	b.n	8003d20 <__sflush_r+0x1c>
 8003e02:	4407      	add	r7, r0
 8003e04:	eba8 0800 	sub.w	r8, r8, r0
 8003e08:	e7e9      	b.n	8003dde <__sflush_r+0xda>
 8003e0a:	bf00      	nop
 8003e0c:	20400001 	.word	0x20400001

08003e10 <_fflush_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	4605      	mov	r5, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	b913      	cbnz	r3, 8003e20 <_fflush_r+0x10>
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	b118      	cbz	r0, 8003e2a <_fflush_r+0x1a>
 8003e22:	6983      	ldr	r3, [r0, #24]
 8003e24:	b90b      	cbnz	r3, 8003e2a <_fflush_r+0x1a>
 8003e26:	f000 f887 	bl	8003f38 <__sinit>
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <_fflush_r+0x6c>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	d11b      	bne.n	8003e68 <_fflush_r+0x58>
 8003e30:	686c      	ldr	r4, [r5, #4]
 8003e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ef      	beq.n	8003e1a <_fflush_r+0xa>
 8003e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e3c:	07d0      	lsls	r0, r2, #31
 8003e3e:	d404      	bmi.n	8003e4a <_fflush_r+0x3a>
 8003e40:	0599      	lsls	r1, r3, #22
 8003e42:	d402      	bmi.n	8003e4a <_fflush_r+0x3a>
 8003e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e46:	f000 f915 	bl	8004074 <__retarget_lock_acquire_recursive>
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	f7ff ff59 	bl	8003d04 <__sflush_r>
 8003e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e54:	07da      	lsls	r2, r3, #31
 8003e56:	4605      	mov	r5, r0
 8003e58:	d4e0      	bmi.n	8003e1c <_fflush_r+0xc>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	059b      	lsls	r3, r3, #22
 8003e5e:	d4dd      	bmi.n	8003e1c <_fflush_r+0xc>
 8003e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e62:	f000 f908 	bl	8004076 <__retarget_lock_release_recursive>
 8003e66:	e7d9      	b.n	8003e1c <_fflush_r+0xc>
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_fflush_r+0x70>)
 8003e6a:	429c      	cmp	r4, r3
 8003e6c:	d101      	bne.n	8003e72 <_fflush_r+0x62>
 8003e6e:	68ac      	ldr	r4, [r5, #8]
 8003e70:	e7df      	b.n	8003e32 <_fflush_r+0x22>
 8003e72:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <_fflush_r+0x74>)
 8003e74:	429c      	cmp	r4, r3
 8003e76:	bf08      	it	eq
 8003e78:	68ec      	ldreq	r4, [r5, #12]
 8003e7a:	e7da      	b.n	8003e32 <_fflush_r+0x22>
 8003e7c:	08004bb0 	.word	0x08004bb0
 8003e80:	08004bd0 	.word	0x08004bd0
 8003e84:	08004b90 	.word	0x08004b90

08003e88 <std>:
 8003e88:	2300      	movs	r3, #0
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e96:	6083      	str	r3, [r0, #8]
 8003e98:	8181      	strh	r1, [r0, #12]
 8003e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8003e9c:	81c2      	strh	r2, [r0, #14]
 8003e9e:	6183      	str	r3, [r0, #24]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	305c      	adds	r0, #92	; 0x5c
 8003ea6:	f7ff fdd7 	bl	8003a58 <memset>
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <std+0x38>)
 8003eac:	6263      	str	r3, [r4, #36]	; 0x24
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <std+0x3c>)
 8003eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <std+0x40>)
 8003eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <std+0x44>)
 8003eb8:	6224      	str	r4, [r4, #32]
 8003eba:	6323      	str	r3, [r4, #48]	; 0x30
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	bf00      	nop
 8003ec0:	08004901 	.word	0x08004901
 8003ec4:	08004923 	.word	0x08004923
 8003ec8:	0800495b 	.word	0x0800495b
 8003ecc:	0800497f 	.word	0x0800497f

08003ed0 <_cleanup_r>:
 8003ed0:	4901      	ldr	r1, [pc, #4]	; (8003ed8 <_cleanup_r+0x8>)
 8003ed2:	f000 b8af 	b.w	8004034 <_fwalk_reent>
 8003ed6:	bf00      	nop
 8003ed8:	08003e11 	.word	0x08003e11

08003edc <__sfmoreglue>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	2268      	movs	r2, #104	; 0x68
 8003ee0:	1e4d      	subs	r5, r1, #1
 8003ee2:	4355      	muls	r5, r2
 8003ee4:	460e      	mov	r6, r1
 8003ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003eea:	f000 f997 	bl	800421c <_malloc_r>
 8003eee:	4604      	mov	r4, r0
 8003ef0:	b140      	cbz	r0, 8003f04 <__sfmoreglue+0x28>
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ef8:	300c      	adds	r0, #12
 8003efa:	60a0      	str	r0, [r4, #8]
 8003efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f00:	f7ff fdaa 	bl	8003a58 <memset>
 8003f04:	4620      	mov	r0, r4
 8003f06:	bd70      	pop	{r4, r5, r6, pc}

08003f08 <__sfp_lock_acquire>:
 8003f08:	4801      	ldr	r0, [pc, #4]	; (8003f10 <__sfp_lock_acquire+0x8>)
 8003f0a:	f000 b8b3 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8003f0e:	bf00      	nop
 8003f10:	20000231 	.word	0x20000231

08003f14 <__sfp_lock_release>:
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <__sfp_lock_release+0x8>)
 8003f16:	f000 b8ae 	b.w	8004076 <__retarget_lock_release_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	20000231 	.word	0x20000231

08003f20 <__sinit_lock_acquire>:
 8003f20:	4801      	ldr	r0, [pc, #4]	; (8003f28 <__sinit_lock_acquire+0x8>)
 8003f22:	f000 b8a7 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8003f26:	bf00      	nop
 8003f28:	20000232 	.word	0x20000232

08003f2c <__sinit_lock_release>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	; (8003f34 <__sinit_lock_release+0x8>)
 8003f2e:	f000 b8a2 	b.w	8004076 <__retarget_lock_release_recursive>
 8003f32:	bf00      	nop
 8003f34:	20000232 	.word	0x20000232

08003f38 <__sinit>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	f7ff fff0 	bl	8003f20 <__sinit_lock_acquire>
 8003f40:	69a3      	ldr	r3, [r4, #24]
 8003f42:	b11b      	cbz	r3, 8003f4c <__sinit+0x14>
 8003f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f48:	f7ff bff0 	b.w	8003f2c <__sinit_lock_release>
 8003f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f50:	6523      	str	r3, [r4, #80]	; 0x50
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <__sinit+0x68>)
 8003f54:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <__sinit+0x6c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	bf04      	itt	eq
 8003f5e:	2301      	moveq	r3, #1
 8003f60:	61a3      	streq	r3, [r4, #24]
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 f820 	bl	8003fa8 <__sfp>
 8003f68:	6060      	str	r0, [r4, #4]
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 f81c 	bl	8003fa8 <__sfp>
 8003f70:	60a0      	str	r0, [r4, #8]
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 f818 	bl	8003fa8 <__sfp>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	60e0      	str	r0, [r4, #12]
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	6860      	ldr	r0, [r4, #4]
 8003f80:	f7ff ff82 	bl	8003e88 <std>
 8003f84:	68a0      	ldr	r0, [r4, #8]
 8003f86:	2201      	movs	r2, #1
 8003f88:	2109      	movs	r1, #9
 8003f8a:	f7ff ff7d 	bl	8003e88 <std>
 8003f8e:	68e0      	ldr	r0, [r4, #12]
 8003f90:	2202      	movs	r2, #2
 8003f92:	2112      	movs	r1, #18
 8003f94:	f7ff ff78 	bl	8003e88 <std>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	61a3      	str	r3, [r4, #24]
 8003f9c:	e7d2      	b.n	8003f44 <__sinit+0xc>
 8003f9e:	bf00      	nop
 8003fa0:	08004b8c 	.word	0x08004b8c
 8003fa4:	08003ed1 	.word	0x08003ed1

08003fa8 <__sfp>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	4607      	mov	r7, r0
 8003fac:	f7ff ffac 	bl	8003f08 <__sfp_lock_acquire>
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <__sfp+0x84>)
 8003fb2:	681e      	ldr	r6, [r3, #0]
 8003fb4:	69b3      	ldr	r3, [r6, #24]
 8003fb6:	b913      	cbnz	r3, 8003fbe <__sfp+0x16>
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f7ff ffbd 	bl	8003f38 <__sinit>
 8003fbe:	3648      	adds	r6, #72	; 0x48
 8003fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	d503      	bpl.n	8003fd0 <__sfp+0x28>
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	b30b      	cbz	r3, 8004010 <__sfp+0x68>
 8003fcc:	6836      	ldr	r6, [r6, #0]
 8003fce:	e7f7      	b.n	8003fc0 <__sfp+0x18>
 8003fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fd4:	b9d5      	cbnz	r5, 800400c <__sfp+0x64>
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <__sfp+0x88>)
 8003fd8:	60e3      	str	r3, [r4, #12]
 8003fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fde:	6665      	str	r5, [r4, #100]	; 0x64
 8003fe0:	f000 f847 	bl	8004072 <__retarget_lock_init_recursive>
 8003fe4:	f7ff ff96 	bl	8003f14 <__sfp_lock_release>
 8003fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ff0:	6025      	str	r5, [r4, #0]
 8003ff2:	61a5      	str	r5, [r4, #24]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ffc:	f7ff fd2c 	bl	8003a58 <memset>
 8004000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004008:	4620      	mov	r0, r4
 800400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800400c:	3468      	adds	r4, #104	; 0x68
 800400e:	e7d9      	b.n	8003fc4 <__sfp+0x1c>
 8004010:	2104      	movs	r1, #4
 8004012:	4638      	mov	r0, r7
 8004014:	f7ff ff62 	bl	8003edc <__sfmoreglue>
 8004018:	4604      	mov	r4, r0
 800401a:	6030      	str	r0, [r6, #0]
 800401c:	2800      	cmp	r0, #0
 800401e:	d1d5      	bne.n	8003fcc <__sfp+0x24>
 8004020:	f7ff ff78 	bl	8003f14 <__sfp_lock_release>
 8004024:	230c      	movs	r3, #12
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	e7ee      	b.n	8004008 <__sfp+0x60>
 800402a:	bf00      	nop
 800402c:	08004b8c 	.word	0x08004b8c
 8004030:	ffff0001 	.word	0xffff0001

08004034 <_fwalk_reent>:
 8004034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004038:	4606      	mov	r6, r0
 800403a:	4688      	mov	r8, r1
 800403c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004040:	2700      	movs	r7, #0
 8004042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004046:	f1b9 0901 	subs.w	r9, r9, #1
 800404a:	d505      	bpl.n	8004058 <_fwalk_reent+0x24>
 800404c:	6824      	ldr	r4, [r4, #0]
 800404e:	2c00      	cmp	r4, #0
 8004050:	d1f7      	bne.n	8004042 <_fwalk_reent+0xe>
 8004052:	4638      	mov	r0, r7
 8004054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004058:	89ab      	ldrh	r3, [r5, #12]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d907      	bls.n	800406e <_fwalk_reent+0x3a>
 800405e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004062:	3301      	adds	r3, #1
 8004064:	d003      	beq.n	800406e <_fwalk_reent+0x3a>
 8004066:	4629      	mov	r1, r5
 8004068:	4630      	mov	r0, r6
 800406a:	47c0      	blx	r8
 800406c:	4307      	orrs	r7, r0
 800406e:	3568      	adds	r5, #104	; 0x68
 8004070:	e7e9      	b.n	8004046 <_fwalk_reent+0x12>

08004072 <__retarget_lock_init_recursive>:
 8004072:	4770      	bx	lr

08004074 <__retarget_lock_acquire_recursive>:
 8004074:	4770      	bx	lr

08004076 <__retarget_lock_release_recursive>:
 8004076:	4770      	bx	lr

08004078 <__swhatbuf_r>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	460e      	mov	r6, r1
 800407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004080:	2900      	cmp	r1, #0
 8004082:	b096      	sub	sp, #88	; 0x58
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	da08      	bge.n	800409c <__swhatbuf_r+0x24>
 800408a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	602a      	str	r2, [r5, #0]
 8004092:	061a      	lsls	r2, r3, #24
 8004094:	d410      	bmi.n	80040b8 <__swhatbuf_r+0x40>
 8004096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800409a:	e00e      	b.n	80040ba <__swhatbuf_r+0x42>
 800409c:	466a      	mov	r2, sp
 800409e:	f000 fc95 	bl	80049cc <_fstat_r>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	dbf1      	blt.n	800408a <__swhatbuf_r+0x12>
 80040a6:	9a01      	ldr	r2, [sp, #4]
 80040a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040b0:	425a      	negs	r2, r3
 80040b2:	415a      	adcs	r2, r3
 80040b4:	602a      	str	r2, [r5, #0]
 80040b6:	e7ee      	b.n	8004096 <__swhatbuf_r+0x1e>
 80040b8:	2340      	movs	r3, #64	; 0x40
 80040ba:	2000      	movs	r0, #0
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	b016      	add	sp, #88	; 0x58
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080040c4 <__smakebuf_r>:
 80040c4:	898b      	ldrh	r3, [r1, #12]
 80040c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040c8:	079d      	lsls	r5, r3, #30
 80040ca:	4606      	mov	r6, r0
 80040cc:	460c      	mov	r4, r1
 80040ce:	d507      	bpl.n	80040e0 <__smakebuf_r+0x1c>
 80040d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	2301      	movs	r3, #1
 80040da:	6163      	str	r3, [r4, #20]
 80040dc:	b002      	add	sp, #8
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	ab01      	add	r3, sp, #4
 80040e2:	466a      	mov	r2, sp
 80040e4:	f7ff ffc8 	bl	8004078 <__swhatbuf_r>
 80040e8:	9900      	ldr	r1, [sp, #0]
 80040ea:	4605      	mov	r5, r0
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 f895 	bl	800421c <_malloc_r>
 80040f2:	b948      	cbnz	r0, 8004108 <__smakebuf_r+0x44>
 80040f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f8:	059a      	lsls	r2, r3, #22
 80040fa:	d4ef      	bmi.n	80040dc <__smakebuf_r+0x18>
 80040fc:	f023 0303 	bic.w	r3, r3, #3
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	e7e3      	b.n	80040d0 <__smakebuf_r+0xc>
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <__smakebuf_r+0x7c>)
 800410a:	62b3      	str	r3, [r6, #40]	; 0x28
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	6020      	str	r0, [r4, #0]
 8004110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	9b00      	ldr	r3, [sp, #0]
 8004118:	6163      	str	r3, [r4, #20]
 800411a:	9b01      	ldr	r3, [sp, #4]
 800411c:	6120      	str	r0, [r4, #16]
 800411e:	b15b      	cbz	r3, 8004138 <__smakebuf_r+0x74>
 8004120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004124:	4630      	mov	r0, r6
 8004126:	f000 fc63 	bl	80049f0 <_isatty_r>
 800412a:	b128      	cbz	r0, 8004138 <__smakebuf_r+0x74>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	89a0      	ldrh	r0, [r4, #12]
 800413a:	4305      	orrs	r5, r0
 800413c:	81a5      	strh	r5, [r4, #12]
 800413e:	e7cd      	b.n	80040dc <__smakebuf_r+0x18>
 8004140:	08003ed1 	.word	0x08003ed1

08004144 <_free_r>:
 8004144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004146:	2900      	cmp	r1, #0
 8004148:	d044      	beq.n	80041d4 <_free_r+0x90>
 800414a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800414e:	9001      	str	r0, [sp, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f1a1 0404 	sub.w	r4, r1, #4
 8004156:	bfb8      	it	lt
 8004158:	18e4      	addlt	r4, r4, r3
 800415a:	f000 fc6b 	bl	8004a34 <__malloc_lock>
 800415e:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <_free_r+0x94>)
 8004160:	9801      	ldr	r0, [sp, #4]
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	b933      	cbnz	r3, 8004174 <_free_r+0x30>
 8004166:	6063      	str	r3, [r4, #4]
 8004168:	6014      	str	r4, [r2, #0]
 800416a:	b003      	add	sp, #12
 800416c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004170:	f000 bc66 	b.w	8004a40 <__malloc_unlock>
 8004174:	42a3      	cmp	r3, r4
 8004176:	d908      	bls.n	800418a <_free_r+0x46>
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	1961      	adds	r1, r4, r5
 800417c:	428b      	cmp	r3, r1
 800417e:	bf01      	itttt	eq
 8004180:	6819      	ldreq	r1, [r3, #0]
 8004182:	685b      	ldreq	r3, [r3, #4]
 8004184:	1949      	addeq	r1, r1, r5
 8004186:	6021      	streq	r1, [r4, #0]
 8004188:	e7ed      	b.n	8004166 <_free_r+0x22>
 800418a:	461a      	mov	r2, r3
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	b10b      	cbz	r3, 8004194 <_free_r+0x50>
 8004190:	42a3      	cmp	r3, r4
 8004192:	d9fa      	bls.n	800418a <_free_r+0x46>
 8004194:	6811      	ldr	r1, [r2, #0]
 8004196:	1855      	adds	r5, r2, r1
 8004198:	42a5      	cmp	r5, r4
 800419a:	d10b      	bne.n	80041b4 <_free_r+0x70>
 800419c:	6824      	ldr	r4, [r4, #0]
 800419e:	4421      	add	r1, r4
 80041a0:	1854      	adds	r4, r2, r1
 80041a2:	42a3      	cmp	r3, r4
 80041a4:	6011      	str	r1, [r2, #0]
 80041a6:	d1e0      	bne.n	800416a <_free_r+0x26>
 80041a8:	681c      	ldr	r4, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	6053      	str	r3, [r2, #4]
 80041ae:	4421      	add	r1, r4
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	e7da      	b.n	800416a <_free_r+0x26>
 80041b4:	d902      	bls.n	80041bc <_free_r+0x78>
 80041b6:	230c      	movs	r3, #12
 80041b8:	6003      	str	r3, [r0, #0]
 80041ba:	e7d6      	b.n	800416a <_free_r+0x26>
 80041bc:	6825      	ldr	r5, [r4, #0]
 80041be:	1961      	adds	r1, r4, r5
 80041c0:	428b      	cmp	r3, r1
 80041c2:	bf04      	itt	eq
 80041c4:	6819      	ldreq	r1, [r3, #0]
 80041c6:	685b      	ldreq	r3, [r3, #4]
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	bf04      	itt	eq
 80041cc:	1949      	addeq	r1, r1, r5
 80041ce:	6021      	streq	r1, [r4, #0]
 80041d0:	6054      	str	r4, [r2, #4]
 80041d2:	e7ca      	b.n	800416a <_free_r+0x26>
 80041d4:	b003      	add	sp, #12
 80041d6:	bd30      	pop	{r4, r5, pc}
 80041d8:	20000234 	.word	0x20000234

080041dc <sbrk_aligned>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4e0e      	ldr	r6, [pc, #56]	; (8004218 <sbrk_aligned+0x3c>)
 80041e0:	460c      	mov	r4, r1
 80041e2:	6831      	ldr	r1, [r6, #0]
 80041e4:	4605      	mov	r5, r0
 80041e6:	b911      	cbnz	r1, 80041ee <sbrk_aligned+0x12>
 80041e8:	f000 fb7a 	bl	80048e0 <_sbrk_r>
 80041ec:	6030      	str	r0, [r6, #0]
 80041ee:	4621      	mov	r1, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	f000 fb75 	bl	80048e0 <_sbrk_r>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	d00a      	beq.n	8004210 <sbrk_aligned+0x34>
 80041fa:	1cc4      	adds	r4, r0, #3
 80041fc:	f024 0403 	bic.w	r4, r4, #3
 8004200:	42a0      	cmp	r0, r4
 8004202:	d007      	beq.n	8004214 <sbrk_aligned+0x38>
 8004204:	1a21      	subs	r1, r4, r0
 8004206:	4628      	mov	r0, r5
 8004208:	f000 fb6a 	bl	80048e0 <_sbrk_r>
 800420c:	3001      	adds	r0, #1
 800420e:	d101      	bne.n	8004214 <sbrk_aligned+0x38>
 8004210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004214:	4620      	mov	r0, r4
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	20000238 	.word	0x20000238

0800421c <_malloc_r>:
 800421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	1ccd      	adds	r5, r1, #3
 8004222:	f025 0503 	bic.w	r5, r5, #3
 8004226:	3508      	adds	r5, #8
 8004228:	2d0c      	cmp	r5, #12
 800422a:	bf38      	it	cc
 800422c:	250c      	movcc	r5, #12
 800422e:	2d00      	cmp	r5, #0
 8004230:	4607      	mov	r7, r0
 8004232:	db01      	blt.n	8004238 <_malloc_r+0x1c>
 8004234:	42a9      	cmp	r1, r5
 8004236:	d905      	bls.n	8004244 <_malloc_r+0x28>
 8004238:	230c      	movs	r3, #12
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	2600      	movs	r6, #0
 800423e:	4630      	mov	r0, r6
 8004240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004244:	4e2e      	ldr	r6, [pc, #184]	; (8004300 <_malloc_r+0xe4>)
 8004246:	f000 fbf5 	bl	8004a34 <__malloc_lock>
 800424a:	6833      	ldr	r3, [r6, #0]
 800424c:	461c      	mov	r4, r3
 800424e:	bb34      	cbnz	r4, 800429e <_malloc_r+0x82>
 8004250:	4629      	mov	r1, r5
 8004252:	4638      	mov	r0, r7
 8004254:	f7ff ffc2 	bl	80041dc <sbrk_aligned>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	4604      	mov	r4, r0
 800425c:	d14d      	bne.n	80042fa <_malloc_r+0xde>
 800425e:	6834      	ldr	r4, [r6, #0]
 8004260:	4626      	mov	r6, r4
 8004262:	2e00      	cmp	r6, #0
 8004264:	d140      	bne.n	80042e8 <_malloc_r+0xcc>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	4631      	mov	r1, r6
 800426a:	4638      	mov	r0, r7
 800426c:	eb04 0803 	add.w	r8, r4, r3
 8004270:	f000 fb36 	bl	80048e0 <_sbrk_r>
 8004274:	4580      	cmp	r8, r0
 8004276:	d13a      	bne.n	80042ee <_malloc_r+0xd2>
 8004278:	6821      	ldr	r1, [r4, #0]
 800427a:	3503      	adds	r5, #3
 800427c:	1a6d      	subs	r5, r5, r1
 800427e:	f025 0503 	bic.w	r5, r5, #3
 8004282:	3508      	adds	r5, #8
 8004284:	2d0c      	cmp	r5, #12
 8004286:	bf38      	it	cc
 8004288:	250c      	movcc	r5, #12
 800428a:	4629      	mov	r1, r5
 800428c:	4638      	mov	r0, r7
 800428e:	f7ff ffa5 	bl	80041dc <sbrk_aligned>
 8004292:	3001      	adds	r0, #1
 8004294:	d02b      	beq.n	80042ee <_malloc_r+0xd2>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	442b      	add	r3, r5
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	e00e      	b.n	80042bc <_malloc_r+0xa0>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	1b52      	subs	r2, r2, r5
 80042a2:	d41e      	bmi.n	80042e2 <_malloc_r+0xc6>
 80042a4:	2a0b      	cmp	r2, #11
 80042a6:	d916      	bls.n	80042d6 <_malloc_r+0xba>
 80042a8:	1961      	adds	r1, r4, r5
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	6025      	str	r5, [r4, #0]
 80042ae:	bf18      	it	ne
 80042b0:	6059      	strne	r1, [r3, #4]
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	bf08      	it	eq
 80042b6:	6031      	streq	r1, [r6, #0]
 80042b8:	5162      	str	r2, [r4, r5]
 80042ba:	604b      	str	r3, [r1, #4]
 80042bc:	4638      	mov	r0, r7
 80042be:	f104 060b 	add.w	r6, r4, #11
 80042c2:	f000 fbbd 	bl	8004a40 <__malloc_unlock>
 80042c6:	f026 0607 	bic.w	r6, r6, #7
 80042ca:	1d23      	adds	r3, r4, #4
 80042cc:	1af2      	subs	r2, r6, r3
 80042ce:	d0b6      	beq.n	800423e <_malloc_r+0x22>
 80042d0:	1b9b      	subs	r3, r3, r6
 80042d2:	50a3      	str	r3, [r4, r2]
 80042d4:	e7b3      	b.n	800423e <_malloc_r+0x22>
 80042d6:	6862      	ldr	r2, [r4, #4]
 80042d8:	42a3      	cmp	r3, r4
 80042da:	bf0c      	ite	eq
 80042dc:	6032      	streq	r2, [r6, #0]
 80042de:	605a      	strne	r2, [r3, #4]
 80042e0:	e7ec      	b.n	80042bc <_malloc_r+0xa0>
 80042e2:	4623      	mov	r3, r4
 80042e4:	6864      	ldr	r4, [r4, #4]
 80042e6:	e7b2      	b.n	800424e <_malloc_r+0x32>
 80042e8:	4634      	mov	r4, r6
 80042ea:	6876      	ldr	r6, [r6, #4]
 80042ec:	e7b9      	b.n	8004262 <_malloc_r+0x46>
 80042ee:	230c      	movs	r3, #12
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4638      	mov	r0, r7
 80042f4:	f000 fba4 	bl	8004a40 <__malloc_unlock>
 80042f8:	e7a1      	b.n	800423e <_malloc_r+0x22>
 80042fa:	6025      	str	r5, [r4, #0]
 80042fc:	e7de      	b.n	80042bc <_malloc_r+0xa0>
 80042fe:	bf00      	nop
 8004300:	20000234 	.word	0x20000234

08004304 <__sfputc_r>:
 8004304:	6893      	ldr	r3, [r2, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	b410      	push	{r4}
 800430c:	6093      	str	r3, [r2, #8]
 800430e:	da08      	bge.n	8004322 <__sfputc_r+0x1e>
 8004310:	6994      	ldr	r4, [r2, #24]
 8004312:	42a3      	cmp	r3, r4
 8004314:	db01      	blt.n	800431a <__sfputc_r+0x16>
 8004316:	290a      	cmp	r1, #10
 8004318:	d103      	bne.n	8004322 <__sfputc_r+0x1e>
 800431a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800431e:	f7ff bc31 	b.w	8003b84 <__swbuf_r>
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	1c58      	adds	r0, r3, #1
 8004326:	6010      	str	r0, [r2, #0]
 8004328:	7019      	strb	r1, [r3, #0]
 800432a:	4608      	mov	r0, r1
 800432c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004330:	4770      	bx	lr

08004332 <__sfputs_r>:
 8004332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004334:	4606      	mov	r6, r0
 8004336:	460f      	mov	r7, r1
 8004338:	4614      	mov	r4, r2
 800433a:	18d5      	adds	r5, r2, r3
 800433c:	42ac      	cmp	r4, r5
 800433e:	d101      	bne.n	8004344 <__sfputs_r+0x12>
 8004340:	2000      	movs	r0, #0
 8004342:	e007      	b.n	8004354 <__sfputs_r+0x22>
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	463a      	mov	r2, r7
 800434a:	4630      	mov	r0, r6
 800434c:	f7ff ffda 	bl	8004304 <__sfputc_r>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d1f3      	bne.n	800433c <__sfputs_r+0xa>
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004358 <_vfiprintf_r>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	460d      	mov	r5, r1
 800435e:	b09d      	sub	sp, #116	; 0x74
 8004360:	4614      	mov	r4, r2
 8004362:	4698      	mov	r8, r3
 8004364:	4606      	mov	r6, r0
 8004366:	b118      	cbz	r0, 8004370 <_vfiprintf_r+0x18>
 8004368:	6983      	ldr	r3, [r0, #24]
 800436a:	b90b      	cbnz	r3, 8004370 <_vfiprintf_r+0x18>
 800436c:	f7ff fde4 	bl	8003f38 <__sinit>
 8004370:	4b89      	ldr	r3, [pc, #548]	; (8004598 <_vfiprintf_r+0x240>)
 8004372:	429d      	cmp	r5, r3
 8004374:	d11b      	bne.n	80043ae <_vfiprintf_r+0x56>
 8004376:	6875      	ldr	r5, [r6, #4]
 8004378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800437a:	07d9      	lsls	r1, r3, #31
 800437c:	d405      	bmi.n	800438a <_vfiprintf_r+0x32>
 800437e:	89ab      	ldrh	r3, [r5, #12]
 8004380:	059a      	lsls	r2, r3, #22
 8004382:	d402      	bmi.n	800438a <_vfiprintf_r+0x32>
 8004384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004386:	f7ff fe75 	bl	8004074 <__retarget_lock_acquire_recursive>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	d501      	bpl.n	8004394 <_vfiprintf_r+0x3c>
 8004390:	692b      	ldr	r3, [r5, #16]
 8004392:	b9eb      	cbnz	r3, 80043d0 <_vfiprintf_r+0x78>
 8004394:	4629      	mov	r1, r5
 8004396:	4630      	mov	r0, r6
 8004398:	f7ff fc46 	bl	8003c28 <__swsetup_r>
 800439c:	b1c0      	cbz	r0, 80043d0 <_vfiprintf_r+0x78>
 800439e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043a0:	07dc      	lsls	r4, r3, #31
 80043a2:	d50e      	bpl.n	80043c2 <_vfiprintf_r+0x6a>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a8:	b01d      	add	sp, #116	; 0x74
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ae:	4b7b      	ldr	r3, [pc, #492]	; (800459c <_vfiprintf_r+0x244>)
 80043b0:	429d      	cmp	r5, r3
 80043b2:	d101      	bne.n	80043b8 <_vfiprintf_r+0x60>
 80043b4:	68b5      	ldr	r5, [r6, #8]
 80043b6:	e7df      	b.n	8004378 <_vfiprintf_r+0x20>
 80043b8:	4b79      	ldr	r3, [pc, #484]	; (80045a0 <_vfiprintf_r+0x248>)
 80043ba:	429d      	cmp	r5, r3
 80043bc:	bf08      	it	eq
 80043be:	68f5      	ldreq	r5, [r6, #12]
 80043c0:	e7da      	b.n	8004378 <_vfiprintf_r+0x20>
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	0598      	lsls	r0, r3, #22
 80043c6:	d4ed      	bmi.n	80043a4 <_vfiprintf_r+0x4c>
 80043c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ca:	f7ff fe54 	bl	8004076 <__retarget_lock_release_recursive>
 80043ce:	e7e9      	b.n	80043a4 <_vfiprintf_r+0x4c>
 80043d0:	2300      	movs	r3, #0
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	2320      	movs	r3, #32
 80043d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043da:	f8cd 800c 	str.w	r8, [sp, #12]
 80043de:	2330      	movs	r3, #48	; 0x30
 80043e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045a4 <_vfiprintf_r+0x24c>
 80043e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e8:	f04f 0901 	mov.w	r9, #1
 80043ec:	4623      	mov	r3, r4
 80043ee:	469a      	mov	sl, r3
 80043f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f4:	b10a      	cbz	r2, 80043fa <_vfiprintf_r+0xa2>
 80043f6:	2a25      	cmp	r2, #37	; 0x25
 80043f8:	d1f9      	bne.n	80043ee <_vfiprintf_r+0x96>
 80043fa:	ebba 0b04 	subs.w	fp, sl, r4
 80043fe:	d00b      	beq.n	8004418 <_vfiprintf_r+0xc0>
 8004400:	465b      	mov	r3, fp
 8004402:	4622      	mov	r2, r4
 8004404:	4629      	mov	r1, r5
 8004406:	4630      	mov	r0, r6
 8004408:	f7ff ff93 	bl	8004332 <__sfputs_r>
 800440c:	3001      	adds	r0, #1
 800440e:	f000 80aa 	beq.w	8004566 <_vfiprintf_r+0x20e>
 8004412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004414:	445a      	add	r2, fp
 8004416:	9209      	str	r2, [sp, #36]	; 0x24
 8004418:	f89a 3000 	ldrb.w	r3, [sl]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a2 	beq.w	8004566 <_vfiprintf_r+0x20e>
 8004422:	2300      	movs	r3, #0
 8004424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442c:	f10a 0a01 	add.w	sl, sl, #1
 8004430:	9304      	str	r3, [sp, #16]
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004438:	931a      	str	r3, [sp, #104]	; 0x68
 800443a:	4654      	mov	r4, sl
 800443c:	2205      	movs	r2, #5
 800443e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004442:	4858      	ldr	r0, [pc, #352]	; (80045a4 <_vfiprintf_r+0x24c>)
 8004444:	f7fb fee4 	bl	8000210 <memchr>
 8004448:	9a04      	ldr	r2, [sp, #16]
 800444a:	b9d8      	cbnz	r0, 8004484 <_vfiprintf_r+0x12c>
 800444c:	06d1      	lsls	r1, r2, #27
 800444e:	bf44      	itt	mi
 8004450:	2320      	movmi	r3, #32
 8004452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004456:	0713      	lsls	r3, r2, #28
 8004458:	bf44      	itt	mi
 800445a:	232b      	movmi	r3, #43	; 0x2b
 800445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004460:	f89a 3000 	ldrb.w	r3, [sl]
 8004464:	2b2a      	cmp	r3, #42	; 0x2a
 8004466:	d015      	beq.n	8004494 <_vfiprintf_r+0x13c>
 8004468:	9a07      	ldr	r2, [sp, #28]
 800446a:	4654      	mov	r4, sl
 800446c:	2000      	movs	r0, #0
 800446e:	f04f 0c0a 	mov.w	ip, #10
 8004472:	4621      	mov	r1, r4
 8004474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004478:	3b30      	subs	r3, #48	; 0x30
 800447a:	2b09      	cmp	r3, #9
 800447c:	d94e      	bls.n	800451c <_vfiprintf_r+0x1c4>
 800447e:	b1b0      	cbz	r0, 80044ae <_vfiprintf_r+0x156>
 8004480:	9207      	str	r2, [sp, #28]
 8004482:	e014      	b.n	80044ae <_vfiprintf_r+0x156>
 8004484:	eba0 0308 	sub.w	r3, r0, r8
 8004488:	fa09 f303 	lsl.w	r3, r9, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	46a2      	mov	sl, r4
 8004492:	e7d2      	b.n	800443a <_vfiprintf_r+0xe2>
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	1d19      	adds	r1, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	9103      	str	r1, [sp, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	bfbb      	ittet	lt
 80044a0:	425b      	neglt	r3, r3
 80044a2:	f042 0202 	orrlt.w	r2, r2, #2
 80044a6:	9307      	strge	r3, [sp, #28]
 80044a8:	9307      	strlt	r3, [sp, #28]
 80044aa:	bfb8      	it	lt
 80044ac:	9204      	strlt	r2, [sp, #16]
 80044ae:	7823      	ldrb	r3, [r4, #0]
 80044b0:	2b2e      	cmp	r3, #46	; 0x2e
 80044b2:	d10c      	bne.n	80044ce <_vfiprintf_r+0x176>
 80044b4:	7863      	ldrb	r3, [r4, #1]
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d135      	bne.n	8004526 <_vfiprintf_r+0x1ce>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	9203      	str	r2, [sp, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044ca:	3402      	adds	r4, #2
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80045b4 <_vfiprintf_r+0x25c>
 80044d2:	7821      	ldrb	r1, [r4, #0]
 80044d4:	2203      	movs	r2, #3
 80044d6:	4650      	mov	r0, sl
 80044d8:	f7fb fe9a 	bl	8000210 <memchr>
 80044dc:	b140      	cbz	r0, 80044f0 <_vfiprintf_r+0x198>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	eba0 000a 	sub.w	r0, r0, sl
 80044e4:	fa03 f000 	lsl.w	r0, r3, r0
 80044e8:	9b04      	ldr	r3, [sp, #16]
 80044ea:	4303      	orrs	r3, r0
 80044ec:	3401      	adds	r4, #1
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	482c      	ldr	r0, [pc, #176]	; (80045a8 <_vfiprintf_r+0x250>)
 80044f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044fa:	2206      	movs	r2, #6
 80044fc:	f7fb fe88 	bl	8000210 <memchr>
 8004500:	2800      	cmp	r0, #0
 8004502:	d03f      	beq.n	8004584 <_vfiprintf_r+0x22c>
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <_vfiprintf_r+0x254>)
 8004506:	bb1b      	cbnz	r3, 8004550 <_vfiprintf_r+0x1f8>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	3307      	adds	r3, #7
 800450c:	f023 0307 	bic.w	r3, r3, #7
 8004510:	3308      	adds	r3, #8
 8004512:	9303      	str	r3, [sp, #12]
 8004514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004516:	443b      	add	r3, r7
 8004518:	9309      	str	r3, [sp, #36]	; 0x24
 800451a:	e767      	b.n	80043ec <_vfiprintf_r+0x94>
 800451c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004520:	460c      	mov	r4, r1
 8004522:	2001      	movs	r0, #1
 8004524:	e7a5      	b.n	8004472 <_vfiprintf_r+0x11a>
 8004526:	2300      	movs	r3, #0
 8004528:	3401      	adds	r4, #1
 800452a:	9305      	str	r3, [sp, #20]
 800452c:	4619      	mov	r1, r3
 800452e:	f04f 0c0a 	mov.w	ip, #10
 8004532:	4620      	mov	r0, r4
 8004534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004538:	3a30      	subs	r2, #48	; 0x30
 800453a:	2a09      	cmp	r2, #9
 800453c:	d903      	bls.n	8004546 <_vfiprintf_r+0x1ee>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0c5      	beq.n	80044ce <_vfiprintf_r+0x176>
 8004542:	9105      	str	r1, [sp, #20]
 8004544:	e7c3      	b.n	80044ce <_vfiprintf_r+0x176>
 8004546:	fb0c 2101 	mla	r1, ip, r1, r2
 800454a:	4604      	mov	r4, r0
 800454c:	2301      	movs	r3, #1
 800454e:	e7f0      	b.n	8004532 <_vfiprintf_r+0x1da>
 8004550:	ab03      	add	r3, sp, #12
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	462a      	mov	r2, r5
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <_vfiprintf_r+0x258>)
 8004558:	a904      	add	r1, sp, #16
 800455a:	4630      	mov	r0, r6
 800455c:	f3af 8000 	nop.w
 8004560:	4607      	mov	r7, r0
 8004562:	1c78      	adds	r0, r7, #1
 8004564:	d1d6      	bne.n	8004514 <_vfiprintf_r+0x1bc>
 8004566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004568:	07d9      	lsls	r1, r3, #31
 800456a:	d405      	bmi.n	8004578 <_vfiprintf_r+0x220>
 800456c:	89ab      	ldrh	r3, [r5, #12]
 800456e:	059a      	lsls	r2, r3, #22
 8004570:	d402      	bmi.n	8004578 <_vfiprintf_r+0x220>
 8004572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004574:	f7ff fd7f 	bl	8004076 <__retarget_lock_release_recursive>
 8004578:	89ab      	ldrh	r3, [r5, #12]
 800457a:	065b      	lsls	r3, r3, #25
 800457c:	f53f af12 	bmi.w	80043a4 <_vfiprintf_r+0x4c>
 8004580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004582:	e711      	b.n	80043a8 <_vfiprintf_r+0x50>
 8004584:	ab03      	add	r3, sp, #12
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	462a      	mov	r2, r5
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <_vfiprintf_r+0x258>)
 800458c:	a904      	add	r1, sp, #16
 800458e:	4630      	mov	r0, r6
 8004590:	f000 f880 	bl	8004694 <_printf_i>
 8004594:	e7e4      	b.n	8004560 <_vfiprintf_r+0x208>
 8004596:	bf00      	nop
 8004598:	08004bb0 	.word	0x08004bb0
 800459c:	08004bd0 	.word	0x08004bd0
 80045a0:	08004b90 	.word	0x08004b90
 80045a4:	08004bf0 	.word	0x08004bf0
 80045a8:	08004bfa 	.word	0x08004bfa
 80045ac:	00000000 	.word	0x00000000
 80045b0:	08004333 	.word	0x08004333
 80045b4:	08004bf6 	.word	0x08004bf6

080045b8 <_printf_common>:
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4616      	mov	r6, r2
 80045be:	4699      	mov	r9, r3
 80045c0:	688a      	ldr	r2, [r1, #8]
 80045c2:	690b      	ldr	r3, [r1, #16]
 80045c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bfb8      	it	lt
 80045cc:	4613      	movlt	r3, r2
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d4:	4607      	mov	r7, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	b10a      	cbz	r2, 80045de <_printf_common+0x26>
 80045da:	3301      	adds	r3, #1
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	6833      	ldrmi	r3, [r6, #0]
 80045e6:	3302      	addmi	r3, #2
 80045e8:	6033      	strmi	r3, [r6, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	f015 0506 	ands.w	r5, r5, #6
 80045f0:	d106      	bne.n	8004600 <_printf_common+0x48>
 80045f2:	f104 0a19 	add.w	sl, r4, #25
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc26      	bgt.n	800464e <_printf_common+0x96>
 8004600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004604:	1e13      	subs	r3, r2, #0
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	bf18      	it	ne
 800460a:	2301      	movne	r3, #1
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d42b      	bmi.n	8004668 <_printf_common+0xb0>
 8004610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004614:	4649      	mov	r1, r9
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	3001      	adds	r0, #1
 800461c:	d01e      	beq.n	800465c <_printf_common+0xa4>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	68e5      	ldr	r5, [r4, #12]
 8004622:	6832      	ldr	r2, [r6, #0]
 8004624:	f003 0306 	and.w	r3, r3, #6
 8004628:	2b04      	cmp	r3, #4
 800462a:	bf08      	it	eq
 800462c:	1aad      	subeq	r5, r5, r2
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	bf0c      	ite	eq
 8004634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004638:	2500      	movne	r5, #0
 800463a:	4293      	cmp	r3, r2
 800463c:	bfc4      	itt	gt
 800463e:	1a9b      	subgt	r3, r3, r2
 8004640:	18ed      	addgt	r5, r5, r3
 8004642:	2600      	movs	r6, #0
 8004644:	341a      	adds	r4, #26
 8004646:	42b5      	cmp	r5, r6
 8004648:	d11a      	bne.n	8004680 <_printf_common+0xc8>
 800464a:	2000      	movs	r0, #0
 800464c:	e008      	b.n	8004660 <_printf_common+0xa8>
 800464e:	2301      	movs	r3, #1
 8004650:	4652      	mov	r2, sl
 8004652:	4649      	mov	r1, r9
 8004654:	4638      	mov	r0, r7
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d103      	bne.n	8004664 <_printf_common+0xac>
 800465c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	3501      	adds	r5, #1
 8004666:	e7c6      	b.n	80045f6 <_printf_common+0x3e>
 8004668:	18e1      	adds	r1, r4, r3
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	2030      	movs	r0, #48	; 0x30
 800466e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004672:	4422      	add	r2, r4
 8004674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467c:	3302      	adds	r3, #2
 800467e:	e7c7      	b.n	8004610 <_printf_common+0x58>
 8004680:	2301      	movs	r3, #1
 8004682:	4622      	mov	r2, r4
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d0e6      	beq.n	800465c <_printf_common+0xa4>
 800468e:	3601      	adds	r6, #1
 8004690:	e7d9      	b.n	8004646 <_printf_common+0x8e>
	...

08004694 <_printf_i>:
 8004694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	7e0f      	ldrb	r7, [r1, #24]
 800469a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800469c:	2f78      	cmp	r7, #120	; 0x78
 800469e:	4691      	mov	r9, r2
 80046a0:	4680      	mov	r8, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	469a      	mov	sl, r3
 80046a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046aa:	d807      	bhi.n	80046bc <_printf_i+0x28>
 80046ac:	2f62      	cmp	r7, #98	; 0x62
 80046ae:	d80a      	bhi.n	80046c6 <_printf_i+0x32>
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f000 80d8 	beq.w	8004866 <_printf_i+0x1d2>
 80046b6:	2f58      	cmp	r7, #88	; 0x58
 80046b8:	f000 80a3 	beq.w	8004802 <_printf_i+0x16e>
 80046bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c4:	e03a      	b.n	800473c <_printf_i+0xa8>
 80046c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ca:	2b15      	cmp	r3, #21
 80046cc:	d8f6      	bhi.n	80046bc <_printf_i+0x28>
 80046ce:	a101      	add	r1, pc, #4	; (adr r1, 80046d4 <_printf_i+0x40>)
 80046d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	08004741 	.word	0x08004741
 80046dc:	080046bd 	.word	0x080046bd
 80046e0:	080046bd 	.word	0x080046bd
 80046e4:	080046bd 	.word	0x080046bd
 80046e8:	080046bd 	.word	0x080046bd
 80046ec:	08004741 	.word	0x08004741
 80046f0:	080046bd 	.word	0x080046bd
 80046f4:	080046bd 	.word	0x080046bd
 80046f8:	080046bd 	.word	0x080046bd
 80046fc:	080046bd 	.word	0x080046bd
 8004700:	0800484d 	.word	0x0800484d
 8004704:	08004771 	.word	0x08004771
 8004708:	0800482f 	.word	0x0800482f
 800470c:	080046bd 	.word	0x080046bd
 8004710:	080046bd 	.word	0x080046bd
 8004714:	0800486f 	.word	0x0800486f
 8004718:	080046bd 	.word	0x080046bd
 800471c:	08004771 	.word	0x08004771
 8004720:	080046bd 	.word	0x080046bd
 8004724:	080046bd 	.word	0x080046bd
 8004728:	08004837 	.word	0x08004837
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	1d1a      	adds	r2, r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	602a      	str	r2, [r5, #0]
 8004734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800473c:	2301      	movs	r3, #1
 800473e:	e0a3      	b.n	8004888 <_printf_i+0x1f4>
 8004740:	6820      	ldr	r0, [r4, #0]
 8004742:	6829      	ldr	r1, [r5, #0]
 8004744:	0606      	lsls	r6, r0, #24
 8004746:	f101 0304 	add.w	r3, r1, #4
 800474a:	d50a      	bpl.n	8004762 <_printf_i+0xce>
 800474c:	680e      	ldr	r6, [r1, #0]
 800474e:	602b      	str	r3, [r5, #0]
 8004750:	2e00      	cmp	r6, #0
 8004752:	da03      	bge.n	800475c <_printf_i+0xc8>
 8004754:	232d      	movs	r3, #45	; 0x2d
 8004756:	4276      	negs	r6, r6
 8004758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475c:	485e      	ldr	r0, [pc, #376]	; (80048d8 <_printf_i+0x244>)
 800475e:	230a      	movs	r3, #10
 8004760:	e019      	b.n	8004796 <_printf_i+0x102>
 8004762:	680e      	ldr	r6, [r1, #0]
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800476a:	bf18      	it	ne
 800476c:	b236      	sxthne	r6, r6
 800476e:	e7ef      	b.n	8004750 <_printf_i+0xbc>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1d19      	adds	r1, r3, #4
 8004776:	6029      	str	r1, [r5, #0]
 8004778:	0601      	lsls	r1, r0, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xec>
 800477c:	681e      	ldr	r6, [r3, #0]
 800477e:	e002      	b.n	8004786 <_printf_i+0xf2>
 8004780:	0646      	lsls	r6, r0, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xe8>
 8004784:	881e      	ldrh	r6, [r3, #0]
 8004786:	4854      	ldr	r0, [pc, #336]	; (80048d8 <_printf_i+0x244>)
 8004788:	2f6f      	cmp	r7, #111	; 0x6f
 800478a:	bf0c      	ite	eq
 800478c:	2308      	moveq	r3, #8
 800478e:	230a      	movne	r3, #10
 8004790:	2100      	movs	r1, #0
 8004792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004796:	6865      	ldr	r5, [r4, #4]
 8004798:	60a5      	str	r5, [r4, #8]
 800479a:	2d00      	cmp	r5, #0
 800479c:	bfa2      	ittt	ge
 800479e:	6821      	ldrge	r1, [r4, #0]
 80047a0:	f021 0104 	bicge.w	r1, r1, #4
 80047a4:	6021      	strge	r1, [r4, #0]
 80047a6:	b90e      	cbnz	r6, 80047ac <_printf_i+0x118>
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	d04d      	beq.n	8004848 <_printf_i+0x1b4>
 80047ac:	4615      	mov	r5, r2
 80047ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80047b2:	fb03 6711 	mls	r7, r3, r1, r6
 80047b6:	5dc7      	ldrb	r7, [r0, r7]
 80047b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047bc:	4637      	mov	r7, r6
 80047be:	42bb      	cmp	r3, r7
 80047c0:	460e      	mov	r6, r1
 80047c2:	d9f4      	bls.n	80047ae <_printf_i+0x11a>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10b      	bne.n	80047e0 <_printf_i+0x14c>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	07de      	lsls	r6, r3, #31
 80047cc:	d508      	bpl.n	80047e0 <_printf_i+0x14c>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4299      	cmp	r1, r3
 80047d4:	bfde      	ittt	le
 80047d6:	2330      	movle	r3, #48	; 0x30
 80047d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047e0:	1b52      	subs	r2, r2, r5
 80047e2:	6122      	str	r2, [r4, #16]
 80047e4:	f8cd a000 	str.w	sl, [sp]
 80047e8:	464b      	mov	r3, r9
 80047ea:	aa03      	add	r2, sp, #12
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f7ff fee2 	bl	80045b8 <_printf_common>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d14c      	bne.n	8004892 <_printf_i+0x1fe>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047fc:	b004      	add	sp, #16
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004802:	4835      	ldr	r0, [pc, #212]	; (80048d8 <_printf_i+0x244>)
 8004804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004808:	6829      	ldr	r1, [r5, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004810:	6029      	str	r1, [r5, #0]
 8004812:	061d      	lsls	r5, r3, #24
 8004814:	d514      	bpl.n	8004840 <_printf_i+0x1ac>
 8004816:	07df      	lsls	r7, r3, #31
 8004818:	bf44      	itt	mi
 800481a:	f043 0320 	orrmi.w	r3, r3, #32
 800481e:	6023      	strmi	r3, [r4, #0]
 8004820:	b91e      	cbnz	r6, 800482a <_printf_i+0x196>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f023 0320 	bic.w	r3, r3, #32
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	2310      	movs	r3, #16
 800482c:	e7b0      	b.n	8004790 <_printf_i+0xfc>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f043 0320 	orr.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	2378      	movs	r3, #120	; 0x78
 8004838:	4828      	ldr	r0, [pc, #160]	; (80048dc <_printf_i+0x248>)
 800483a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800483e:	e7e3      	b.n	8004808 <_printf_i+0x174>
 8004840:	0659      	lsls	r1, r3, #25
 8004842:	bf48      	it	mi
 8004844:	b2b6      	uxthmi	r6, r6
 8004846:	e7e6      	b.n	8004816 <_printf_i+0x182>
 8004848:	4615      	mov	r5, r2
 800484a:	e7bb      	b.n	80047c4 <_printf_i+0x130>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	6826      	ldr	r6, [r4, #0]
 8004850:	6961      	ldr	r1, [r4, #20]
 8004852:	1d18      	adds	r0, r3, #4
 8004854:	6028      	str	r0, [r5, #0]
 8004856:	0635      	lsls	r5, r6, #24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	d501      	bpl.n	8004860 <_printf_i+0x1cc>
 800485c:	6019      	str	r1, [r3, #0]
 800485e:	e002      	b.n	8004866 <_printf_i+0x1d2>
 8004860:	0670      	lsls	r0, r6, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0x1c8>
 8004864:	8019      	strh	r1, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	4615      	mov	r5, r2
 800486c:	e7ba      	b.n	80047e4 <_printf_i+0x150>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	602a      	str	r2, [r5, #0]
 8004874:	681d      	ldr	r5, [r3, #0]
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	2100      	movs	r1, #0
 800487a:	4628      	mov	r0, r5
 800487c:	f7fb fcc8 	bl	8000210 <memchr>
 8004880:	b108      	cbz	r0, 8004886 <_printf_i+0x1f2>
 8004882:	1b40      	subs	r0, r0, r5
 8004884:	6060      	str	r0, [r4, #4]
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	2300      	movs	r3, #0
 800488c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004890:	e7a8      	b.n	80047e4 <_printf_i+0x150>
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	462a      	mov	r2, r5
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	47d0      	blx	sl
 800489c:	3001      	adds	r0, #1
 800489e:	d0ab      	beq.n	80047f8 <_printf_i+0x164>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	079b      	lsls	r3, r3, #30
 80048a4:	d413      	bmi.n	80048ce <_printf_i+0x23a>
 80048a6:	68e0      	ldr	r0, [r4, #12]
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	4298      	cmp	r0, r3
 80048ac:	bfb8      	it	lt
 80048ae:	4618      	movlt	r0, r3
 80048b0:	e7a4      	b.n	80047fc <_printf_i+0x168>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4632      	mov	r2, r6
 80048b6:	4649      	mov	r1, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	47d0      	blx	sl
 80048bc:	3001      	adds	r0, #1
 80048be:	d09b      	beq.n	80047f8 <_printf_i+0x164>
 80048c0:	3501      	adds	r5, #1
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	9903      	ldr	r1, [sp, #12]
 80048c6:	1a5b      	subs	r3, r3, r1
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dcf2      	bgt.n	80048b2 <_printf_i+0x21e>
 80048cc:	e7eb      	b.n	80048a6 <_printf_i+0x212>
 80048ce:	2500      	movs	r5, #0
 80048d0:	f104 0619 	add.w	r6, r4, #25
 80048d4:	e7f5      	b.n	80048c2 <_printf_i+0x22e>
 80048d6:	bf00      	nop
 80048d8:	08004c01 	.word	0x08004c01
 80048dc:	08004c12 	.word	0x08004c12

080048e0 <_sbrk_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4d06      	ldr	r5, [pc, #24]	; (80048fc <_sbrk_r+0x1c>)
 80048e4:	2300      	movs	r3, #0
 80048e6:	4604      	mov	r4, r0
 80048e8:	4608      	mov	r0, r1
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	f7fc f9dc 	bl	8000ca8 <_sbrk>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d102      	bne.n	80048fa <_sbrk_r+0x1a>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	b103      	cbz	r3, 80048fa <_sbrk_r+0x1a>
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	2000023c 	.word	0x2000023c

08004900 <__sread>:
 8004900:	b510      	push	{r4, lr}
 8004902:	460c      	mov	r4, r1
 8004904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004908:	f000 f8a0 	bl	8004a4c <_read_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	bfab      	itete	ge
 8004910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004912:	89a3      	ldrhlt	r3, [r4, #12]
 8004914:	181b      	addge	r3, r3, r0
 8004916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800491a:	bfac      	ite	ge
 800491c:	6563      	strge	r3, [r4, #84]	; 0x54
 800491e:	81a3      	strhlt	r3, [r4, #12]
 8004920:	bd10      	pop	{r4, pc}

08004922 <__swrite>:
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	461f      	mov	r7, r3
 8004928:	898b      	ldrh	r3, [r1, #12]
 800492a:	05db      	lsls	r3, r3, #23
 800492c:	4605      	mov	r5, r0
 800492e:	460c      	mov	r4, r1
 8004930:	4616      	mov	r6, r2
 8004932:	d505      	bpl.n	8004940 <__swrite+0x1e>
 8004934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004938:	2302      	movs	r3, #2
 800493a:	2200      	movs	r2, #0
 800493c:	f000 f868 	bl	8004a10 <_lseek_r>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	4632      	mov	r2, r6
 800494e:	463b      	mov	r3, r7
 8004950:	4628      	mov	r0, r5
 8004952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	f000 b817 	b.w	8004988 <_write_r>

0800495a <__sseek>:
 800495a:	b510      	push	{r4, lr}
 800495c:	460c      	mov	r4, r1
 800495e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004962:	f000 f855 	bl	8004a10 <_lseek_r>
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	bf15      	itete	ne
 800496c:	6560      	strne	r0, [r4, #84]	; 0x54
 800496e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004976:	81a3      	strheq	r3, [r4, #12]
 8004978:	bf18      	it	ne
 800497a:	81a3      	strhne	r3, [r4, #12]
 800497c:	bd10      	pop	{r4, pc}

0800497e <__sclose>:
 800497e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004982:	f000 b813 	b.w	80049ac <_close_r>
	...

08004988 <_write_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d07      	ldr	r5, [pc, #28]	; (80049a8 <_write_r+0x20>)
 800498c:	4604      	mov	r4, r0
 800498e:	4608      	mov	r0, r1
 8004990:	4611      	mov	r1, r2
 8004992:	2200      	movs	r2, #0
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f7fc f935 	bl	8000c06 <_write>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_write_r+0x1e>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_write_r+0x1e>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	2000023c 	.word	0x2000023c

080049ac <_close_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d06      	ldr	r5, [pc, #24]	; (80049c8 <_close_r+0x1c>)
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	f7fc f941 	bl	8000c3e <_close>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_close_r+0x1a>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_close_r+0x1a>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	2000023c 	.word	0x2000023c

080049cc <_fstat_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d07      	ldr	r5, [pc, #28]	; (80049ec <_fstat_r+0x20>)
 80049d0:	2300      	movs	r3, #0
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	f7fc f93c 	bl	8000c56 <_fstat>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d102      	bne.n	80049e8 <_fstat_r+0x1c>
 80049e2:	682b      	ldr	r3, [r5, #0]
 80049e4:	b103      	cbz	r3, 80049e8 <_fstat_r+0x1c>
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	2000023c 	.word	0x2000023c

080049f0 <_isatty_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <_isatty_r+0x1c>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f7fc f93b 	bl	8000c76 <_isatty>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_isatty_r+0x1a>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_isatty_r+0x1a>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	2000023c 	.word	0x2000023c

08004a10 <_lseek_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4d07      	ldr	r5, [pc, #28]	; (8004a30 <_lseek_r+0x20>)
 8004a14:	4604      	mov	r4, r0
 8004a16:	4608      	mov	r0, r1
 8004a18:	4611      	mov	r1, r2
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	602a      	str	r2, [r5, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7fc f934 	bl	8000c8c <_lseek>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_lseek_r+0x1e>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_lseek_r+0x1e>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	2000023c 	.word	0x2000023c

08004a34 <__malloc_lock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__malloc_lock+0x8>)
 8004a36:	f7ff bb1d 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	20000230 	.word	0x20000230

08004a40 <__malloc_unlock>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__malloc_unlock+0x8>)
 8004a42:	f7ff bb18 	b.w	8004076 <__retarget_lock_release_recursive>
 8004a46:	bf00      	nop
 8004a48:	20000230 	.word	0x20000230

08004a4c <_read_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4d07      	ldr	r5, [pc, #28]	; (8004a6c <_read_r+0x20>)
 8004a50:	4604      	mov	r4, r0
 8004a52:	4608      	mov	r0, r1
 8004a54:	4611      	mov	r1, r2
 8004a56:	2200      	movs	r2, #0
 8004a58:	602a      	str	r2, [r5, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f7fc f8b6 	bl	8000bcc <_read>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d102      	bne.n	8004a6a <_read_r+0x1e>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	b103      	cbz	r3, 8004a6a <_read_r+0x1e>
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	2000023c 	.word	0x2000023c

08004a70 <_init>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr

08004a7c <_fini>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr
