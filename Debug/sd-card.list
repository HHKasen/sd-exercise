
sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba4c  0800ba4c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba54  0800ba54  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ba5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c40  20000094  0800baf0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cd4  0800baf0  00024cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faf9  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442e  00000000  00000000  0003fbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00043ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  00045a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006650  00000000  00000000  00047358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218a0  00000000  00000000  0004d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0932  00000000  00000000  0006f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fb7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079f8  00000000  00000000  0014fbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5a0 	.word	0x0800b5a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800b5a0 	.word	0x0800b5a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <xCommandTest>:
  "FreeRTOS command server.\r\nType Help to view a list of registered commands.\r\n";

BaseType_t xCommandTest(char *pcWriteBuffer,
		size_t xWriteBufferLen,
		const char *pcCommandString)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
//	printf("I am a dummy command\r\n");

	//assumbe buffer is big enough
	memset(pcWriteBuffer,'\0',xWriteBufferLen);
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	2100      	movs	r1, #0
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f009 fd55 	bl	800a084 <memset>
	//pcWriteBuffer = "I am a dummy\r\n";
	strcpy(pcWriteBuffer,"I am a dummy\r\n");
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <xCommandTest+0x38>)
 80005de:	461c      	mov	r4, r3
 80005e0:	4613      	mov	r3, r2
 80005e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005e4:	6020      	str	r0, [r4, #0]
 80005e6:	6061      	str	r1, [r4, #4]
 80005e8:	60a2      	str	r2, [r4, #8]
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	81a2      	strh	r2, [r4, #12]
 80005f0:	73a3      	strb	r3, [r4, #14]
	return pdFALSE;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd90      	pop	{r4, r7, pc}
 80005fc:	0800b608 	.word	0x0800b608

08000600 <vCommandConsoleTask>:
		xCommandTest,
		0
};

void vCommandConsoleTask( void *pvParameters )
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
////	Peripheral_Descriptor_t xConsole;
	int8_t cRxedChar, cInputIndex = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
//    parameter.  Cast the task parameter to the correct type. */
//	//xConsole = ( Peripheral_Descriptor_t ) pvParameters;

//	/* Send a welcome message to the user knows they are connected. */
//	FreeRTOS_write( xConsole, pcWelcomeMessage, strlen( pcWelcomeMessage ) );
	printf(pcWelcomeMessage);
 800060c:	4826      	ldr	r0, [pc, #152]	; (80006a8 <vCommandConsoleTask+0xa8>)
 800060e:	f009 fddd 	bl	800a1cc <puts>
	for( ;; )
	{
//		/* This implementation reads a single character at a time.  Wait in the
//        Blocked state until a character is received. */
//		FreeRTOS_read( xConsole, &cRxedChar, sizeof( cRxedChar ) );
		cRxedChar = getchar();
 8000612:	f009 fcf3 	bl	8009ffc <getchar>
 8000616:	4603      	mov	r3, r0
 8000618:	73bb      	strb	r3, [r7, #14]
		if( cRxedChar == '\r' )
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	2b0d      	cmp	r3, #13
 8000620:	d119      	bne.n	8000656 <vCommandConsoleTask+0x56>
//			printf("aah\r\n");
			/* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
			//FreeRTOS_write( xConsole, "\r\n", strlen( "\r\n" );
			putchar('\r');
 8000622:	200d      	movs	r0, #13
 8000624:	f009 fd4e 	bl	800a0c4 <putchar>
			putchar('\n');
 8000628:	200a      	movs	r0, #10
 800062a:	f009 fd4b 	bl	800a0c4 <putchar>
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
				//printf("The command str:\r\n");
				//printf(pcInputString);
				//printf("\r\n---\r\n");
				xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	491e      	ldr	r1, [pc, #120]	; (80006ac <vCommandConsoleTask+0xac>)
 8000632:	481f      	ldr	r0, [pc, #124]	; (80006b0 <vCommandConsoleTask+0xb0>)
 8000634:	f006 fa5c 	bl	8006af0 <FreeRTOS_CLIProcessCommand>
 8000638:	60b8      	str	r0, [r7, #8]
								MAX_OUTPUT_LENGTH/* The size of the output buffer. */
						);

				/* Write the output generated by the command interpreter to the
                console. */
				printf(pcOutputString);
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <vCommandConsoleTask+0xac>)
 800063c:	f009 fd2a 	bl	800a094 <iprintf>
				//FreeRTOS_write( xConsole, pcOutputString, strlen( pcOutputString ) );

			} while( xMoreDataToFollow != pdFALSE );
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f3      	bne.n	800062e <vCommandConsoleTask+0x2e>


			/* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
			cInputIndex = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
			memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 800064a:	2232      	movs	r2, #50	; 0x32
 800064c:	2100      	movs	r1, #0
 800064e:	4818      	ldr	r0, [pc, #96]	; (80006b0 <vCommandConsoleTask+0xb0>)
 8000650:	f009 fd18 	bl	800a084 <memset>
 8000654:	e7dd      	b.n	8000612 <vCommandConsoleTask+0x12>
		{
			/* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

			if( cRxedChar == '\n' )
 8000656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d0d9      	beq.n	8000612 <vCommandConsoleTask+0x12>
			{
				/* Ignore carriage returns. */
				//printf("oh?\r\n");
			}
			else if( cRxedChar == '\b' )
 800065e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000662:	2b08      	cmp	r3, #8
 8000664:	d10f      	bne.n	8000686 <vCommandConsoleTask+0x86>
			{
				/* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
				if( cInputIndex > 0 )
 8000666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066a:	2b00      	cmp	r3, #0
 800066c:	ddd1      	ble.n	8000612 <vCommandConsoleTask+0x12>
				{
					cInputIndex--;
 800066e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	3b01      	subs	r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
					pcInputString[ cInputIndex ] = '\0';
 800067a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <vCommandConsoleTask+0xb0>)
 8000680:	2100      	movs	r1, #0
 8000682:	54d1      	strb	r1, [r2, r3]
 8000684:	e7c5      	b.n	8000612 <vCommandConsoleTask+0x12>
			{
				/* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
				if( cInputIndex < MAX_INPUT_LENGTH )
 8000686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068a:	2b31      	cmp	r3, #49	; 0x31
 800068c:	dcc1      	bgt.n	8000612 <vCommandConsoleTask+0x12>
				{
					pcInputString[ cInputIndex ] = cRxedChar;
 800068e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000692:	4907      	ldr	r1, [pc, #28]	; (80006b0 <vCommandConsoleTask+0xb0>)
 8000694:	7bba      	ldrb	r2, [r7, #14]
 8000696:	54ca      	strb	r2, [r1, r3]
					cInputIndex++;
 8000698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73fb      	strb	r3, [r7, #15]
		cRxedChar = getchar();
 80006a4:	e7b5      	b.n	8000612 <vCommandConsoleTask+0x12>
 80006a6:	bf00      	nop
 80006a8:	0800b63c 	.word	0x0800b63c
 80006ac:	20000180 	.word	0x20000180
 80006b0:	2000014c 	.word	0x2000014c

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	f6ad 0dcc 	subw	sp, sp, #2252	; 0x8cc
 80006ba:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80006bc:	4b98      	ldr	r3, [pc, #608]	; (8000920 <main+0x26c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6858      	ldr	r0, [r3, #4]
 80006c2:	2300      	movs	r3, #0
 80006c4:	2202      	movs	r2, #2
 80006c6:	2100      	movs	r1, #0
 80006c8:	f009 fd88 	bl	800a1dc <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fcf2 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f94e 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 fa1a 	bl	8000b0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 f9ee 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80006dc:	f000 f9b6 	bl	8000a4c <MX_SPI2_Init>
  MX_FATFS_Init();
 80006e0:	f003 f93c 	bl	800395c <MX_FATFS_Init>
//  printf("about to make fs...\r\n");
//  res = f_mkfs("0",FM_ANY,0, work, sizeof work);
//  printf("mkfs res:%u\r\n",res);

  /* Register work area */
  res = f_mount(&fs, "", 0);
 80006e4:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80006e8:	2200      	movs	r2, #0
 80006ea:	498e      	ldr	r1, [pc, #568]	; (8000924 <main+0x270>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 fc53 	bl	8005f98 <f_mount>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
  printf("mnt res:%u\r\n",res);
 80006f8:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 80006fc:	4619      	mov	r1, r3
 80006fe:	488a      	ldr	r0, [pc, #552]	; (8000928 <main+0x274>)
 8000700:	f009 fcc8 	bl	800a094 <iprintf>

  /* Create a file as new */
  res = f_open(&fil, "hello.txt", FA_CREATE_NEW | FA_WRITE);
 8000704:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000708:	2206      	movs	r2, #6
 800070a:	4988      	ldr	r1, [pc, #544]	; (800092c <main+0x278>)
 800070c:	4618      	mov	r0, r3
 800070e:	f005 fca7 	bl	8006060 <f_open>
 8000712:	4603      	mov	r3, r0
 8000714:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
  printf("open res:%u\r\n",res);
 8000718:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 800071c:	4619      	mov	r1, r3
 800071e:	4884      	ldr	r0, [pc, #528]	; (8000930 <main+0x27c>)
 8000720:	f009 fcb8 	bl	800a094 <iprintf>

  /* Write a message */
  res = f_write(&fil, "Hello, World!\r\n", 15, &bw);
 8000724:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8000728:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 800072c:	220f      	movs	r2, #15
 800072e:	4981      	ldr	r1, [pc, #516]	; (8000934 <main+0x280>)
 8000730:	f005 fe5b 	bl	80063ea <f_write>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
  printf("write res:%u\r\n",res);
 800073a:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 800073e:	4619      	mov	r1, r3
 8000740:	487d      	ldr	r0, [pc, #500]	; (8000938 <main+0x284>)
 8000742:	f009 fca7 	bl	800a094 <iprintf>

  /* Close the file */
  f_close(&fil);
 8000746:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800074a:	4618      	mov	r0, r3
 800074c:	f006 f87a 	bl	8006844 <f_close>

  FRESULT fr;
  FILINFO fno;
  const char *fname = "hello.txt";
 8000750:	4b76      	ldr	r3, [pc, #472]	; (800092c <main+0x278>)
 8000752:	f8c7 38b8 	str.w	r3, [r7, #2232]	; 0x8b8


  printf("Test for \"%s\"...\r\n", fname);
 8000756:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800075a:	4878      	ldr	r0, [pc, #480]	; (800093c <main+0x288>)
 800075c:	f009 fc9a 	bl	800a094 <iprintf>

  fr = f_stat(fname, &fno);
 8000760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000764:	4619      	mov	r1, r3
 8000766:	f8d7 08b8 	ldr.w	r0, [r7, #2232]	; 0x8b8
 800076a:	f006 f89a 	bl	80068a2 <f_stat>
 800076e:	4603      	mov	r3, r0
 8000770:	f887 38b7 	strb.w	r3, [r7, #2231]	; 0x8b7
  switch (fr) {
 8000774:	f897 38b7 	ldrb.w	r3, [r7, #2231]	; 0x8b7
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <main+0xce>
 800077c:	2b04      	cmp	r3, #4
 800077e:	d07d      	beq.n	800087c <main+0x1c8>
 8000780:	e082      	b.n	8000888 <main+0x1d4>

  case FR_OK:
      printf("Size: %lu\r\n", fno.fsize);
 8000782:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8000786:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	486c      	ldr	r0, [pc, #432]	; (8000940 <main+0x28c>)
 8000790:	f009 fc80 	bl	800a094 <iprintf>
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8000794:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8000798:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800079c:	889b      	ldrh	r3, [r3, #4]
 800079e:	0a5b      	lsrs	r3, r3, #9
 80007a0:	b29b      	uxth	r3, r3
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80007a2:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80007a6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80007aa:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80007ae:	889b      	ldrh	r3, [r3, #4]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80007b0:	095b      	lsrs	r3, r3, #5
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	f003 020f 	and.w	r2, r3, #15
             (fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 80007b8:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80007bc:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80007c0:	889b      	ldrh	r3, [r3, #4]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80007c2:	f003 001f 	and.w	r0, r3, #31
             fno.ftime >> 11, fno.ftime >> 5 & 63);
 80007c6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80007ca:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80007ce:	88db      	ldrh	r3, [r3, #6]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80007d0:	0adb      	lsrs	r3, r3, #11
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	461c      	mov	r4, r3
             fno.ftime >> 11, fno.ftime >> 5 & 63);
 80007d6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80007da:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80007de:	88db      	ldrh	r3, [r3, #6]
      printf("Timestamp: %u-%02u-%02u, %02u:%02u\r\n",
 80007e0:	095b      	lsrs	r3, r3, #5
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	9400      	str	r4, [sp, #0]
 80007ec:	4603      	mov	r3, r0
 80007ee:	4855      	ldr	r0, [pc, #340]	; (8000944 <main+0x290>)
 80007f0:	f009 fc50 	bl	800a094 <iprintf>
      printf("Attributes: %c%c%c%c%c\r\n",
             (fno.fattrib & AM_DIR) ? 'D' : '-',
 80007f4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80007f8:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80007fc:	7a1b      	ldrb	r3, [r3, #8]
 80007fe:	f003 0310 	and.w	r3, r3, #16
      printf("Attributes: %c%c%c%c%c\r\n",
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <main+0x156>
 8000806:	2144      	movs	r1, #68	; 0x44
 8000808:	e000      	b.n	800080c <main+0x158>
 800080a:	212d      	movs	r1, #45	; 0x2d
             (fno.fattrib & AM_RDO) ? 'R' : '-',
 800080c:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8000810:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8000814:	7a1b      	ldrb	r3, [r3, #8]
 8000816:	f003 0301 	and.w	r3, r3, #1
      printf("Attributes: %c%c%c%c%c\r\n",
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <main+0x16e>
 800081e:	2052      	movs	r0, #82	; 0x52
 8000820:	e000      	b.n	8000824 <main+0x170>
 8000822:	202d      	movs	r0, #45	; 0x2d
             (fno.fattrib & AM_HID) ? 'H' : '-',
 8000824:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8000828:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800082c:	7a1b      	ldrb	r3, [r3, #8]
 800082e:	f003 0302 	and.w	r3, r3, #2
      printf("Attributes: %c%c%c%c%c\r\n",
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <main+0x186>
 8000836:	2448      	movs	r4, #72	; 0x48
 8000838:	e000      	b.n	800083c <main+0x188>
 800083a:	242d      	movs	r4, #45	; 0x2d
             (fno.fattrib & AM_SYS) ? 'S' : '-',
 800083c:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8000840:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8000844:	7a1b      	ldrb	r3, [r3, #8]
 8000846:	f003 0304 	and.w	r3, r3, #4
      printf("Attributes: %c%c%c%c%c\r\n",
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <main+0x19e>
 800084e:	2353      	movs	r3, #83	; 0x53
 8000850:	e000      	b.n	8000854 <main+0x1a0>
 8000852:	232d      	movs	r3, #45	; 0x2d
             (fno.fattrib & AM_ARC) ? 'A' : '-');
 8000854:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8000858:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 800085c:	7a12      	ldrb	r2, [r2, #8]
 800085e:	f002 0220 	and.w	r2, r2, #32
      printf("Attributes: %c%c%c%c%c\r\n",
 8000862:	2a00      	cmp	r2, #0
 8000864:	d001      	beq.n	800086a <main+0x1b6>
 8000866:	2241      	movs	r2, #65	; 0x41
 8000868:	e000      	b.n	800086c <main+0x1b8>
 800086a:	222d      	movs	r2, #45	; 0x2d
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4623      	mov	r3, r4
 8000872:	4602      	mov	r2, r0
 8000874:	4834      	ldr	r0, [pc, #208]	; (8000948 <main+0x294>)
 8000876:	f009 fc0d 	bl	800a094 <iprintf>
      break;
 800087a:	e00b      	b.n	8000894 <main+0x1e0>

  case FR_NO_FILE:
      printf("\"%s\" is not exist.\r\n", fname);
 800087c:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 8000880:	4832      	ldr	r0, [pc, #200]	; (800094c <main+0x298>)
 8000882:	f009 fc07 	bl	800a094 <iprintf>
      break;
 8000886:	e005      	b.n	8000894 <main+0x1e0>

  default:
      printf("An error occured. (%d)\n", fr);
 8000888:	f897 38b7 	ldrb.w	r3, [r7, #2231]	; 0x8b7
 800088c:	4619      	mov	r1, r3
 800088e:	4830      	ldr	r0, [pc, #192]	; (8000950 <main+0x29c>)
 8000890:	f009 fc00 	bl	800a094 <iprintf>
  }


  /* Unregister work area */
  f_mount(0, "", 0);
 8000894:	2200      	movs	r2, #0
 8000896:	4923      	ldr	r1, [pc, #140]	; (8000924 <main+0x270>)
 8000898:	2000      	movs	r0, #0
 800089a:	f005 fb7d 	bl	8005f98 <f_mount>
//              "Toggle 1",   // Name of task
//              1024,         // Stack size (bytes in ESP32, words in FreeRTOS)
//              NULL,         // Parameter to pass to function
//              1,            // Task priority (0 to configMAX_PRIORITIES - 1)
//              NULL);         // Task handle
  xTaskCreate(  // Use xTaskCreate() in vanilla FreeRTOS
 800089e:	2300      	movs	r3, #0
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	2301      	movs	r3, #1
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ac:	4929      	ldr	r1, [pc, #164]	; (8000954 <main+0x2a0>)
 80008ae:	482a      	ldr	r0, [pc, #168]	; (8000958 <main+0x2a4>)
 80008b0:	f008 f8e5 	bl	8008a7e <xTaskCreate>
              1024,         // Stack size (bytes in ESP32, words in FreeRTOS)
              NULL,         // Parameter to pass to function
              1,            // Task priority (0 to configMAX_PRIORITIES - 1)
              NULL);         // Task handle

  FreeRTOS_CLIRegisterCommand( (const) &xTestCmd);
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <main+0x2a8>)
 80008b6:	f006 f8d7 	bl	8006a68 <FreeRTOS_CLIRegisterCommand>

  vTaskStartScheduler();
 80008ba:	f008 fa25 	bl	8008d08 <vTaskStartScheduler>
  printf("If we're here, theres a problem\r\n");
 80008be:	4828      	ldr	r0, [pc, #160]	; (8000960 <main+0x2ac>)
 80008c0:	f009 fc84 	bl	800a1cc <puts>
  char strBuf[50] = {0};
 80008c4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80008c8:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	3304      	adds	r3, #4
 80008d2:	222e      	movs	r2, #46	; 0x2e
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f009 fbd4 	bl	800a084 <memset>
  char c = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 38b6 	strb.w	r3, [r7, #2230]	; 0x8b6
  printf("getchar\r\n");
 80008e2:	4820      	ldr	r0, [pc, #128]	; (8000964 <main+0x2b0>)
 80008e4:	f009 fc72 	bl	800a1cc <puts>
  {

//	scanf("%s",strBuf);
//	printf("Heres your command:%s\r\n",strBuf);

	  c = getchar();
 80008e8:	f009 fb88 	bl	8009ffc <getchar>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 38b6 	strb.w	r3, [r7, #2230]	; 0x8b6
	  printf("Heres your char:%c\r\n",c);
 80008f2:	f897 38b6 	ldrb.w	r3, [r7, #2230]	; 0x8b6
 80008f6:	4619      	mov	r1, r3
 80008f8:	481b      	ldr	r0, [pc, #108]	; (8000968 <main+0x2b4>)
 80008fa:	f009 fbcb 	bl	800a094 <iprintf>


	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <main+0x2b8>)
 8000904:	f000 feb2 	bl	800166c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000908:	2064      	movs	r0, #100	; 0x64
 800090a:	f000 fc15 	bl	8001138 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4816      	ldr	r0, [pc, #88]	; (800096c <main+0x2b8>)
 8000914:	f000 feaa 	bl	800166c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000918:	2064      	movs	r0, #100	; 0x64
 800091a:	f000 fc0d 	bl	8001138 <HAL_Delay>
	  c = getchar();
 800091e:	e7e3      	b.n	80008e8 <main+0x234>
 8000920:	20000030 	.word	0x20000030
 8000924:	0800b688 	.word	0x0800b688
 8000928:	0800b68c 	.word	0x0800b68c
 800092c:	0800b69c 	.word	0x0800b69c
 8000930:	0800b6a8 	.word	0x0800b6a8
 8000934:	0800b6b8 	.word	0x0800b6b8
 8000938:	0800b6c8 	.word	0x0800b6c8
 800093c:	0800b6d8 	.word	0x0800b6d8
 8000940:	0800b6ec 	.word	0x0800b6ec
 8000944:	0800b6f8 	.word	0x0800b6f8
 8000948:	0800b720 	.word	0x0800b720
 800094c:	0800b73c 	.word	0x0800b73c
 8000950:	0800b754 	.word	0x0800b754
 8000954:	0800b76c 	.word	0x0800b76c
 8000958:	08000601 	.word	0x08000601
 800095c:	0800b8fc 	.word	0x0800b8fc
 8000960:	0800b778 	.word	0x0800b778
 8000964:	0800b79c 	.word	0x0800b79c
 8000968:	0800b7a8 	.word	0x0800b7a8
 800096c:	40020000 	.word	0x40020000

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f009 fb80 	bl	800a084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <SystemClock_Config+0xd4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a29      	ldr	r2, [pc, #164]	; (8000a44 <SystemClock_Config+0xd4>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <SystemClock_Config+0xd4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <SystemClock_Config+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <SystemClock_Config+0xd8>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <SystemClock_Config+0xd8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e4:	2310      	movs	r3, #16
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f9ca 	bl	8001d98 <HAL_RCC_OscConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 f939 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fe38 	bl	80016a0 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a36:	f000 f923 	bl	8000c80 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_SPI2_Init+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a80:	2230      	movs	r2, #48	; 0x30
 8000a82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_SPI2_Init+0x64>)
 8000a9e:	f001 fc19 	bl	80022d4 <HAL_SPI_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 f8ea 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000b0 	.word	0x200000b0
 8000ab4:	40003800 	.word	0x40003800

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f002 fad0 	bl	8003094 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f8c1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000108 	.word	0x20000108
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a33      	ldr	r2, [pc, #204]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a2c      	ldr	r2, [pc, #176]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_GPIO_Init+0xec>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	4819      	ldr	r0, [pc, #100]	; (8000bfc <MX_GPIO_Init+0xf0>)
 8000b98:	f000 fd68 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000bb4:	f000 fbc6 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <MX_GPIO_Init+0xf0>)
 8000bd0:	f000 fbb8 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000bec:	f000 fbaa 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000

08000c08 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c10:	1d39      	adds	r1, r7, #4
 8000c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c16:	2201      	movs	r2, #1
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <__io_putchar+0x20>)
 8000c1a:	f002 fa88 	bl	800312e <HAL_UART_Transmit>

  return ch;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000108 	.word	0x20000108

08000c2c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	//__HAL_UART_CLEAR_OREFLAG(&huart2);

	uint8_t _char;

	HAL_UART_Receive(&huart2, (uint8_t *)&_char, 1, HAL_MAX_DELAY);
 8000c32:	1df9      	adds	r1, r7, #7
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <__io_getchar+0x2c>)
 8000c3c:	f002 fb09 	bl	8003252 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&_char, 1, HAL_MAX_DELAY);
 8000c40:	1df9      	adds	r1, r7, #7
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c46:	2201      	movs	r2, #1
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <__io_getchar+0x2c>)
 8000c4a:	f002 fa70 	bl	800312e <HAL_UART_Transmit>
	//if (_char == '\r') {
	//	unsigned char repl = '\n';
	//	HAL_UART_Transmit(&huart2, &repl, 1, HAL_MAX_DELAY);
	//}

	return _char;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]

}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000108 	.word	0x20000108

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f000 fa43 	bl	80010f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010000 	.word	0x40010000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f000 fb0d 	bl	80012f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_SPI_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12c      	bne.n	8000d60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_SPI_MspInit+0x88>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_SPI_MspInit+0x88>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_SPI_MspInit+0x88>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_SPI_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_SPI_MspInit+0x88>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_SPI_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d50:	2305      	movs	r3, #5
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_SPI_MspInit+0x8c>)
 8000d5c:	f000 faf2 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40003800 	.word	0x40003800
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dea:	f000 faab 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	2019      	movs	r0, #25
 8000e1a:	f000 fa69 	bl	80012f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e1e:	2019      	movs	r0, #25
 8000e20:	f000 fa82 	bl	8001328 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_InitTick+0xa0>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_InitTick+0xa0>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6453      	str	r3, [r2, #68]	; 0x44
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_InitTick+0xa0>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e40:	f107 0210 	add.w	r2, r7, #16
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fd42 	bl	80018d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e50:	f000 fd2c 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8000e54:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e58:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <HAL_InitTick+0xa4>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	0c9b      	lsrs	r3, r3, #18
 8000e60:	3b01      	subs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_InitTick+0xa8>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_InitTick+0xac>)
 8000e68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_InitTick+0xa8>)
 8000e6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_InitTick+0xa8>)
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_InitTick+0xa8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_InitTick+0xa8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_InitTick+0xa8>)
 8000e86:	f001 fe57 	bl	8002b38 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d104      	bne.n	8000e9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e90:	4806      	ldr	r0, [pc, #24]	; (8000eac <HAL_InitTick+0xa8>)
 8000e92:	f001 feab 	bl	8002bec <HAL_TIM_Base_Start_IT>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	200001e4 	.word	0x200001e4
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ee6:	f001 fef1 	bl	8002ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001e4 	.word	0x200001e4

08000ef4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00a      	b.n	8000f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f06:	f7ff fe91 	bl	8000c2c <__io_getchar>
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	b2ca      	uxtb	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf0      	blt.n	8000f06 <_read+0x12>
  }

  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e009      	b.n	8000f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe5d 	bl	8000c08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf1      	blt.n	8000f40 <_write+0x12>
  }
  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_close>:

int _close(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_isatty>:

int _isatty(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f008 fff6 	bl	8009ff0 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000400 	.word	0x00000400
 8001034:	2000022c 	.word	0x2000022c
 8001038:	20004cd8 	.word	0x20004cd8

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f008 ffc7 	bl	800a020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fb0f 	bl	80006b4 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010a4:	0800ba5c 	.word	0x0800ba5c
  ldr r2, =_sbss
 80010a8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010ac:	20004cd4 	.word	0x20004cd4

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f8fc 	bl	80012da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff fe8e 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fdd0 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	20000230 	.word	0x20000230

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000230 	.word	0x20000230

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff4c 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001302:	f7ff ff61 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f7ff ffb1 	bl	8001274 <NVIC_EncodePriority>
 8001312:	4602      	mov	r2, r0
 8001314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff80 	bl	8001220 <__NVIC_SetPriority>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff54 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e165      	b.n	800162c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8154 	bne.w	8001626 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80ae 	beq.w	8001626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <HAL_GPIO_Init+0x300>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a5c      	ldr	r2, [pc, #368]	; (8001644 <HAL_GPIO_Init+0x300>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x300>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_GPIO_Init+0x304>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_GPIO_Init+0x308>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x21a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <HAL_GPIO_Init+0x30c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x216>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4d      	ldr	r2, [pc, #308]	; (8001654 <HAL_GPIO_Init+0x310>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x212>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <HAL_GPIO_Init+0x314>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x20e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x318>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x20a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x31c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x206>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x320>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x202>
 8001542:	2306      	movs	r3, #6
 8001544:	e00c      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 8001546:	2307      	movs	r3, #7
 8001548:	e00a      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 800154a:	2305      	movs	r3, #5
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 800154e:	2304      	movs	r3, #4
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x21c>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4935      	ldr	r1, [pc, #212]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_GPIO_Init+0x324>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a2:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_GPIO_Init+0x324>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x324>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_GPIO_Init+0x324>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_GPIO_Init+0x324>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_GPIO_Init+0x324>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x324>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_GPIO_Init+0x324>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f ae96 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40013800 	.word	0x40013800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40021400 	.word	0x40021400
 8001664:	40021800 	.word	0x40021800
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	619a      	str	r2, [r3, #24]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0cc      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d90c      	bls.n	80016dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b65      	ldr	r3, [pc, #404]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b8      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a52      	ldr	r2, [pc, #328]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	494d      	ldr	r1, [pc, #308]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d044      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d119      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e07f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d003      	beq.n	800175e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	2b03      	cmp	r3, #3
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e06f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e067      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 0203 	bic.w	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4934      	ldr	r1, [pc, #208]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff fcc6 	bl	8001120 <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	e00a      	b.n	80017ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7ff fcc2 	bl	8001120 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e04f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 020c 	and.w	r2, r3, #12
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1eb      	bne.n	8001798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d20c      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e032      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4916      	ldr	r1, [pc, #88]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	490e      	ldr	r1, [pc, #56]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001826:	f000 f887 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	490a      	ldr	r1, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	5ccb      	ldrb	r3, [r1, r3]
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fadc 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00
 800185c:	40023800 	.word	0x40023800
 8001860:	0800b90c 	.word	0x0800b90c
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_RCC_GetHCLKFreq+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000000 	.word	0x20000000

08001884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001888:	f7ff fff0 	bl	800186c <HAL_RCC_GetHCLKFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	0a9b      	lsrs	r3, r3, #10
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	0800b91c 	.word	0x0800b91c

080018ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b0:	f7ff ffdc 	bl	800186c <HAL_RCC_GetHCLKFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0b5b      	lsrs	r3, r3, #13
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	4903      	ldr	r1, [pc, #12]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	0800b91c 	.word	0x0800b91c

080018d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	220f      	movs	r2, #15
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_RCC_GetClockConfig+0x60>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 020f 	and.w	r2, r3, #15
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	601a      	str	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b0ae      	sub	sp, #184	; 0xb8
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195e:	4bcb      	ldr	r3, [pc, #812]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b0c      	cmp	r3, #12
 8001968:	f200 8206 	bhi.w	8001d78 <HAL_RCC_GetSysClockFreq+0x440>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <HAL_RCC_GetSysClockFreq+0x3c>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	080019a9 	.word	0x080019a9
 8001978:	08001d79 	.word	0x08001d79
 800197c:	08001d79 	.word	0x08001d79
 8001980:	08001d79 	.word	0x08001d79
 8001984:	080019b1 	.word	0x080019b1
 8001988:	08001d79 	.word	0x08001d79
 800198c:	08001d79 	.word	0x08001d79
 8001990:	08001d79 	.word	0x08001d79
 8001994:	080019b9 	.word	0x080019b9
 8001998:	08001d79 	.word	0x08001d79
 800199c:	08001d79 	.word	0x08001d79
 80019a0:	08001d79 	.word	0x08001d79
 80019a4:	08001ba9 	.word	0x08001ba9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4bb9      	ldr	r3, [pc, #740]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x358>)
 80019aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019ae:	e1e7      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b0:	4bb8      	ldr	r3, [pc, #736]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019b6:	e1e3      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4bb4      	ldr	r3, [pc, #720]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c4:	4bb1      	ldr	r3, [pc, #708]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d071      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d0:	4bae      	ldr	r3, [pc, #696]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	2200      	movs	r2, #0
 80019d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6439      	str	r1, [r7, #64]	; 0x40
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a28:	4649      	mov	r1, r9
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4641      	mov	r1, r8
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4641      	mov	r1, r8
 8001a38:	1a51      	subs	r1, r2, r1
 8001a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a50:	4649      	mov	r1, r9
 8001a52:	00cb      	lsls	r3, r1, #3
 8001a54:	4641      	mov	r1, r8
 8001a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	00ca      	lsls	r2, r1, #3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	4622      	mov	r2, r4
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	eb42 0303 	adc.w	r3, r2, r3
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a80:	4629      	mov	r1, r5
 8001a82:	024b      	lsls	r3, r1, #9
 8001a84:	4621      	mov	r1, r4
 8001a86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	024a      	lsls	r2, r1, #9
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a96:	2200      	movs	r2, #0
 8001a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aa0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001aa4:	f7fe fc0c 	bl	80002c0 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ab2:	e067      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab4:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	099b      	lsrs	r3, r3, #6
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ac0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ace:	2300      	movs	r3, #0
 8001ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ad2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	462b      	mov	r3, r5
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4621      	mov	r1, r4
 8001af0:	1a51      	subs	r1, r2, r1
 8001af2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001af4:	4629      	mov	r1, r5
 8001af6:	eb63 0301 	sbc.w	r3, r3, r1
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b08:	4649      	mov	r1, r9
 8001b0a:	018b      	lsls	r3, r1, #6
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b12:	4641      	mov	r1, r8
 8001b14:	018a      	lsls	r2, r1, #6
 8001b16:	4641      	mov	r1, r8
 8001b18:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b36:	4692      	mov	sl, r2
 8001b38:	469b      	mov	fp, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	eb1a 0303 	adds.w	r3, sl, r3
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	462b      	mov	r3, r5
 8001b44:	eb4b 0303 	adc.w	r3, fp, r3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8001b70:	677a      	str	r2, [r7, #116]	; 0x74
 8001b72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b76:	f7fe fba3 	bl	80002c0 <__aeabi_uldivmod>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ba6:	e0eb      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d06b      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bdc:	4622      	mov	r2, r4
 8001bde:	462b      	mov	r3, r5
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0159      	lsls	r1, r3, #5
 8001bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bee:	0150      	lsls	r0, r2, #5
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	1a51      	subs	r1, r2, r1
 8001bf8:	61b9      	str	r1, [r7, #24]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c0e:	4659      	mov	r1, fp
 8001c10:	018b      	lsls	r3, r1, #6
 8001c12:	4651      	mov	r1, sl
 8001c14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c18:	4651      	mov	r1, sl
 8001c1a:	018a      	lsls	r2, r1, #6
 8001c1c:	4651      	mov	r1, sl
 8001c1e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c22:	4659      	mov	r1, fp
 8001c24:	eb63 0901 	sbc.w	r9, r3, r1
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3c:	4690      	mov	r8, r2
 8001c3e:	4699      	mov	r9, r3
 8001c40:	4623      	mov	r3, r4
 8001c42:	eb18 0303 	adds.w	r3, r8, r3
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	462b      	mov	r3, r5
 8001c4a:	eb49 0303 	adc.w	r3, r9, r3
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	024b      	lsls	r3, r1, #9
 8001c60:	4621      	mov	r1, r4
 8001c62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c66:	4621      	mov	r1, r4
 8001c68:	024a      	lsls	r2, r1, #9
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c72:	2200      	movs	r2, #0
 8001c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c7c:	f7fe fb20 	bl	80002c0 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c8a:	e065      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x420>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c98:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8001caa:	2300      	movs	r3, #0
 8001cac:	657b      	str	r3, [r7, #84]	; 0x54
 8001cae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cb2:	4642      	mov	r2, r8
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	0159      	lsls	r1, r3, #5
 8001cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc4:	0150      	lsls	r0, r2, #5
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4641      	mov	r1, r8
 8001ccc:	1a51      	subs	r1, r2, r1
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	4649      	mov	r1, r9
 8001cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	018b      	lsls	r3, r1, #6
 8001ce8:	4651      	mov	r1, sl
 8001cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cee:	4651      	mov	r1, sl
 8001cf0:	018a      	lsls	r2, r1, #6
 8001cf2:	4651      	mov	r1, sl
 8001cf4:	1a54      	subs	r4, r2, r1
 8001cf6:	4659      	mov	r1, fp
 8001cf8:	eb63 0501 	sbc.w	r5, r3, r1
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	00eb      	lsls	r3, r5, #3
 8001d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0a:	00e2      	lsls	r2, r4, #3
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	4643      	mov	r3, r8
 8001d12:	18e3      	adds	r3, r4, r3
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	464b      	mov	r3, r9
 8001d18:	eb45 0303 	adc.w	r3, r5, r3
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	028b      	lsls	r3, r1, #10
 8001d2e:	4621      	mov	r1, r4
 8001d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d34:	4621      	mov	r1, r4
 8001d36:	028a      	lsls	r2, r1, #10
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d40:	2200      	movs	r2, #0
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d44:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d4a:	f7fe fab9 	bl	80002c0 <__aeabi_uldivmod>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4613      	mov	r3, r2
 8001d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0f1b      	lsrs	r3, r3, #28
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d76:	e003      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	37b8      	adds	r7, #184	; 0xb8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400

08001d98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e28d      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8083 	beq.w	8001ebe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db8:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d019      	beq.n	8001df8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dc4:	4b91      	ldr	r3, [pc, #580]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dd0:	4b8e      	ldr	r3, [pc, #568]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ddc:	d00c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dde:	4b8b      	ldr	r3, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d112      	bne.n	8001e10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df6:	d10b      	bne.n	8001e10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	4b84      	ldr	r3, [pc, #528]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d05b      	beq.n	8001ebc <HAL_RCC_OscConfig+0x124>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d157      	bne.n	8001ebc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e25a      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d106      	bne.n	8001e28 <HAL_RCC_OscConfig+0x90>
 8001e1a:	4b7c      	ldr	r3, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7b      	ldr	r2, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e01d      	b.n	8001e64 <HAL_RCC_OscConfig+0xcc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0xb4>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0xcc>
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a6e      	ldr	r2, [pc, #440]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6b      	ldr	r2, [pc, #428]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f958 	bl	8001120 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f954 	bl	8001120 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e21f      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b61      	ldr	r3, [pc, #388]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0xdc>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f944 	bl	8001120 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f940 	bl	8001120 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e20b      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x104>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06f      	beq.n	8001faa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d017      	beq.n	8001f06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x186>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1d3      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x278>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff f8ed 	bl	8001120 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f8e9 	bl	8001120 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1b4      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4925      	ldr	r1, [pc, #148]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x278>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f8cc 	bl	8001120 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f8c8 	bl	8001120 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e193      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f8ac 	bl	8001120 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f8a8 	bl	8001120 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e173      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x234>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f895 	bl	8001120 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f891 	bl	8001120 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e15c      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b8a      	ldr	r3, [pc, #552]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b83      	ldr	r3, [pc, #524]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a7e      	ldr	r2, [pc, #504]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b79      	ldr	r3, [pc, #484]	; (8002248 <HAL_RCC_OscConfig+0x4b0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x4b0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x4b0>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff f851 	bl	8001120 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff f84d 	bl	8001120 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e118      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6c      	ldr	r3, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x4b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x31e>
 80020a8:	4b66      	ldr	r3, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a65      	ldr	r2, [pc, #404]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x358>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x340>
 80020be:	4b61      	ldr	r3, [pc, #388]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a60      	ldr	r2, [pc, #384]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5d      	ldr	r2, [pc, #372]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x358>
 80020d8:	4b5a      	ldr	r3, [pc, #360]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a59      	ldr	r2, [pc, #356]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a56      	ldr	r2, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f812 	bl	8001120 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f80e 	bl	8001120 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0d7      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x368>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7fe fffc 	bl	8001120 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fff8 	bl	8001120 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0c1      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ad 	beq.w	80022c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216a:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d060      	beq.n	8002238 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d145      	bne.n	800220a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_RCC_OscConfig+0x4b4>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ffcc 	bl	8001120 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe ffc8 	bl	8001120 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e093      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	071b      	lsls	r3, r3, #28
 80021d6:	491b      	ldr	r1, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x4b4>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7fe ff9d 	bl	8001120 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe ff99 	bl	8001120 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e064      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x452>
 8002208:	e05c      	b.n	80022c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_RCC_OscConfig+0x4b4>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe ff86 	bl	8001120 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe ff82 	bl	8001120 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e04d      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x480>
 8002236:	e045      	b.n	80022c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d107      	bne.n	8002250 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e040      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000
 800224c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_RCC_OscConfig+0x538>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d030      	beq.n	80022c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d129      	bne.n	80022c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d122      	bne.n	80022c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002288:	4293      	cmp	r3, r2
 800228a:	d119      	bne.n	80022c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	3b01      	subs	r3, #1
 800229a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d10f      	bne.n	80022c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07b      	b.n	80023de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f6:	d009      	beq.n	800230c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
 80022fe:	e005      	b.n	800230c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fcdc 	bl	8000ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	ea42 0103 	orr.w	r1, r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	f003 0104 	and.w	r1, r3, #4
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f003 0210 	and.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_SPI_Transmit+0x22>
 8002404:	2302      	movs	r3, #2
 8002406:	e126      	b.n	8002656 <HAL_SPI_Transmit+0x270>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002410:	f7fe fe86 	bl	8001120 <HAL_GetTick>
 8002414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800242a:	e10b      	b.n	8002644 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_Transmit+0x52>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800243c:	e102      	b.n	8002644 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2203      	movs	r2, #3
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002484:	d10f      	bne.n	80024a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d007      	beq.n	80024c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024cc:	d14b      	bne.n	8002566 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_Transmit+0xf6>
 80024d6:	8afb      	ldrh	r3, [r7, #22]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d13e      	bne.n	800255a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	881a      	ldrh	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	1c9a      	adds	r2, r3, #2
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002500:	e02b      	b.n	800255a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d112      	bne.n	8002536 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	86da      	strh	r2, [r3, #54]	; 0x36
 8002534:	e011      	b.n	800255a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002536:	f7fe fdf3 	bl	8001120 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d803      	bhi.n	800254e <HAL_SPI_Transmit+0x168>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254c:	d102      	bne.n	8002554 <HAL_SPI_Transmit+0x16e>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002558:	e074      	b.n	8002644 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ce      	bne.n	8002502 <HAL_SPI_Transmit+0x11c>
 8002564:	e04c      	b.n	8002600 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_SPI_Transmit+0x18e>
 800256e:	8afb      	ldrh	r3, [r7, #22]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d140      	bne.n	80025f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800259a:	e02c      	b.n	80025f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d113      	bne.n	80025d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	330c      	adds	r3, #12
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80025d0:	e011      	b.n	80025f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d2:	f7fe fda5 	bl	8001120 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d803      	bhi.n	80025ea <HAL_SPI_Transmit+0x204>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e8:	d102      	bne.n	80025f0 <HAL_SPI_Transmit+0x20a>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025f4:	e026      	b.n	8002644 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1cd      	bne.n	800259c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fa55 	bl	8002ab4 <SPI_EndRxTxTransaction>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e000      	b.n	8002644 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002654:	7ffb      	ldrb	r3, [r7, #31]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b08c      	sub	sp, #48	; 0x30
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800266c:	2301      	movs	r3, #1
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_SPI_TransmitReceive+0x26>
 8002680:	2302      	movs	r3, #2
 8002682:	e18a      	b.n	800299a <HAL_SPI_TransmitReceive+0x33c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800268c:	f7fe fd48 	bl	8001120 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d00f      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x70>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026b4:	d107      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x68>
 80026be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d003      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026cc:	e15b      	b.n	8002986 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_SPI_TransmitReceive+0x82>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_TransmitReceive+0x82>
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026e6:	e14e      	b.n	8002986 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d003      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2205      	movs	r2, #5
 80026f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	887a      	ldrh	r2, [r7, #2]
 800271e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d007      	beq.n	8002750 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002758:	d178      	bne.n	800284c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x10a>
 8002762:	8b7b      	ldrh	r3, [r7, #26]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d166      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800278c:	e053      	b.n	8002836 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d11b      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x176>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x176>
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d113      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d119      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x1b8>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d014      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	b292      	uxth	r2, r2
 80027f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	1c9a      	adds	r2, r3, #2
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002812:	2301      	movs	r3, #1
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002816:	f7fe fc83 	bl	8001120 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002822:	429a      	cmp	r2, r3
 8002824:	d807      	bhi.n	8002836 <HAL_SPI_TransmitReceive+0x1d8>
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282c:	d003      	beq.n	8002836 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002834:	e0a7      	b.n	8002986 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1a6      	bne.n	800278e <HAL_SPI_TransmitReceive+0x130>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1a1      	bne.n	800278e <HAL_SPI_TransmitReceive+0x130>
 800284a:	e07c      	b.n	8002946 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_SPI_TransmitReceive+0x1fc>
 8002854:	8b7b      	ldrh	r3, [r7, #26]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d16b      	bne.n	8002932 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002880:	e057      	b.n	8002932 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d11c      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x26c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d017      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x26c>
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d114      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d119      	bne.n	800290c <HAL_SPI_TransmitReceive+0x2ae>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002908:	2301      	movs	r3, #1
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800290c:	f7fe fc08 	bl	8001120 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002918:	429a      	cmp	r2, r3
 800291a:	d803      	bhi.n	8002924 <HAL_SPI_TransmitReceive+0x2c6>
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002922:	d102      	bne.n	800292a <HAL_SPI_TransmitReceive+0x2cc>
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002930:	e029      	b.n	8002986 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1a2      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x224>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d19d      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f8b2 	bl	8002ab4 <SPI_EndRxTxTransaction>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002962:	e010      	b.n	8002986 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	e000      	b.n	8002986 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002984:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800299a:	4618      	mov	r0, r3
 800299c:	3730      	adds	r7, #48	; 0x30
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029b4:	f7fe fbb4 	bl	8001120 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029c4:	f7fe fbac 	bl	8001120 <HAL_GetTick>
 80029c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	015b      	lsls	r3, r3, #5
 80029d0:	0d1b      	lsrs	r3, r3, #20
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029da:	e054      	b.n	8002a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e2:	d050      	beq.n	8002a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029e4:	f7fe fb9c 	bl	8001120 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d902      	bls.n	80029fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d13d      	bne.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a12:	d111      	bne.n	8002a38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1c:	d004      	beq.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d107      	bne.n	8002a38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a40:	d10f      	bne.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e017      	b.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d19b      	bne.n	80029dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <SPI_EndRxTxTransaction+0x7c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <SPI_EndRxTxTransaction+0x80>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0d5b      	lsrs	r3, r3, #21
 8002acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ade:	d112      	bne.n	8002b06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff ff5a 	bl	80029a4 <SPI_WaitFlagStateUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e00f      	b.n	8002b26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d0f2      	beq.n	8002b06 <SPI_EndRxTxTransaction+0x52>
 8002b20:	e000      	b.n	8002b24 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b22:	bf00      	nop
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000
 8002b34:	165e9f81 	.word	0x165e9f81

08002b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e041      	b.n	8002bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f839 	bl	8002bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 f9d8 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e04e      	b.n	8002ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d022      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d01d      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d018      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d013      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00e      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d009      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d004      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x80>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d010      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8e:	e007      	b.n	8002ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40010400 	.word	0x40010400
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40001800 	.word	0x40001800

08002ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d122      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d11b      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0202 	mvn.w	r2, #2
 8002cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8ee 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8e0 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f8f1 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d122      	bne.n	8002d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d11b      	bne.n	8002d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0204 	mvn.w	r2, #4
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f8c4 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8b6 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f8c7 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0208 	mvn.w	r2, #8
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f89a 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f88c 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f89d 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0210 	mvn.w	r2, #16
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f870 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f862 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f873 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0201 	mvn.w	r2, #1
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd ff06 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b80      	cmp	r3, #128	; 0x80
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f902 	bl	8003080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d107      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f838 	bl	8002f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d107      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0220 	mvn.w	r2, #32
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8cc 	bl	800306c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <TIM_Base_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d00f      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3d      	ldr	r2, [pc, #244]	; (8003044 <TIM_Base_SetConfig+0x118>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <TIM_Base_SetConfig+0x11c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	; (800304c <TIM_Base_SetConfig+0x120>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <TIM_Base_SetConfig+0x124>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <TIM_Base_SetConfig+0x114>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d027      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <TIM_Base_SetConfig+0x118>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d023      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <TIM_Base_SetConfig+0x11c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	; (800304c <TIM_Base_SetConfig+0x120>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a29      	ldr	r2, [pc, #164]	; (8003050 <TIM_Base_SetConfig+0x124>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d017      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <TIM_Base_SetConfig+0x128>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <TIM_Base_SetConfig+0x12c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00f      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	; (800305c <TIM_Base_SetConfig+0x130>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <TIM_Base_SetConfig+0x134>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a24      	ldr	r2, [pc, #144]	; (8003064 <TIM_Base_SetConfig+0x138>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <TIM_Base_SetConfig+0x13c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <TIM_Base_SetConfig+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <TIM_Base_SetConfig+0x124>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	615a      	str	r2, [r3, #20]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40010400 	.word	0x40010400
 8003054:	40014000 	.word	0x40014000
 8003058:	40014400 	.word	0x40014400
 800305c:	40014800 	.word	0x40014800
 8003060:	40001800 	.word	0x40001800
 8003064:	40001c00 	.word	0x40001c00
 8003068:	40002000 	.word	0x40002000

0800306c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e03f      	b.n	8003126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fe5a 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9cb 	bl	8003474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08a      	sub	sp, #40	; 0x28
 8003132:	af02      	add	r7, sp, #8
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d17c      	bne.n	8003248 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_UART_Transmit+0x2c>
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e075      	b.n	800324a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_UART_Transmit+0x3e>
 8003168:	2302      	movs	r3, #2
 800316a:	e06e      	b.n	800324a <HAL_UART_Transmit+0x11c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	; 0x21
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003182:	f7fd ffcd 	bl	8001120 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319c:	d108      	bne.n	80031b0 <HAL_UART_Transmit+0x82>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e003      	b.n	80031b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031c0:	e02a      	b.n	8003218 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8e2 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e036      	b.n	800324a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	3302      	adds	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e007      	b.n	800320a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1cf      	bne.n	80031c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2140      	movs	r1, #64	; 0x40
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f8b2 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e006      	b.n	800324a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b08a      	sub	sp, #40	; 0x28
 8003256:	af02      	add	r7, sp, #8
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b20      	cmp	r3, #32
 8003270:	f040 808c 	bne.w	800338c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Receive+0x2e>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e084      	b.n	800338e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_UART_Receive+0x40>
 800328e:	2302      	movs	r3, #2
 8003290:	e07d      	b.n	800338e <HAL_UART_Receive+0x13c>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2222      	movs	r2, #34	; 0x22
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ae:	f7fd ff37 	bl	8001120 <HAL_GetTick>
 80032b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d108      	bne.n	80032dc <HAL_UART_Receive+0x8a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e003      	b.n	80032e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032ec:	e043      	b.n	8003376 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2120      	movs	r1, #32
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f84c 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e042      	b.n	800338e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10c      	bne.n	8003328 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	b29a      	uxth	r2, r3
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	3302      	adds	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e01f      	b.n	8003368 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d007      	beq.n	8003342 <HAL_UART_Receive+0xf0>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_UART_Receive+0xfe>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e008      	b.n	8003362 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800335c:	b2da      	uxtb	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3301      	adds	r3, #1
 8003366:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1b6      	bne.n	80032ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b090      	sub	sp, #64	; 0x40
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	e050      	b.n	800344a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ae:	d04c      	beq.n	800344a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b6:	f7fd feb3 	bl	8001120 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d241      	bcs.n	800344a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033e6:	637a      	str	r2, [r7, #52]	; 0x34
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e5      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	613b      	str	r3, [r7, #16]
   return(result);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	63bb      	str	r3, [r7, #56]	; 0x38
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341a:	623a      	str	r2, [r7, #32]
 800341c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	69f9      	ldr	r1, [r7, #28]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	61bb      	str	r3, [r7, #24]
   return(result);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e5      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e00f      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d09f      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3740      	adds	r7, #64	; 0x40
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b0c0      	sub	sp, #256	; 0x100
 800347a:	af00      	add	r7, sp, #0
 800347c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	ea40 0301 	orr.w	r3, r0, r1
 800349c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034cc:	f021 010c 	bic.w	r1, r1, #12
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034da:	430b      	orrs	r3, r1
 80034dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	6999      	ldr	r1, [r3, #24]
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	ea40 0301 	orr.w	r3, r0, r1
 80034fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <UART_SetConfig+0x2cc>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d005      	beq.n	8003514 <UART_SetConfig+0xa0>
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <UART_SetConfig+0x2d0>)
 8003510:	429a      	cmp	r2, r3
 8003512:	d104      	bne.n	800351e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7fe f9ca 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8003518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800351c:	e003      	b.n	8003526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800351e:	f7fe f9b1 	bl	8001884 <HAL_RCC_GetPCLK1Freq>
 8003522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	f040 810c 	bne.w	800374c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003538:	2200      	movs	r2, #0
 800353a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800353e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003546:	4622      	mov	r2, r4
 8003548:	462b      	mov	r3, r5
 800354a:	1891      	adds	r1, r2, r2
 800354c:	65b9      	str	r1, [r7, #88]	; 0x58
 800354e:	415b      	adcs	r3, r3
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003556:	4621      	mov	r1, r4
 8003558:	eb12 0801 	adds.w	r8, r2, r1
 800355c:	4629      	mov	r1, r5
 800355e:	eb43 0901 	adc.w	r9, r3, r1
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003576:	4690      	mov	r8, r2
 8003578:	4699      	mov	r9, r3
 800357a:	4623      	mov	r3, r4
 800357c:	eb18 0303 	adds.w	r3, r8, r3
 8003580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003584:	462b      	mov	r3, r5
 8003586:	eb49 0303 	adc.w	r3, r9, r3
 800358a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800359a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800359e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035a2:	460b      	mov	r3, r1
 80035a4:	18db      	adds	r3, r3, r3
 80035a6:	653b      	str	r3, [r7, #80]	; 0x50
 80035a8:	4613      	mov	r3, r2
 80035aa:	eb42 0303 	adc.w	r3, r2, r3
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
 80035b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035b8:	f7fc fe82 	bl	80002c0 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <UART_SetConfig+0x2d4>)
 80035c2:	fba3 2302 	umull	r2, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	011c      	lsls	r4, r3, #4
 80035ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035e4:	415b      	adcs	r3, r3
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ec:	4641      	mov	r1, r8
 80035ee:	eb12 0a01 	adds.w	sl, r2, r1
 80035f2:	4649      	mov	r1, r9
 80035f4:	eb43 0b01 	adc.w	fp, r3, r1
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800360c:	4692      	mov	sl, r2
 800360e:	469b      	mov	fp, r3
 8003610:	4643      	mov	r3, r8
 8003612:	eb1a 0303 	adds.w	r3, sl, r3
 8003616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800361a:	464b      	mov	r3, r9
 800361c:	eb4b 0303 	adc.w	r3, fp, r3
 8003620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003638:	460b      	mov	r3, r1
 800363a:	18db      	adds	r3, r3, r3
 800363c:	643b      	str	r3, [r7, #64]	; 0x40
 800363e:	4613      	mov	r3, r2
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
 8003646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800364a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800364e:	f7fc fe37 	bl	80002c0 <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4611      	mov	r1, r2
 8003658:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <UART_SetConfig+0x2d4>)
 800365a:	fba3 2301 	umull	r2, r3, r3, r1
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2264      	movs	r2, #100	; 0x64
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	1acb      	subs	r3, r1, r3
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <UART_SetConfig+0x2d4>)
 8003670:	fba3 2302 	umull	r2, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800367c:	441c      	add	r4, r3
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800368c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	63b9      	str	r1, [r7, #56]	; 0x38
 8003698:	415b      	adcs	r3, r3
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036a0:	4641      	mov	r1, r8
 80036a2:	1851      	adds	r1, r2, r1
 80036a4:	6339      	str	r1, [r7, #48]	; 0x30
 80036a6:	4649      	mov	r1, r9
 80036a8:	414b      	adcs	r3, r1
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036b8:	4659      	mov	r1, fp
 80036ba:	00cb      	lsls	r3, r1, #3
 80036bc:	4651      	mov	r1, sl
 80036be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c2:	4651      	mov	r1, sl
 80036c4:	00ca      	lsls	r2, r1, #3
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	4642      	mov	r2, r8
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036d4:	464b      	mov	r3, r9
 80036d6:	460a      	mov	r2, r1
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036f4:	460b      	mov	r3, r1
 80036f6:	18db      	adds	r3, r3, r3
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	4613      	mov	r3, r2
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800370a:	f7fc fdd9 	bl	80002c0 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <UART_SetConfig+0x2d4>)
 8003714:	fba3 1302 	umull	r1, r3, r3, r2
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	2164      	movs	r1, #100	; 0x64
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	3332      	adds	r3, #50	; 0x32
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <UART_SetConfig+0x2d4>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	f003 0207 	and.w	r2, r3, #7
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4422      	add	r2, r4
 800373a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800373c:	e105      	b.n	800394a <UART_SetConfig+0x4d6>
 800373e:	bf00      	nop
 8003740:	40011000 	.word	0x40011000
 8003744:	40011400 	.word	0x40011400
 8003748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800374c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800375a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800375e:	4642      	mov	r2, r8
 8003760:	464b      	mov	r3, r9
 8003762:	1891      	adds	r1, r2, r2
 8003764:	6239      	str	r1, [r7, #32]
 8003766:	415b      	adcs	r3, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800376e:	4641      	mov	r1, r8
 8003770:	1854      	adds	r4, r2, r1
 8003772:	4649      	mov	r1, r9
 8003774:	eb43 0501 	adc.w	r5, r3, r1
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	00eb      	lsls	r3, r5, #3
 8003782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003786:	00e2      	lsls	r2, r4, #3
 8003788:	4614      	mov	r4, r2
 800378a:	461d      	mov	r5, r3
 800378c:	4643      	mov	r3, r8
 800378e:	18e3      	adds	r3, r4, r3
 8003790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003794:	464b      	mov	r3, r9
 8003796:	eb45 0303 	adc.w	r3, r5, r3
 800379a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ba:	4629      	mov	r1, r5
 80037bc:	008b      	lsls	r3, r1, #2
 80037be:	4621      	mov	r1, r4
 80037c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c4:	4621      	mov	r1, r4
 80037c6:	008a      	lsls	r2, r1, #2
 80037c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037cc:	f7fc fd78 	bl	80002c0 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4b60      	ldr	r3, [pc, #384]	; (8003958 <UART_SetConfig+0x4e4>)
 80037d6:	fba3 2302 	umull	r2, r3, r3, r2
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	011c      	lsls	r4, r3, #4
 80037de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037f0:	4642      	mov	r2, r8
 80037f2:	464b      	mov	r3, r9
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	61b9      	str	r1, [r7, #24]
 80037f8:	415b      	adcs	r3, r3
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003800:	4641      	mov	r1, r8
 8003802:	1851      	adds	r1, r2, r1
 8003804:	6139      	str	r1, [r7, #16]
 8003806:	4649      	mov	r1, r9
 8003808:	414b      	adcs	r3, r1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003818:	4659      	mov	r1, fp
 800381a:	00cb      	lsls	r3, r1, #3
 800381c:	4651      	mov	r1, sl
 800381e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003822:	4651      	mov	r1, sl
 8003824:	00ca      	lsls	r2, r1, #3
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	4603      	mov	r3, r0
 800382c:	4642      	mov	r2, r8
 800382e:	189b      	adds	r3, r3, r2
 8003830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003834:	464b      	mov	r3, r9
 8003836:	460a      	mov	r2, r1
 8003838:	eb42 0303 	adc.w	r3, r2, r3
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	67bb      	str	r3, [r7, #120]	; 0x78
 800384a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003858:	4649      	mov	r1, r9
 800385a:	008b      	lsls	r3, r1, #2
 800385c:	4641      	mov	r1, r8
 800385e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003862:	4641      	mov	r1, r8
 8003864:	008a      	lsls	r2, r1, #2
 8003866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800386a:	f7fc fd29 	bl	80002c0 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <UART_SetConfig+0x4e4>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	; 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	3332      	adds	r3, #50	; 0x32
 8003886:	4a34      	ldr	r2, [pc, #208]	; (8003958 <UART_SetConfig+0x4e4>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003892:	441c      	add	r4, r3
 8003894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003898:	2200      	movs	r2, #0
 800389a:	673b      	str	r3, [r7, #112]	; 0x70
 800389c:	677a      	str	r2, [r7, #116]	; 0x74
 800389e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038a2:	4642      	mov	r2, r8
 80038a4:	464b      	mov	r3, r9
 80038a6:	1891      	adds	r1, r2, r2
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	415b      	adcs	r3, r3
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b2:	4641      	mov	r1, r8
 80038b4:	1851      	adds	r1, r2, r1
 80038b6:	6039      	str	r1, [r7, #0]
 80038b8:	4649      	mov	r1, r9
 80038ba:	414b      	adcs	r3, r1
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038ca:	4659      	mov	r1, fp
 80038cc:	00cb      	lsls	r3, r1, #3
 80038ce:	4651      	mov	r1, sl
 80038d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d4:	4651      	mov	r1, sl
 80038d6:	00ca      	lsls	r2, r1, #3
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	4603      	mov	r3, r0
 80038de:	4642      	mov	r2, r8
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038e4:	464b      	mov	r3, r9
 80038e6:	460a      	mov	r2, r1
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	663b      	str	r3, [r7, #96]	; 0x60
 80038f8:	667a      	str	r2, [r7, #100]	; 0x64
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003906:	4649      	mov	r1, r9
 8003908:	008b      	lsls	r3, r1, #2
 800390a:	4641      	mov	r1, r8
 800390c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003910:	4641      	mov	r1, r8
 8003912:	008a      	lsls	r2, r1, #2
 8003914:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003918:	f7fc fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <UART_SetConfig+0x4e4>)
 8003922:	fba3 1302 	umull	r1, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2164      	movs	r1, #100	; 0x64
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <UART_SetConfig+0x4e4>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4422      	add	r2, r4
 8003948:	609a      	str	r2, [r3, #8]
}
 800394a:	bf00      	nop
 800394c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003956:	bf00      	nop
 8003958:	51eb851f 	.word	0x51eb851f

0800395c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003960:	4904      	ldr	r1, [pc, #16]	; (8003974 <MX_FATFS_Init+0x18>)
 8003962:	4805      	ldr	r0, [pc, #20]	; (8003978 <MX_FATFS_Init+0x1c>)
 8003964:	f003 f82a 	bl	80069bc <FATFS_LinkDriver>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <MX_FATFS_Init+0x20>)
 800396e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000238 	.word	0x20000238
 8003978:	2000000c 	.word	0x2000000c
 800397c:	20000234 	.word	0x20000234

08003980 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003984:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <GenerateCRCTable>:
void get_trail(uint8_t* ocr);
uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg);


void GenerateCRCTable()
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
  int i, j;
  uint8_t CRCPoly = 0x89;  // the value of our CRC-7 polynomial
 8003996:	2389      	movs	r3, #137	; 0x89
 8003998:	71fb      	strb	r3, [r7, #7]

  // generate a table value for all 256 possible byte values
  for (i = 0; i < 256; ++i) {
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e03c      	b.n	8003a1a <GenerateCRCTable+0x8a>
    CRCTable[i] = (i & 0x80) ? i ^ CRCPoly : i;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <GenerateCRCTable+0x2a>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	b25a      	sxtb	r2, r3
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	4053      	eors	r3, r2
 80039b4:	b25b      	sxtb	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e001      	b.n	80039be <GenerateCRCTable+0x2e>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	491c      	ldr	r1, [pc, #112]	; (8003a30 <GenerateCRCTable+0xa0>)
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	440a      	add	r2, r1
 80039c4:	7013      	strb	r3, [r2, #0]
    for (j = 1; j < 8; ++j) {
 80039c6:	2301      	movs	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	e020      	b.n	8003a0e <GenerateCRCTable+0x7e>
        CRCTable[i] <<= 1;
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <GenerateCRCTable+0xa0>)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	b2d9      	uxtb	r1, r3
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <GenerateCRCTable+0xa0>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	460a      	mov	r2, r1
 80039e0:	701a      	strb	r2, [r3, #0]
        if (CRCTable[i] & 0x80){
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <GenerateCRCTable+0xa0>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da0b      	bge.n	8003a08 <GenerateCRCTable+0x78>
            CRCTable[i] ^= CRCPoly;
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <GenerateCRCTable+0xa0>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	4053      	eors	r3, r2
 80039fc:	b2d9      	uxtb	r1, r3
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <GenerateCRCTable+0xa0>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	460a      	mov	r2, r1
 8003a06:	701a      	strb	r2, [r3, #0]
    for (j = 1; j < 8; ++j) {
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b07      	cmp	r3, #7
 8003a12:	dddb      	ble.n	80039cc <GenerateCRCTable+0x3c>
  for (i = 0; i < 256; ++i) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2bff      	cmp	r3, #255	; 0xff
 8003a1e:	ddbf      	ble.n	80039a0 <GenerateCRCTable+0x10>
        }
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	2000023c 	.word	0x2000023c

08003a34 <CRCAdd>:

uint8_t CRCAdd(uint8_t CRC_val , uint8_t message_byte){
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
	 return CRCTable[(CRC_val << 1) ^ message_byte];
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	005a      	lsls	r2, r3, #1
 8003a48:	79bb      	ldrb	r3, [r7, #6]
 8003a4a:	4053      	eors	r3, r2
 8003a4c:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <CRCAdd+0x28>)
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	2000023c 	.word	0x2000023c

08003a60 <getCRC>:


// returns the CRC-7 for a message of "length" bytes
uint8_t getCRC(uint8_t message[], int length)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]

  int i;
  uint8_t CRC_val = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	72fb      	strb	r3, [r7, #11]

  for (i = 0; i < length; ++i){
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e00d      	b.n	8003a90 <getCRC+0x30>
	  CRC_val = CRCAdd(CRC_val, message[i]);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ffd7 	bl	8003a34 <CRCAdd>
 8003a86:	4603      	mov	r3, r0
 8003a88:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length; ++i){
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	dbed      	blt.n	8003a74 <getCRC+0x14>
  }

  return CRC_val;
 8003a98:	7afb      	ldrb	r3, [r7, #11]

}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <send_SD_cmd>:

uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b094      	sub	sp, #80	; 0x50
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	71fb      	strb	r3, [r7, #7]

	//should assert that resp!=NULL
	if( (cmd==ACMD41)||(cmd==ACMD23)){
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	2b29      	cmp	r3, #41	; 0x29
 8003ab4:	d002      	beq.n	8003abc <send_SD_cmd+0x18>
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	2b57      	cmp	r3, #87	; 0x57
 8003aba:	d10c      	bne.n	8003ad6 <send_SD_cmd+0x32>
		uint8_t acmd_resp = send_SD_cmd(CMD55,0);
 8003abc:	2100      	movs	r1, #0
 8003abe:	2037      	movs	r0, #55	; 0x37
 8003ac0:	f7ff fff0 	bl	8003aa4 <send_SD_cmd>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(acmd_resp == 0xFF){
 8003aca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ace:	2bff      	cmp	r3, #255	; 0xff
 8003ad0:	d101      	bne.n	8003ad6 <send_SD_cmd+0x32>
			return 0xFF;
 8003ad2:	23ff      	movs	r3, #255	; 0xff
 8003ad4:	e08e      	b.n	8003bf4 <send_SD_cmd+0x150>
		}
	}


	uint8_t tx_high = 0xFF;
 8003ad6:	23ff      	movs	r3, #255	; 0xff
 8003ad8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t MSG[35] = {'\0'};
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	221f      	movs	r2, #31
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f006 facb 	bl	800a084 <memset>
	uint8_t spi_rx = 0xFF;
 8003aee:	23ff      	movs	r3, #255	; 0xff
 8003af0:	74fb      	strb	r3, [r7, #19]
	uint8_t rec_res = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 8003af8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003afc:	2332      	movs	r3, #50	; 0x32
 8003afe:	2201      	movs	r2, #1
 8003b00:	483e      	ldr	r0, [pc, #248]	; (8003bfc <send_SD_cmd+0x158>)
 8003b02:	f7fe fc70 	bl	80023e6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&HSPI, &tx_high , 1, 50);
 8003b06:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003b0a:	2332      	movs	r3, #50	; 0x32
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	483b      	ldr	r0, [pc, #236]	; (8003bfc <send_SD_cmd+0x158>)
 8003b10:	f7fe fc69 	bl	80023e6 <HAL_SPI_Transmit>


	HAL_StatusTypeDef status;
	uint8_t spi_tx_bf[6] = {0};
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	823b      	strh	r3, [r7, #16]

	spi_tx_bf[0] = (0x40)| cmd;
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	733b      	strb	r3, [r7, #12]

	spi_tx_bf[4] =  cmd_arg & 0x000000FF;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	743b      	strb	r3, [r7, #16]
	spi_tx_bf[3] = (cmd_arg & 0x0000FF00) >> 8;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	73fb      	strb	r3, [r7, #15]
	spi_tx_bf[2] = (cmd_arg & 0x00FF0000) >> 16;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	0c1b      	lsrs	r3, r3, #16
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	73bb      	strb	r3, [r7, #14]
	spi_tx_bf[1] = (cmd_arg & 0xFF000000) >> 24;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	0e1b      	lsrs	r3, r3, #24
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	737b      	strb	r3, [r7, #13]

	spi_tx_bf[5] = (getCRC(spi_tx_bf,5)<<1)  + 1;
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	2105      	movs	r1, #5
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff88 	bl	8003a60 <getCRC>
 8003b50:	4603      	mov	r3, r0
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	747b      	strb	r3, [r7, #17]

	//printf(MSG, "cmd:%u %u %u %u %u %u\r\n",spi_tx_bf[0],spi_tx_bf[1],spi_tx_bf[2],spi_tx_bf[3],spi_tx_bf[4],spi_tx_bf[5]);

    HAL_SPI_Transmit(&HSPI, spi_tx_bf , 6, 50);
 8003b5c:	f107 010c 	add.w	r1, r7, #12
 8003b60:	2332      	movs	r3, #50	; 0x32
 8003b62:	2206      	movs	r2, #6
 8003b64:	4825      	ldr	r0, [pc, #148]	; (8003bfc <send_SD_cmd+0x158>)
 8003b66:	f7fe fc3e 	bl	80023e6 <HAL_SPI_Transmit>

	int count = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	643b      	str	r3, [r7, #64]	; 0x40


	while( count<N_CS && !rec_res  ){
 8003b6e:	e013      	b.n	8003b98 <send_SD_cmd+0xf4>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx , 1, 50);
 8003b70:	f107 0213 	add.w	r2, r7, #19
 8003b74:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003b78:	2332      	movs	r3, #50	; 0x32
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	481f      	ldr	r0, [pc, #124]	; (8003bfc <send_SD_cmd+0x158>)
 8003b80:	f7fe fd6d 	bl	800265e <HAL_SPI_TransmitReceive>
		if( (spi_rx&0x80) == 0){
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	b25b      	sxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db02      	blt.n	8003b92 <send_SD_cmd+0xee>
			rec_res = 1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		//printf("resp:%u\r\n",spi_rx);

		count++;
 8003b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b94:	3301      	adds	r3, #1
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40
	while( count<N_CS && !rec_res  ){
 8003b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9a:	2b07      	cmp	r3, #7
 8003b9c:	dc03      	bgt.n	8003ba6 <send_SD_cmd+0x102>
 8003b9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0e4      	beq.n	8003b70 <send_SD_cmd+0xcc>
	}


	if(cmd!=CMD58 && cmd!=CMD8 && cmd!=CMD9 && spi_rx!=0xFF){
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	2b3a      	cmp	r3, #58	; 0x3a
 8003baa:	d022      	beq.n	8003bf2 <send_SD_cmd+0x14e>
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d01f      	beq.n	8003bf2 <send_SD_cmd+0x14e>
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d01c      	beq.n	8003bf2 <send_SD_cmd+0x14e>
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d019      	beq.n	8003bf2 <send_SD_cmd+0x14e>
		uint8_t spi_rx_clear = 0x0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	72fb      	strb	r3, [r7, #11]

		for(int ii=0; ii<8; ii++){
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc6:	e00f      	b.n	8003be8 <send_SD_cmd+0x144>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 8003bc8:	f107 020b 	add.w	r2, r7, #11
 8003bcc:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8003bd0:	2332      	movs	r3, #50	; 0x32
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4809      	ldr	r0, [pc, #36]	; (8003bfc <send_SD_cmd+0x158>)
 8003bd8:	f7fe fd41 	bl	800265e <HAL_SPI_TransmitReceive>
			if(spi_rx_clear==0xFF){
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	2bff      	cmp	r3, #255	; 0xff
 8003be0:	d006      	beq.n	8003bf0 <send_SD_cmd+0x14c>
		for(int ii=0; ii<8; ii++){
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be4:	3301      	adds	r3, #1
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	2b07      	cmp	r3, #7
 8003bec:	ddec      	ble.n	8003bc8 <send_SD_cmd+0x124>
 8003bee:	e000      	b.n	8003bf2 <send_SD_cmd+0x14e>
				break;
 8003bf0:	bf00      	nop
			}
		}
	}

	return spi_rx;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3748      	adds	r7, #72	; 0x48
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200000b0 	.word	0x200000b0

08003c00 <get_trail>:

void get_trail(uint8_t* ocr){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	6078      	str	r0, [r7, #4]
	    uint8_t tx_high = 0xFF;
 8003c08:	23ff      	movs	r3, #255	; 0xff
 8003c0a:	75fb      	strb	r3, [r7, #23]
		uint8_t rx_buff[4] = {0};
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr, 1, 50);
 8003c10:	f107 0117 	add.w	r1, r7, #23
 8003c14:	2332      	movs	r3, #50	; 0x32
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2301      	movs	r3, #1
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	481a      	ldr	r0, [pc, #104]	; (8003c88 <get_trail+0x88>)
 8003c1e:	f7fe fd1e 	bl	800265e <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+1, 1, 50);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	f107 0117 	add.w	r1, r7, #23
 8003c2a:	2332      	movs	r3, #50	; 0x32
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4815      	ldr	r0, [pc, #84]	; (8003c88 <get_trail+0x88>)
 8003c32:	f7fe fd14 	bl	800265e <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+2, 1, 50);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	f107 0117 	add.w	r1, r7, #23
 8003c3e:	2332      	movs	r3, #50	; 0x32
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2301      	movs	r3, #1
 8003c44:	4810      	ldr	r0, [pc, #64]	; (8003c88 <get_trail+0x88>)
 8003c46:	f7fe fd0a 	bl	800265e <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&HSPI, &tx_high, ocr+3, 1, 50);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	1cda      	adds	r2, r3, #3
 8003c4e:	f107 0117 	add.w	r1, r7, #23
 8003c52:	2332      	movs	r3, #50	; 0x32
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2301      	movs	r3, #1
 8003c58:	480b      	ldr	r0, [pc, #44]	; (8003c88 <get_trail+0x88>)
 8003c5a:	f7fe fd00 	bl	800265e <HAL_SPI_TransmitReceive>


		//sprintf(MSG, "trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
		//printf("trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		uint8_t spi_rx_clear = 0x0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
		while(spi_rx_clear!=0xFF){
 8003c62:	e009      	b.n	8003c78 <get_trail+0x78>
			HAL_SPI_TransmitReceive(&HSPI, &tx_high, &spi_rx_clear , 1, 50);
 8003c64:	f107 020f 	add.w	r2, r7, #15
 8003c68:	f107 0117 	add.w	r1, r7, #23
 8003c6c:	2332      	movs	r3, #50	; 0x32
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2301      	movs	r3, #1
 8003c72:	4805      	ldr	r0, [pc, #20]	; (8003c88 <get_trail+0x88>)
 8003c74:	f7fe fcf3 	bl	800265e <HAL_SPI_TransmitReceive>
		while(spi_rx_clear!=0xFF){
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2bff      	cmp	r3, #255	; 0xff
 8003c7c:	d1f2      	bne.n	8003c64 <get_trail+0x64>
		}
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200000b0 	.word	0x200000b0

08003c8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    Stat = STA_NOINIT;
 8003c96:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <USER_initialize+0x138>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
	if(pdrv!=0){
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <USER_initialize+0x1e>
	  return Stat;
 8003ca2:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <USER_initialize+0x138>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e088      	b.n	8003dbc <USER_initialize+0x130>
	}

    GenerateCRCTable();
 8003caa:	f7ff fe71 	bl	8003990 <GenerateCRCTable>


    uint8_t spi_tx = 0xFF;
 8003cae:	23ff      	movs	r3, #255	; 0xff
 8003cb0:	73fb      	strb	r3, [r7, #15]


    SD_CS_HIGH();
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4844      	ldr	r0, [pc, #272]	; (8003dc8 <USER_initialize+0x13c>)
 8003cb8:	f7fd fcd8 	bl	800166c <HAL_GPIO_WritePin>

    HAL_Delay(50); //delay at least 1 ms
 8003cbc:	2032      	movs	r0, #50	; 0x32
 8003cbe:	f7fd fa3b 	bl	8001138 <HAL_Delay>

    //only need 72, do a bunch more
    for(int ii = 0; ii<10; ii++){
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e009      	b.n	8003cdc <USER_initialize+0x50>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 8003cc8:	f107 010f 	add.w	r1, r7, #15
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2201      	movs	r2, #1
 8003cd0:	483e      	ldr	r0, [pc, #248]	; (8003dcc <USER_initialize+0x140>)
 8003cd2:	f7fe fb88 	bl	80023e6 <HAL_SPI_Transmit>
    for(int ii = 0; ii<10; ii++){
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b09      	cmp	r3, #9
 8003ce0:	ddf2      	ble.n	8003cc8 <USER_initialize+0x3c>
    }

    uint8_t R1_resp = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    uint8_t ocr[4] = {0};
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]


    SD_CS_LOW();
 8003cea:	2200      	movs	r2, #0
 8003cec:	2102      	movs	r1, #2
 8003cee:	4836      	ldr	r0, [pc, #216]	; (8003dc8 <USER_initialize+0x13c>)
 8003cf0:	f7fd fcbc 	bl	800166c <HAL_GPIO_WritePin>

    //online comments indicate this makes things more consistent
    for(int ii = 0; ii<2; ii++){
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e009      	b.n	8003d0e <USER_initialize+0x82>
  	  HAL_SPI_Transmit(&HSPI, &spi_tx , 1, 0);
 8003cfa:	f107 010f 	add.w	r1, r7, #15
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2201      	movs	r2, #1
 8003d02:	4832      	ldr	r0, [pc, #200]	; (8003dcc <USER_initialize+0x140>)
 8003d04:	f7fe fb6f 	bl	80023e6 <HAL_SPI_Transmit>
    for(int ii = 0; ii<2; ii++){
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	ddf2      	ble.n	8003cfa <USER_initialize+0x6e>
    }

    R1_resp = send_SD_cmd(CMD0,0);
 8003d14:	2100      	movs	r1, #0
 8003d16:	2000      	movs	r0, #0
 8003d18:	f7ff fec4 	bl	8003aa4 <send_SD_cmd>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]


    if(R1_resp == 0x01){
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d144      	bne.n	8003db0 <USER_initialize+0x124>


  	  R1_resp = send_SD_cmd(CMD8,0x01AA);
 8003d26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d2a:	2008      	movs	r0, #8
 8003d2c:	f7ff feba 	bl	8003aa4 <send_SD_cmd>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]
  	  get_trail(ocr);
 8003d34:	f107 0308 	add.w	r3, r7, #8
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff61 	bl	8003c00 <get_trail>


  	  if( (R1_resp!=0x01)){ //if error or no response, SD1 or MMC
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d135      	bne.n	8003db0 <USER_initialize+0x124>
  		  //Won't support this

  	  }
  	  else if( (ocr[2] == 0x01)&&(ocr[3] == 0xAA)  ){ //SD v2
 8003d44:	7abb      	ldrb	r3, [r7, #10]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d132      	bne.n	8003db0 <USER_initialize+0x124>
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	2baa      	cmp	r3, #170	; 0xaa
 8003d4e:	d12f      	bne.n	8003db0 <USER_initialize+0x124>
  		  //printf("SD 2.0+\r\n");



  		  uint32_t t_init = HAL_GetTick();
 8003d50:	f7fd f9e6 	bl	8001120 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 8003d56:	e009      	b.n	8003d6c <USER_initialize+0xe0>


  			  R1_resp = send_SD_cmd(ACMD41,0x40000000);
 8003d58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d5c:	2029      	movs	r0, #41	; 0x29
 8003d5e:	f7ff fea1 	bl	8003aa4 <send_SD_cmd>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]

  			  if(R1_resp==0x00){
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <USER_initialize+0xf2>
  		  while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 8003d6c:	f7fd f9d8 	bl	8001120 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d7a:	d3ed      	bcc.n	8003d58 <USER_initialize+0xcc>
 8003d7c:	e000      	b.n	8003d80 <USER_initialize+0xf4>
  				  break;
 8003d7e:	bf00      	nop
  		  }




  		  R1_resp = send_SD_cmd(CMD58,0x00000000);
 8003d80:	2100      	movs	r1, #0
 8003d82:	203a      	movs	r0, #58	; 0x3a
 8003d84:	f7ff fe8e 	bl	8003aa4 <send_SD_cmd>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	75fb      	strb	r3, [r7, #23]
  		  get_trail(ocr);
 8003d8c:	f107 0308 	add.w	r3, r7, #8
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff35 	bl	8003c00 <get_trail>

  		  //printf("OCR status:\r\n");
  		  //printf("\tCCS(0=bytes,1=blocks):%u\r\n", (ocr[0]>>6)&0x01 );

  		  //force 512 byte blocks
  		  R1_resp = send_SD_cmd(CMD16,0x00000200);
 8003d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d9a:	2010      	movs	r0, #16
 8003d9c:	f7ff fe82 	bl	8003aa4 <send_SD_cmd>
 8003da0:	4603      	mov	r3, r0
 8003da2:	75fb      	strb	r3, [r7, #23]


  		  //I don't, but could check voltage here
  		  Stat=0;
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <USER_initialize+0x138>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
  		  //after init, can speed up spi
  		  HSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <USER_initialize+0x140>)
 8003dac:	2210      	movs	r2, #16
 8003dae:	61da      	str	r2, [r3, #28]
    }
    else{
  	  //printf("error, CMD0 response:%u\r\n",R1_resp);
    }

    Stat = 0;
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <USER_initialize+0x138>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]

    return Stat;
 8003db6:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <USER_initialize+0x138>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000009 	.word	0x20000009
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	200000b0 	.word	0x200000b0

08003dd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    //Stat = STA_NOINIT;
    return Stat;
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <USER_status+0x1c>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	20000009 	.word	0x20000009

08003df0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08e      	sub	sp, #56	; 0x38
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	if(pdrv!=0){
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <USER_read+0x1a>
		return RES_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0d7      	b.n	8003fba <USER_read+0x1ca>
	}
	if(USER_status(pdrv)!=0){
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffdf 	bl	8003dd0 <USER_status>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <USER_read+0x2c>
		return RES_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0ce      	b.n	8003fba <USER_read+0x1ca>
	}


	if(count==0){
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <USER_read+0x36>
	    return RES_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e0c9      	b.n	8003fba <USER_read+0x1ca>
	}
	else if(count==1){
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d149      	bne.n	8003ec0 <USER_read+0xd0>
	  uint8_t R1_resp = send_SD_cmd(CMD17,sector);
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	2011      	movs	r0, #17
 8003e30:	f7ff fe38 	bl	8003aa4 <send_SD_cmd>
 8003e34:	4603      	mov	r3, r0
 8003e36:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 8003e38:	23ff      	movs	r3, #255	; 0xff
 8003e3a:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8003e3c:	23ff      	movs	r3, #255	; 0xff
 8003e3e:	763b      	strb	r3, [r7, #24]

	  int ii = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 8003e44:	e00c      	b.n	8003e60 <USER_read+0x70>
		ii++;
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	3301      	adds	r3, #1
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003e4c:	f107 0218 	add.w	r2, r7, #24
 8003e50:	f107 0119 	add.w	r1, r7, #25
 8003e54:	2332      	movs	r3, #50	; 0x32
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2301      	movs	r3, #1
 8003e5a:	485a      	ldr	r0, [pc, #360]	; (8003fc4 <USER_read+0x1d4>)
 8003e5c:	f7fe fbff 	bl	800265e <HAL_SPI_TransmitReceive>
	  while( (spi_rx == 0xFF)&&(ii<100) ){
 8003e60:	7e3b      	ldrb	r3, [r7, #24]
 8003e62:	2bff      	cmp	r3, #255	; 0xff
 8003e64:	d102      	bne.n	8003e6c <USER_read+0x7c>
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	2b63      	cmp	r3, #99	; 0x63
 8003e6a:	ddec      	ble.n	8003e46 <USER_read+0x56>
	  }

	  //capture data
	  for(ii=0;ii<512;ii++){
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e70:	e00d      	b.n	8003e8e <USER_read+0x9e>
	 	HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii , 1, 50);
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	441a      	add	r2, r3
 8003e78:	f107 0119 	add.w	r1, r7, #25
 8003e7c:	2332      	movs	r3, #50	; 0x32
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2301      	movs	r3, #1
 8003e82:	4850      	ldr	r0, [pc, #320]	; (8003fc4 <USER_read+0x1d4>)
 8003e84:	f7fe fbeb 	bl	800265e <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<512;ii++){
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e94:	dbed      	blt.n	8003e72 <USER_read+0x82>
	  }

		//read CRC - don't use for now
	  for(ii=0;ii<2;ii++){
 8003e96:	2300      	movs	r3, #0
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	e00c      	b.n	8003eb6 <USER_read+0xc6>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 8003e9c:	f107 0218 	add.w	r2, r7, #24
 8003ea0:	f107 0119 	add.w	r1, r7, #25
 8003ea4:	2332      	movs	r3, #50	; 0x32
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4846      	ldr	r0, [pc, #280]	; (8003fc4 <USER_read+0x1d4>)
 8003eac:	f7fe fbd7 	bl	800265e <HAL_SPI_TransmitReceive>
	  for(ii=0;ii<2;ii++){
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	ddef      	ble.n	8003e9c <USER_read+0xac>
	  }

	  return RES_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e07c      	b.n	8003fba <USER_read+0x1ca>

	}
	else{
	  uint8_t R1_resp = send_SD_cmd(CMD18,sector);
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	2012      	movs	r0, #18
 8003ec4:	f7ff fdee 	bl	8003aa4 <send_SD_cmd>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	76fb      	strb	r3, [r7, #27]

	  uint8_t spi_tx = 0xFF;
 8003ecc:	23ff      	movs	r3, #255	; 0xff
 8003ece:	75fb      	strb	r3, [r7, #23]
	  uint8_t spi_rx = 0xFF;
 8003ed0:	23ff      	movs	r3, #255	; 0xff
 8003ed2:	75bb      	strb	r3, [r7, #22]


	  for(int jj=0; jj<count; jj++){
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed8:	e046      	b.n	8003f68 <USER_read+0x178>

		int ii = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
		spi_rx = 0xFF;
 8003ede:	23ff      	movs	r3, #255	; 0xff
 8003ee0:	75bb      	strb	r3, [r7, #22]
		while( (spi_rx == 0xFF)&&(ii<100) ){
 8003ee2:	e00c      	b.n	8003efe <USER_read+0x10e>
		  ii++;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 8003eea:	f107 0216 	add.w	r2, r7, #22
 8003eee:	f107 0117 	add.w	r1, r7, #23
 8003ef2:	2332      	movs	r3, #50	; 0x32
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4832      	ldr	r0, [pc, #200]	; (8003fc4 <USER_read+0x1d4>)
 8003efa:	f7fe fbb0 	bl	800265e <HAL_SPI_TransmitReceive>
		while( (spi_rx == 0xFF)&&(ii<100) ){
 8003efe:	7dbb      	ldrb	r3, [r7, #22]
 8003f00:	2bff      	cmp	r3, #255	; 0xff
 8003f02:	d102      	bne.n	8003f0a <USER_read+0x11a>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2b63      	cmp	r3, #99	; 0x63
 8003f08:	ddec      	ble.n	8003ee4 <USER_read+0xf4>
		}

			//capture data
		for(ii=0;ii<512;ii++){
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	e011      	b.n	8003f34 <USER_read+0x144>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buff+ii+(jj*512) , 1, 50);
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	025b      	lsls	r3, r3, #9
 8003f14:	461a      	mov	r2, r3
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	4413      	add	r3, r2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	f107 0117 	add.w	r1, r7, #23
 8003f22:	2332      	movs	r3, #50	; 0x32
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2301      	movs	r3, #1
 8003f28:	4826      	ldr	r0, [pc, #152]	; (8003fc4 <USER_read+0x1d4>)
 8003f2a:	f7fe fb98 	bl	800265e <HAL_SPI_TransmitReceive>
		for(ii=0;ii<512;ii++){
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	3301      	adds	r3, #1
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3a:	dbe9      	blt.n	8003f10 <USER_read+0x120>
		}

			//read CRC - don't use for now
		for(ii=0;ii<2;ii++){
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e00c      	b.n	8003f5c <USER_read+0x16c>
		  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003f42:	f107 0216 	add.w	r2, r7, #22
 8003f46:	f107 0117 	add.w	r1, r7, #23
 8003f4a:	2332      	movs	r3, #50	; 0x32
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2301      	movs	r3, #1
 8003f50:	481c      	ldr	r0, [pc, #112]	; (8003fc4 <USER_read+0x1d4>)
 8003f52:	f7fe fb84 	bl	800265e <HAL_SPI_TransmitReceive>
		for(ii=0;ii<2;ii++){
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	3301      	adds	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	ddef      	ble.n	8003f42 <USER_read+0x152>
	  for(int jj=0; jj<count; jj++){
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	3301      	adds	r3, #1
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d8b4      	bhi.n	8003eda <USER_read+0xea>
		}
	  }


	  R1_resp = send_SD_cmd(CMD12,0x0);
 8003f70:	2100      	movs	r1, #0
 8003f72:	200c      	movs	r0, #12
 8003f74:	f7ff fd96 	bl	8003aa4 <send_SD_cmd>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	76fb      	strb	r3, [r7, #27]

	  int busy = 1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	623b      	str	r3, [r7, #32]
	  int counter = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 8003f84:	e011      	b.n	8003faa <USER_read+0x1ba>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8003f86:	f107 0216 	add.w	r2, r7, #22
 8003f8a:	f107 0117 	add.w	r1, r7, #23
 8003f8e:	2332      	movs	r3, #50	; 0x32
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2301      	movs	r3, #1
 8003f94:	480b      	ldr	r0, [pc, #44]	; (8003fc4 <USER_read+0x1d4>)
 8003f96:	f7fe fb62 	bl	800265e <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 8003f9a:	7dbb      	ldrb	r3, [r7, #22]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <USER_read+0x1b4>
		  busy = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	623b      	str	r3, [r7, #32]
		}
		counter++;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
	  while(busy&&(counter<1000) ){
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <USER_read+0x1c8>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb6:	dbe6      	blt.n	8003f86 <USER_read+0x196>
	  }

	  return RES_OK;
 8003fb8:	2300      	movs	r3, #0
	}

	//shouldn't get here
    return RES_OK;
  /* USER CODE END READ */
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3730      	adds	r7, #48	; 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200000b0 	.word	0x200000b0

08003fc8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b094      	sub	sp, #80	; 0x50
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	if(pdrv!=0){
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <USER_write+0x1a>
		return RES_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e135      	b.n	800424e <USER_write+0x286>
	}
	if(USER_status(pdrv)!=0){
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fef3 	bl	8003dd0 <USER_status>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <USER_write+0x2c>
		return RES_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e12c      	b.n	800424e <USER_write+0x286>
	}

	if(count==0){
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <USER_write+0x36>
	  return RES_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e127      	b.n	800424e <USER_write+0x286>
	}
	else if(count==1){
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d169      	bne.n	80040d8 <USER_write+0x110>
	  uint8_t R1_resp = send_SD_cmd(CMD24,sector);
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	2018      	movs	r0, #24
 8004008:	f7ff fd4c 	bl	8003aa4 <send_SD_cmd>
 800400c:	4603      	mov	r3, r0
 800400e:	76bb      	strb	r3, [r7, #26]

	  uint8_t spi_tx = 0xFF;
 8004010:	23ff      	movs	r3, #255	; 0xff
 8004012:	767b      	strb	r3, [r7, #25]
	  uint8_t spi_rx = 0xFF;
 8004014:	23ff      	movs	r3, #255	; 0xff
 8004016:	763b      	strb	r3, [r7, #24]

	  //1 byte of delat


	  //send data packet
	  spi_tx = 0xFE;
 8004018:	23fe      	movs	r3, #254	; 0xfe
 800401a:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800401c:	f107 0218 	add.w	r2, r7, #24
 8004020:	f107 0119 	add.w	r1, r7, #25
 8004024:	2332      	movs	r3, #50	; 0x32
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	2301      	movs	r3, #1
 800402a:	488b      	ldr	r0, [pc, #556]	; (8004258 <USER_write+0x290>)
 800402c:	f7fe fb17 	bl	800265e <HAL_SPI_TransmitReceive>

	  //send data
	  for(int ii=0;ii<512;ii++){
 8004030:	2300      	movs	r3, #0
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	e00d      	b.n	8004052 <USER_write+0x8a>
		HAL_SPI_TransmitReceive(&HSPI, buff+ii, &spi_rx, 1, 50);
 8004036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	18d1      	adds	r1, r2, r3
 800403c:	f107 0218 	add.w	r2, r7, #24
 8004040:	2332      	movs	r3, #50	; 0x32
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2301      	movs	r3, #1
 8004046:	4884      	ldr	r0, [pc, #528]	; (8004258 <USER_write+0x290>)
 8004048:	f7fe fb09 	bl	800265e <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<512;ii++){
 800404c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404e:	3301      	adds	r3, #1
 8004050:	647b      	str	r3, [r7, #68]	; 0x44
 8004052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004058:	dbed      	blt.n	8004036 <USER_write+0x6e>
	  }

	  //crc, dummy packets
	  for(int ii=0;ii<2;ii++){
 800405a:	2300      	movs	r3, #0
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
 800405e:	e00c      	b.n	800407a <USER_write+0xb2>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8004060:	f107 0218 	add.w	r2, r7, #24
 8004064:	f107 0119 	add.w	r1, r7, #25
 8004068:	2332      	movs	r3, #50	; 0x32
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	487a      	ldr	r0, [pc, #488]	; (8004258 <USER_write+0x290>)
 8004070:	f7fe faf5 	bl	800265e <HAL_SPI_TransmitReceive>
	  for(int ii=0;ii<2;ii++){
 8004074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004076:	3301      	adds	r3, #1
 8004078:	643b      	str	r3, [r7, #64]	; 0x40
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	2b01      	cmp	r3, #1
 800407e:	ddef      	ble.n	8004060 <USER_write+0x98>
	  }

	    //get data response, fail if not data accepted
	  spi_tx = 0xFF;
 8004080:	23ff      	movs	r3, #255	; 0xff
 8004082:	767b      	strb	r3, [r7, #25]
	  HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 8004084:	f107 0218 	add.w	r2, r7, #24
 8004088:	f107 0119 	add.w	r1, r7, #25
 800408c:	2332      	movs	r3, #50	; 0x32
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2301      	movs	r3, #1
 8004092:	4871      	ldr	r0, [pc, #452]	; (8004258 <USER_write+0x290>)
 8004094:	f7fe fae3 	bl	800265e <HAL_SPI_TransmitReceive>

	  int busy = 1;
 8004098:	2301      	movs	r3, #1
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int counter = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 80040a0:	e011      	b.n	80040c6 <USER_write+0xfe>
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80040a2:	f107 0218 	add.w	r2, r7, #24
 80040a6:	f107 0119 	add.w	r1, r7, #25
 80040aa:	2332      	movs	r3, #50	; 0x32
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2301      	movs	r3, #1
 80040b0:	4869      	ldr	r0, [pc, #420]	; (8004258 <USER_write+0x290>)
 80040b2:	f7fe fad4 	bl	800265e <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 80040b6:	7e3b      	ldrb	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <USER_write+0xf8>
	  	  busy = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		counter++;
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	3301      	adds	r3, #1
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
	  while(busy&&(counter<1000) ){
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <USER_write+0x10c>
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040d2:	dbe6      	blt.n	80040a2 <USER_write+0xda>
	  }

	  return RES_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e0ba      	b.n	800424e <USER_write+0x286>
	}
	else{
		uint8_t R1_resp = send_SD_cmd(CMD25,sector);
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	2019      	movs	r0, #25
 80040dc:	f7ff fce2 	bl	8003aa4 <send_SD_cmd>
 80040e0:	4603      	mov	r3, r0
 80040e2:	76fb      	strb	r3, [r7, #27]

		uint8_t spi_tx = 0xFF;
 80040e4:	23ff      	movs	r3, #255	; 0xff
 80040e6:	75fb      	strb	r3, [r7, #23]
		uint8_t spi_rx = 0xFF;
 80040e8:	23ff      	movs	r3, #255	; 0xff
 80040ea:	75bb      	strb	r3, [r7, #22]

		//one buffer of nothing
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80040ec:	f107 0216 	add.w	r2, r7, #22
 80040f0:	f107 0117 	add.w	r1, r7, #23
 80040f4:	2332      	movs	r3, #50	; 0x32
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2301      	movs	r3, #1
 80040fa:	4857      	ldr	r0, [pc, #348]	; (8004258 <USER_write+0x290>)
 80040fc:	f7fe faaf 	bl	800265e <HAL_SPI_TransmitReceive>


		for(int jj=0; jj<count; jj++){
 8004100:	2300      	movs	r3, #0
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
 8004104:	e068      	b.n	80041d8 <USER_write+0x210>


			//send data packet
			spi_tx = 0xFC;
 8004106:	23fc      	movs	r3, #252	; 0xfc
 8004108:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 800410a:	f107 0216 	add.w	r2, r7, #22
 800410e:	f107 0117 	add.w	r1, r7, #23
 8004112:	2332      	movs	r3, #50	; 0x32
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2301      	movs	r3, #1
 8004118:	484f      	ldr	r0, [pc, #316]	; (8004258 <USER_write+0x290>)
 800411a:	f7fe faa0 	bl	800265e <HAL_SPI_TransmitReceive>

			//send data
			//spi_tx = 0xAC;
			for(int ii=0;ii<512;ii++){
 800411e:	2300      	movs	r3, #0
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
 8004122:	e011      	b.n	8004148 <USER_write+0x180>
	//			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
				HAL_SPI_TransmitReceive(&HSPI, buff+ii+(512*jj), &spi_rx, 1, 50);
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	025b      	lsls	r3, r3, #9
 8004128:	461a      	mov	r2, r3
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	4413      	add	r3, r2
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	18d1      	adds	r1, r2, r3
 8004132:	f107 0216 	add.w	r2, r7, #22
 8004136:	2332      	movs	r3, #50	; 0x32
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2301      	movs	r3, #1
 800413c:	4846      	ldr	r0, [pc, #280]	; (8004258 <USER_write+0x290>)
 800413e:	f7fe fa8e 	bl	800265e <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<512;ii++){
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	3301      	adds	r3, #1
 8004146:	633b      	str	r3, [r7, #48]	; 0x30
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414e:	dbe9      	blt.n	8004124 <USER_write+0x15c>
			}

			spi_tx = 0x00;
 8004150:	2300      	movs	r3, #0
 8004152:	75fb      	strb	r3, [r7, #23]
			//crc, dummy packets
			for(int ii=0;ii<2;ii++){
 8004154:	2300      	movs	r3, #0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004158:	e00c      	b.n	8004174 <USER_write+0x1ac>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800415a:	f107 0216 	add.w	r2, r7, #22
 800415e:	f107 0117 	add.w	r1, r7, #23
 8004162:	2332      	movs	r3, #50	; 0x32
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2301      	movs	r3, #1
 8004168:	483b      	ldr	r0, [pc, #236]	; (8004258 <USER_write+0x290>)
 800416a:	f7fe fa78 	bl	800265e <HAL_SPI_TransmitReceive>
			for(int ii=0;ii<2;ii++){
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	3301      	adds	r3, #1
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b01      	cmp	r3, #1
 8004178:	ddef      	ble.n	800415a <USER_write+0x192>
			}

			//get data response, fail if not data accepted
			spi_tx = 0xFF;
 800417a:	23ff      	movs	r3, #255	; 0xff
 800417c:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800417e:	f107 0216 	add.w	r2, r7, #22
 8004182:	f107 0117 	add.w	r1, r7, #23
 8004186:	2332      	movs	r3, #50	; 0x32
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2301      	movs	r3, #1
 800418c:	4832      	ldr	r0, [pc, #200]	; (8004258 <USER_write+0x290>)
 800418e:	f7fe fa66 	bl	800265e <HAL_SPI_TransmitReceive>

			int busy = 1;
 8004192:	2301      	movs	r3, #1
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
			int counter = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
			spi_tx = 0xFF;
 800419a:	23ff      	movs	r3, #255	; 0xff
 800419c:	75fb      	strb	r3, [r7, #23]

			while(busy&&(counter<1000) ){
 800419e:	e011      	b.n	80041c4 <USER_write+0x1fc>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 80041a0:	f107 0216 	add.w	r2, r7, #22
 80041a4:	f107 0117 	add.w	r1, r7, #23
 80041a8:	2332      	movs	r3, #50	; 0x32
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2301      	movs	r3, #1
 80041ae:	482a      	ldr	r0, [pc, #168]	; (8004258 <USER_write+0x290>)
 80041b0:	f7fe fa55 	bl	800265e <HAL_SPI_TransmitReceive>
				if(spi_rx!=0){
 80041b4:	7dbb      	ldrb	r3, [r7, #22]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <USER_write+0x1f6>
					busy = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				counter++;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	3301      	adds	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
			while(busy&&(counter<1000) ){
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <USER_write+0x20a>
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d0:	dbe6      	blt.n	80041a0 <USER_write+0x1d8>
		for(int jj=0; jj<count; jj++){
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	3301      	adds	r3, #1
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d892      	bhi.n	8004106 <USER_write+0x13e>
			}

		}

		//send stop token
		spi_tx = 0xFD;
 80041e0:	23fd      	movs	r3, #253	; 0xfd
 80041e2:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80041e4:	f107 0216 	add.w	r2, r7, #22
 80041e8:	f107 0117 	add.w	r1, r7, #23
 80041ec:	2332      	movs	r3, #50	; 0x32
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2301      	movs	r3, #1
 80041f2:	4819      	ldr	r0, [pc, #100]	; (8004258 <USER_write+0x290>)
 80041f4:	f7fe fa33 	bl	800265e <HAL_SPI_TransmitReceive>

		//
		spi_tx = 0xFF;
 80041f8:	23ff      	movs	r3, #255	; 0xff
 80041fa:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80041fc:	f107 0216 	add.w	r2, r7, #22
 8004200:	f107 0117 	add.w	r1, r7, #23
 8004204:	2332      	movs	r3, #50	; 0x32
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2301      	movs	r3, #1
 800420a:	4813      	ldr	r0, [pc, #76]	; (8004258 <USER_write+0x290>)
 800420c:	f7fe fa27 	bl	800265e <HAL_SPI_TransmitReceive>


		int busy = 1;
 8004210:	2301      	movs	r3, #1
 8004212:	623b      	str	r3, [r7, #32]
		int counter = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 8004218:	e011      	b.n	800423e <USER_write+0x276>
			HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx, 1, 50);
 800421a:	f107 0216 	add.w	r2, r7, #22
 800421e:	f107 0117 	add.w	r1, r7, #23
 8004222:	2332      	movs	r3, #50	; 0x32
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2301      	movs	r3, #1
 8004228:	480b      	ldr	r0, [pc, #44]	; (8004258 <USER_write+0x290>)
 800422a:	f7fe fa18 	bl	800265e <HAL_SPI_TransmitReceive>
			if(spi_rx!=0){
 800422e:	7dbb      	ldrb	r3, [r7, #22]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <USER_write+0x270>
				busy = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	623b      	str	r3, [r7, #32]
			}
			else{
			}
			counter++;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <USER_write+0x284>
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800424a:	dbe6      	blt.n	800421a <USER_write+0x252>
		}
	}

	//shouldn't get here
    return RES_OK;
 800424c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800424e:	4618      	mov	r0, r3
 8004250:	3748      	adds	r7, #72	; 0x48
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200000b0 	.word	0x200000b0

0800425c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af02      	add	r7, sp, #8
 8004262:	4603      	mov	r3, r0
 8004264:	603a      	str	r2, [r7, #0]
 8004266:	71fb      	strb	r3, [r7, #7]
 8004268:	460b      	mov	r3, r1
 800426a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(cmd){
 8004272:	79bb      	ldrb	r3, [r7, #6]
 8004274:	2b04      	cmp	r3, #4
 8004276:	f200 809c 	bhi.w	80043b2 <USER_ioctl+0x156>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <USER_ioctl+0x24>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004295 	.word	0x08004295
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042ab 	.word	0x080042ab
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080043ab 	.word	0x080043ab

	case CTRL_SYNC:
		// nothing to do here
		res = RES_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800429a:	e08d      	b.n	80043b8 <USER_ioctl+0x15c>
	case GET_BLOCK_SIZE:
		*(int*)buff = 1; //could check, but doing this for now
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80042a8:	e086      	b.n	80043b8 <USER_ioctl+0x15c>
	case GET_SECTOR_SIZE:
		*(int*)buff = 512; //buffer size is always 512
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80042b8:	e07e      	b.n	80043b8 <USER_ioctl+0x15c>

	case GET_SECTOR_COUNT:
		if(USER_status(pdrv)!=0){
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd87 	bl	8003dd0 <USER_status>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <USER_ioctl+0x70>
			return RES_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e077      	b.n	80043bc <USER_ioctl+0x160>
		}
		else{
			BYTE buffer[16] = {0};
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
			//printf("GET_BLOCK_SIZE\r\n");
			uint8_t R1_resp = send_SD_cmd(CMD9,0x0);
 80042dc:	2100      	movs	r1, #0
 80042de:	2009      	movs	r0, #9
 80042e0:	f7ff fbe0 	bl	8003aa4 <send_SD_cmd>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("cmd resp:%u\r\n",R1_resp);
			uint8_t spi_tx = 0xFF;
 80042ea:	23ff      	movs	r3, #255	; 0xff
 80042ec:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_rx = 0xFF;
 80042ee:	23ff      	movs	r3, #255	; 0xff
 80042f0:	73bb      	strb	r3, [r7, #14]

			int ii = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 80042f6:	e00c      	b.n	8004312 <USER_ioctl+0xb6>
				ii++;
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	3301      	adds	r3, #1
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx , 1, 50);
 80042fe:	f107 020e 	add.w	r2, r7, #14
 8004302:	f107 010f 	add.w	r1, r7, #15
 8004306:	2332      	movs	r3, #50	; 0x32
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2301      	movs	r3, #1
 800430c:	482d      	ldr	r0, [pc, #180]	; (80043c4 <USER_ioctl+0x168>)
 800430e:	f7fe f9a6 	bl	800265e <HAL_SPI_TransmitReceive>
			while( (spi_rx == 0xFF)&&(ii<10000) ){
 8004312:	7bbb      	ldrb	r3, [r7, #14]
 8004314:	2bff      	cmp	r3, #255	; 0xff
 8004316:	d104      	bne.n	8004322 <USER_ioctl+0xc6>
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	f242 720f 	movw	r2, #9999	; 0x270f
 800431e:	4293      	cmp	r3, r2
 8004320:	ddea      	ble.n	80042f8 <USER_ioctl+0x9c>

			//printf("ii:%u\r\n",ii);
			//printf("data token:%u\r\n",spi_rx);

			//capture data
			for(ii=0;ii<16;ii++){
 8004322:	2300      	movs	r3, #0
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 8004326:	e010      	b.n	800434a <USER_ioctl+0xee>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, buffer+15-ii , 1, 50);
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	f1c3 030f 	rsb	r3, r3, #15
 800432e:	f107 0210 	add.w	r2, r7, #16
 8004332:	441a      	add	r2, r3
 8004334:	f107 010f 	add.w	r1, r7, #15
 8004338:	2332      	movs	r3, #50	; 0x32
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2301      	movs	r3, #1
 800433e:	4821      	ldr	r0, [pc, #132]	; (80043c4 <USER_ioctl+0x168>)
 8004340:	f7fe f98d 	bl	800265e <HAL_SPI_TransmitReceive>
			for(ii=0;ii<16;ii++){
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	3301      	adds	r3, #1
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	2b0f      	cmp	r3, #15
 800434e:	ddeb      	ble.n	8004328 <USER_ioctl+0xcc>
				//printf("(%u,%u)\r\n",8*(15-ii),buffer[15-ii]);

			}


			for(ii=0;ii<2;ii++){
 8004350:	2300      	movs	r3, #0
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
 8004354:	e00c      	b.n	8004370 <USER_ioctl+0x114>
				HAL_SPI_TransmitReceive(&HSPI, &spi_tx, &spi_rx  , 1, 50);
 8004356:	f107 020e 	add.w	r2, r7, #14
 800435a:	f107 010f 	add.w	r1, r7, #15
 800435e:	2332      	movs	r3, #50	; 0x32
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2301      	movs	r3, #1
 8004364:	4817      	ldr	r0, [pc, #92]	; (80043c4 <USER_ioctl+0x168>)
 8004366:	f7fe f97a 	bl	800265e <HAL_SPI_TransmitReceive>
			for(ii=0;ii<2;ii++){
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	3301      	adds	r3, #1
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	2b01      	cmp	r3, #1
 8004374:	ddef      	ble.n	8004356 <USER_ioctl+0xfa>
				//printf("rx crc:%u\r\n",spi_rx);
			}

			//printf( "sector size: %u\r\n", ((buffer[5]&0x3F)<<1)|(buffer[4]>>7) );//  | buffer[4]>>7) );
			uint32_t mem_size = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
			mem_size = (uint32_t)buffer[6] | ( ((uint32_t) buffer[7])<<8) | (((uint32_t)(buffer[8]&0x3F))<<16) ;
 800437a:	7dbb      	ldrb	r3, [r7, #22]
 800437c:	461a      	mov	r2, r3
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	431a      	orrs	r2, r3
 8004384:	7e3b      	ldrb	r3, [r7, #24]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800438c:	4313      	orrs	r3, r2
 800438e:	623b      	str	r3, [r7, #32]
//			printf("64:%u\r\n",buffer[8]);


//			printf("mem size(kB):%u\r\n",(mem_size+1)*512);
//			printf("mem size(sectors):%u\r\n",(mem_size+1)*1000);
		  *(int*)buff = ((mem_size+1)*1000);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	3301      	adds	r3, #1
 8004394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	601a      	str	r2, [r3, #0]
	      res =  RES_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}

		break;
 80043a8:	e006      	b.n	80043b8 <USER_ioctl+0x15c>
	case CTRL_TRIM:
//		printf("CTRL_TRIM\r\n");
		//not implementing
	    res =  RES_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		break;
 80043b0:	e002      	b.n	80043b8 <USER_ioctl+0x15c>
	default:
		res = RES_PARERR;
 80043b2:	2304      	movs	r3, #4
 80043b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return res;
 80043b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f


  /* USER CODE END IOCTL */
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3730      	adds	r7, #48	; 0x30
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200000b0 	.word	0x200000b0

080043c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <disk_status+0x30>)
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	79fa      	ldrb	r2, [r7, #7]
 80043e0:	4905      	ldr	r1, [pc, #20]	; (80043f8 <disk_status+0x30>)
 80043e2:	440a      	add	r2, r1
 80043e4:	7a12      	ldrb	r2, [r2, #8]
 80043e6:	4610      	mov	r0, r2
 80043e8:	4798      	blx	r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000364 	.word	0x20000364

080043fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <disk_initialize+0x48>)
 800440e:	5cd3      	ldrb	r3, [r2, r3]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d111      	bne.n	8004438 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <disk_initialize+0x48>)
 8004418:	2101      	movs	r1, #1
 800441a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <disk_initialize+0x48>)
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	79fa      	ldrb	r2, [r7, #7]
 800442a:	4906      	ldr	r1, [pc, #24]	; (8004444 <disk_initialize+0x48>)
 800442c:	440a      	add	r2, r1
 800442e:	7a12      	ldrb	r2, [r2, #8]
 8004430:	4610      	mov	r0, r2
 8004432:	4798      	blx	r3
 8004434:	4603      	mov	r3, r0
 8004436:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000364 	.word	0x20000364

08004448 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <disk_read+0x3c>)
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	689c      	ldr	r4, [r3, #8]
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <disk_read+0x3c>)
 8004468:	4413      	add	r3, r2
 800446a:	7a18      	ldrb	r0, [r3, #8]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	47a0      	blx	r4
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]
  return res;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
}
 800447a:	4618      	mov	r0, r3
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	bf00      	nop
 8004484:	20000364 	.word	0x20000364

08004488 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <disk_write+0x3c>)
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68dc      	ldr	r4, [r3, #12]
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <disk_write+0x3c>)
 80044a8:	4413      	add	r3, r2
 80044aa:	7a18      	ldrb	r0, [r3, #8]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	47a0      	blx	r4
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000364 	.word	0x20000364

080044c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	603a      	str	r2, [r7, #0]
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	460b      	mov	r3, r1
 80044d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <disk_ioctl+0x38>)
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	79fa      	ldrb	r2, [r7, #7]
 80044e6:	4906      	ldr	r1, [pc, #24]	; (8004500 <disk_ioctl+0x38>)
 80044e8:	440a      	add	r2, r1
 80044ea:	7a10      	ldrb	r0, [r2, #8]
 80044ec:	79b9      	ldrb	r1, [r7, #6]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4798      	blx	r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000364 	.word	0x20000364

08004504 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3301      	adds	r3, #1
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	b21a      	sxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b21b      	sxth	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b21b      	sxth	r3, r3
 8004524:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004526:	89fb      	ldrh	r3, [r7, #14]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3303      	adds	r3, #3
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	3202      	adds	r2, #2
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	3201      	adds	r2, #1
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
	return rv;
 800456c:	68fb      	ldr	r3, [r7, #12]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	887a      	ldrh	r2, [r7, #2]
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	1c53      	adds	r3, r2, #1
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	6179      	str	r1, [r7, #20]
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3b01      	subs	r3, #1
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f1      	bne.n	8004622 <mem_cpy+0x1a>
	}
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	617a      	str	r2, [r7, #20]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3b01      	subs	r3, #1
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f3      	bne.n	800465a <mem_set+0x10>
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	61fa      	str	r2, [r7, #28]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	4619      	mov	r1, r3
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	61ba      	str	r2, [r7, #24]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	1acb      	subs	r3, r1, r3
 80046ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <mem_cmp+0x40>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0eb      	beq.n	8004698 <mem_cmp+0x18>

	return r;
 80046c0:	697b      	ldr	r3, [r7, #20]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	; 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80046d8:	e002      	b.n	80046e0 <chk_chr+0x12>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3301      	adds	r3, #1
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <chk_chr+0x26>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d1f2      	bne.n	80046da <chk_chr+0xc>
	return *str;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	781b      	ldrb	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <lock_fs+0x22>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4618      	mov	r0, r3
 8004718:	f002 f986 	bl	8006a28 <ff_req_grant>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <lock_fs+0x22>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <lock_fs+0x24>
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <unlock_fs+0x2e>
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	2b0c      	cmp	r3, #12
 8004746:	d00a      	beq.n	800475e <unlock_fs+0x2e>
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	2b0b      	cmp	r3, #11
 800474c:	d007      	beq.n	800475e <unlock_fs+0x2e>
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b0f      	cmp	r3, #15
 8004752:	d004      	beq.n	800475e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4618      	mov	r0, r3
 800475a:	f002 f97a 	bl	8006a52 <ff_rel_grant>
	}
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e029      	b.n	80047d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800477c:	4a27      	ldr	r2, [pc, #156]	; (800481c <chk_lock+0xb4>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	4413      	add	r3, r2
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01d      	beq.n	80047c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800478a:	4a24      	ldr	r2, [pc, #144]	; (800481c <chk_lock+0xb4>)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d116      	bne.n	80047ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <chk_lock+0xb4>)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	4413      	add	r3, r2
 80047a4:	3304      	adds	r3, #4
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d10c      	bne.n	80047ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80047b0:	4a1a      	ldr	r2, [pc, #104]	; (800481c <chk_lock+0xb4>)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	4413      	add	r3, r2
 80047b8:	3308      	adds	r3, #8
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d102      	bne.n	80047ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80047c4:	e007      	b.n	80047d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d9d2      	bls.n	800477c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d109      	bne.n	80047f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <chk_lock+0x80>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d101      	bne.n	80047ec <chk_lock+0x84>
 80047e8:	2300      	movs	r3, #0
 80047ea:	e010      	b.n	800480e <chk_lock+0xa6>
 80047ec:	2312      	movs	r3, #18
 80047ee:	e00e      	b.n	800480e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <chk_lock+0xa0>
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <chk_lock+0xb4>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	4413      	add	r3, r2
 80047fe:	330c      	adds	r3, #12
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d101      	bne.n	800480c <chk_lock+0xa4>
 8004808:	2310      	movs	r3, #16
 800480a:	e000      	b.n	800480e <chk_lock+0xa6>
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000344 	.word	0x20000344

08004820 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	e002      	b.n	8004832 <enq_lock+0x12>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3301      	adds	r3, #1
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d806      	bhi.n	8004846 <enq_lock+0x26>
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <enq_lock+0x40>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	4413      	add	r3, r2
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f2      	bne.n	800482c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b02      	cmp	r3, #2
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000344 	.word	0x20000344

08004864 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e01f      	b.n	80048b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004874:	4a41      	ldr	r2, [pc, #260]	; (800497c <inc_lock+0x118>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4413      	add	r3, r2
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d113      	bne.n	80048ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004886:	4a3d      	ldr	r2, [pc, #244]	; (800497c <inc_lock+0x118>)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004896:	429a      	cmp	r2, r3
 8004898:	d109      	bne.n	80048ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800489a:	4a38      	ldr	r2, [pc, #224]	; (800497c <inc_lock+0x118>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	4413      	add	r3, r2
 80048a2:	3308      	adds	r3, #8
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d006      	beq.n	80048bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d9dc      	bls.n	8004874 <inc_lock+0x10>
 80048ba:	e000      	b.n	80048be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80048bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d132      	bne.n	800492a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e002      	b.n	80048d0 <inc_lock+0x6c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d806      	bhi.n	80048e4 <inc_lock+0x80>
 80048d6:	4a29      	ldr	r2, [pc, #164]	; (800497c <inc_lock+0x118>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	4413      	add	r3, r2
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f2      	bne.n	80048ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d101      	bne.n	80048ee <inc_lock+0x8a>
 80048ea:	2300      	movs	r3, #0
 80048ec:	e040      	b.n	8004970 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4922      	ldr	r1, [pc, #136]	; (800497c <inc_lock+0x118>)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	440b      	add	r3, r1
 80048fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	491e      	ldr	r1, [pc, #120]	; (800497c <inc_lock+0x118>)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	440b      	add	r3, r1
 8004908:	3304      	adds	r3, #4
 800490a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	491a      	ldr	r1, [pc, #104]	; (800497c <inc_lock+0x118>)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	440b      	add	r3, r1
 8004918:	3308      	adds	r3, #8
 800491a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <inc_lock+0x118>)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	330c      	adds	r3, #12
 8004926:	2200      	movs	r2, #0
 8004928:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <inc_lock+0xe0>
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <inc_lock+0x118>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	4413      	add	r3, r2
 8004938:	330c      	adds	r3, #12
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <inc_lock+0xe0>
 8004940:	2300      	movs	r3, #0
 8004942:	e015      	b.n	8004970 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <inc_lock+0xf8>
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <inc_lock+0x118>)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	330c      	adds	r3, #12
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	e001      	b.n	8004960 <inc_lock+0xfc>
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	4906      	ldr	r1, [pc, #24]	; (800497c <inc_lock+0x118>)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	440b      	add	r3, r1
 8004968:	330c      	adds	r3, #12
 800496a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000344 	.word	0x20000344

08004980 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3b01      	subs	r3, #1
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d825      	bhi.n	80049e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <dec_lock+0x74>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	4413      	add	r3, r2
 800499c:	330c      	adds	r3, #12
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80049a2:	89fb      	ldrh	r3, [r7, #14]
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d101      	bne.n	80049ae <dec_lock+0x2e>
 80049aa:	2300      	movs	r3, #0
 80049ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80049ae:	89fb      	ldrh	r3, [r7, #14]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <dec_lock+0x3a>
 80049b4:	89fb      	ldrh	r3, [r7, #14]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <dec_lock+0x74>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	330c      	adds	r3, #12
 80049c4:	89fa      	ldrh	r2, [r7, #14]
 80049c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80049c8:	89fb      	ldrh	r3, [r7, #14]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <dec_lock+0x5a>
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <dec_lock+0x74>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	737b      	strb	r3, [r7, #13]
 80049de:	e001      	b.n	80049e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80049e0:	2302      	movs	r3, #2
 80049e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80049e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000344 	.word	0x20000344

080049f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e010      	b.n	8004a28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004a06:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <clear_lock+0x44>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	4413      	add	r3, r2
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d105      	bne.n	8004a22 <clear_lock+0x2a>
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <clear_lock+0x44>)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	4413      	add	r3, r2
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d9eb      	bls.n	8004a06 <clear_lock+0xe>
	}
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000344 	.word	0x20000344

08004a40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d034      	beq.n	8004abe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7858      	ldrb	r0, [r3, #1]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a64:	2301      	movs	r3, #1
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	f7ff fd0e 	bl	8004488 <disk_write>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	e022      	b.n	8004abe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	1ad2      	subs	r2, r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d217      	bcs.n	8004abe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	789b      	ldrb	r3, [r3, #2]
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	e010      	b.n	8004ab8 <sync_window+0x78>
					wsect += fs->fsize;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7858      	ldrb	r0, [r3, #1]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004aaa:	2301      	movs	r3, #1
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	f7ff fceb 	bl	8004488 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d8eb      	bhi.n	8004a96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d01b      	beq.n	8004b18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ffad 	bl	8004a40 <sync_window>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d113      	bne.n	8004b18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	7858      	ldrb	r0, [r3, #1]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004afa:	2301      	movs	r3, #1
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	f7ff fca3 	bl	8004448 <disk_read>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff87 	bl	8004a40 <sync_window>
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d158      	bne.n	8004bee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d148      	bne.n	8004bd6 <sync_fs+0xb2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d144      	bne.n	8004bd6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3334      	adds	r3, #52	; 0x34
 8004b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fd77 	bl	800464a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3334      	adds	r3, #52	; 0x34
 8004b60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004b64:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fd06 	bl	800457a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3334      	adds	r3, #52	; 0x34
 8004b72:	4921      	ldr	r1, [pc, #132]	; (8004bf8 <sync_fs+0xd4>)
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fd1b 	bl	80045b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3334      	adds	r3, #52	; 0x34
 8004b7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004b82:	491e      	ldr	r1, [pc, #120]	; (8004bfc <sync_fs+0xd8>)
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fd13 	bl	80045b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3334      	adds	r3, #52	; 0x34
 8004b8e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f7ff fd09 	bl	80045b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3334      	adds	r3, #52	; 0x34
 8004ba2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f7ff fcff 	bl	80045b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7858      	ldrb	r0, [r3, #1]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f7ff fc5c 	bl	8004488 <disk_write>
			fs->fsi_flag = 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fc72 	bl	80044c8 <disk_ioctl>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <sync_fs+0xca>
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	41615252 	.word	0x41615252
 8004bfc:	61417272 	.word	0x61417272

08004c00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	3b02      	subs	r3, #2
 8004c0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	3b02      	subs	r3, #2
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d301      	bcc.n	8004c20 <clust2sect+0x20>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e008      	b.n	8004c32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	895b      	ldrh	r3, [r3, #10]
 8004c24:	461a      	mov	r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	fb03 f202 	mul.w	r2, r3, r2
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4413      	add	r3, r2
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b086      	sub	sp, #24
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d904      	bls.n	8004c5e <get_fat+0x20>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004c5e:	2301      	movs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e08f      	b.n	8004d84 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d062      	beq.n	8004d38 <get_fat+0xfa>
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	dc7c      	bgt.n	8004d70 <get_fat+0x132>
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d002      	beq.n	8004c80 <get_fat+0x42>
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d042      	beq.n	8004d04 <get_fat+0xc6>
 8004c7e:	e077      	b.n	8004d70 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	4413      	add	r3, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6938      	ldr	r0, [r7, #16]
 8004c9c:	f7ff ff14 	bl	8004ac8 <move_window>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d167      	bne.n	8004d76 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	0a5b      	lsrs	r3, r3, #9
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6938      	ldr	r0, [r7, #16]
 8004cc8:	f7ff fefe 	bl	8004ac8 <move_window>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d153      	bne.n	8004d7a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <get_fat+0xbc>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	e002      	b.n	8004d00 <get_fat+0xc2>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	617b      	str	r3, [r7, #20]
			break;
 8004d02:	e03f      	b.n	8004d84 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6938      	ldr	r0, [r7, #16]
 8004d12:	f7ff fed9 	bl	8004ac8 <move_window>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d130      	bne.n	8004d7e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fbe9 	bl	8004504 <ld_word>
 8004d32:	4603      	mov	r3, r0
 8004d34:	617b      	str	r3, [r7, #20]
			break;
 8004d36:	e025      	b.n	8004d84 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	09db      	lsrs	r3, r3, #7
 8004d40:	4413      	add	r3, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	6938      	ldr	r0, [r7, #16]
 8004d46:	f7ff febf 	bl	8004ac8 <move_window>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d5e:	4413      	add	r3, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fbe7 	bl	8004534 <ld_dword>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d6c:	617b      	str	r3, [r7, #20]
			break;
 8004d6e:	e009      	b.n	8004d84 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004d70:	2301      	movs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e006      	b.n	8004d84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d82:	bf00      	nop
		}
	}

	return val;
 8004d84:	697b      	ldr	r3, [r7, #20]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004d8e:	b590      	push	{r4, r7, lr}
 8004d90:	b089      	sub	sp, #36	; 0x24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f240 80d2 	bls.w	8004f4a <put_fat+0x1bc>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	f080 80cc 	bcs.w	8004f4a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	f000 8096 	beq.w	8004ee8 <put_fat+0x15a>
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	f300 80cd 	bgt.w	8004f5c <put_fat+0x1ce>
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d002      	beq.n	8004dcc <put_fat+0x3e>
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d06e      	beq.n	8004ea8 <put_fat+0x11a>
 8004dca:	e0c7      	b.n	8004f5c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	0a5b      	lsrs	r3, r3, #9
 8004de2:	4413      	add	r3, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff fe6e 	bl	8004ac8 <move_window>
 8004dec:	4603      	mov	r3, r0
 8004dee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 80ab 	bne.w	8004f4e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	61b9      	str	r1, [r7, #24]
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	4413      	add	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <put_fat+0xa4>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b25b      	sxtb	r3, r3
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	b25a      	sxtb	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	e001      	b.n	8004e36 <put_fat+0xa8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	0a5b      	lsrs	r3, r3, #9
 8004e48:	4413      	add	r3, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fe3b 	bl	8004ac8 <move_window>
 8004e52:	4603      	mov	r3, r0
 8004e54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e56:	7ffb      	ldrb	r3, [r7, #31]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d17a      	bne.n	8004f52 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e68:	4413      	add	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <put_fat+0xf0>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e00e      	b.n	8004e9c <put_fat+0x10e>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b25b      	sxtb	r3, r3
 8004e84:	f023 030f 	bic.w	r3, r3, #15
 8004e88:	b25a      	sxtb	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	70da      	strb	r2, [r3, #3]
			break;
 8004ea6:	e059      	b.n	8004f5c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fe07 	bl	8004ac8 <move_window>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d148      	bne.n	8004f56 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004ed2:	4413      	add	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fb4d 	bl	800457a <st_word>
			fs->wflag = 1;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	70da      	strb	r2, [r3, #3]
			break;
 8004ee6:	e039      	b.n	8004f5c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	09db      	lsrs	r3, r3, #7
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fde7 	bl	8004ac8 <move_window>
 8004efa:	4603      	mov	r3, r0
 8004efc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004efe:	7ffb      	ldrb	r3, [r7, #31]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d12a      	bne.n	8004f5a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f18:	4413      	add	r3, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fb0a 	bl	8004534 <ld_dword>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f26:	4323      	orrs	r3, r4
 8004f28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f38:	4413      	add	r3, r2
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fb37 	bl	80045b0 <st_dword>
			fs->wflag = 1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	70da      	strb	r2, [r3, #3]
			break;
 8004f48:	e008      	b.n	8004f5c <put_fat+0x1ce>
		}
	}
 8004f4a:	bf00      	nop
 8004f4c:	e006      	b.n	8004f5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004f5a:	bf00      	nop
	return res;
 8004f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3724      	adds	r7, #36	; 0x24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd90      	pop	{r4, r7, pc}

08004f66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b088      	sub	sp, #32
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d904      	bls.n	8004f8c <remove_chain+0x26>
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d301      	bcc.n	8004f90 <remove_chain+0x2a>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e04b      	b.n	8005028 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	69b8      	ldr	r0, [r7, #24]
 8004f9e:	f7ff fef6 	bl	8004d8e <put_fat>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <remove_chain+0x4a>
 8004fac:	7ffb      	ldrb	r3, [r7, #31]
 8004fae:	e03b      	b.n	8005028 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fe43 	bl	8004c3e <get_fat>
 8004fb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d031      	beq.n	8005024 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <remove_chain+0x64>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e02e      	b.n	8005028 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd0:	d101      	bne.n	8004fd6 <remove_chain+0x70>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e028      	b.n	8005028 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f7ff fed7 	bl	8004d8e <put_fat>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004fe4:	7ffb      	ldrb	r3, [r7, #31]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <remove_chain+0x88>
 8004fea:	7ffb      	ldrb	r3, [r7, #31]
 8004fec:	e01c      	b.n	8005028 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	3b02      	subs	r3, #2
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d20b      	bcs.n	8005014 <remove_chain+0xae>
			fs->free_clst++;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	791b      	ldrb	r3, [r3, #4]
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3c6      	bcc.n	8004fb0 <remove_chain+0x4a>
 8005022:	e000      	b.n	8005026 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005024:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <create_chain+0x2c>
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	d31b      	bcc.n	8005094 <create_chain+0x64>
 800505c:	2301      	movs	r3, #1
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e018      	b.n	8005094 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fdea 	bl	8004c3e <get_fat>
 800506a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d801      	bhi.n	8005076 <create_chain+0x46>
 8005072:	2301      	movs	r3, #1
 8005074:	e070      	b.n	8005158 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507c:	d101      	bne.n	8005082 <create_chain+0x52>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	e06a      	b.n	8005158 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	429a      	cmp	r2, r3
 800508a:	d201      	bcs.n	8005090 <create_chain+0x60>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	e063      	b.n	8005158 <create_chain+0x128>
		scl = clst;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d307      	bcc.n	80050b8 <create_chain+0x88>
				ncl = 2;
 80050a8:	2302      	movs	r3, #2
 80050aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d901      	bls.n	80050b8 <create_chain+0x88>
 80050b4:	2300      	movs	r3, #0
 80050b6:	e04f      	b.n	8005158 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80050b8:	69f9      	ldr	r1, [r7, #28]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fdbf 	bl	8004c3e <get_fat>
 80050c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <create_chain+0xa6>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d4:	d101      	bne.n	80050da <create_chain+0xaa>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	e03e      	b.n	8005158 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d1da      	bne.n	8005098 <create_chain+0x68>
 80050e2:	2300      	movs	r3, #0
 80050e4:	e038      	b.n	8005158 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80050e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	6938      	ldr	r0, [r7, #16]
 80050f0:	f7ff fe4d 	bl	8004d8e <put_fat>
 80050f4:	4603      	mov	r3, r0
 80050f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <create_chain+0xe2>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d006      	beq.n	8005112 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6938      	ldr	r0, [r7, #16]
 800510a:	f7ff fe40 	bl	8004d8e <put_fat>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d116      	bne.n	8005146 <create_chain+0x116>
		fs->last_clst = ncl;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	3b02      	subs	r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d804      	bhi.n	8005136 <create_chain+0x106>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	1e5a      	subs	r2, r3, #1
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	b2da      	uxtb	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	711a      	strb	r2, [r3, #4]
 8005144:	e007      	b.n	8005156 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <create_chain+0x122>
 800514c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005150:	e000      	b.n	8005154 <create_chain+0x124>
 8005152:	2301      	movs	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	3304      	adds	r3, #4
 8005176:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	0a5b      	lsrs	r3, r3, #9
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	8952      	ldrh	r2, [r2, #10]
 8005180:	fbb3 f3f2 	udiv	r3, r3, r2
 8005184:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	613a      	str	r2, [r7, #16]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <clmt_clust+0x3a>
 8005196:	2300      	movs	r3, #0
 8005198:	e010      	b.n	80051bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d307      	bcc.n	80051b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3304      	adds	r3, #4
 80051ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80051b0:	e7e9      	b.n	8005186 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80051b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4413      	add	r3, r2
}
 80051bc:	4618      	mov	r0, r3
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051de:	d204      	bcs.n	80051ea <dir_sdi+0x22>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80051ea:	2302      	movs	r3, #2
 80051ec:	e063      	b.n	80052b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <dir_sdi+0x46>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d902      	bls.n	800520e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	8912      	ldrh	r2, [r2, #8]
 800521c:	4293      	cmp	r3, r2
 800521e:	d301      	bcc.n	8005224 <dir_sdi+0x5c>
 8005220:	2302      	movs	r3, #2
 8005222:	e048      	b.n	80052b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	61da      	str	r2, [r3, #28]
 800522c:	e029      	b.n	8005282 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	895b      	ldrh	r3, [r3, #10]
 8005232:	025b      	lsls	r3, r3, #9
 8005234:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005236:	e019      	b.n	800526c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6979      	ldr	r1, [r7, #20]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fcfe 	bl	8004c3e <get_fat>
 8005242:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800524a:	d101      	bne.n	8005250 <dir_sdi+0x88>
 800524c:	2301      	movs	r3, #1
 800524e:	e032      	b.n	80052b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d904      	bls.n	8005260 <dir_sdi+0x98>
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	d301      	bcc.n	8005264 <dir_sdi+0x9c>
 8005260:	2302      	movs	r3, #2
 8005262:	e028      	b.n	80052b6 <dir_sdi+0xee>
			ofs -= csz;
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d2e1      	bcs.n	8005238 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f7ff fcc2 	bl	8004c00 <clust2sect>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <dir_sdi+0xcc>
 8005290:	2302      	movs	r3, #2
 8005292:	e010      	b.n	80052b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	0a5b      	lsrs	r3, r3, #9
 800529c:	441a      	add	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	441a      	add	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	3320      	adds	r3, #32
 80052d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <dir_next+0x28>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e4:	d301      	bcc.n	80052ea <dir_next+0x2c>
 80052e6:	2304      	movs	r3, #4
 80052e8:	e0aa      	b.n	8005440 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 8098 	bne.w	8005426 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	8912      	ldrh	r2, [r2, #8]
 8005310:	4293      	cmp	r3, r2
 8005312:	f0c0 8088 	bcc.w	8005426 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	61da      	str	r2, [r3, #28]
 800531c:	2304      	movs	r3, #4
 800531e:	e08f      	b.n	8005440 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	0a5b      	lsrs	r3, r3, #9
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	8952      	ldrh	r2, [r2, #10]
 8005328:	3a01      	subs	r2, #1
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d17a      	bne.n	8005426 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7ff fc80 	bl	8004c3e <get_fat>
 800533e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d801      	bhi.n	800534a <dir_next+0x8c>
 8005346:	2302      	movs	r3, #2
 8005348:	e07a      	b.n	8005440 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005350:	d101      	bne.n	8005356 <dir_next+0x98>
 8005352:	2301      	movs	r3, #1
 8005354:	e074      	b.n	8005440 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	429a      	cmp	r2, r3
 800535e:	d358      	bcc.n	8005412 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	61da      	str	r2, [r3, #28]
 800536c:	2304      	movs	r3, #4
 800536e:	e067      	b.n	8005440 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7ff fe59 	bl	8005030 <create_chain>
 800537e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <dir_next+0xcc>
 8005386:	2307      	movs	r3, #7
 8005388:	e05a      	b.n	8005440 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <dir_next+0xd6>
 8005390:	2302      	movs	r3, #2
 8005392:	e055      	b.n	8005440 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800539a:	d101      	bne.n	80053a0 <dir_next+0xe2>
 800539c:	2301      	movs	r3, #1
 800539e:	e04f      	b.n	8005440 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fb4d 	bl	8004a40 <sync_window>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <dir_next+0xf2>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e047      	b.n	8005440 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3334      	adds	r3, #52	; 0x34
 80053b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff f945 	bl	800464a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	6979      	ldr	r1, [r7, #20]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff fc1a 	bl	8004c00 <clust2sect>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
 80053d2:	e012      	b.n	80053fa <dir_next+0x13c>
						fs->wflag = 1;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fb30 	bl	8004a40 <sync_window>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <dir_next+0x12c>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e02a      	b.n	8005440 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3301      	adds	r3, #1
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	895b      	ldrh	r3, [r3, #10]
 80053fe:	461a      	mov	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4293      	cmp	r3, r2
 8005404:	d3e6      	bcc.n	80053d4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad2      	subs	r2, r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005418:	6979      	ldr	r1, [r7, #20]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff fbf0 	bl	8004c00 <clust2sect>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff feb4 	bl	80051c8 <dir_sdi>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d12b      	bne.n	80054c2 <dir_alloc+0x7a>
		n = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4619      	mov	r1, r3
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff fb27 	bl	8004ac8 <move_window>
 800547a:	4603      	mov	r3, r0
 800547c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11d      	bne.n	80054c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2be5      	cmp	r3, #229	; 0xe5
 800548c:	d004      	beq.n	8005498 <dir_alloc+0x50>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d107      	bne.n	80054a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	3301      	adds	r3, #1
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d102      	bne.n	80054ac <dir_alloc+0x64>
 80054a6:	e00c      	b.n	80054c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80054ac:	2101      	movs	r1, #1
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff05 	bl	80052be <dir_next>
 80054b4:	4603      	mov	r3, r0
 80054b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0d7      	beq.n	800546e <dir_alloc+0x26>
 80054be:	e000      	b.n	80054c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80054c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d101      	bne.n	80054cc <dir_alloc+0x84>
 80054c8:	2307      	movs	r3, #7
 80054ca:	75fb      	strb	r3, [r7, #23]
	return res;
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	331a      	adds	r3, #26
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff f80d 	bl	8004504 <ld_word>
 80054ea:	4603      	mov	r3, r0
 80054ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d109      	bne.n	800550a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	3314      	adds	r3, #20
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff f802 	bl	8004504 <ld_word>
 8005500:	4603      	mov	r3, r0
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800550a:	68fb      	ldr	r3, [r7, #12]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	331a      	adds	r3, #26
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	b292      	uxth	r2, r2
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff f825 	bl	800457a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d109      	bne.n	800554c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f103 0214 	add.w	r2, r3, #20
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b29b      	uxth	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7ff f817 	bl	800457a <st_word>
	}
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005562:	2100      	movs	r1, #0
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fe2f 	bl	80051c8 <dir_sdi>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <dir_find+0x24>
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	e03e      	b.n	80055f6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4619      	mov	r1, r3
 800557e:	6938      	ldr	r0, [r7, #16]
 8005580:	f7ff faa2 	bl	8004ac8 <move_window>
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d12f      	bne.n	80055ee <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <dir_find+0x4e>
 800559c:	2304      	movs	r3, #4
 800559e:	75fb      	strb	r3, [r7, #23]
 80055a0:	e028      	b.n	80055f4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	330b      	adds	r3, #11
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	330b      	adds	r3, #11
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <dir_find+0x86>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a18      	ldr	r0, [r3, #32]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	220b      	movs	r2, #11
 80055ce:	4619      	mov	r1, r3
 80055d0:	f7ff f856 	bl	8004680 <mem_cmp>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80055da:	2100      	movs	r1, #0
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff fe6e 	bl	80052be <dir_next>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0c5      	beq.n	8005578 <dir_find+0x24>
 80055ec:	e002      	b.n	80055f4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055f2:	bf00      	nop

	return res;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800560c:	2101      	movs	r1, #1
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff1a 	bl	8005448 <dir_alloc>
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11c      	bne.n	8005658 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4619      	mov	r1, r3
 8005624:	68b8      	ldr	r0, [r7, #8]
 8005626:	f7ff fa4f 	bl	8004ac8 <move_window>
 800562a:	4603      	mov	r3, r0
 800562c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	2220      	movs	r2, #32
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f804 	bl	800464a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a18      	ldr	r0, [r3, #32]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3324      	adds	r3, #36	; 0x24
 800564a:	220b      	movs	r2, #11
 800564c:	4619      	mov	r1, r3
 800564e:	f7fe ffdb 	bl	8004608 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2201      	movs	r2, #1
 8005656:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04e      	beq.n	8005718 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005682:	e021      	b.n	80056c8 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	6179      	str	r1, [r7, #20]
 800568e:	4413      	add	r3, r2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b20      	cmp	r3, #32
 8005698:	d100      	bne.n	800569c <get_fileinfo+0x3a>
 800569a:	e015      	b.n	80056c8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b05      	cmp	r3, #5
 80056a0:	d101      	bne.n	80056a6 <get_fileinfo+0x44>
 80056a2:	23e5      	movs	r3, #229	; 0xe5
 80056a4:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	d106      	bne.n	80056ba <get_fileinfo+0x58>
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	613a      	str	r2, [r7, #16]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	222e      	movs	r2, #46	; 0x2e
 80056b8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	613a      	str	r2, [r7, #16]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	4413      	add	r3, r2
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b0a      	cmp	r3, #10
 80056cc:	d9da      	bls.n	8005684 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	3309      	adds	r3, #9
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	7ada      	ldrb	r2, [r3, #11]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	331c      	adds	r3, #28
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe ff22 	bl	8004534 <ld_dword>
 80056f0:	4602      	mov	r2, r0
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	3316      	adds	r3, #22
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe ff19 	bl	8004534 <ld_dword>
 8005702:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	b29a      	uxth	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	80da      	strh	r2, [r3, #6]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b29a      	uxth	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	809a      	strh	r2, [r3, #4]
 8005716:	e000      	b.n	800571a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005718:	bf00      	nop
}
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3324      	adds	r3, #36	; 0x24
 8005734:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005736:	220b      	movs	r2, #11
 8005738:	2120      	movs	r1, #32
 800573a:	68b8      	ldr	r0, [r7, #8]
 800573c:	f7fe ff85 	bl	800464a <mem_set>
	si = i = 0; ni = 8;
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	2308      	movs	r3, #8
 800574a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	61fa      	str	r2, [r7, #28]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800575a:	7efb      	ldrb	r3, [r7, #27]
 800575c:	2b20      	cmp	r3, #32
 800575e:	d94e      	bls.n	80057fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005760:	7efb      	ldrb	r3, [r7, #27]
 8005762:	2b2f      	cmp	r3, #47	; 0x2f
 8005764:	d006      	beq.n	8005774 <create_name+0x54>
 8005766:	7efb      	ldrb	r3, [r7, #27]
 8005768:	2b5c      	cmp	r3, #92	; 0x5c
 800576a:	d110      	bne.n	800578e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800576c:	e002      	b.n	8005774 <create_name+0x54>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	3301      	adds	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b2f      	cmp	r3, #47	; 0x2f
 800577e:	d0f6      	beq.n	800576e <create_name+0x4e>
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b5c      	cmp	r3, #92	; 0x5c
 800578a:	d0f0      	beq.n	800576e <create_name+0x4e>
			break;
 800578c:	e038      	b.n	8005800 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800578e:	7efb      	ldrb	r3, [r7, #27]
 8005790:	2b2e      	cmp	r3, #46	; 0x2e
 8005792:	d003      	beq.n	800579c <create_name+0x7c>
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	d30c      	bcc.n	80057b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b0b      	cmp	r3, #11
 80057a0:	d002      	beq.n	80057a8 <create_name+0x88>
 80057a2:	7efb      	ldrb	r3, [r7, #27]
 80057a4:	2b2e      	cmp	r3, #46	; 0x2e
 80057a6:	d001      	beq.n	80057ac <create_name+0x8c>
 80057a8:	2306      	movs	r3, #6
 80057aa:	e044      	b.n	8005836 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80057ac:	2308      	movs	r3, #8
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	230b      	movs	r3, #11
 80057b2:	617b      	str	r3, [r7, #20]
			continue;
 80057b4:	e022      	b.n	80057fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80057b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da04      	bge.n	80057c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80057be:	7efb      	ldrb	r3, [r7, #27]
 80057c0:	3b80      	subs	r3, #128	; 0x80
 80057c2:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <create_name+0x120>)
 80057c4:	5cd3      	ldrb	r3, [r2, r3]
 80057c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80057c8:	7efb      	ldrb	r3, [r7, #27]
 80057ca:	4619      	mov	r1, r3
 80057cc:	481d      	ldr	r0, [pc, #116]	; (8005844 <create_name+0x124>)
 80057ce:	f7fe ff7e 	bl	80046ce <chk_chr>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <create_name+0xbc>
 80057d8:	2306      	movs	r3, #6
 80057da:	e02c      	b.n	8005836 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80057dc:	7efb      	ldrb	r3, [r7, #27]
 80057de:	2b60      	cmp	r3, #96	; 0x60
 80057e0:	d905      	bls.n	80057ee <create_name+0xce>
 80057e2:	7efb      	ldrb	r3, [r7, #27]
 80057e4:	2b7a      	cmp	r3, #122	; 0x7a
 80057e6:	d802      	bhi.n	80057ee <create_name+0xce>
 80057e8:	7efb      	ldrb	r3, [r7, #27]
 80057ea:	3b20      	subs	r3, #32
 80057ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	613a      	str	r2, [r7, #16]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4413      	add	r3, r2
 80057f8:	7efa      	ldrb	r2, [r7, #27]
 80057fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80057fc:	e7a6      	b.n	800574c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80057fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	441a      	add	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <create_name+0xf4>
 8005810:	2306      	movs	r3, #6
 8005812:	e010      	b.n	8005836 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2be5      	cmp	r3, #229	; 0xe5
 800581a:	d102      	bne.n	8005822 <create_name+0x102>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2205      	movs	r2, #5
 8005820:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005822:	7efb      	ldrb	r3, [r7, #27]
 8005824:	2b20      	cmp	r3, #32
 8005826:	d801      	bhi.n	800582c <create_name+0x10c>
 8005828:	2204      	movs	r2, #4
 800582a:	e000      	b.n	800582e <create_name+0x10e>
 800582c:	2200      	movs	r2, #0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	330b      	adds	r3, #11
 8005832:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005834:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	0800b924 	.word	0x0800b924
 8005844:	0800b7c0 	.word	0x0800b7c0

08005848 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800585c:	e002      	b.n	8005864 <follow_path+0x1c>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b2f      	cmp	r3, #47	; 0x2f
 800586a:	d0f8      	beq.n	800585e <follow_path+0x16>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b5c      	cmp	r3, #92	; 0x5c
 8005872:	d0f4      	beq.n	800585e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b1f      	cmp	r3, #31
 8005880:	d80a      	bhi.n	8005898 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800588a:	2100      	movs	r1, #0
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fc9b 	bl	80051c8 <dir_sdi>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]
 8005896:	e043      	b.n	8005920 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005898:	463b      	mov	r3, r7
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff3f 	bl	8005720 <create_name>
 80058a2:	4603      	mov	r3, r0
 80058a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d134      	bne.n	8005916 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fe51 	bl	8005554 <dir_find>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d127      	bne.n	800591a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058ca:	7afb      	ldrb	r3, [r7, #11]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d122      	bne.n	800591a <follow_path+0xd2>
 80058d4:	2305      	movs	r3, #5
 80058d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80058d8:	e01f      	b.n	800591a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11c      	bne.n	800591e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	799b      	ldrb	r3, [r3, #6]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80058f0:	2305      	movs	r3, #5
 80058f2:	75fb      	strb	r3, [r7, #23]
 80058f4:	e014      	b.n	8005920 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005904:	4413      	add	r3, r2
 8005906:	4619      	mov	r1, r3
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fde4 	bl	80054d6 <ld_clust>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005914:	e7c0      	b.n	8005898 <follow_path+0x50>
			if (res != FR_OK) break;
 8005916:	bf00      	nop
 8005918:	e002      	b.n	8005920 <follow_path+0xd8>
				break;
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800591e:	bf00      	nop
			}
		}
	}

	return res;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005936:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d031      	beq.n	80059a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e002      	b.n	800594e <get_ldnumber+0x24>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3301      	adds	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b20      	cmp	r3, #32
 8005954:	d903      	bls.n	800595e <get_ldnumber+0x34>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b3a      	cmp	r3, #58	; 0x3a
 800595c:	d1f4      	bne.n	8005948 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b3a      	cmp	r3, #58	; 0x3a
 8005964:	d11c      	bne.n	80059a0 <get_ldnumber+0x76>
			tp = *path;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	60fa      	str	r2, [r7, #12]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	3b30      	subs	r3, #48	; 0x30
 8005976:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b09      	cmp	r3, #9
 800597c:	d80e      	bhi.n	800599c <get_ldnumber+0x72>
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	429a      	cmp	r2, r3
 8005984:	d10a      	bne.n	800599c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <get_ldnumber+0x72>
					vol = (int)i;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	3301      	adds	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	e002      	b.n	80059a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80059a4:	693b      	ldr	r3, [r7, #16]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	70da      	strb	r2, [r3, #3]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff f87a 	bl	8004ac8 <move_window>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <check_fs+0x2a>
 80059da:	2304      	movs	r3, #4
 80059dc:	e038      	b.n	8005a50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3334      	adds	r3, #52	; 0x34
 80059e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fd8c 	bl	8004504 <ld_word>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <check_fs+0x48>
 80059f8:	2303      	movs	r3, #3
 80059fa:	e029      	b.n	8005a50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a02:	2be9      	cmp	r3, #233	; 0xe9
 8005a04:	d009      	beq.n	8005a1a <check_fs+0x66>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a0c:	2beb      	cmp	r3, #235	; 0xeb
 8005a0e:	d11e      	bne.n	8005a4e <check_fs+0x9a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005a16:	2b90      	cmp	r3, #144	; 0x90
 8005a18:	d119      	bne.n	8005a4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3334      	adds	r3, #52	; 0x34
 8005a1e:	3336      	adds	r3, #54	; 0x36
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fd87 	bl	8004534 <ld_dword>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <check_fs+0xa4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <check_fs+0x82>
 8005a32:	2300      	movs	r3, #0
 8005a34:	e00c      	b.n	8005a50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3334      	adds	r3, #52	; 0x34
 8005a3a:	3352      	adds	r3, #82	; 0x52
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe fd79 	bl	8004534 <ld_dword>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4a05      	ldr	r2, [pc, #20]	; (8005a5c <check_fs+0xa8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <check_fs+0x9a>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005a4e:	2302      	movs	r3, #2
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	00544146 	.word	0x00544146
 8005a5c:	33544146 	.word	0x33544146

08005a60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b096      	sub	sp, #88	; 0x58
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ff58 	bl	800592a <get_ldnumber>
 8005a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da01      	bge.n	8005a86 <find_volume+0x26>
 8005a82:	230b      	movs	r3, #11
 8005a84:	e235      	b.n	8005ef2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005a86:	4aa5      	ldr	r2, [pc, #660]	; (8005d1c <find_volume+0x2bc>)
 8005a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <find_volume+0x3a>
 8005a96:	230c      	movs	r3, #12
 8005a98:	e22b      	b.n	8005ef2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8005a9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a9c:	f7fe fe32 	bl	8004704 <lock_fs>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <find_volume+0x4a>
 8005aa6:	230f      	movs	r3, #15
 8005aa8:	e223      	b.n	8005ef2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01a      	beq.n	8005af6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fc7f 	bl	80043c8 <disk_status>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ad0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10c      	bne.n	8005af6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <find_volume+0x92>
 8005ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8005aee:	230a      	movs	r3, #10
 8005af0:	e1ff      	b.n	8005ef2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8005af2:	2300      	movs	r3, #0
 8005af4:	e1fd      	b.n	8005ef2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fc77 	bl	80043fc <disk_initialize>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005b14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b20:	2303      	movs	r3, #3
 8005b22:	e1e6      	b.n	8005ef2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <find_volume+0xda>
 8005b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8005b36:	230a      	movs	r3, #10
 8005b38:	e1db      	b.n	8005ef2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005b3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b42:	f7ff ff37 	bl	80059b4 <check_fs>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d149      	bne.n	8005be8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005b54:	2300      	movs	r3, #0
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40
 8005b58:	e01e      	b.n	8005b98 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005b68:	4413      	add	r3, r2
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	3304      	adds	r3, #4
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d006      	beq.n	8005b84 <find_volume+0x124>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	3308      	adds	r3, #8
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fcda 	bl	8004534 <ld_dword>
 8005b80:	4602      	mov	r2, r0
 8005b82:	e000      	b.n	8005b86 <find_volume+0x126>
 8005b84:	2200      	movs	r2, #0
 8005b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	3358      	adds	r3, #88	; 0x58
 8005b8c:	443b      	add	r3, r7
 8005b8e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b94:	3301      	adds	r3, #1
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
 8005b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d9dd      	bls.n	8005b5a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <find_volume+0x14e>
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	3b01      	subs	r3, #1
 8005bac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	3358      	adds	r3, #88	; 0x58
 8005bb4:	443b      	add	r3, r7
 8005bb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005bba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <find_volume+0x16e>
 8005bc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bc6:	f7ff fef5 	bl	80059b4 <check_fs>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	e000      	b.n	8005bd0 <find_volume+0x170>
 8005bce:	2303      	movs	r3, #3
 8005bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d905      	bls.n	8005be8 <find_volume+0x188>
 8005bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bde:	3301      	adds	r3, #1
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
 8005be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d9e2      	bls.n	8005bae <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d101      	bne.n	8005bf4 <find_volume+0x194>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e17e      	b.n	8005ef2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d901      	bls.n	8005c00 <find_volume+0x1a0>
 8005bfc:	230d      	movs	r3, #13
 8005bfe:	e178      	b.n	8005ef2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	3334      	adds	r3, #52	; 0x34
 8005c04:	330b      	adds	r3, #11
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fc7c 	bl	8004504 <ld_word>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c12:	d001      	beq.n	8005c18 <find_volume+0x1b8>
 8005c14:	230d      	movs	r3, #13
 8005c16:	e16c      	b.n	8005ef2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	3334      	adds	r3, #52	; 0x34
 8005c1c:	3316      	adds	r3, #22
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fc70 	bl	8004504 <ld_word>
 8005c24:	4603      	mov	r3, r0
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <find_volume+0x1dc>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	3334      	adds	r3, #52	; 0x34
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fc7d 	bl	8004534 <ld_dword>
 8005c3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c40:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	789b      	ldrb	r3, [r3, #2]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d005      	beq.n	8005c60 <find_volume+0x200>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	789b      	ldrb	r3, [r3, #2]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d001      	beq.n	8005c60 <find_volume+0x200>
 8005c5c:	230d      	movs	r3, #13
 8005c5e:	e148      	b.n	8005ef2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	fb02 f303 	mul.w	r3, r2, r3
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	895b      	ldrh	r3, [r3, #10]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <find_volume+0x234>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	895b      	ldrh	r3, [r3, #10]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	895b      	ldrh	r3, [r3, #10]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <find_volume+0x238>
 8005c94:	230d      	movs	r3, #13
 8005c96:	e12c      	b.n	8005ef2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	3334      	adds	r3, #52	; 0x34
 8005c9c:	3311      	adds	r3, #17
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fc30 	bl	8004504 <ld_word>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	891b      	ldrh	r3, [r3, #8]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <find_volume+0x25e>
 8005cba:	230d      	movs	r3, #13
 8005cbc:	e119      	b.n	8005ef2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	3334      	adds	r3, #52	; 0x34
 8005cc2:	3313      	adds	r3, #19
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fc1d 	bl	8004504 <ld_word>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <find_volume+0x282>
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	3334      	adds	r3, #52	; 0x34
 8005cd8:	3320      	adds	r3, #32
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fc2a 	bl	8004534 <ld_dword>
 8005ce0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	3334      	adds	r3, #52	; 0x34
 8005ce6:	330e      	adds	r3, #14
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fc0b 	bl	8004504 <ld_word>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <find_volume+0x29c>
 8005cf8:	230d      	movs	r3, #13
 8005cfa:	e0fa      	b.n	8005ef2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005cfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d00:	4413      	add	r3, r2
 8005d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d04:	8912      	ldrh	r2, [r2, #8]
 8005d06:	0912      	lsrs	r2, r2, #4
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d204      	bcs.n	8005d20 <find_volume+0x2c0>
 8005d16:	230d      	movs	r3, #13
 8005d18:	e0eb      	b.n	8005ef2 <find_volume+0x492>
 8005d1a:	bf00      	nop
 8005d1c:	2000033c 	.word	0x2000033c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d28:	8952      	ldrh	r2, [r2, #10]
 8005d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <find_volume+0x2da>
 8005d36:	230d      	movs	r3, #13
 8005d38:	e0db      	b.n	8005ef2 <find_volume+0x492>
		fmt = FS_FAT32;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d802      	bhi.n	8005d50 <find_volume+0x2f0>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d802      	bhi.n	8005d60 <find_volume+0x300>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d6c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005d6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d72:	441a      	add	r2, r3
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005d78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	441a      	add	r2, r3
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005d82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d11e      	bne.n	8005dc8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	3334      	adds	r3, #52	; 0x34
 8005d8e:	332a      	adds	r3, #42	; 0x2a
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe fbb7 	bl	8004504 <ld_word>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <find_volume+0x340>
 8005d9c:	230d      	movs	r3, #13
 8005d9e:	e0a8      	b.n	8005ef2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	891b      	ldrh	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <find_volume+0x34c>
 8005da8:	230d      	movs	r3, #13
 8005daa:	e0a2      	b.n	8005ef2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	3334      	adds	r3, #52	; 0x34
 8005db0:	332c      	adds	r3, #44	; 0x2c
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fbbe 	bl	8004534 <ld_dword>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc6:	e01f      	b.n	8005e08 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	891b      	ldrh	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <find_volume+0x374>
 8005dd0:	230d      	movs	r3, #13
 8005dd2:	e08e      	b.n	8005ef2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dda:	441a      	add	r2, r3
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d103      	bne.n	8005df0 <find_volume+0x390>
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	e00a      	b.n	8005e06 <find_volume+0x3a6>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	085a      	lsrs	r2, r3, #1
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e06:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e12:	0a5b      	lsrs	r3, r3, #9
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d201      	bcs.n	8005e1c <find_volume+0x3bc>
 8005e18:	230d      	movs	r3, #13
 8005e1a:	e06a      	b.n	8005ef2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e22:	615a      	str	r2, [r3, #20]
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d149      	bne.n	8005ece <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	3334      	adds	r3, #52	; 0x34
 8005e3e:	3330      	adds	r3, #48	; 0x30
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fb5f 	bl	8004504 <ld_word>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d140      	bne.n	8005ece <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4e:	3301      	adds	r3, #1
 8005e50:	4619      	mov	r1, r3
 8005e52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e54:	f7fe fe38 	bl	8004ac8 <move_window>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d137      	bne.n	8005ece <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2200      	movs	r2, #0
 8005e62:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	3334      	adds	r3, #52	; 0x34
 8005e68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fb49 	bl	8004504 <ld_word>
 8005e72:	4603      	mov	r3, r0
 8005e74:	461a      	mov	r2, r3
 8005e76:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d127      	bne.n	8005ece <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	3334      	adds	r3, #52	; 0x34
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fb56 	bl	8004534 <ld_dword>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <find_volume+0x49c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d11e      	bne.n	8005ece <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	3334      	adds	r3, #52	; 0x34
 8005e94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe fb4b 	bl	8004534 <ld_dword>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <find_volume+0x4a0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d113      	bne.n	8005ece <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	3334      	adds	r3, #52	; 0x34
 8005eaa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fb40 	bl	8004534 <ld_dword>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	3334      	adds	r3, #52	; 0x34
 8005ebe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fb36 	bl	8004534 <ld_dword>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ed4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <find_volume+0x4a4>)
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <find_volume+0x4a4>)
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <find_volume+0x4a4>)
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005eea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eec:	f7fe fd84 	bl	80049f8 <clear_lock>
#endif
	return FR_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3758      	adds	r7, #88	; 0x58
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	41615252 	.word	0x41615252
 8005f00:	61417272 	.word	0x61417272
 8005f04:	20000340 	.word	0x20000340

08005f08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f12:	2309      	movs	r3, #9
 8005f14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d02e      	beq.n	8005f7a <validate+0x72>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02a      	beq.n	8005f7a <validate+0x72>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d025      	beq.n	8005f7a <validate+0x72>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	889a      	ldrh	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	88db      	ldrh	r3, [r3, #6]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d11e      	bne.n	8005f7a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fbdf 	bl	8004704 <lock_fs>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d014      	beq.n	8005f76 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fa38 	bl	80043c8 <disk_status>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <validate+0x60>
				res = FR_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e008      	b.n	8005f7a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fbde 	bl	8004730 <unlock_fs>
 8005f74:	e001      	b.n	8005f7a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8005f76:	230f      	movs	r3, #15
 8005f78:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <validate+0x7e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	e000      	b.n	8005f88 <validate+0x80>
 8005f86:	2300      	movs	r3, #0
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	6013      	str	r3, [r2, #0]
	return res;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005faa:	f107 0310 	add.w	r3, r7, #16
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fcbb 	bl	800592a <get_ldnumber>
 8005fb4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da01      	bge.n	8005fc0 <f_mount+0x28>
 8005fbc:	230b      	movs	r3, #11
 8005fbe:	e048      	b.n	8006052 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <f_mount+0xc4>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00f      	beq.n	8005ff0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005fd0:	69b8      	ldr	r0, [r7, #24]
 8005fd2:	f7fe fd11 	bl	80049f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fd18 	bl	8006a10 <ff_del_syncobj>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <f_mount+0x52>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e033      	b.n	8006052 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	330c      	adds	r3, #12
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f000 fce7 	bl	80069da <ff_cre_syncobj>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <f_mount+0x7e>
 8006012:	2302      	movs	r3, #2
 8006014:	e01d      	b.n	8006052 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4910      	ldr	r1, [pc, #64]	; (800605c <f_mount+0xc4>)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <f_mount+0x94>
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <f_mount+0x98>
 800602c:	2300      	movs	r3, #0
 800602e:	e010      	b.n	8006052 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006030:	f107 010c 	add.w	r1, r7, #12
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	2200      	movs	r2, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fd10 	bl	8005a60 <find_volume>
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	7dfa      	ldrb	r2, [r7, #23]
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fb70 	bl	8004730 <unlock_fs>
 8006050:	7dfb      	ldrb	r3, [r7, #23]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	2000033c 	.word	0x2000033c

08006060 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b098      	sub	sp, #96	; 0x60
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <f_open+0x18>
 8006074:	2309      	movs	r3, #9
 8006076:	e1b4      	b.n	80063e2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800607e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006080:	79fa      	ldrb	r2, [r7, #7]
 8006082:	f107 0110 	add.w	r1, r7, #16
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fce8 	bl	8005a60 <find_volume>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 8191 	bne.w	80063c2 <f_open+0x362>
		dj.obj.fs = fs;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fbcb 	bl	8005848 <follow_path>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80060b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11a      	bne.n	80060f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80060c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060c4:	b25b      	sxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da03      	bge.n	80060d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80060ca:	2306      	movs	r3, #6
 80060cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060d0:	e011      	b.n	80060f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	f107 0314 	add.w	r3, r7, #20
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fb3c 	bl	8004768 <chk_lock>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	f003 031c 	and.w	r3, r3, #28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d07f      	beq.n	8006200 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800610c:	2b04      	cmp	r3, #4
 800610e:	d10e      	bne.n	800612e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006110:	f7fe fb86 	bl	8004820 <enq_lock>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d006      	beq.n	8006128 <f_open+0xc8>
 800611a:	f107 0314 	add.w	r3, r7, #20
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fa6d 	bl	80055fe <dir_register>
 8006124:	4603      	mov	r3, r0
 8006126:	e000      	b.n	800612a <f_open+0xca>
 8006128:	2312      	movs	r3, #18
 800612a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	f043 0308 	orr.w	r3, r3, #8
 8006134:	71fb      	strb	r3, [r7, #7]
 8006136:	e010      	b.n	800615a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006138:	7ebb      	ldrb	r3, [r7, #26]
 800613a:	f003 0311 	and.w	r3, r3, #17
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <f_open+0xea>
					res = FR_DENIED;
 8006142:	2307      	movs	r3, #7
 8006144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006148:	e007      	b.n	800615a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <f_open+0xfa>
 8006154:	2308      	movs	r3, #8
 8006156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800615a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800615e:	2b00      	cmp	r3, #0
 8006160:	d168      	bne.n	8006234 <f_open+0x1d4>
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d063      	beq.n	8006234 <f_open+0x1d4>
				dw = GET_FATTIME();
 800616c:	f7fd fc08 	bl	8003980 <get_fattime>
 8006170:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	330e      	adds	r3, #14
 8006176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fa19 	bl	80045b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	3316      	adds	r3, #22
 8006182:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fa13 	bl	80045b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	330b      	adds	r3, #11
 800618e:	2220      	movs	r2, #32
 8006190:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff f99c 	bl	80054d6 <ld_clust>
 800619e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061a4:	2200      	movs	r2, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f9b4 	bl	8005514 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80061ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ae:	331c      	adds	r3, #28
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe f9fc 	bl	80045b0 <st_dword>
					fs->wflag = 1;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2201      	movs	r2, #1
 80061bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80061be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d037      	beq.n	8006234 <f_open+0x1d4>
						dw = fs->winsect;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	2200      	movs	r2, #0
 80061d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fec7 	bl	8004f66 <remove_chain>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80061de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d126      	bne.n	8006234 <f_open+0x1d4>
							res = move_window(fs, dw);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fc6c 	bl	8004ac8 <move_window>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061fa:	3a01      	subs	r2, #1
 80061fc:	611a      	str	r2, [r3, #16]
 80061fe:	e019      	b.n	8006234 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006204:	2b00      	cmp	r3, #0
 8006206:	d115      	bne.n	8006234 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006208:	7ebb      	ldrb	r3, [r7, #26]
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006212:	2304      	movs	r3, #4
 8006214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006218:	e00c      	b.n	8006234 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <f_open+0x1d4>
 8006224:	7ebb      	ldrb	r3, [r7, #26]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <f_open+0x1d4>
						res = FR_DENIED;
 800622e:	2307      	movs	r3, #7
 8006230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006238:	2b00      	cmp	r3, #0
 800623a:	d128      	bne.n	800628e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	f003 0308 	and.w	r3, r3, #8
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	f107 0314 	add.w	r3, r7, #20
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe faf5 	bl	8004864 <inc_lock>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <f_open+0x22e>
 8006288:	2302      	movs	r3, #2
 800628a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800628e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 8095 	bne.w	80063c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800629c:	4611      	mov	r1, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff f919 	bl	80054d6 <ld_clust>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	331c      	adds	r3, #28
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe f940 	bl	8004534 <ld_dword>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	88da      	ldrh	r2, [r3, #6]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	79fa      	ldrb	r2, [r7, #7]
 80062d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3330      	adds	r3, #48	; 0x30
 80062ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe f9aa 	bl	800464a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d060      	beq.n	80063c2 <f_open+0x362>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05c      	beq.n	80063c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	895b      	ldrh	r3, [r3, #10]
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	657b      	str	r3, [r7, #84]	; 0x54
 8006324:	e016      	b.n	8006354 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fc87 	bl	8004c3e <get_fat>
 8006330:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006334:	2b01      	cmp	r3, #1
 8006336:	d802      	bhi.n	800633e <f_open+0x2de>
 8006338:	2302      	movs	r3, #2
 800633a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800633e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006344:	d102      	bne.n	800634c <f_open+0x2ec>
 8006346:	2301      	movs	r3, #1
 8006348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800634c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800634e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
 8006354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <f_open+0x304>
 800635c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800635e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006360:	429a      	cmp	r2, r3
 8006362:	d8e0      	bhi.n	8006326 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006368:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800636a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800636e:	2b00      	cmp	r3, #0
 8006370:	d127      	bne.n	80063c2 <f_open+0x362>
 8006372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006378:	2b00      	cmp	r3, #0
 800637a:	d022      	beq.n	80063c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fc3d 	bl	8004c00 <clust2sect>
 8006386:	6478      	str	r0, [r7, #68]	; 0x44
 8006388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <f_open+0x336>
						res = FR_INT_ERR;
 800638e:	2302      	movs	r3, #2
 8006390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006394:	e015      	b.n	80063c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006398:	0a5a      	lsrs	r2, r3, #9
 800639a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	7858      	ldrb	r0, [r3, #1]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	2301      	movs	r3, #1
 80063b2:	f7fe f849 	bl	8004448 <disk_read>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <f_open+0x362>
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80063c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <f_open+0x370>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fe f9a9 	bl	8004730 <unlock_fs>
 80063de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3760      	adds	r7, #96	; 0x60
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08c      	sub	sp, #48	; 0x30
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f107 0210 	add.w	r2, r7, #16
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fd7c 	bl	8005f08 <validate>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800641a:	2b00      	cmp	r3, #0
 800641c:	d107      	bne.n	800642e <f_write+0x44>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	7d5b      	ldrb	r3, [r3, #21]
 8006422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <f_write+0x58>
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe f97a 	bl	8004730 <unlock_fs>
 800643c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006440:	e173      	b.n	800672a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	7d1b      	ldrb	r3, [r3, #20]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <f_write+0x72>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2107      	movs	r1, #7
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe f96c 	bl	8004730 <unlock_fs>
 8006458:	2307      	movs	r3, #7
 800645a:	e166      	b.n	800672a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	441a      	add	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	f080 814b 	bcs.w	8006704 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	43db      	mvns	r3, r3
 8006474:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006476:	e145      	b.n	8006704 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 8101 	bne.w	8006688 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	0a5b      	lsrs	r3, r3, #9
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	8952      	ldrh	r2, [r2, #10]
 8006490:	3a01      	subs	r2, #1
 8006492:	4013      	ands	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d14d      	bne.n	8006538 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10c      	bne.n	80064be <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d11a      	bne.n	80064e6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe fdbb 	bl	8005030 <create_chain>
 80064ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80064bc:	e013      	b.n	80064e6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7fe fe47 	bl	8005160 <clmt_clust>
 80064d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80064d4:	e007      	b.n	80064e6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe fda6 	bl	8005030 <create_chain>
 80064e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8110 	beq.w	800670e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d109      	bne.n	8006508 <f_write+0x11e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2202      	movs	r2, #2
 80064f8:	755a      	strb	r2, [r3, #21]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2102      	movs	r1, #2
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe f916 	bl	8004730 <unlock_fs>
 8006504:	2302      	movs	r3, #2
 8006506:	e110      	b.n	800672a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800650e:	d109      	bne.n	8006524 <f_write+0x13a>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	755a      	strb	r2, [r3, #21]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe f908 	bl	8004730 <unlock_fs>
 8006520:	2301      	movs	r3, #1
 8006522:	e102      	b.n	800672a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006528:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <f_write+0x14e>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006536:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	7d1b      	ldrb	r3, [r3, #20]
 800653c:	b25b      	sxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	da1d      	bge.n	800657e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	7858      	ldrb	r0, [r3, #1]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	2301      	movs	r3, #1
 8006552:	f7fd ff99 	bl	8004488 <disk_write>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d009      	beq.n	8006570 <f_write+0x186>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	755a      	strb	r2, [r3, #21]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2101      	movs	r1, #1
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe f8e2 	bl	8004730 <unlock_fs>
 800656c:	2301      	movs	r3, #1
 800656e:	e0dc      	b.n	800672a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	7d1b      	ldrb	r3, [r3, #20]
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fe fb3a 	bl	8004c00 <clust2sect>
 800658c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <f_write+0x1be>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2202      	movs	r2, #2
 8006598:	755a      	strb	r2, [r3, #21]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2102      	movs	r1, #2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f8c6 	bl	8004730 <unlock_fs>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e0c0      	b.n	800672a <f_write+0x340>
			sect += csect;
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	0a5b      	lsrs	r3, r3, #9
 80065b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d041      	beq.n	8006640 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	4413      	add	r3, r2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	8952      	ldrh	r2, [r2, #10]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d905      	bls.n	80065d6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	895b      	ldrh	r3, [r3, #10]
 80065ce:	461a      	mov	r2, r3
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	7858      	ldrb	r0, [r3, #1]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	69f9      	ldr	r1, [r7, #28]
 80065e0:	f7fd ff52 	bl	8004488 <disk_write>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <f_write+0x214>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	755a      	strb	r2, [r3, #21]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2101      	movs	r1, #1
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe f89b 	bl	8004730 <unlock_fs>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e095      	b.n	800672a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	429a      	cmp	r2, r3
 800660a:	d915      	bls.n	8006638 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	025b      	lsls	r3, r3, #9
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006624:	4619      	mov	r1, r3
 8006626:	f7fd ffef 	bl	8004608 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	7d1b      	ldrb	r3, [r3, #20]
 800662e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006632:	b2da      	uxtb	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	025b      	lsls	r3, r3, #9
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800663e:	e044      	b.n	80066ca <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	429a      	cmp	r2, r3
 8006648:	d01b      	beq.n	8006682 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006652:	429a      	cmp	r2, r3
 8006654:	d215      	bcs.n	8006682 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	7858      	ldrb	r0, [r3, #1]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006660:	2301      	movs	r3, #1
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	f7fd fef0 	bl	8004448 <disk_read>
 8006668:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	755a      	strb	r2, [r3, #21]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2101      	movs	r1, #1
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe f859 	bl	8004730 <unlock_fs>
 800667e:	2301      	movs	r3, #1
 8006680:	e053      	b.n	800672a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d901      	bls.n	80066a2 <f_write+0x2b8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b0:	4413      	add	r3, r2
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd ffa6 	bl	8004608 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	7d1b      	ldrb	r3, [r3, #20]
 80066c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	4413      	add	r3, r2
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	619a      	str	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	bf38      	it	cc
 80066ea:	461a      	movcc	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	60da      	str	r2, [r3, #12]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	441a      	add	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f47f aeb6 	bne.w	8006478 <f_write+0x8e>
 800670c:	e000      	b.n	8006710 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800670e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	7d1b      	ldrb	r3, [r3, #20]
 8006714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe f804 	bl	8004730 <unlock_fs>
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3730      	adds	r7, #48	; 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f107 0208 	add.w	r2, r7, #8
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff fbe0 	bl	8005f08 <validate>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d16d      	bne.n	800682e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7d1b      	ldrb	r3, [r3, #20]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d067      	beq.n	800682e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7d1b      	ldrb	r3, [r3, #20]
 8006762:	b25b      	sxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	da1a      	bge.n	800679e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	7858      	ldrb	r0, [r3, #1]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	2301      	movs	r3, #1
 8006778:	f7fd fe86 	bl	8004488 <disk_write>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <f_sync+0x5e>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f7fd ffd2 	bl	8004730 <unlock_fs>
 800678c:	2301      	movs	r3, #1
 800678e:	e055      	b.n	800683c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7d1b      	ldrb	r3, [r3, #20]
 8006794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006798:	b2da      	uxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800679e:	f7fd f8ef 	bl	8003980 <get_fattime>
 80067a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fe f98b 	bl	8004ac8 <move_window>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d138      	bne.n	800682e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	330b      	adds	r3, #11
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	330b      	adds	r3, #11
 80067cc:	f042 0220 	orr.w	r2, r2, #32
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	461a      	mov	r2, r3
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	f7fe fe98 	bl	8005514 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 021c 	add.w	r2, r3, #28
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7fd fedd 	bl	80045b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3316      	adds	r3, #22
 80067fa:	6939      	ldr	r1, [r7, #16]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fd fed7 	bl	80045b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3312      	adds	r3, #18
 8006806:	2100      	movs	r1, #0
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd feb6 	bl	800457a <st_word>
					fs->wflag = 1;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2201      	movs	r2, #1
 8006812:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe f984 	bl	8004b24 <sync_fs>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	7d1b      	ldrb	r3, [r3, #20]
 8006824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7dfa      	ldrb	r2, [r7, #23]
 8006832:	4611      	mov	r1, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f7fd ff7b 	bl	8004730 <unlock_fs>
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff70 	bl	8006732 <f_sync>
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d11d      	bne.n	8006898 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f107 0208 	add.w	r2, r7, #8
 8006862:	4611      	mov	r1, r2
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fb4f 	bl	8005f08 <validate>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d111      	bne.n	8006898 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe f881 	bl	8004980 <dec_lock>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2100      	movs	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f7fd ff4c 	bl	8004730 <unlock_fs>
#endif
		}
	}
	return res;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b090      	sub	sp, #64	; 0x40
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80068ac:	f107 010c 	add.w	r1, r7, #12
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	2200      	movs	r2, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff f8d3 	bl	8005a60 <find_volume>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80068c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11f      	bne.n	8006908 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	f107 030c 	add.w	r3, r7, #12
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe ffb9 	bl	8005848 <follow_path>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80068dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d111      	bne.n	8006908 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80068e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	da03      	bge.n	80068f6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80068ee:	2306      	movs	r3, #6
 80068f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80068f4:	e008      	b.n	8006908 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <f_stat+0x66>
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fead 	bl	8005662 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f7fd ff0d 	bl	8004730 <unlock_fs>
 8006916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800691a:	4618      	mov	r0, r3
 800691c:	3740      	adds	r7, #64	; 0x40
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800693a:	4b1f      	ldr	r3, [pc, #124]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 800693c:	7a5b      	ldrb	r3, [r3, #9]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d131      	bne.n	80069a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006944:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 8006946:	7a5b      	ldrb	r3, [r3, #9]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 800694e:	2100      	movs	r1, #0
 8006950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 8006954:	7a5b      	ldrb	r3, [r3, #9]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	4a17      	ldr	r2, [pc, #92]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 8006964:	7a5b      	ldrb	r3, [r3, #9]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 800696c:	4413      	add	r3, r2
 800696e:	79fa      	ldrb	r2, [r7, #7]
 8006970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 8006974:	7a5b      	ldrb	r3, [r3, #9]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	b2d1      	uxtb	r1, r2
 800697c:	4a0e      	ldr	r2, [pc, #56]	; (80069b8 <FATFS_LinkDriverEx+0x94>)
 800697e:	7251      	strb	r1, [r2, #9]
 8006980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006982:	7dbb      	ldrb	r3, [r7, #22]
 8006984:	3330      	adds	r3, #48	; 0x30
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	3301      	adds	r3, #1
 8006990:	223a      	movs	r2, #58	; 0x3a
 8006992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3302      	adds	r3, #2
 8006998:	222f      	movs	r2, #47	; 0x2f
 800699a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3303      	adds	r3, #3
 80069a0:	2200      	movs	r2, #0
 80069a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000364 	.word	0x20000364

080069bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069c6:	2200      	movs	r2, #0
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff ffaa 	bl	8006924 <FATFS_LinkDriverEx>
 80069d0:	4603      	mov	r3, r0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	4603      	mov	r3, r0
 80069e2:	6039      	str	r1, [r7, #0]
 80069e4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80069e6:	2200      	movs	r2, #0
 80069e8:	2101      	movs	r1, #1
 80069ea:	2001      	movs	r0, #1
 80069ec:	f000 f978 	bl	8006ce0 <osSemaphoreNew>
 80069f0:	4602      	mov	r2, r0
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	60fb      	str	r3, [r7, #12]

    return ret;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fa81 	bl	8006f20 <osSemaphoreDelete>
#endif
    return 1;
 8006a1e:	2301      	movs	r3, #1
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8006a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9db 	bl	8006df4 <osSemaphoreAcquire>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8006a44:	2301      	movs	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa1c 	bl	8006e98 <osSemaphoreRelease>
#endif
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8006a90:	2008      	movs	r0, #8
 8006a92:	f000 fa9d 	bl	8006fd0 <pvPortMalloc>
 8006a96:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d012      	beq.n	8006ae0 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 8006aba:	f000 fe53 	bl	8007764 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <FreeRTOS_CLIRegisterCommand+0x84>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8006ad2:	4a06      	ldr	r2, [pc, #24]	; (8006aec <FreeRTOS_CLIRegisterCommand+0x84>)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8006ad8:	f000 fe74 	bl	80077c4 <vPortExitCritical>

		xReturn = pdPASS;
 8006adc:	2301      	movs	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ae0:	697b      	ldr	r3, [r7, #20]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000028 	.word	0x20000028

08006af0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8006b00:	4b3a      	ldr	r3, [pc, #232]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d141      	bne.n	8006b8c <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8006b08:	4b38      	ldr	r3, [pc, #224]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b0a:	4a39      	ldr	r2, [pc, #228]	; (8006bf0 <FreeRTOS_CLIProcessCommand+0x100>)
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e037      	b.n	8006b80 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8006b10:	4b36      	ldr	r3, [pc, #216]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8006b1a:	69b8      	ldr	r0, [r7, #24]
 8006b1c:	f7f9 fb78 	bl	8000210 <strlen>
 8006b20:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d005      	beq.n	8006b3a <FreeRTOS_CLIProcessCommand+0x4a>
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	4413      	add	r3, r2
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11d      	bne.n	8006b76 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f003 fc12 	bl	800a368 <strncmp>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d115      	bne.n	8006b76 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8006b4a:	4b28      	ldr	r3, [pc, #160]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db18      	blt.n	8006b8a <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f87d 	bl	8006c58 <prvGetNumberOfParameters>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d00c      	beq.n	8006b8a <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8006b74:	e009      	b.n	8006b8a <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1c3      	bne.n	8006b10 <FreeRTOS_CLIProcessCommand+0x20>
 8006b88:	e000      	b.n	8006b8c <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8006b8a:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8006b8c:	4b17      	ldr	r3, [pc, #92]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <FreeRTOS_CLIProcessCommand+0xbc>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4915      	ldr	r1, [pc, #84]	; (8006bf4 <FreeRTOS_CLIProcessCommand+0x104>)
 8006b9e:	68b8      	ldr	r0, [r7, #8]
 8006ba0:	f003 fbf6 	bl	800a390 <strncpy>
		pxCommand = NULL;
 8006ba4:	4b11      	ldr	r3, [pc, #68]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e01a      	b.n	8006be2 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8006bac:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8006bb4:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68b8      	ldr	r0, [r7, #8]
 8006bc2:	4798      	blx	r3
 8006bc4:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8006bcc:	4b07      	ldr	r3, [pc, #28]	; (8006bec <FreeRTOS_CLIProcessCommand+0xfc>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e006      	b.n	8006be2 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4908      	ldr	r1, [pc, #32]	; (8006bf8 <FreeRTOS_CLIProcessCommand+0x108>)
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f003 fbd9 	bl	800a390 <strncpy>
		xReturn = pdFALSE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8006be2:	69fb      	ldr	r3, [r7, #28]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000370 	.word	0x20000370
 8006bf0:	20000020 	.word	0x20000020
 8006bf4:	0800b83c 	.word	0x0800b83c
 8006bf8:	0800b894 	.word	0x0800b894

08006bfc <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <prvHelpCommand+0x54>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <prvHelpCommand+0x54>)
 8006c12:	4a10      	ldr	r2, [pc, #64]	; (8006c54 <prvHelpCommand+0x58>)
 8006c14:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <prvHelpCommand+0x54>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4619      	mov	r1, r3
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f003 fbb4 	bl	800a390 <strncpy>
	pxCommand = pxCommand->pxNext;
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <prvHelpCommand+0x54>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <prvHelpCommand+0x54>)
 8006c30:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <prvHelpCommand+0x54>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	e001      	b.n	8006c44 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c44:	697b      	ldr	r3, [r7, #20]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000374 	.word	0x20000374
 8006c54:	20000020 	.word	0x20000020

08006c58 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8006c68:	e014      	b.n	8006c94 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d10b      	bne.n	8006c8a <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d00a      	beq.n	8006c8e <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8006c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	e001      	b.n	8006c8e <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3301      	adds	r3, #1
 8006c92:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e6      	bne.n	8006c6a <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d105      	bne.n	8006cae <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8006cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <SysTick_Handler+0x1c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cc8:	f002 fc66 	bl	8009598 <xTaskGetSchedulerState>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d001      	beq.n	8006cd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cd2:	f000 fdd9 	bl	8007888 <xPortSysTickHandler>
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	e000e010 	.word	0xe000e010

08006ce0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cf0:	f3ef 8305 	mrs	r3, IPSR
 8006cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d175      	bne.n	8006de8 <osSemaphoreNew+0x108>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d072      	beq.n	8006de8 <osSemaphoreNew+0x108>
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d86e      	bhi.n	8006de8 <osSemaphoreNew+0x108>
    mem = -1;
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d015      	beq.n	8006d42 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d006      	beq.n	8006d2c <osSemaphoreNew+0x4c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b4f      	cmp	r3, #79	; 0x4f
 8006d24:	d902      	bls.n	8006d2c <osSemaphoreNew+0x4c>
        mem = 1;
 8006d26:	2301      	movs	r3, #1
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e00c      	b.n	8006d46 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <osSemaphoreNew+0x66>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <osSemaphoreNew+0x66>
          mem = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e001      	b.n	8006d46 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4c:	d04c      	beq.n	8006de8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d128      	bne.n	8006da6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d10a      	bne.n	8006d70 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	9200      	str	r2, [sp, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	2100      	movs	r1, #0
 8006d66:	2001      	movs	r0, #1
 8006d68:	f000 fe86 	bl	8007a78 <xQueueGenericCreateStatic>
 8006d6c:	61f8      	str	r0, [r7, #28]
 8006d6e:	e005      	b.n	8006d7c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006d70:	2203      	movs	r2, #3
 8006d72:	2100      	movs	r1, #0
 8006d74:	2001      	movs	r0, #1
 8006d76:	f000 fef7 	bl	8007b68 <xQueueGenericCreate>
 8006d7a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d022      	beq.n	8006dc8 <osSemaphoreNew+0xe8>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01f      	beq.n	8006dc8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	69f8      	ldr	r0, [r7, #28]
 8006d90:	f000 ffb2 	bl	8007cf8 <xQueueGenericSend>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d016      	beq.n	8006dc8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006d9a:	69f8      	ldr	r0, [r7, #28]
 8006d9c:	f001 fc3e 	bl	800861c <vQueueDelete>
            hSemaphore = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e010      	b.n	8006dc8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d108      	bne.n	8006dbe <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	461a      	mov	r2, r3
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 ff34 	bl	8007c22 <xQueueCreateCountingSemaphoreStatic>
 8006dba:	61f8      	str	r0, [r7, #28]
 8006dbc:	e004      	b.n	8006dc8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 ff65 	bl	8007c90 <xQueueCreateCountingSemaphore>
 8006dc6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <osSemaphoreNew+0xfc>
          name = attr->name;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e001      	b.n	8006de0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	69f8      	ldr	r0, [r7, #28]
 8006de4:	f001 fd66 	bl	80088b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006de8:	69fb      	ldr	r3, [r7, #28]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006e0c:	f06f 0303 	mvn.w	r3, #3
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e039      	b.n	8006e88 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e14:	f3ef 8305 	mrs	r3, IPSR
 8006e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d022      	beq.n	8006e66 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006e26:	f06f 0303 	mvn.w	r3, #3
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e02c      	b.n	8006e88 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	461a      	mov	r2, r3
 8006e38:	2100      	movs	r1, #0
 8006e3a:	6938      	ldr	r0, [r7, #16]
 8006e3c:	f001 fb6e 	bl	800851c <xQueueReceiveFromISR>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d003      	beq.n	8006e4e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006e46:	f06f 0302 	mvn.w	r3, #2
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	e01c      	b.n	8006e88 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d019      	beq.n	8006e88 <osSemaphoreAcquire+0x94>
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <osSemaphoreAcquire+0xa0>)
 8006e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	e010      	b.n	8006e88 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6938      	ldr	r0, [r7, #16]
 8006e6a:	f001 fa4b 	bl	8008304 <xQueueSemaphoreTake>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d009      	beq.n	8006e88 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006e7a:	f06f 0301 	mvn.w	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e002      	b.n	8006e88 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006e82:	f06f 0302 	mvn.w	r3, #2
 8006e86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e88:	697b      	ldr	r3, [r7, #20]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d103      	bne.n	8006eb6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006eae:	f06f 0303 	mvn.w	r3, #3
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e02c      	b.n	8006f10 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eb6:	f3ef 8305 	mrs	r3, IPSR
 8006eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d01a      	beq.n	8006ef8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6938      	ldr	r0, [r7, #16]
 8006ece:	f001 f8ac 	bl	800802a <xQueueGiveFromISR>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d003      	beq.n	8006ee0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006ed8:	f06f 0302 	mvn.w	r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	e017      	b.n	8006f10 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d014      	beq.n	8006f10 <osSemaphoreRelease+0x78>
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <osSemaphoreRelease+0x84>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	e00b      	b.n	8006f10 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	2100      	movs	r1, #0
 8006efe:	6938      	ldr	r0, [r7, #16]
 8006f00:	f000 fefa 	bl	8007cf8 <xQueueGenericSend>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d002      	beq.n	8006f10 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006f0a:	f06f 0302 	mvn.w	r3, #2
 8006f0e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006f10:	697b      	ldr	r3, [r7, #20]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f2c:	f3ef 8305 	mrs	r3, IPSR
 8006f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f32:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8006f38:	f06f 0305 	mvn.w	r3, #5
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	e00e      	b.n	8006f5e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8006f46:	f06f 0303 	mvn.w	r3, #3
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	e007      	b.n	8006f5e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006f4e:	6938      	ldr	r0, [r7, #16]
 8006f50:	f001 fcda 	bl	8008908 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8006f58:	6938      	ldr	r0, [r7, #16]
 8006f5a:	f001 fb5f 	bl	800861c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006f5e:	697b      	ldr	r3, [r7, #20]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a07      	ldr	r2, [pc, #28]	; (8006f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4a06      	ldr	r2, [pc, #24]	; (8006f98 <vApplicationGetIdleTaskMemory+0x30>)
 8006f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2280      	movs	r2, #128	; 0x80
 8006f84:	601a      	str	r2, [r3, #0]
}
 8006f86:	bf00      	nop
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000378 	.word	0x20000378
 8006f98:	200003d4 	.word	0x200003d4

08006f9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4a07      	ldr	r2, [pc, #28]	; (8006fc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006fac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4a06      	ldr	r2, [pc, #24]	; (8006fcc <vApplicationGetTimerTaskMemory+0x30>)
 8006fb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fba:	601a      	str	r2, [r3, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	200005d4 	.word	0x200005d4
 8006fcc:	20000630 	.word	0x20000630

08006fd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fdc:	f001 fefa 	bl	8008dd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fe0:	4b5b      	ldr	r3, [pc, #364]	; (8007150 <pvPortMalloc+0x180>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fe8:	f000 f920 	bl	800722c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fec:	4b59      	ldr	r3, [pc, #356]	; (8007154 <pvPortMalloc+0x184>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 8093 	bne.w	8007120 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01d      	beq.n	800703c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007000:	2208      	movs	r2, #8
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d014      	beq.n	800703c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f023 0307 	bic.w	r3, r3, #7
 8007018:	3308      	adds	r3, #8
 800701a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <pvPortMalloc+0x6c>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	617b      	str	r3, [r7, #20]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d06e      	beq.n	8007120 <pvPortMalloc+0x150>
 8007042:	4b45      	ldr	r3, [pc, #276]	; (8007158 <pvPortMalloc+0x188>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	429a      	cmp	r2, r3
 800704a:	d869      	bhi.n	8007120 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800704c:	4b43      	ldr	r3, [pc, #268]	; (800715c <pvPortMalloc+0x18c>)
 800704e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007050:	4b42      	ldr	r3, [pc, #264]	; (800715c <pvPortMalloc+0x18c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007056:	e004      	b.n	8007062 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d903      	bls.n	8007074 <pvPortMalloc+0xa4>
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f1      	bne.n	8007058 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <pvPortMalloc+0x180>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	429a      	cmp	r2, r3
 800707c:	d050      	beq.n	8007120 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2208      	movs	r2, #8
 8007084:	4413      	add	r3, r2
 8007086:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	2308      	movs	r3, #8
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	429a      	cmp	r2, r3
 800709e:	d91f      	bls.n	80070e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <pvPortMalloc+0xf8>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	613b      	str	r3, [r7, #16]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070da:	69b8      	ldr	r0, [r7, #24]
 80070dc:	f000 f908 	bl	80072f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070e0:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <pvPortMalloc+0x188>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <pvPortMalloc+0x188>)
 80070ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ee:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <pvPortMalloc+0x188>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <pvPortMalloc+0x190>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d203      	bcs.n	8007102 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070fa:	4b17      	ldr	r3, [pc, #92]	; (8007158 <pvPortMalloc+0x188>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	; (8007160 <pvPortMalloc+0x190>)
 8007100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <pvPortMalloc+0x184>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	431a      	orrs	r2, r3
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <pvPortMalloc+0x194>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	4a11      	ldr	r2, [pc, #68]	; (8007164 <pvPortMalloc+0x194>)
 800711e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007120:	f001 fe66 	bl	8008df0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <pvPortMalloc+0x174>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60fb      	str	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <pvPortMalloc+0x172>
	return pvReturn;
 8007144:	69fb      	ldr	r3, [r7, #28]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3728      	adds	r7, #40	; 0x28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20004638 	.word	0x20004638
 8007154:	2000464c 	.word	0x2000464c
 8007158:	2000463c 	.word	0x2000463c
 800715c:	20004630 	.word	0x20004630
 8007160:	20004640 	.word	0x20004640
 8007164:	20004644 	.word	0x20004644

08007168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d04d      	beq.n	8007216 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800717a:	2308      	movs	r3, #8
 800717c:	425b      	negs	r3, r3
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	4b24      	ldr	r3, [pc, #144]	; (8007220 <vPortFree+0xb8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <vPortFree+0x44>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60fb      	str	r3, [r7, #12]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <vPortFree+0x62>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	60bb      	str	r3, [r7, #8]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	4b14      	ldr	r3, [pc, #80]	; (8007220 <vPortFree+0xb8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01e      	beq.n	8007216 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11a      	bne.n	8007216 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <vPortFree+0xb8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	43db      	mvns	r3, r3
 80071ea:	401a      	ands	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071f0:	f001 fdf0 	bl	8008dd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <vPortFree+0xbc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4413      	add	r3, r2
 80071fe:	4a09      	ldr	r2, [pc, #36]	; (8007224 <vPortFree+0xbc>)
 8007200:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007202:	6938      	ldr	r0, [r7, #16]
 8007204:	f000 f874 	bl	80072f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <vPortFree+0xc0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	4a06      	ldr	r2, [pc, #24]	; (8007228 <vPortFree+0xc0>)
 8007210:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007212:	f001 fded 	bl	8008df0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007216:	bf00      	nop
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2000464c 	.word	0x2000464c
 8007224:	2000463c 	.word	0x2000463c
 8007228:	20004648 	.word	0x20004648

0800722c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007232:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007236:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007238:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <prvHeapInit+0xac>)
 800723a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3307      	adds	r3, #7
 800724a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0307 	bic.w	r3, r3, #7
 8007252:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	4a1f      	ldr	r2, [pc, #124]	; (80072d8 <prvHeapInit+0xac>)
 800725c:	4413      	add	r3, r2
 800725e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007264:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <prvHeapInit+0xb0>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800726a:	4b1c      	ldr	r3, [pc, #112]	; (80072dc <prvHeapInit+0xb0>)
 800726c:	2200      	movs	r2, #0
 800726e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007278:	2208      	movs	r2, #8
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0307 	bic.w	r3, r3, #7
 8007286:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <prvHeapInit+0xb4>)
 800728c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800728e:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <prvHeapInit+0xb4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <prvHeapInit+0xb4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <prvHeapInit+0xb4>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <prvHeapInit+0xb8>)
 80072ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <prvHeapInit+0xbc>)
 80072c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072c4:	4b09      	ldr	r3, [pc, #36]	; (80072ec <prvHeapInit+0xc0>)
 80072c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072ca:	601a      	str	r2, [r3, #0]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20000a30 	.word	0x20000a30
 80072dc:	20004630 	.word	0x20004630
 80072e0:	20004638 	.word	0x20004638
 80072e4:	20004640 	.word	0x20004640
 80072e8:	2000463c 	.word	0x2000463c
 80072ec:	2000464c 	.word	0x2000464c

080072f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072f8:	4b28      	ldr	r3, [pc, #160]	; (800739c <prvInsertBlockIntoFreeList+0xac>)
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e002      	b.n	8007304 <prvInsertBlockIntoFreeList+0x14>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d8f7      	bhi.n	80072fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d108      	bne.n	8007332 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	441a      	add	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d118      	bne.n	8007378 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <prvInsertBlockIntoFreeList+0xb0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d00d      	beq.n	800736e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	441a      	add	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	e008      	b.n	8007380 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800736e:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <prvInsertBlockIntoFreeList+0xb0>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e003      	b.n	8007380 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d002      	beq.n	800738e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800738e:	bf00      	nop
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	20004630 	.word	0x20004630
 80073a0:	20004638 	.word	0x20004638

080073a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f103 0208 	add.w	r2, r3, #8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f103 0208 	add.w	r2, r3, #8
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f103 0208 	add.w	r2, r3, #8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
}
 800743a:	bf00      	nop
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745c:	d103      	bne.n	8007466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e00c      	b.n	8007480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3308      	adds	r3, #8
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e002      	b.n	8007474 <vListInsert+0x2e>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	429a      	cmp	r2, r3
 800747e:	d2f6      	bcs.n	800746e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	601a      	str	r2, [r3, #0]
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6892      	ldr	r2, [r2, #8]
 80074ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6852      	ldr	r2, [r2, #4]
 80074d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d103      	bne.n	80074ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1e5a      	subs	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3b04      	subs	r3, #4
 800751c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3b04      	subs	r3, #4
 800752a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f023 0201 	bic.w	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b04      	subs	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800753c:	4a0c      	ldr	r2, [pc, #48]	; (8007570 <pxPortInitialiseStack+0x64>)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3b14      	subs	r3, #20
 8007546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3b04      	subs	r3, #4
 8007552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f06f 0202 	mvn.w	r2, #2
 800755a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3b20      	subs	r3, #32
 8007560:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007562:	68fb      	ldr	r3, [r7, #12]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	08007575 	.word	0x08007575

08007574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <prvTaskExitError+0x54>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007586:	d00a      	beq.n	800759e <prvTaskExitError+0x2a>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <prvTaskExitError+0x28>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	60bb      	str	r3, [r7, #8]
}
 80075b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075b2:	bf00      	nop
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0fc      	beq.n	80075b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	2000002c 	.word	0x2000002c
 80075cc:	00000000 	.word	0x00000000

080075d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <pxCurrentTCBConst2>)
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	f380 8809 	msr	PSP, r0
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8811 	msr	BASEPRI, r0
 80075ea:	4770      	bx	lr
 80075ec:	f3af 8000 	nop.w

080075f0 <pxCurrentTCBConst2>:
 80075f0:	20004698 	.word	0x20004698
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075f8:	4808      	ldr	r0, [pc, #32]	; (800761c <prvPortStartFirstTask+0x24>)
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	6800      	ldr	r0, [r0, #0]
 80075fe:	f380 8808 	msr	MSP, r0
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8814 	msr	CONTROL, r0
 800760a:	b662      	cpsie	i
 800760c:	b661      	cpsie	f
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	df00      	svc	0
 8007618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800761a:	bf00      	nop
 800761c:	e000ed08 	.word	0xe000ed08

08007620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007626:	4b46      	ldr	r3, [pc, #280]	; (8007740 <xPortStartScheduler+0x120>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a46      	ldr	r2, [pc, #280]	; (8007744 <xPortStartScheduler+0x124>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10a      	bne.n	8007646 <xPortStartScheduler+0x26>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	613b      	str	r3, [r7, #16]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007646:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <xPortStartScheduler+0x120>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a3f      	ldr	r2, [pc, #252]	; (8007748 <xPortStartScheduler+0x128>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10a      	bne.n	8007666 <xPortStartScheduler+0x46>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	60fb      	str	r3, [r7, #12]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007666:	4b39      	ldr	r3, [pc, #228]	; (800774c <xPortStartScheduler+0x12c>)
 8007668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	22ff      	movs	r2, #255	; 0xff
 8007676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007688:	b2da      	uxtb	r2, r3
 800768a:	4b31      	ldr	r3, [pc, #196]	; (8007750 <xPortStartScheduler+0x130>)
 800768c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800768e:	4b31      	ldr	r3, [pc, #196]	; (8007754 <xPortStartScheduler+0x134>)
 8007690:	2207      	movs	r2, #7
 8007692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007694:	e009      	b.n	80076aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007696:	4b2f      	ldr	r3, [pc, #188]	; (8007754 <xPortStartScheduler+0x134>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3b01      	subs	r3, #1
 800769c:	4a2d      	ldr	r2, [pc, #180]	; (8007754 <xPortStartScheduler+0x134>)
 800769e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d0ef      	beq.n	8007696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076b6:	4b27      	ldr	r3, [pc, #156]	; (8007754 <xPortStartScheduler+0x134>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1c3 0307 	rsb	r3, r3, #7
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d00a      	beq.n	80076d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	60bb      	str	r3, [r7, #8]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076d8:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <xPortStartScheduler+0x134>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	4a1d      	ldr	r2, [pc, #116]	; (8007754 <xPortStartScheduler+0x134>)
 80076e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <xPortStartScheduler+0x134>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ea:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <xPortStartScheduler+0x134>)
 80076ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076f6:	4b18      	ldr	r3, [pc, #96]	; (8007758 <xPortStartScheduler+0x138>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <xPortStartScheduler+0x138>)
 80076fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <xPortStartScheduler+0x138>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a14      	ldr	r2, [pc, #80]	; (8007758 <xPortStartScheduler+0x138>)
 8007708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800770c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800770e:	f000 f8dd 	bl	80078cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <xPortStartScheduler+0x13c>)
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007718:	f000 f8fc 	bl	8007914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800771c:	4b10      	ldr	r3, [pc, #64]	; (8007760 <xPortStartScheduler+0x140>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a0f      	ldr	r2, [pc, #60]	; (8007760 <xPortStartScheduler+0x140>)
 8007722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007728:	f7ff ff66 	bl	80075f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800772c:	f001 fcc8 	bl	80090c0 <vTaskSwitchContext>
	prvTaskExitError();
 8007730:	f7ff ff20 	bl	8007574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	e000ed00 	.word	0xe000ed00
 8007744:	410fc271 	.word	0x410fc271
 8007748:	410fc270 	.word	0x410fc270
 800774c:	e000e400 	.word	0xe000e400
 8007750:	20004650 	.word	0x20004650
 8007754:	20004654 	.word	0x20004654
 8007758:	e000ed20 	.word	0xe000ed20
 800775c:	2000002c 	.word	0x2000002c
 8007760:	e000ef34 	.word	0xe000ef34

08007764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	607b      	str	r3, [r7, #4]
}
 800777c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800777e:	4b0f      	ldr	r3, [pc, #60]	; (80077bc <vPortEnterCritical+0x58>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a0d      	ldr	r2, [pc, #52]	; (80077bc <vPortEnterCritical+0x58>)
 8007786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007788:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <vPortEnterCritical+0x58>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d10f      	bne.n	80077b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <vPortEnterCritical+0x5c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	603b      	str	r3, [r7, #0]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <vPortEnterCritical+0x4a>
	}
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	2000002c 	.word	0x2000002c
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ca:	4b12      	ldr	r3, [pc, #72]	; (8007814 <vPortExitCritical+0x50>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <vPortExitCritical+0x24>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	607b      	str	r3, [r7, #4]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <vPortExitCritical+0x50>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	4a09      	ldr	r2, [pc, #36]	; (8007814 <vPortExitCritical+0x50>)
 80077f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077f2:	4b08      	ldr	r3, [pc, #32]	; (8007814 <vPortExitCritical+0x50>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d105      	bne.n	8007806 <vPortExitCritical+0x42>
 80077fa:	2300      	movs	r3, #0
 80077fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	2000002c 	.word	0x2000002c
	...

08007820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007820:	f3ef 8009 	mrs	r0, PSP
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	4b15      	ldr	r3, [pc, #84]	; (8007880 <pxCurrentTCBConst>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	f01e 0f10 	tst.w	lr, #16
 8007830:	bf08      	it	eq
 8007832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783a:	6010      	str	r0, [r2, #0]
 800783c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007844:	f380 8811 	msr	BASEPRI, r0
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f001 fc36 	bl	80090c0 <vTaskSwitchContext>
 8007854:	f04f 0000 	mov.w	r0, #0
 8007858:	f380 8811 	msr	BASEPRI, r0
 800785c:	bc09      	pop	{r0, r3}
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	6808      	ldr	r0, [r1, #0]
 8007862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007866:	f01e 0f10 	tst.w	lr, #16
 800786a:	bf08      	it	eq
 800786c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007870:	f380 8809 	msr	PSP, r0
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst>:
 8007880:	20004698 	.word	0x20004698
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	607b      	str	r3, [r7, #4]
}
 80078a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078a2:	f001 fb53 	bl	8008f4c <xTaskIncrementTick>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <xPortSysTickHandler+0x40>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	2300      	movs	r3, #0
 80078b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f383 8811 	msr	BASEPRI, r3
}
 80078be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <vPortSetupTimerInterrupt+0x34>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <vPortSetupTimerInterrupt+0x38>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <vPortSetupTimerInterrupt+0x3c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <vPortSetupTimerInterrupt+0x40>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	099b      	lsrs	r3, r3, #6
 80078e8:	4a09      	ldr	r2, [pc, #36]	; (8007910 <vPortSetupTimerInterrupt+0x44>)
 80078ea:	3b01      	subs	r3, #1
 80078ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ee:	4b04      	ldr	r3, [pc, #16]	; (8007900 <vPortSetupTimerInterrupt+0x34>)
 80078f0:	2207      	movs	r2, #7
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	e000e010 	.word	0xe000e010
 8007904:	e000e018 	.word	0xe000e018
 8007908:	20000000 	.word	0x20000000
 800790c:	10624dd3 	.word	0x10624dd3
 8007910:	e000e014 	.word	0xe000e014

08007914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007924 <vPortEnableVFP+0x10>
 8007918:	6801      	ldr	r1, [r0, #0]
 800791a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800791e:	6001      	str	r1, [r0, #0]
 8007920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007922:	bf00      	nop
 8007924:	e000ed88 	.word	0xe000ed88

08007928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800792e:	f3ef 8305 	mrs	r3, IPSR
 8007932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b0f      	cmp	r3, #15
 8007938:	d914      	bls.n	8007964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800793a:	4a17      	ldr	r2, [pc, #92]	; (8007998 <vPortValidateInterruptPriority+0x70>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007944:	4b15      	ldr	r3, [pc, #84]	; (800799c <vPortValidateInterruptPriority+0x74>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	7afa      	ldrb	r2, [r7, #11]
 800794a:	429a      	cmp	r2, r3
 800794c:	d20a      	bcs.n	8007964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007964:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <vPortValidateInterruptPriority+0x78>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <vPortValidateInterruptPriority+0x7c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d90a      	bls.n	800798a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	603b      	str	r3, [r7, #0]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <vPortValidateInterruptPriority+0x60>
	}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	e000e3f0 	.word	0xe000e3f0
 800799c:	20004650 	.word	0x20004650
 80079a0:	e000ed0c 	.word	0xe000ed0c
 80079a4:	20004654 	.word	0x20004654

080079a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60bb      	str	r3, [r7, #8]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079d2:	f7ff fec7 	bl	8007764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	441a      	add	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a02:	3b01      	subs	r3, #1
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	441a      	add	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d114      	bne.n	8007a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01a      	beq.n	8007a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3310      	adds	r3, #16
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 fbf1 	bl	800921c <xTaskRemoveFromEventList>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d012      	beq.n	8007a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <xQueueGenericReset+0xcc>)
 8007a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	e009      	b.n	8007a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3310      	adds	r3, #16
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fca4 	bl	80073a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3324      	adds	r3, #36	; 0x24
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fc9f 	bl	80073a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a66:	f7ff fead 	bl	80077c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a6a:	2301      	movs	r3, #1
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <xQueueGenericCreateStatic+0x52>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <xQueueGenericCreateStatic+0x56>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <xQueueGenericCreateStatic+0x58>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	623b      	str	r3, [r7, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <xQueueGenericCreateStatic+0x7e>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <xQueueGenericCreateStatic+0x82>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <xQueueGenericCreateStatic+0x84>
 8007afa:	2300      	movs	r3, #0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	61fb      	str	r3, [r7, #28]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b16:	2350      	movs	r3, #80	; 0x50
 8007b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b50      	cmp	r3, #80	; 0x50
 8007b1e:	d00a      	beq.n	8007b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	61bb      	str	r3, [r7, #24]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00d      	beq.n	8007b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f83f 	bl	8007bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3730      	adds	r7, #48	; 0x30
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4613      	mov	r3, r2
 8007b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	613b      	str	r3, [r7, #16]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3350      	adds	r3, #80	; 0x50
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fa15 	bl	8006fd0 <pvPortMalloc>
 8007ba6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d011      	beq.n	8007bd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	3350      	adds	r3, #80	; 0x50
 8007bb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bc0:	79fa      	ldrb	r2, [r7, #7]
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f805 	bl	8007bdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	69b8      	ldr	r0, [r7, #24]
 8007c0e:	f7ff fecb 	bl	80079a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	78fa      	ldrb	r2, [r7, #3]
 8007c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b08a      	sub	sp, #40	; 0x28
 8007c26:	af02      	add	r7, sp, #8
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	61bb      	str	r3, [r7, #24]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d90a      	bls.n	8007c68 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	617b      	str	r3, [r7, #20]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c68:	2302      	movs	r3, #2
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff ff00 	bl	8007a78 <xQueueGenericCreateStatic>
 8007c78:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c86:	69fb      	ldr	r3, [r7, #28]
	}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	613b      	str	r3, [r7, #16]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d90a      	bls.n	8007cd4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60fb      	str	r3, [r7, #12]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff45 	bl	8007b68 <xQueueGenericCreate>
 8007cde:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cec:	697b      	ldr	r3, [r7, #20]
	}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08e      	sub	sp, #56	; 0x38
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d06:	2300      	movs	r3, #0
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <xQueueGenericSend+0x32>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <xQueueGenericSend+0x40>
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <xQueueGenericSend+0x44>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <xQueueGenericSend+0x46>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <xQueueGenericSend+0x60>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d103      	bne.n	8007d66 <xQueueGenericSend+0x6e>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <xQueueGenericSend+0x72>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e000      	b.n	8007d6c <xQueueGenericSend+0x74>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <xQueueGenericSend+0x8e>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	623b      	str	r3, [r7, #32]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d86:	f001 fc07 	bl	8009598 <xTaskGetSchedulerState>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <xQueueGenericSend+0x9e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <xQueueGenericSend+0xa2>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueGenericSend+0xa4>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	61fb      	str	r3, [r7, #28]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007db6:	f7ff fcd5 	bl	8007764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <xQueueGenericSend+0xd4>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d129      	bne.n	8007e20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd2:	f000 fc5e 	bl	8008692 <prvCopyDataToQueue>
 8007dd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d010      	beq.n	8007e02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	3324      	adds	r3, #36	; 0x24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 fa19 	bl	800921c <xTaskRemoveFromEventList>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d013      	beq.n	8007e18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007df0:	4b3f      	ldr	r3, [pc, #252]	; (8007ef0 <xQueueGenericSend+0x1f8>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	e00a      	b.n	8007e18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e08:	4b39      	ldr	r3, [pc, #228]	; (8007ef0 <xQueueGenericSend+0x1f8>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e18:	f7ff fcd4 	bl	80077c4 <vPortExitCritical>
				return pdPASS;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e063      	b.n	8007ee8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e26:	f7ff fccd 	bl	80077c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e05c      	b.n	8007ee8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d106      	bne.n	8007e42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 fa53 	bl	80092e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e42:	f7ff fcbf 	bl	80077c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e46:	f000 ffc5 	bl	8008dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e4a:	f7ff fc8b 	bl	8007764 <vPortEnterCritical>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e54:	b25b      	sxtb	r3, r3
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5a:	d103      	bne.n	8007e64 <xQueueGenericSend+0x16c>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e70:	d103      	bne.n	8007e7a <xQueueGenericSend+0x182>
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e7a:	f7ff fca3 	bl	80077c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e7e:	1d3a      	adds	r2, r7, #4
 8007e80:	f107 0314 	add.w	r3, r7, #20
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 fa42 	bl	8009310 <xTaskCheckForTimeOut>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d124      	bne.n	8007edc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e94:	f000 fcf5 	bl	8008882 <prvIsQueueFull>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d018      	beq.n	8007ed0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	3310      	adds	r3, #16
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 f968 	bl	800917c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eae:	f000 fc80 	bl	80087b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007eb2:	f000 ff9d 	bl	8008df0 <xTaskResumeAll>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f47f af7c 	bne.w	8007db6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <xQueueGenericSend+0x1f8>)
 8007ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	e772      	b.n	8007db6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ed2:	f000 fc6e 	bl	80087b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ed6:	f000 ff8b 	bl	8008df0 <xTaskResumeAll>
 8007eda:	e76c      	b.n	8007db6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ede:	f000 fc68 	bl	80087b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ee2:	f000 ff85 	bl	8008df0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3738      	adds	r7, #56	; 0x38
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b090      	sub	sp, #64	; 0x40
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <xQueueGenericSendFromISR+0x3c>
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <xQueueGenericSendFromISR+0x40>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <xQueueGenericSendFromISR+0x42>
 8007f34:	2300      	movs	r3, #0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d103      	bne.n	8007f5e <xQueueGenericSendFromISR+0x6a>
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <xQueueGenericSendFromISR+0x6e>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueGenericSendFromISR+0x70>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	623b      	str	r3, [r7, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f7e:	f7ff fcd3 	bl	8007928 <vPortValidateInterruptPriority>
	__asm volatile
 8007f82:	f3ef 8211 	mrs	r2, BASEPRI
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	61fa      	str	r2, [r7, #28]
 8007f98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d302      	bcc.n	8007fb0 <xQueueGenericSendFromISR+0xbc>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d12f      	bne.n	8008010 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fc6:	f000 fb64 	bl	8008692 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd2:	d112      	bne.n	8007ffa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d016      	beq.n	800800a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	3324      	adds	r3, #36	; 0x24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 f91b 	bl	800921c <xTaskRemoveFromEventList>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e007      	b.n	800800a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ffe:	3301      	adds	r3, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	b25a      	sxtb	r2, r3
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800800a:	2301      	movs	r3, #1
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800800e:	e001      	b.n	8008014 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008016:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f383 8811 	msr	BASEPRI, r3
}
 800801e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008022:	4618      	mov	r0, r3
 8008024:	3740      	adds	r7, #64	; 0x40
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b08e      	sub	sp, #56	; 0x38
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	623b      	str	r3, [r7, #32]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <xQueueGiveFromISR+0x48>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	61fb      	str	r3, [r7, #28]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <xQueueGiveFromISR+0x58>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <xQueueGiveFromISR+0x5c>
 8008082:	2301      	movs	r3, #1
 8008084:	e000      	b.n	8008088 <xQueueGiveFromISR+0x5e>
 8008086:	2300      	movs	r3, #0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	61bb      	str	r3, [r7, #24]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080a2:	f7ff fc41 	bl	8007928 <vPortValidateInterruptPriority>
	__asm volatile
 80080a6:	f3ef 8211 	mrs	r2, BASEPRI
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	617a      	str	r2, [r7, #20]
 80080bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d22b      	bcs.n	800812a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ec:	d112      	bne.n	8008114 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	3324      	adds	r3, #36	; 0x24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 f88e 	bl	800921c <xTaskRemoveFromEventList>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00e      	beq.n	8008124 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e007      	b.n	8008124 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008118:	3301      	adds	r3, #1
 800811a:	b2db      	uxtb	r3, r3
 800811c:	b25a      	sxtb	r2, r3
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008124:	2301      	movs	r3, #1
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
 8008128:	e001      	b.n	800812e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800812a:	2300      	movs	r3, #0
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f383 8811 	msr	BASEPRI, r3
}
 8008138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800813a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800813c:	4618      	mov	r0, r3
 800813e:	3738      	adds	r7, #56	; 0x38
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08c      	sub	sp, #48	; 0x30
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <xQueueReceive+0x30>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	623b      	str	r3, [r7, #32]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d103      	bne.n	8008182 <xQueueReceive+0x3e>
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <xQueueReceive+0x42>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueReceive+0x44>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <xQueueReceive+0x5e>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	61fb      	str	r3, [r7, #28]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081a2:	f001 f9f9 	bl	8009598 <xTaskGetSchedulerState>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <xQueueReceive+0x6e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <xQueueReceive+0x72>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e000      	b.n	80081b8 <xQueueReceive+0x74>
 80081b6:	2300      	movs	r3, #0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <xQueueReceive+0x8e>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	61bb      	str	r3, [r7, #24]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081d2:	f7ff fac7 	bl	8007764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01f      	beq.n	8008222 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e6:	f000 fabe 	bl	8008766 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	1e5a      	subs	r2, r3, #1
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00f      	beq.n	800821a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	3310      	adds	r3, #16
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 f80c 	bl	800921c <xTaskRemoveFromEventList>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800820a:	4b3d      	ldr	r3, [pc, #244]	; (8008300 <xQueueReceive+0x1bc>)
 800820c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800821a:	f7ff fad3 	bl	80077c4 <vPortExitCritical>
				return pdPASS;
 800821e:	2301      	movs	r3, #1
 8008220:	e069      	b.n	80082f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008228:	f7ff facc 	bl	80077c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800822c:	2300      	movs	r3, #0
 800822e:	e062      	b.n	80082f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d106      	bne.n	8008244 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008236:	f107 0310 	add.w	r3, r7, #16
 800823a:	4618      	mov	r0, r3
 800823c:	f001 f852 	bl	80092e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008244:	f7ff fabe 	bl	80077c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008248:	f000 fdc4 	bl	8008dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800824c:	f7ff fa8a 	bl	8007764 <vPortEnterCritical>
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008256:	b25b      	sxtb	r3, r3
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800825c:	d103      	bne.n	8008266 <xQueueReceive+0x122>
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826c:	b25b      	sxtb	r3, r3
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008272:	d103      	bne.n	800827c <xQueueReceive+0x138>
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800827c:	f7ff faa2 	bl	80077c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008280:	1d3a      	adds	r2, r7, #4
 8008282:	f107 0310 	add.w	r3, r7, #16
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f001 f841 	bl	8009310 <xTaskCheckForTimeOut>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d123      	bne.n	80082dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008296:	f000 fade 	bl	8008856 <prvIsQueueEmpty>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d017      	beq.n	80082d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	3324      	adds	r3, #36	; 0x24
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 ff67 	bl	800917c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b0:	f000 fa7f 	bl	80087b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082b4:	f000 fd9c 	bl	8008df0 <xTaskResumeAll>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d189      	bne.n	80081d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <xQueueReceive+0x1bc>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	e780      	b.n	80081d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80082d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d2:	f000 fa6e 	bl	80087b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082d6:	f000 fd8b 	bl	8008df0 <xTaskResumeAll>
 80082da:	e77a      	b.n	80081d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082de:	f000 fa68 	bl	80087b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082e2:	f000 fd85 	bl	8008df0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e8:	f000 fab5 	bl	8008856 <prvIsQueueEmpty>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f43f af6f 	beq.w	80081d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3730      	adds	r7, #48	; 0x30
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08e      	sub	sp, #56	; 0x38
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008316:	2300      	movs	r3, #0
 8008318:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	623b      	str	r3, [r7, #32]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	61fb      	str	r3, [r7, #28]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008354:	f001 f920 	bl	8009598 <xTaskGetSchedulerState>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <xQueueSemaphoreTake+0x60>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <xQueueSemaphoreTake+0x64>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <xQueueSemaphoreTake+0x66>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	61bb      	str	r3, [r7, #24]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008384:	f7ff f9ee 	bl	8007764 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	d024      	beq.n	80083de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	1e5a      	subs	r2, r3, #1
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d104      	bne.n	80083ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80083a4:	f001 fa6e 	bl	8009884 <pvTaskIncrementMutexHeldCount>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00f      	beq.n	80083d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	3310      	adds	r3, #16
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ff2e 	bl	800921c <xTaskRemoveFromEventList>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083c6:	4b54      	ldr	r3, [pc, #336]	; (8008518 <xQueueSemaphoreTake+0x214>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083d6:	f7ff f9f5 	bl	80077c4 <vPortExitCritical>
				return pdPASS;
 80083da:	2301      	movs	r3, #1
 80083dc:	e097      	b.n	800850e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d111      	bne.n	8008408 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	617b      	str	r3, [r7, #20]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008400:	f7ff f9e0 	bl	80077c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008404:	2300      	movs	r3, #0
 8008406:	e082      	b.n	800850e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800840e:	f107 030c 	add.w	r3, r7, #12
 8008412:	4618      	mov	r0, r3
 8008414:	f000 ff66 	bl	80092e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008418:	2301      	movs	r3, #1
 800841a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800841c:	f7ff f9d2 	bl	80077c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008420:	f000 fcd8 	bl	8008dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008424:	f7ff f99e 	bl	8007764 <vPortEnterCritical>
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800842e:	b25b      	sxtb	r3, r3
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008434:	d103      	bne.n	800843e <xQueueSemaphoreTake+0x13a>
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008444:	b25b      	sxtb	r3, r3
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800844a:	d103      	bne.n	8008454 <xQueueSemaphoreTake+0x150>
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008454:	f7ff f9b6 	bl	80077c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008458:	463a      	mov	r2, r7
 800845a:	f107 030c 	add.w	r3, r7, #12
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f000 ff55 	bl	8009310 <xTaskCheckForTimeOut>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d132      	bne.n	80084d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800846c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800846e:	f000 f9f2 	bl	8008856 <prvIsQueueEmpty>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d026      	beq.n	80084c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d109      	bne.n	8008494 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008480:	f7ff f970 	bl	8007764 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f8a3 	bl	80095d4 <xTaskPriorityInherit>
 800848e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008490:	f7ff f998 	bl	80077c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	3324      	adds	r3, #36	; 0x24
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fe6d 	bl	800917c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084a4:	f000 f985 	bl	80087b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084a8:	f000 fca2 	bl	8008df0 <xTaskResumeAll>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f47f af68 	bne.w	8008384 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80084b4:	4b18      	ldr	r3, [pc, #96]	; (8008518 <xQueueSemaphoreTake+0x214>)
 80084b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	e75e      	b.n	8008384 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80084c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084c8:	f000 f973 	bl	80087b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084cc:	f000 fc90 	bl	8008df0 <xTaskResumeAll>
 80084d0:	e758      	b.n	8008384 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80084d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084d4:	f000 f96d 	bl	80087b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d8:	f000 fc8a 	bl	8008df0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084de:	f000 f9ba 	bl	8008856 <prvIsQueueEmpty>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f43f af4d 	beq.w	8008384 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80084f0:	f7ff f938 	bl	8007764 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084f6:	f000 f8b4 	bl	8008662 <prvGetDisinheritPriorityAfterTimeout>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008502:	4618      	mov	r0, r3
 8008504:	f001 f93c 	bl	8009780 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008508:	f7ff f95c 	bl	80077c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800850c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800850e:	4618      	mov	r0, r3
 8008510:	3738      	adds	r7, #56	; 0x38
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	; 0x38
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	623b      	str	r3, [r7, #32]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <xQueueReceiveFromISR+0x3a>
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <xQueueReceiveFromISR+0x3e>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <xQueueReceiveFromISR+0x40>
 800855a:	2300      	movs	r3, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	61fb      	str	r3, [r7, #28]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008576:	f7ff f9d7 	bl	8007928 <vPortValidateInterruptPriority>
	__asm volatile
 800857a:	f3ef 8211 	mrs	r2, BASEPRI
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	61ba      	str	r2, [r7, #24]
 8008590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d02f      	beq.n	8008602 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085b0:	f000 f8d9 	bl	8008766 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	1e5a      	subs	r2, r3, #1
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80085bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c4:	d112      	bne.n	80085ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d016      	beq.n	80085fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	3310      	adds	r3, #16
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fe22 	bl	800921c <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00e      	beq.n	80085fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e007      	b.n	80085fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085f0:	3301      	adds	r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	b25a      	sxtb	r2, r3
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80085fc:	2301      	movs	r3, #1
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008600:	e001      	b.n	8008606 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008602:	2300      	movs	r3, #0
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	613b      	str	r3, [r7, #16]
	__asm volatile
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f383 8811 	msr	BASEPRI, r3
}
 8008610:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008614:	4618      	mov	r0, r3
 8008616:	3738      	adds	r7, #56	; 0x38
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <vQueueDelete+0x28>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60bb      	str	r3, [r7, #8]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f95f 	bl	8008908 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7fe fd87 	bl	8007168 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	e001      	b.n	8008684 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008684:	68fb      	ldr	r3, [r7, #12]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10d      	bne.n	80086cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d14d      	bne.n	8008754 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fff1 	bl	80096a4 <xTaskPriorityDisinherit>
 80086c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	609a      	str	r2, [r3, #8]
 80086ca:	e043      	b.n	8008754 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d119      	bne.n	8008706 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6858      	ldr	r0, [r3, #4]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	461a      	mov	r2, r3
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	f001 fcc3 	bl	800a068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	441a      	add	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d32b      	bcc.n	8008754 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	605a      	str	r2, [r3, #4]
 8008704:	e026      	b.n	8008754 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68d8      	ldr	r0, [r3, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	461a      	mov	r2, r3
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	f001 fca9 	bl	800a068 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	425b      	negs	r3, r3
 8008720:	441a      	add	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d207      	bcs.n	8008742 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	425b      	negs	r3, r3
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d105      	bne.n	8008754 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3b01      	subs	r3, #1
 8008752:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800875c:	697b      	ldr	r3, [r7, #20]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d018      	beq.n	80087aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	429a      	cmp	r2, r3
 8008790:	d303      	bcc.n	800879a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	461a      	mov	r2, r3
 80087a4:	6838      	ldr	r0, [r7, #0]
 80087a6:	f001 fc5f 	bl	800a068 <memcpy>
	}
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087ba:	f7fe ffd3 	bl	8007764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087c6:	e011      	b.n	80087ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d012      	beq.n	80087f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3324      	adds	r3, #36	; 0x24
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fd21 	bl	800921c <xTaskRemoveFromEventList>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087e0:	f000 fdf8 	bl	80093d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dce9      	bgt.n	80087c8 <prvUnlockQueue+0x16>
 80087f4:	e000      	b.n	80087f8 <prvUnlockQueue+0x46>
					break;
 80087f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	22ff      	movs	r2, #255	; 0xff
 80087fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008800:	f7fe ffe0 	bl	80077c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008804:	f7fe ffae 	bl	8007764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800880e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008810:	e011      	b.n	8008836 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d012      	beq.n	8008840 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3310      	adds	r3, #16
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fcfc 	bl	800921c <xTaskRemoveFromEventList>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800882a:	f000 fdd3 	bl	80093d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	3b01      	subs	r3, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883a:	2b00      	cmp	r3, #0
 800883c:	dce9      	bgt.n	8008812 <prvUnlockQueue+0x60>
 800883e:	e000      	b.n	8008842 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008840:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	22ff      	movs	r2, #255	; 0xff
 8008846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800884a:	f7fe ffbb 	bl	80077c4 <vPortExitCritical>
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800885e:	f7fe ff81 	bl	8007764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	2b00      	cmp	r3, #0
 8008868:	d102      	bne.n	8008870 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800886a:	2301      	movs	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	e001      	b.n	8008874 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008874:	f7fe ffa6 	bl	80077c4 <vPortExitCritical>

	return xReturn;
 8008878:	68fb      	ldr	r3, [r7, #12]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800888a:	f7fe ff6b 	bl	8007764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	429a      	cmp	r2, r3
 8008898:	d102      	bne.n	80088a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e001      	b.n	80088a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088a4:	f7fe ff8e 	bl	80077c4 <vPortExitCritical>

	return xReturn;
 80088a8:	68fb      	ldr	r3, [r7, #12]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e014      	b.n	80088ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088c4:	4a0f      	ldr	r2, [pc, #60]	; (8008904 <vQueueAddToRegistry+0x50>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088d0:	490c      	ldr	r1, [pc, #48]	; (8008904 <vQueueAddToRegistry+0x50>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088da:	4a0a      	ldr	r2, [pc, #40]	; (8008904 <vQueueAddToRegistry+0x50>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088e6:	e006      	b.n	80088f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b07      	cmp	r3, #7
 80088f2:	d9e7      	bls.n	80088c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20004658 	.word	0x20004658

08008908 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e016      	b.n	8008944 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008916:	4a10      	ldr	r2, [pc, #64]	; (8008958 <vQueueUnregisterQueue+0x50>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	4413      	add	r3, r2
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d10b      	bne.n	800893e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008926:	4a0c      	ldr	r2, [pc, #48]	; (8008958 <vQueueUnregisterQueue+0x50>)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2100      	movs	r1, #0
 800892c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <vQueueUnregisterQueue+0x50>)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	4413      	add	r3, r2
 8008938:	2200      	movs	r2, #0
 800893a:	605a      	str	r2, [r3, #4]
				break;
 800893c:	e006      	b.n	800894c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b07      	cmp	r3, #7
 8008948:	d9e5      	bls.n	8008916 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20004658 	.word	0x20004658

0800895c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800896c:	f7fe fefa 	bl	8007764 <vPortEnterCritical>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008976:	b25b      	sxtb	r3, r3
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800897c:	d103      	bne.n	8008986 <vQueueWaitForMessageRestricted+0x2a>
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800898c:	b25b      	sxtb	r3, r3
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008992:	d103      	bne.n	800899c <vQueueWaitForMessageRestricted+0x40>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800899c:	f7fe ff12 	bl	80077c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	3324      	adds	r3, #36	; 0x24
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fc07 	bl	80091c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089b6:	6978      	ldr	r0, [r7, #20]
 80089b8:	f7ff fefb 	bl	80087b2 <prvUnlockQueue>
	}
 80089bc:	bf00      	nop
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08e      	sub	sp, #56	; 0x38
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	623b      	str	r3, [r7, #32]
}
 80089ea:	bf00      	nop
 80089ec:	e7fe      	b.n	80089ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <xTaskCreateStatic+0x46>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	61fb      	str	r3, [r7, #28]
}
 8008a06:	bf00      	nop
 8008a08:	e7fe      	b.n	8008a08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a0a:	235c      	movs	r3, #92	; 0x5c
 8008a0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b5c      	cmp	r3, #92	; 0x5c
 8008a12:	d00a      	beq.n	8008a2a <xTaskCreateStatic+0x66>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61bb      	str	r3, [r7, #24]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d01e      	beq.n	8008a70 <xTaskCreateStatic+0xac>
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01b      	beq.n	8008a70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	9302      	str	r3, [sp, #8]
 8008a52:	f107 0314 	add.w	r3, r7, #20
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	68b9      	ldr	r1, [r7, #8]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f850 	bl	8008b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a6a:	f000 f8dd 	bl	8008c28 <prvAddNewTaskToReadyList>
 8008a6e:	e001      	b.n	8008a74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a74:	697b      	ldr	r3, [r7, #20]
	}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3728      	adds	r7, #40	; 0x28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b08c      	sub	sp, #48	; 0x30
 8008a82:	af04      	add	r7, sp, #16
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	603b      	str	r3, [r7, #0]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fa9c 	bl	8006fd0 <pvPortMalloc>
 8008a98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00e      	beq.n	8008abe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008aa0:	205c      	movs	r0, #92	; 0x5c
 8008aa2:	f7fe fa95 	bl	8006fd0 <pvPortMalloc>
 8008aa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ab4:	e005      	b.n	8008ac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ab6:	6978      	ldr	r0, [r7, #20]
 8008ab8:	f7fe fb56 	bl	8007168 <vPortFree>
 8008abc:	e001      	b.n	8008ac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d017      	beq.n	8008af8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ad0:	88fa      	ldrh	r2, [r7, #6]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9303      	str	r3, [sp, #12]
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f80e 	bl	8008b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aec:	69f8      	ldr	r0, [r7, #28]
 8008aee:	f000 f89b 	bl	8008c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008af2:	2301      	movs	r3, #1
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e002      	b.n	8008afe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008afc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008afe:	69bb      	ldr	r3, [r7, #24]
	}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3720      	adds	r7, #32
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	461a      	mov	r2, r3
 8008b20:	21a5      	movs	r1, #165	; 0xa5
 8008b22:	f001 faaf 	bl	800a084 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b30:	3b01      	subs	r3, #1
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	f023 0307 	bic.w	r3, r3, #7
 8008b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	617b      	str	r3, [r7, #20]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01f      	beq.n	8008ba6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b66:	2300      	movs	r3, #0
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	e012      	b.n	8008b92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	7819      	ldrb	r1, [r3, #0]
 8008b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	3334      	adds	r3, #52	; 0x34
 8008b7c:	460a      	mov	r2, r1
 8008b7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d006      	beq.n	8008b9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2b0f      	cmp	r3, #15
 8008b96:	d9e9      	bls.n	8008b6c <prvInitialiseNewTask+0x64>
 8008b98:	e000      	b.n	8008b9c <prvInitialiseNewTask+0x94>
			{
				break;
 8008b9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ba4:	e003      	b.n	8008bae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	2b37      	cmp	r3, #55	; 0x37
 8008bb2:	d901      	bls.n	8008bb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bb4:	2337      	movs	r3, #55	; 0x37
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe fc08 	bl	80073e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fc03 	bl	80073e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	69b8      	ldr	r0, [r7, #24]
 8008c08:	f7fe fc80 	bl	800750c <pxPortInitialiseStack>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c1e:	bf00      	nop
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c30:	f7fe fd98 	bl	8007764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c34:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a2c      	ldr	r2, [pc, #176]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c3e:	4b2c      	ldr	r3, [pc, #176]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c46:	4a2a      	ldr	r2, [pc, #168]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d110      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c54:	f000 fbe2 	bl	800941c <prvInitialiseTaskLists>
 8008c58:	e00d      	b.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c5a:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <prvAddNewTaskToReadyList+0xcc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d109      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c62:	4b23      	ldr	r3, [pc, #140]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d802      	bhi.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c76:	4b20      	ldr	r3, [pc, #128]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	4a1e      	ldr	r2, [pc, #120]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008c7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c80:	4b1d      	ldr	r3, [pc, #116]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <prvAddNewTaskToReadyList+0xd4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d903      	bls.n	8008c9c <prvAddNewTaskToReadyList+0x74>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	4a18      	ldr	r2, [pc, #96]	; (8008cfc <prvAddNewTaskToReadyList+0xd4>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a15      	ldr	r2, [pc, #84]	; (8008d00 <prvAddNewTaskToReadyList+0xd8>)
 8008caa:	441a      	add	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7fe fba3 	bl	80073fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cb8:	f7fe fd84 	bl	80077c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <prvAddNewTaskToReadyList+0xcc>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00e      	beq.n	8008ce2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d207      	bcs.n	8008ce2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <prvAddNewTaskToReadyList+0xdc>)
 8008cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20004b6c 	.word	0x20004b6c
 8008cf0:	20004698 	.word	0x20004698
 8008cf4:	20004b78 	.word	0x20004b78
 8008cf8:	20004b88 	.word	0x20004b88
 8008cfc:	20004b74 	.word	0x20004b74
 8008d00:	2000469c 	.word	0x2000469c
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d16:	463a      	mov	r2, r7
 8008d18:	1d39      	adds	r1, r7, #4
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe f922 	bl	8006f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	9202      	str	r2, [sp, #8]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	460a      	mov	r2, r1
 8008d36:	4921      	ldr	r1, [pc, #132]	; (8008dbc <vTaskStartScheduler+0xb4>)
 8008d38:	4821      	ldr	r0, [pc, #132]	; (8008dc0 <vTaskStartScheduler+0xb8>)
 8008d3a:	f7ff fe43 	bl	80089c4 <xTaskCreateStatic>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4a20      	ldr	r2, [pc, #128]	; (8008dc4 <vTaskStartScheduler+0xbc>)
 8008d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d44:	4b1f      	ldr	r3, [pc, #124]	; (8008dc4 <vTaskStartScheduler+0xbc>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	e001      	b.n	8008d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d102      	bne.n	8008d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d5c:	f000 fdfa 	bl	8009954 <xTimerCreateTimerTask>
 8008d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d116      	bne.n	8008d96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	613b      	str	r3, [r7, #16]
}
 8008d7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <vTaskStartScheduler+0xc0>)
 8008d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d84:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <vTaskStartScheduler+0xc4>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d8a:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <vTaskStartScheduler+0xc8>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d90:	f7fe fc46 	bl	8007620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d94:	e00e      	b.n	8008db4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d9c:	d10a      	bne.n	8008db4 <vTaskStartScheduler+0xac>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	60fb      	str	r3, [r7, #12]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <vTaskStartScheduler+0xaa>
}
 8008db4:	bf00      	nop
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	0800b8e4 	.word	0x0800b8e4
 8008dc0:	080093ed 	.word	0x080093ed
 8008dc4:	20004b90 	.word	0x20004b90
 8008dc8:	20004b8c 	.word	0x20004b8c
 8008dcc:	20004b78 	.word	0x20004b78
 8008dd0:	20004b70 	.word	0x20004b70

08008dd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <vTaskSuspendAll+0x18>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	4a03      	ldr	r2, [pc, #12]	; (8008dec <vTaskSuspendAll+0x18>)
 8008de0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008de2:	bf00      	nop
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20004b94 	.word	0x20004b94

08008df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dfe:	4b42      	ldr	r3, [pc, #264]	; (8008f08 <xTaskResumeAll+0x118>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <xTaskResumeAll+0x2c>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	603b      	str	r3, [r7, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e1c:	f7fe fca2 	bl	8007764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e20:	4b39      	ldr	r3, [pc, #228]	; (8008f08 <xTaskResumeAll+0x118>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	4a38      	ldr	r2, [pc, #224]	; (8008f08 <xTaskResumeAll+0x118>)
 8008e28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e2a:	4b37      	ldr	r3, [pc, #220]	; (8008f08 <xTaskResumeAll+0x118>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d162      	bne.n	8008ef8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e32:	4b36      	ldr	r3, [pc, #216]	; (8008f0c <xTaskResumeAll+0x11c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d05e      	beq.n	8008ef8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e3a:	e02f      	b.n	8008e9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3c:	4b34      	ldr	r3, [pc, #208]	; (8008f10 <xTaskResumeAll+0x120>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3318      	adds	r3, #24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fb35 	bl	80074b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fb30 	bl	80074b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5c:	4b2d      	ldr	r3, [pc, #180]	; (8008f14 <xTaskResumeAll+0x124>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d903      	bls.n	8008e6c <xTaskResumeAll+0x7c>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	4a2a      	ldr	r2, [pc, #168]	; (8008f14 <xTaskResumeAll+0x124>)
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4a27      	ldr	r2, [pc, #156]	; (8008f18 <xTaskResumeAll+0x128>)
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f7fe fabb 	bl	80073fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <xTaskResumeAll+0x12c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d302      	bcc.n	8008e9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e96:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <xTaskResumeAll+0x130>)
 8008e98:	2201      	movs	r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e9c:	4b1c      	ldr	r3, [pc, #112]	; (8008f10 <xTaskResumeAll+0x120>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1cb      	bne.n	8008e3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008eaa:	f000 fb55 	bl	8009558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008eae:	4b1d      	ldr	r3, [pc, #116]	; (8008f24 <xTaskResumeAll+0x134>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d010      	beq.n	8008edc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008eba:	f000 f847 	bl	8008f4c <xTaskIncrementTick>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008ec4:	4b16      	ldr	r3, [pc, #88]	; (8008f20 <xTaskResumeAll+0x130>)
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f1      	bne.n	8008eba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008ed6:	4b13      	ldr	r3, [pc, #76]	; (8008f24 <xTaskResumeAll+0x134>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008edc:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <xTaskResumeAll+0x130>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d009      	beq.n	8008ef8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ee8:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <xTaskResumeAll+0x138>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ef8:	f7fe fc64 	bl	80077c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008efc:	68bb      	ldr	r3, [r7, #8]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20004b94 	.word	0x20004b94
 8008f0c:	20004b6c 	.word	0x20004b6c
 8008f10:	20004b2c 	.word	0x20004b2c
 8008f14:	20004b74 	.word	0x20004b74
 8008f18:	2000469c 	.word	0x2000469c
 8008f1c:	20004698 	.word	0x20004698
 8008f20:	20004b80 	.word	0x20004b80
 8008f24:	20004b7c 	.word	0x20004b7c
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <xTaskGetTickCount+0x1c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f38:	687b      	ldr	r3, [r7, #4]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20004b70 	.word	0x20004b70

08008f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f56:	4b4f      	ldr	r3, [pc, #316]	; (8009094 <xTaskIncrementTick+0x148>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f040 808f 	bne.w	800907e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f60:	4b4d      	ldr	r3, [pc, #308]	; (8009098 <xTaskIncrementTick+0x14c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3301      	adds	r3, #1
 8008f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f68:	4a4b      	ldr	r2, [pc, #300]	; (8009098 <xTaskIncrementTick+0x14c>)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d120      	bne.n	8008fb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f74:	4b49      	ldr	r3, [pc, #292]	; (800909c <xTaskIncrementTick+0x150>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	603b      	str	r3, [r7, #0]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <xTaskIncrementTick+0x46>
 8008f94:	4b41      	ldr	r3, [pc, #260]	; (800909c <xTaskIncrementTick+0x150>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	4b41      	ldr	r3, [pc, #260]	; (80090a0 <xTaskIncrementTick+0x154>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a3f      	ldr	r2, [pc, #252]	; (800909c <xTaskIncrementTick+0x150>)
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	4a3f      	ldr	r2, [pc, #252]	; (80090a0 <xTaskIncrementTick+0x154>)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	4b3e      	ldr	r3, [pc, #248]	; (80090a4 <xTaskIncrementTick+0x158>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	4a3d      	ldr	r2, [pc, #244]	; (80090a4 <xTaskIncrementTick+0x158>)
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	f000 fad1 	bl	8009558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fb6:	4b3c      	ldr	r3, [pc, #240]	; (80090a8 <xTaskIncrementTick+0x15c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d349      	bcc.n	8009054 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc0:	4b36      	ldr	r3, [pc, #216]	; (800909c <xTaskIncrementTick+0x150>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fca:	4b37      	ldr	r3, [pc, #220]	; (80090a8 <xTaskIncrementTick+0x15c>)
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd0:	601a      	str	r2, [r3, #0]
					break;
 8008fd2:	e03f      	b.n	8009054 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fd4:	4b31      	ldr	r3, [pc, #196]	; (800909c <xTaskIncrementTick+0x150>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d203      	bcs.n	8008ff4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fec:	4a2e      	ldr	r2, [pc, #184]	; (80090a8 <xTaskIncrementTick+0x15c>)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ff2:	e02f      	b.n	8009054 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fe fa5d 	bl	80074b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	3318      	adds	r3, #24
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fa54 	bl	80074b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009014:	4b25      	ldr	r3, [pc, #148]	; (80090ac <xTaskIncrementTick+0x160>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d903      	bls.n	8009024 <xTaskIncrementTick+0xd8>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	4a22      	ldr	r2, [pc, #136]	; (80090ac <xTaskIncrementTick+0x160>)
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <xTaskIncrementTick+0x164>)
 8009032:	441a      	add	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fe f9df 	bl	80073fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <xTaskIncrementTick+0x168>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	429a      	cmp	r2, r3
 800904c:	d3b8      	bcc.n	8008fc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800904e:	2301      	movs	r3, #1
 8009050:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009052:	e7b5      	b.n	8008fc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009054:	4b17      	ldr	r3, [pc, #92]	; (80090b4 <xTaskIncrementTick+0x168>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905a:	4915      	ldr	r1, [pc, #84]	; (80090b0 <xTaskIncrementTick+0x164>)
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	440b      	add	r3, r1
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d901      	bls.n	8009070 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800906c:	2301      	movs	r3, #1
 800906e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009070:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <xTaskIncrementTick+0x16c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	e004      	b.n	8009088 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800907e:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <xTaskIncrementTick+0x170>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a0d      	ldr	r2, [pc, #52]	; (80090bc <xTaskIncrementTick+0x170>)
 8009086:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009088:	697b      	ldr	r3, [r7, #20]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20004b94 	.word	0x20004b94
 8009098:	20004b70 	.word	0x20004b70
 800909c:	20004b24 	.word	0x20004b24
 80090a0:	20004b28 	.word	0x20004b28
 80090a4:	20004b84 	.word	0x20004b84
 80090a8:	20004b8c 	.word	0x20004b8c
 80090ac:	20004b74 	.word	0x20004b74
 80090b0:	2000469c 	.word	0x2000469c
 80090b4:	20004698 	.word	0x20004698
 80090b8:	20004b80 	.word	0x20004b80
 80090bc:	20004b7c 	.word	0x20004b7c

080090c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090c6:	4b28      	ldr	r3, [pc, #160]	; (8009168 <vTaskSwitchContext+0xa8>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090ce:	4b27      	ldr	r3, [pc, #156]	; (800916c <vTaskSwitchContext+0xac>)
 80090d0:	2201      	movs	r2, #1
 80090d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090d4:	e041      	b.n	800915a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80090d6:	4b25      	ldr	r3, [pc, #148]	; (800916c <vTaskSwitchContext+0xac>)
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090dc:	4b24      	ldr	r3, [pc, #144]	; (8009170 <vTaskSwitchContext+0xb0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	e010      	b.n	8009106 <vTaskSwitchContext+0x46>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <vTaskSwitchContext+0x40>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	607b      	str	r3, [r7, #4]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <vTaskSwitchContext+0x3e>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	491b      	ldr	r1, [pc, #108]	; (8009174 <vTaskSwitchContext+0xb4>)
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0e4      	beq.n	80090e4 <vTaskSwitchContext+0x24>
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a13      	ldr	r2, [pc, #76]	; (8009174 <vTaskSwitchContext+0xb4>)
 8009126:	4413      	add	r3, r2
 8009128:	60bb      	str	r3, [r7, #8]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	605a      	str	r2, [r3, #4]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	3308      	adds	r3, #8
 800913c:	429a      	cmp	r2, r3
 800913e:	d104      	bne.n	800914a <vTaskSwitchContext+0x8a>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4a09      	ldr	r2, [pc, #36]	; (8009178 <vTaskSwitchContext+0xb8>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	4a06      	ldr	r2, [pc, #24]	; (8009170 <vTaskSwitchContext+0xb0>)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6013      	str	r3, [r2, #0]
}
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20004b94 	.word	0x20004b94
 800916c:	20004b80 	.word	0x20004b80
 8009170:	20004b74 	.word	0x20004b74
 8009174:	2000469c 	.word	0x2000469c
 8009178:	20004698 	.word	0x20004698

0800917c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60fb      	str	r3, [r7, #12]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <vTaskPlaceOnEventList+0x44>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3318      	adds	r3, #24
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fe f94b 	bl	8007446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091b0:	2101      	movs	r1, #1
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f000 fb7a 	bl	80098ac <prvAddCurrentTaskToDelayedList>
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20004698 	.word	0x20004698

080091c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	617b      	str	r3, [r7, #20]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <vTaskPlaceOnEventListRestricted+0x54>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3318      	adds	r3, #24
 80091f2:	4619      	mov	r1, r3
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7fe f902 	bl	80073fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009204:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	68b8      	ldr	r0, [r7, #8]
 800920a:	f000 fb4f 	bl	80098ac <prvAddCurrentTaskToDelayedList>
	}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20004698 	.word	0x20004698

0800921c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	60fb      	str	r3, [r7, #12]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	3318      	adds	r3, #24
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe f933 	bl	80074b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009252:	4b1e      	ldr	r3, [pc, #120]	; (80092cc <xTaskRemoveFromEventList+0xb0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11d      	bne.n	8009296 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	3304      	adds	r3, #4
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe f92a 	bl	80074b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <xTaskRemoveFromEventList+0xb4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <xTaskRemoveFromEventList+0x5c>
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a16      	ldr	r2, [pc, #88]	; (80092d0 <xTaskRemoveFromEventList+0xb4>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <xTaskRemoveFromEventList+0xb8>)
 8009286:	441a      	add	r2, r3
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe f8b5 	bl	80073fe <vListInsertEnd>
 8009294:	e005      	b.n	80092a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3318      	adds	r3, #24
 800929a:	4619      	mov	r1, r3
 800929c:	480e      	ldr	r0, [pc, #56]	; (80092d8 <xTaskRemoveFromEventList+0xbc>)
 800929e:	f7fe f8ae 	bl	80073fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <xTaskRemoveFromEventList+0xc0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d905      	bls.n	80092bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092b0:	2301      	movs	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <xTaskRemoveFromEventList+0xc4>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e001      	b.n	80092c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092c0:	697b      	ldr	r3, [r7, #20]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20004b94 	.word	0x20004b94
 80092d0:	20004b74 	.word	0x20004b74
 80092d4:	2000469c 	.word	0x2000469c
 80092d8:	20004b2c 	.word	0x20004b2c
 80092dc:	20004698 	.word	0x20004698
 80092e0:	20004b80 	.word	0x20004b80

080092e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <vTaskInternalSetTimeOutState+0x24>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <vTaskInternalSetTimeOutState+0x28>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	605a      	str	r2, [r3, #4]
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20004b84 	.word	0x20004b84
 800930c:	20004b70 	.word	0x20004b70

08009310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	613b      	str	r3, [r7, #16]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	60fb      	str	r3, [r7, #12]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009352:	f7fe fa07 	bl	8007764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <xTaskCheckForTimeOut+0xbc>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800936e:	d102      	bne.n	8009376 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	e023      	b.n	80093be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <xTaskCheckForTimeOut+0xc0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d007      	beq.n	8009392 <xTaskCheckForTimeOut+0x82>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	429a      	cmp	r2, r3
 800938a:	d302      	bcc.n	8009392 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e015      	b.n	80093be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	429a      	cmp	r2, r3
 800939a:	d20b      	bcs.n	80093b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	1ad2      	subs	r2, r2, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff ff9b 	bl	80092e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	e004      	b.n	80093be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093ba:	2301      	movs	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093be:	f7fe fa01 	bl	80077c4 <vPortExitCritical>

	return xReturn;
 80093c2:	69fb      	ldr	r3, [r7, #28]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20004b70 	.word	0x20004b70
 80093d0:	20004b84 	.word	0x20004b84

080093d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093d8:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <vTaskMissedYield+0x14>)
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
}
 80093de:	bf00      	nop
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20004b80 	.word	0x20004b80

080093ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093f4:	f000 f852 	bl	800949c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093f8:	4b06      	ldr	r3, [pc, #24]	; (8009414 <prvIdleTask+0x28>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d9f9      	bls.n	80093f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <prvIdleTask+0x2c>)
 8009402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009410:	e7f0      	b.n	80093f4 <prvIdleTask+0x8>
 8009412:	bf00      	nop
 8009414:	2000469c 	.word	0x2000469c
 8009418:	e000ed04 	.word	0xe000ed04

0800941c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009422:	2300      	movs	r3, #0
 8009424:	607b      	str	r3, [r7, #4]
 8009426:	e00c      	b.n	8009442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4a12      	ldr	r2, [pc, #72]	; (800947c <prvInitialiseTaskLists+0x60>)
 8009434:	4413      	add	r3, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd ffb4 	bl	80073a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3301      	adds	r3, #1
 8009440:	607b      	str	r3, [r7, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b37      	cmp	r3, #55	; 0x37
 8009446:	d9ef      	bls.n	8009428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009448:	480d      	ldr	r0, [pc, #52]	; (8009480 <prvInitialiseTaskLists+0x64>)
 800944a:	f7fd ffab 	bl	80073a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800944e:	480d      	ldr	r0, [pc, #52]	; (8009484 <prvInitialiseTaskLists+0x68>)
 8009450:	f7fd ffa8 	bl	80073a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009454:	480c      	ldr	r0, [pc, #48]	; (8009488 <prvInitialiseTaskLists+0x6c>)
 8009456:	f7fd ffa5 	bl	80073a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800945a:	480c      	ldr	r0, [pc, #48]	; (800948c <prvInitialiseTaskLists+0x70>)
 800945c:	f7fd ffa2 	bl	80073a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009460:	480b      	ldr	r0, [pc, #44]	; (8009490 <prvInitialiseTaskLists+0x74>)
 8009462:	f7fd ff9f 	bl	80073a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <prvInitialiseTaskLists+0x78>)
 8009468:	4a05      	ldr	r2, [pc, #20]	; (8009480 <prvInitialiseTaskLists+0x64>)
 800946a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <prvInitialiseTaskLists+0x7c>)
 800946e:	4a05      	ldr	r2, [pc, #20]	; (8009484 <prvInitialiseTaskLists+0x68>)
 8009470:	601a      	str	r2, [r3, #0]
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	2000469c 	.word	0x2000469c
 8009480:	20004afc 	.word	0x20004afc
 8009484:	20004b10 	.word	0x20004b10
 8009488:	20004b2c 	.word	0x20004b2c
 800948c:	20004b40 	.word	0x20004b40
 8009490:	20004b58 	.word	0x20004b58
 8009494:	20004b24 	.word	0x20004b24
 8009498:	20004b28 	.word	0x20004b28

0800949c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094a2:	e019      	b.n	80094d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094a4:	f7fe f95e 	bl	8007764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a8:	4b10      	ldr	r3, [pc, #64]	; (80094ec <prvCheckTasksWaitingTermination+0x50>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fd ffff 	bl	80074b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ba:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <prvCheckTasksWaitingTermination+0x54>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3b01      	subs	r3, #1
 80094c0:	4a0b      	ldr	r2, [pc, #44]	; (80094f0 <prvCheckTasksWaitingTermination+0x54>)
 80094c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c4:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <prvCheckTasksWaitingTermination+0x58>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <prvCheckTasksWaitingTermination+0x58>)
 80094cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ce:	f7fe f979 	bl	80077c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f810 	bl	80094f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d8:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <prvCheckTasksWaitingTermination+0x58>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e1      	bne.n	80094a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20004b40 	.word	0x20004b40
 80094f0:	20004b6c 	.word	0x20004b6c
 80094f4:	20004b54 	.word	0x20004b54

080094f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009506:	2b00      	cmp	r3, #0
 8009508:	d108      	bne.n	800951c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	4618      	mov	r0, r3
 8009510:	f7fd fe2a 	bl	8007168 <vPortFree>
				vPortFree( pxTCB );
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7fd fe27 	bl	8007168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800951a:	e018      	b.n	800954e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009522:	2b01      	cmp	r3, #1
 8009524:	d103      	bne.n	800952e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7fd fe1e 	bl	8007168 <vPortFree>
	}
 800952c:	e00f      	b.n	800954e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009534:	2b02      	cmp	r3, #2
 8009536:	d00a      	beq.n	800954e <prvDeleteTCB+0x56>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	60fb      	str	r3, [r7, #12]
}
 800954a:	bf00      	nop
 800954c:	e7fe      	b.n	800954c <prvDeleteTCB+0x54>
	}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800955e:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <prvResetNextTaskUnblockTime+0x38>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <prvResetNextTaskUnblockTime+0x3c>)
 800956a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800956e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009570:	e008      	b.n	8009584 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <prvResetNextTaskUnblockTime+0x38>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4a04      	ldr	r2, [pc, #16]	; (8009594 <prvResetNextTaskUnblockTime+0x3c>)
 8009582:	6013      	str	r3, [r2, #0]
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20004b24 	.word	0x20004b24
 8009594:	20004b8c 	.word	0x20004b8c

08009598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800959e:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <xTaskGetSchedulerState+0x34>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095a6:	2301      	movs	r3, #1
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	e008      	b.n	80095be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ac:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <xTaskGetSchedulerState+0x38>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b4:	2302      	movs	r3, #2
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	e001      	b.n	80095be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095ba:	2300      	movs	r3, #0
 80095bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095be:	687b      	ldr	r3, [r7, #4]
	}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	20004b78 	.word	0x20004b78
 80095d0:	20004b94 	.word	0x20004b94

080095d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d051      	beq.n	800968e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <xTaskPriorityInherit+0xc4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d241      	bcs.n	800967c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	db06      	blt.n	800960e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009600:	4b25      	ldr	r3, [pc, #148]	; (8009698 <xTaskPriorityInherit+0xc4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6959      	ldr	r1, [r3, #20]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a1f      	ldr	r2, [pc, #124]	; (800969c <xTaskPriorityInherit+0xc8>)
 8009620:	4413      	add	r3, r2
 8009622:	4299      	cmp	r1, r3
 8009624:	d122      	bne.n	800966c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	3304      	adds	r3, #4
 800962a:	4618      	mov	r0, r3
 800962c:	f7fd ff44 	bl	80074b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009630:	4b19      	ldr	r3, [pc, #100]	; (8009698 <xTaskPriorityInherit+0xc4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963e:	4b18      	ldr	r3, [pc, #96]	; (80096a0 <xTaskPriorityInherit+0xcc>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d903      	bls.n	800964e <xTaskPriorityInherit+0x7a>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	4a15      	ldr	r2, [pc, #84]	; (80096a0 <xTaskPriorityInherit+0xcc>)
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4a10      	ldr	r2, [pc, #64]	; (800969c <xTaskPriorityInherit+0xc8>)
 800965c:	441a      	add	r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	3304      	adds	r3, #4
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f7fd feca 	bl	80073fe <vListInsertEnd>
 800966a:	e004      	b.n	8009676 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <xTaskPriorityInherit+0xc4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e008      	b.n	800968e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009680:	4b05      	ldr	r3, [pc, #20]	; (8009698 <xTaskPriorityInherit+0xc4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	429a      	cmp	r2, r3
 8009688:	d201      	bcs.n	800968e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800968a:	2301      	movs	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800968e:	68fb      	ldr	r3, [r7, #12]
	}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20004698 	.word	0x20004698
 800969c:	2000469c 	.word	0x2000469c
 80096a0:	20004b74 	.word	0x20004b74

080096a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d056      	beq.n	8009768 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096ba:	4b2e      	ldr	r3, [pc, #184]	; (8009774 <xTaskPriorityDisinherit+0xd0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d00a      	beq.n	80096da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	60fb      	str	r3, [r7, #12]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	60bb      	str	r3, [r7, #8]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970a:	429a      	cmp	r2, r3
 800970c:	d02c      	beq.n	8009768 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009712:	2b00      	cmp	r3, #0
 8009714:	d128      	bne.n	8009768 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3304      	adds	r3, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f7fd fecc 	bl	80074b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <xTaskPriorityDisinherit+0xd4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d903      	bls.n	8009748 <xTaskPriorityDisinherit+0xa4>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <xTaskPriorityDisinherit+0xd4>)
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4a09      	ldr	r2, [pc, #36]	; (800977c <xTaskPriorityDisinherit+0xd8>)
 8009756:	441a      	add	r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	3304      	adds	r3, #4
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f7fd fe4d 	bl	80073fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009764:	2301      	movs	r3, #1
 8009766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009768:	697b      	ldr	r3, [r7, #20]
	}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20004698 	.word	0x20004698
 8009778:	20004b74 	.word	0x20004b74
 800977c:	2000469c 	.word	0x2000469c

08009780 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800978e:	2301      	movs	r3, #1
 8009790:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d06a      	beq.n	800986e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d902      	bls.n	80097c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e002      	b.n	80097cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d04b      	beq.n	800986e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d146      	bne.n	800986e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097e0:	4b25      	ldr	r3, [pc, #148]	; (8009878 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d10a      	bne.n	8009800 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	60bb      	str	r3, [r7, #8]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	db04      	blt.n	800981e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	6959      	ldr	r1, [r3, #20]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4a13      	ldr	r2, [pc, #76]	; (800987c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800982e:	4413      	add	r3, r2
 8009830:	4299      	cmp	r1, r3
 8009832:	d11c      	bne.n	800986e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	3304      	adds	r3, #4
 8009838:	4618      	mov	r0, r3
 800983a:	f7fd fe3d 	bl	80074b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009842:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d903      	bls.n	8009852 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4a07      	ldr	r2, [pc, #28]	; (800987c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009860:	441a      	add	r2, r3
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fd fdc8 	bl	80073fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800986e:	bf00      	nop
 8009870:	3720      	adds	r7, #32
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20004698 	.word	0x20004698
 800987c:	2000469c 	.word	0x2000469c
 8009880:	20004b74 	.word	0x20004b74

08009884 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009888:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d004      	beq.n	800989a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009896:	3201      	adds	r2, #1
 8009898:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800989a:	4b03      	ldr	r3, [pc, #12]	; (80098a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800989c:	681b      	ldr	r3, [r3, #0]
	}
 800989e:	4618      	mov	r0, r3
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	20004698 	.word	0x20004698

080098ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098b6:	4b21      	ldr	r3, [pc, #132]	; (800993c <prvAddCurrentTaskToDelayedList+0x90>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098bc:	4b20      	ldr	r3, [pc, #128]	; (8009940 <prvAddCurrentTaskToDelayedList+0x94>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3304      	adds	r3, #4
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd fdf8 	bl	80074b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ce:	d10a      	bne.n	80098e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d6:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <prvAddCurrentTaskToDelayedList+0x94>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3304      	adds	r3, #4
 80098dc:	4619      	mov	r1, r3
 80098de:	4819      	ldr	r0, [pc, #100]	; (8009944 <prvAddCurrentTaskToDelayedList+0x98>)
 80098e0:	f7fd fd8d 	bl	80073fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098e4:	e026      	b.n	8009934 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098ee:	4b14      	ldr	r3, [pc, #80]	; (8009940 <prvAddCurrentTaskToDelayedList+0x94>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d209      	bcs.n	8009912 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098fe:	4b12      	ldr	r3, [pc, #72]	; (8009948 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <prvAddCurrentTaskToDelayedList+0x94>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7fd fd9b 	bl	8007446 <vListInsert>
}
 8009910:	e010      	b.n	8009934 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009912:	4b0e      	ldr	r3, [pc, #56]	; (800994c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <prvAddCurrentTaskToDelayedList+0x94>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3304      	adds	r3, #4
 800991c:	4619      	mov	r1, r3
 800991e:	4610      	mov	r0, r2
 8009920:	f7fd fd91 	bl	8007446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	429a      	cmp	r2, r3
 800992c:	d202      	bcs.n	8009934 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800992e:	4a08      	ldr	r2, [pc, #32]	; (8009950 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	6013      	str	r3, [r2, #0]
}
 8009934:	bf00      	nop
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20004b70 	.word	0x20004b70
 8009940:	20004698 	.word	0x20004698
 8009944:	20004b58 	.word	0x20004b58
 8009948:	20004b28 	.word	0x20004b28
 800994c:	20004b24 	.word	0x20004b24
 8009950:	20004b8c 	.word	0x20004b8c

08009954 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08a      	sub	sp, #40	; 0x28
 8009958:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800995a:	2300      	movs	r3, #0
 800995c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800995e:	f000 fb07 	bl	8009f70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009962:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <xTimerCreateTimerTask+0x80>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d021      	beq.n	80099ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009972:	1d3a      	adds	r2, r7, #4
 8009974:	f107 0108 	add.w	r1, r7, #8
 8009978:	f107 030c 	add.w	r3, r7, #12
 800997c:	4618      	mov	r0, r3
 800997e:	f7fd fb0d 	bl	8006f9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	9202      	str	r2, [sp, #8]
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	2302      	movs	r3, #2
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	460a      	mov	r2, r1
 8009994:	4910      	ldr	r1, [pc, #64]	; (80099d8 <xTimerCreateTimerTask+0x84>)
 8009996:	4811      	ldr	r0, [pc, #68]	; (80099dc <xTimerCreateTimerTask+0x88>)
 8009998:	f7ff f814 	bl	80089c4 <xTaskCreateStatic>
 800999c:	4603      	mov	r3, r0
 800999e:	4a10      	ldr	r2, [pc, #64]	; (80099e0 <xTimerCreateTimerTask+0x8c>)
 80099a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099a2:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <xTimerCreateTimerTask+0x8c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099aa:	2301      	movs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	613b      	str	r3, [r7, #16]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099ca:	697b      	ldr	r3, [r7, #20]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20004bc8 	.word	0x20004bc8
 80099d8:	0800b8ec 	.word	0x0800b8ec
 80099dc:	08009b19 	.word	0x08009b19
 80099e0:	20004bcc 	.word	0x20004bcc

080099e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08a      	sub	sp, #40	; 0x28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <xTimerGenericCommand+0x2e>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	623b      	str	r3, [r7, #32]
}
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a12:	4b1a      	ldr	r3, [pc, #104]	; (8009a7c <xTimerGenericCommand+0x98>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d02a      	beq.n	8009a70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	dc18      	bgt.n	8009a5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a2c:	f7ff fdb4 	bl	8009598 <xTaskGetSchedulerState>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d109      	bne.n	8009a4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <xTimerGenericCommand+0x98>)
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f107 0110 	add.w	r1, r7, #16
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a42:	f7fe f959 	bl	8007cf8 <xQueueGenericSend>
 8009a46:	6278      	str	r0, [r7, #36]	; 0x24
 8009a48:	e012      	b.n	8009a70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <xTimerGenericCommand+0x98>)
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f107 0110 	add.w	r1, r7, #16
 8009a52:	2300      	movs	r3, #0
 8009a54:	2200      	movs	r2, #0
 8009a56:	f7fe f94f 	bl	8007cf8 <xQueueGenericSend>
 8009a5a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a5c:	e008      	b.n	8009a70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <xTimerGenericCommand+0x98>)
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	f107 0110 	add.w	r1, r7, #16
 8009a66:	2300      	movs	r3, #0
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	f7fe fa43 	bl	8007ef4 <xQueueGenericSendFromISR>
 8009a6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3728      	adds	r7, #40	; 0x28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20004bc8 	.word	0x20004bc8

08009a80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8a:	4b22      	ldr	r3, [pc, #136]	; (8009b14 <prvProcessExpiredTimer+0x94>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fd fd0d 	bl	80074b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d022      	beq.n	8009af2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	699a      	ldr	r2, [r3, #24]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	18d1      	adds	r1, r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	6978      	ldr	r0, [r7, #20]
 8009aba:	f000 f8d1 	bl	8009c60 <prvInsertTimerInActiveList>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01f      	beq.n	8009b04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	2100      	movs	r1, #0
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f7ff ff88 	bl	80099e4 <xTimerGenericCommand>
 8009ad4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d113      	bne.n	8009b04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af8:	f023 0301 	bic.w	r3, r3, #1
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	4798      	blx	r3
}
 8009b0c:	bf00      	nop
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20004bc0 	.word	0x20004bc0

08009b18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b20:	f107 0308 	add.w	r3, r7, #8
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 f857 	bl	8009bd8 <prvGetNextExpireTime>
 8009b2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f803 	bl	8009b3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b36:	f000 f8d5 	bl	8009ce4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b3a:	e7f1      	b.n	8009b20 <prvTimerTask+0x8>

08009b3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b46:	f7ff f945 	bl	8008dd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b4a:	f107 0308 	add.w	r3, r7, #8
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f866 	bl	8009c20 <prvSampleTimeNow>
 8009b54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d130      	bne.n	8009bbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <prvProcessTimerOrBlockTask+0x3c>
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d806      	bhi.n	8009b78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b6a:	f7ff f941 	bl	8008df0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b6e:	68f9      	ldr	r1, [r7, #12]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff ff85 	bl	8009a80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b76:	e024      	b.n	8009bc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d008      	beq.n	8009b90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <prvProcessTimerOrBlockTask+0x90>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <prvProcessTimerOrBlockTask+0x50>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e000      	b.n	8009b8e <prvProcessTimerOrBlockTask+0x52>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b90:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <prvProcessTimerOrBlockTask+0x94>)
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	f7fe fedd 	bl	800895c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ba2:	f7ff f925 	bl	8008df0 <xTaskResumeAll>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10a      	bne.n	8009bc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <prvProcessTimerOrBlockTask+0x98>)
 8009bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	f3bf 8f6f 	isb	sy
}
 8009bbc:	e001      	b.n	8009bc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bbe:	f7ff f917 	bl	8008df0 <xTaskResumeAll>
}
 8009bc2:	bf00      	nop
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20004bc4 	.word	0x20004bc4
 8009bd0:	20004bc8 	.word	0x20004bc8
 8009bd4:	e000ed04 	.word	0xe000ed04

08009bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009be0:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <prvGetNextExpireTime+0x44>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <prvGetNextExpireTime+0x16>
 8009bea:	2201      	movs	r2, #1
 8009bec:	e000      	b.n	8009bf0 <prvGetNextExpireTime+0x18>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d105      	bne.n	8009c08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <prvGetNextExpireTime+0x44>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	e001      	b.n	8009c0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	20004bc0 	.word	0x20004bc0

08009c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c28:	f7ff f980 	bl	8008f2c <xTaskGetTickCount>
 8009c2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <prvSampleTimeNow+0x3c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d205      	bcs.n	8009c44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c38:	f000 f936 	bl	8009ea8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e002      	b.n	8009c4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c4a:	4a04      	ldr	r2, [pc, #16]	; (8009c5c <prvSampleTimeNow+0x3c>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c50:	68fb      	ldr	r3, [r7, #12]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20004bd0 	.word	0x20004bd0

08009c60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d812      	bhi.n	8009cac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c94:	2301      	movs	r3, #1
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	e01b      	b.n	8009cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <prvInsertTimerInActiveList+0x7c>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f7fd fbce 	bl	8007446 <vListInsert>
 8009caa:	e012      	b.n	8009cd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d206      	bcs.n	8009cc2 <prvInsertTimerInActiveList+0x62>
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d302      	bcc.n	8009cc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	e007      	b.n	8009cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <prvInsertTimerInActiveList+0x80>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f7fd fbba 	bl	8007446 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cd2:	697b      	ldr	r3, [r7, #20]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20004bc4 	.word	0x20004bc4
 8009ce0:	20004bc0 	.word	0x20004bc0

08009ce4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08e      	sub	sp, #56	; 0x38
 8009ce8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cea:	e0ca      	b.n	8009e82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	da18      	bge.n	8009d24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cf2:	1d3b      	adds	r3, r7, #4
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	61fb      	str	r3, [r7, #28]
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1a:	6850      	ldr	r0, [r2, #4]
 8009d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1e:	6892      	ldr	r2, [r2, #8]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f2c0 80aa 	blt.w	8009e80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d004      	beq.n	8009d42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fd fbbb 	bl	80074b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d42:	463b      	mov	r3, r7
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7ff ff6b 	bl	8009c20 <prvSampleTimeNow>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	f200 8097 	bhi.w	8009e82 <prvProcessReceivedCommands+0x19e>
 8009d54:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <prvProcessReceivedCommands+0x78>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009d85 	.word	0x08009d85
 8009d60:	08009d85 	.word	0x08009d85
 8009d64:	08009d85 	.word	0x08009d85
 8009d68:	08009df9 	.word	0x08009df9
 8009d6c:	08009e0d 	.word	0x08009e0d
 8009d70:	08009e57 	.word	0x08009e57
 8009d74:	08009d85 	.word	0x08009d85
 8009d78:	08009d85 	.word	0x08009d85
 8009d7c:	08009df9 	.word	0x08009df9
 8009d80:	08009e0d 	.word	0x08009e0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d8a:	f043 0301 	orr.w	r3, r3, #1
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	18d1      	adds	r1, r2, r3
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da4:	f7ff ff5c 	bl	8009c60 <prvInsertTimerInActiveList>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d069      	beq.n	8009e82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d05e      	beq.n	8009e82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	441a      	add	r2, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd6:	f7ff fe05 	bl	80099e4 <xTimerGenericCommand>
 8009dda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d14f      	bne.n	8009e82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	61bb      	str	r3, [r7, #24]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dfe:	f023 0301 	bic.w	r3, r3, #1
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e0a:	e03a      	b.n	8009e82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e12:	f043 0301 	orr.w	r3, r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	617b      	str	r3, [r7, #20]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	699a      	ldr	r2, [r3, #24]
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	18d1      	adds	r1, r2, r3
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e50:	f7ff ff06 	bl	8009c60 <prvInsertTimerInActiveList>
					break;
 8009e54:	e015      	b.n	8009e82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d103      	bne.n	8009e6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e66:	f7fd f97f 	bl	8007168 <vPortFree>
 8009e6a:	e00a      	b.n	8009e82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e72:	f023 0301 	bic.w	r3, r3, #1
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e7e:	e000      	b.n	8009e82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e82:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <prvProcessReceivedCommands+0x1c0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	1d39      	adds	r1, r7, #4
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe f95a 	bl	8008144 <xQueueReceive>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f47f af2a 	bne.w	8009cec <prvProcessReceivedCommands+0x8>
	}
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	3730      	adds	r7, #48	; 0x30
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20004bc8 	.word	0x20004bc8

08009ea8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009eae:	e048      	b.n	8009f42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eb0:	4b2d      	ldr	r3, [pc, #180]	; (8009f68 <prvSwitchTimerLists+0xc0>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eba:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <prvSwitchTimerLists+0xc0>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fd faf5 	bl	80074b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d02e      	beq.n	8009f42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4413      	add	r3, r2
 8009eec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d90e      	bls.n	8009f14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f02:	4b19      	ldr	r3, [pc, #100]	; (8009f68 <prvSwitchTimerLists+0xc0>)
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7fd fa9a 	bl	8007446 <vListInsert>
 8009f12:	e016      	b.n	8009f42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f14:	2300      	movs	r3, #0
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f7ff fd60 	bl	80099e4 <xTimerGenericCommand>
 8009f24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	603b      	str	r3, [r7, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <prvSwitchTimerLists+0xc0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1b1      	bne.n	8009eb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f4c:	4b06      	ldr	r3, [pc, #24]	; (8009f68 <prvSwitchTimerLists+0xc0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <prvSwitchTimerLists+0xc4>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <prvSwitchTimerLists+0xc0>)
 8009f58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f5a:	4a04      	ldr	r2, [pc, #16]	; (8009f6c <prvSwitchTimerLists+0xc4>)
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	6013      	str	r3, [r2, #0]
}
 8009f60:	bf00      	nop
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20004bc0 	.word	0x20004bc0
 8009f6c:	20004bc4 	.word	0x20004bc4

08009f70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f76:	f7fd fbf5 	bl	8007764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f7a:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d120      	bne.n	8009fc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f82:	4814      	ldr	r0, [pc, #80]	; (8009fd4 <prvCheckForValidListAndQueue+0x64>)
 8009f84:	f7fd fa0e 	bl	80073a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f88:	4813      	ldr	r0, [pc, #76]	; (8009fd8 <prvCheckForValidListAndQueue+0x68>)
 8009f8a:	f7fd fa0b 	bl	80073a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f8e:	4b13      	ldr	r3, [pc, #76]	; (8009fdc <prvCheckForValidListAndQueue+0x6c>)
 8009f90:	4a10      	ldr	r2, [pc, #64]	; (8009fd4 <prvCheckForValidListAndQueue+0x64>)
 8009f92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f94:	4b12      	ldr	r3, [pc, #72]	; (8009fe0 <prvCheckForValidListAndQueue+0x70>)
 8009f96:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <prvCheckForValidListAndQueue+0x68>)
 8009f98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	4b11      	ldr	r3, [pc, #68]	; (8009fe4 <prvCheckForValidListAndQueue+0x74>)
 8009fa0:	4a11      	ldr	r2, [pc, #68]	; (8009fe8 <prvCheckForValidListAndQueue+0x78>)
 8009fa2:	2110      	movs	r1, #16
 8009fa4:	200a      	movs	r0, #10
 8009fa6:	f7fd fd67 	bl	8007a78 <xQueueGenericCreateStatic>
 8009faa:	4603      	mov	r3, r0
 8009fac:	4a08      	ldr	r2, [pc, #32]	; (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009fae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <prvCheckForValidListAndQueue+0x60>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	490b      	ldr	r1, [pc, #44]	; (8009fec <prvCheckForValidListAndQueue+0x7c>)
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fc78 	bl	80088b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fc4:	f7fd fbfe 	bl	80077c4 <vPortExitCritical>
}
 8009fc8:	bf00      	nop
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20004bc8 	.word	0x20004bc8
 8009fd4:	20004b98 	.word	0x20004b98
 8009fd8:	20004bac 	.word	0x20004bac
 8009fdc:	20004bc0 	.word	0x20004bc0
 8009fe0:	20004bc4 	.word	0x20004bc4
 8009fe4:	20004c74 	.word	0x20004c74
 8009fe8:	20004bd4 	.word	0x20004bd4
 8009fec:	0800b8f4 	.word	0x0800b8f4

08009ff0 <__errno>:
 8009ff0:	4b01      	ldr	r3, [pc, #4]	; (8009ff8 <__errno+0x8>)
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000030 	.word	0x20000030

08009ffc <getchar>:
 8009ffc:	4b07      	ldr	r3, [pc, #28]	; (800a01c <getchar+0x20>)
 8009ffe:	b510      	push	{r4, lr}
 800a000:	681c      	ldr	r4, [r3, #0]
 800a002:	b124      	cbz	r4, 800a00e <getchar+0x12>
 800a004:	69a3      	ldr	r3, [r4, #24]
 800a006:	b913      	cbnz	r3, 800a00e <getchar+0x12>
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 fbc1 	bl	800a790 <__sinit>
 800a00e:	6861      	ldr	r1, [r4, #4]
 800a010:	4620      	mov	r0, r4
 800a012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a016:	f000 bc75 	b.w	800a904 <_getc_r>
 800a01a:	bf00      	nop
 800a01c:	20000030 	.word	0x20000030

0800a020 <__libc_init_array>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	4d0d      	ldr	r5, [pc, #52]	; (800a058 <__libc_init_array+0x38>)
 800a024:	4c0d      	ldr	r4, [pc, #52]	; (800a05c <__libc_init_array+0x3c>)
 800a026:	1b64      	subs	r4, r4, r5
 800a028:	10a4      	asrs	r4, r4, #2
 800a02a:	2600      	movs	r6, #0
 800a02c:	42a6      	cmp	r6, r4
 800a02e:	d109      	bne.n	800a044 <__libc_init_array+0x24>
 800a030:	4d0b      	ldr	r5, [pc, #44]	; (800a060 <__libc_init_array+0x40>)
 800a032:	4c0c      	ldr	r4, [pc, #48]	; (800a064 <__libc_init_array+0x44>)
 800a034:	f001 fab4 	bl	800b5a0 <_init>
 800a038:	1b64      	subs	r4, r4, r5
 800a03a:	10a4      	asrs	r4, r4, #2
 800a03c:	2600      	movs	r6, #0
 800a03e:	42a6      	cmp	r6, r4
 800a040:	d105      	bne.n	800a04e <__libc_init_array+0x2e>
 800a042:	bd70      	pop	{r4, r5, r6, pc}
 800a044:	f855 3b04 	ldr.w	r3, [r5], #4
 800a048:	4798      	blx	r3
 800a04a:	3601      	adds	r6, #1
 800a04c:	e7ee      	b.n	800a02c <__libc_init_array+0xc>
 800a04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a052:	4798      	blx	r3
 800a054:	3601      	adds	r6, #1
 800a056:	e7f2      	b.n	800a03e <__libc_init_array+0x1e>
 800a058:	0800ba54 	.word	0x0800ba54
 800a05c:	0800ba54 	.word	0x0800ba54
 800a060:	0800ba54 	.word	0x0800ba54
 800a064:	0800ba58 	.word	0x0800ba58

0800a068 <memcpy>:
 800a068:	440a      	add	r2, r1
 800a06a:	4291      	cmp	r1, r2
 800a06c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a070:	d100      	bne.n	800a074 <memcpy+0xc>
 800a072:	4770      	bx	lr
 800a074:	b510      	push	{r4, lr}
 800a076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07e:	4291      	cmp	r1, r2
 800a080:	d1f9      	bne.n	800a076 <memcpy+0xe>
 800a082:	bd10      	pop	{r4, pc}

0800a084 <memset>:
 800a084:	4402      	add	r2, r0
 800a086:	4603      	mov	r3, r0
 800a088:	4293      	cmp	r3, r2
 800a08a:	d100      	bne.n	800a08e <memset+0xa>
 800a08c:	4770      	bx	lr
 800a08e:	f803 1b01 	strb.w	r1, [r3], #1
 800a092:	e7f9      	b.n	800a088 <memset+0x4>

0800a094 <iprintf>:
 800a094:	b40f      	push	{r0, r1, r2, r3}
 800a096:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <iprintf+0x2c>)
 800a098:	b513      	push	{r0, r1, r4, lr}
 800a09a:	681c      	ldr	r4, [r3, #0]
 800a09c:	b124      	cbz	r4, 800a0a8 <iprintf+0x14>
 800a09e:	69a3      	ldr	r3, [r4, #24]
 800a0a0:	b913      	cbnz	r3, 800a0a8 <iprintf+0x14>
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fb74 	bl	800a790 <__sinit>
 800a0a8:	ab05      	add	r3, sp, #20
 800a0aa:	9a04      	ldr	r2, [sp, #16]
 800a0ac:	68a1      	ldr	r1, [r4, #8]
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fde1 	bl	800ac78 <_vfiprintf_r>
 800a0b6:	b002      	add	sp, #8
 800a0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0bc:	b004      	add	sp, #16
 800a0be:	4770      	bx	lr
 800a0c0:	20000030 	.word	0x20000030

0800a0c4 <putchar>:
 800a0c4:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <putchar+0x28>)
 800a0c6:	b513      	push	{r0, r1, r4, lr}
 800a0c8:	681c      	ldr	r4, [r3, #0]
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	b134      	cbz	r4, 800a0dc <putchar+0x18>
 800a0ce:	69a3      	ldr	r3, [r4, #24]
 800a0d0:	b923      	cbnz	r3, 800a0dc <putchar+0x18>
 800a0d2:	9001      	str	r0, [sp, #4]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 fb5b 	bl	800a790 <__sinit>
 800a0da:	9901      	ldr	r1, [sp, #4]
 800a0dc:	68a2      	ldr	r2, [r4, #8]
 800a0de:	4620      	mov	r0, r4
 800a0e0:	b002      	add	sp, #8
 800a0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e6:	f001 b88b 	b.w	800b200 <_putc_r>
 800a0ea:	bf00      	nop
 800a0ec:	20000030 	.word	0x20000030

0800a0f0 <_puts_r>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	460e      	mov	r6, r1
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	b118      	cbz	r0, 800a100 <_puts_r+0x10>
 800a0f8:	6983      	ldr	r3, [r0, #24]
 800a0fa:	b90b      	cbnz	r3, 800a100 <_puts_r+0x10>
 800a0fc:	f000 fb48 	bl	800a790 <__sinit>
 800a100:	69ab      	ldr	r3, [r5, #24]
 800a102:	68ac      	ldr	r4, [r5, #8]
 800a104:	b913      	cbnz	r3, 800a10c <_puts_r+0x1c>
 800a106:	4628      	mov	r0, r5
 800a108:	f000 fb42 	bl	800a790 <__sinit>
 800a10c:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <_puts_r+0xd0>)
 800a10e:	429c      	cmp	r4, r3
 800a110:	d120      	bne.n	800a154 <_puts_r+0x64>
 800a112:	686c      	ldr	r4, [r5, #4]
 800a114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a116:	07db      	lsls	r3, r3, #31
 800a118:	d405      	bmi.n	800a126 <_puts_r+0x36>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	0598      	lsls	r0, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_puts_r+0x36>
 800a120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a122:	f000 fc30 	bl	800a986 <__retarget_lock_acquire_recursive>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	0719      	lsls	r1, r3, #28
 800a12a:	d51d      	bpl.n	800a168 <_puts_r+0x78>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	b1db      	cbz	r3, 800a168 <_puts_r+0x78>
 800a130:	3e01      	subs	r6, #1
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a138:	3b01      	subs	r3, #1
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	bb39      	cbnz	r1, 800a18e <_puts_r+0x9e>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da38      	bge.n	800a1b4 <_puts_r+0xc4>
 800a142:	4622      	mov	r2, r4
 800a144:	210a      	movs	r1, #10
 800a146:	4628      	mov	r0, r5
 800a148:	f000 f936 	bl	800a3b8 <__swbuf_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d011      	beq.n	800a174 <_puts_r+0x84>
 800a150:	250a      	movs	r5, #10
 800a152:	e011      	b.n	800a178 <_puts_r+0x88>
 800a154:	4b1b      	ldr	r3, [pc, #108]	; (800a1c4 <_puts_r+0xd4>)
 800a156:	429c      	cmp	r4, r3
 800a158:	d101      	bne.n	800a15e <_puts_r+0x6e>
 800a15a:	68ac      	ldr	r4, [r5, #8]
 800a15c:	e7da      	b.n	800a114 <_puts_r+0x24>
 800a15e:	4b1a      	ldr	r3, [pc, #104]	; (800a1c8 <_puts_r+0xd8>)
 800a160:	429c      	cmp	r4, r3
 800a162:	bf08      	it	eq
 800a164:	68ec      	ldreq	r4, [r5, #12]
 800a166:	e7d5      	b.n	800a114 <_puts_r+0x24>
 800a168:	4621      	mov	r1, r4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 f976 	bl	800a45c <__swsetup_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	d0dd      	beq.n	800a130 <_puts_r+0x40>
 800a174:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a17a:	07da      	lsls	r2, r3, #31
 800a17c:	d405      	bmi.n	800a18a <_puts_r+0x9a>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	d402      	bmi.n	800a18a <_puts_r+0x9a>
 800a184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a186:	f000 fbff 	bl	800a988 <__retarget_lock_release_recursive>
 800a18a:	4628      	mov	r0, r5
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da04      	bge.n	800a19c <_puts_r+0xac>
 800a192:	69a2      	ldr	r2, [r4, #24]
 800a194:	429a      	cmp	r2, r3
 800a196:	dc06      	bgt.n	800a1a6 <_puts_r+0xb6>
 800a198:	290a      	cmp	r1, #10
 800a19a:	d004      	beq.n	800a1a6 <_puts_r+0xb6>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	6022      	str	r2, [r4, #0]
 800a1a2:	7019      	strb	r1, [r3, #0]
 800a1a4:	e7c5      	b.n	800a132 <_puts_r+0x42>
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f905 	bl	800a3b8 <__swbuf_r>
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d1bf      	bne.n	800a132 <_puts_r+0x42>
 800a1b2:	e7df      	b.n	800a174 <_puts_r+0x84>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	250a      	movs	r5, #10
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	6022      	str	r2, [r4, #0]
 800a1bc:	701d      	strb	r5, [r3, #0]
 800a1be:	e7db      	b.n	800a178 <_puts_r+0x88>
 800a1c0:	0800b9d8 	.word	0x0800b9d8
 800a1c4:	0800b9f8 	.word	0x0800b9f8
 800a1c8:	0800b9b8 	.word	0x0800b9b8

0800a1cc <puts>:
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <puts+0xc>)
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	f7ff bf8d 	b.w	800a0f0 <_puts_r>
 800a1d6:	bf00      	nop
 800a1d8:	20000030 	.word	0x20000030

0800a1dc <setvbuf>:
 800a1dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1e0:	461d      	mov	r5, r3
 800a1e2:	4b5d      	ldr	r3, [pc, #372]	; (800a358 <setvbuf+0x17c>)
 800a1e4:	681f      	ldr	r7, [r3, #0]
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460e      	mov	r6, r1
 800a1ea:	4690      	mov	r8, r2
 800a1ec:	b127      	cbz	r7, 800a1f8 <setvbuf+0x1c>
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <setvbuf+0x1c>
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f000 facc 	bl	800a790 <__sinit>
 800a1f8:	4b58      	ldr	r3, [pc, #352]	; (800a35c <setvbuf+0x180>)
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d167      	bne.n	800a2ce <setvbuf+0xf2>
 800a1fe:	687c      	ldr	r4, [r7, #4]
 800a200:	f1b8 0f02 	cmp.w	r8, #2
 800a204:	d006      	beq.n	800a214 <setvbuf+0x38>
 800a206:	f1b8 0f01 	cmp.w	r8, #1
 800a20a:	f200 809f 	bhi.w	800a34c <setvbuf+0x170>
 800a20e:	2d00      	cmp	r5, #0
 800a210:	f2c0 809c 	blt.w	800a34c <setvbuf+0x170>
 800a214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	d405      	bmi.n	800a226 <setvbuf+0x4a>
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	0598      	lsls	r0, r3, #22
 800a21e:	d402      	bmi.n	800a226 <setvbuf+0x4a>
 800a220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a222:	f000 fbb0 	bl	800a986 <__retarget_lock_acquire_recursive>
 800a226:	4621      	mov	r1, r4
 800a228:	4638      	mov	r0, r7
 800a22a:	f000 fa0b 	bl	800a644 <_fflush_r>
 800a22e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a230:	b141      	cbz	r1, 800a244 <setvbuf+0x68>
 800a232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a236:	4299      	cmp	r1, r3
 800a238:	d002      	beq.n	800a240 <setvbuf+0x64>
 800a23a:	4638      	mov	r0, r7
 800a23c:	f000 fc12 	bl	800aa64 <_free_r>
 800a240:	2300      	movs	r3, #0
 800a242:	6363      	str	r3, [r4, #52]	; 0x34
 800a244:	2300      	movs	r3, #0
 800a246:	61a3      	str	r3, [r4, #24]
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	0619      	lsls	r1, r3, #24
 800a24e:	d503      	bpl.n	800a258 <setvbuf+0x7c>
 800a250:	6921      	ldr	r1, [r4, #16]
 800a252:	4638      	mov	r0, r7
 800a254:	f000 fc06 	bl	800aa64 <_free_r>
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	f1b8 0f02 	cmp.w	r8, #2
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	d06c      	beq.n	800a344 <setvbuf+0x168>
 800a26a:	ab01      	add	r3, sp, #4
 800a26c:	466a      	mov	r2, sp
 800a26e:	4621      	mov	r1, r4
 800a270:	4638      	mov	r0, r7
 800a272:	f000 fb8a 	bl	800a98a <__swhatbuf_r>
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	4318      	orrs	r0, r3
 800a27a:	81a0      	strh	r0, [r4, #12]
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	d130      	bne.n	800a2e2 <setvbuf+0x106>
 800a280:	9d00      	ldr	r5, [sp, #0]
 800a282:	4628      	mov	r0, r5
 800a284:	f000 fbe6 	bl	800aa54 <malloc>
 800a288:	4606      	mov	r6, r0
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d155      	bne.n	800a33a <setvbuf+0x15e>
 800a28e:	f8dd 9000 	ldr.w	r9, [sp]
 800a292:	45a9      	cmp	r9, r5
 800a294:	d14a      	bne.n	800a32c <setvbuf+0x150>
 800a296:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a29a:	2200      	movs	r2, #0
 800a29c:	60a2      	str	r2, [r4, #8]
 800a29e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	6122      	str	r2, [r4, #16]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ac:	6162      	str	r2, [r4, #20]
 800a2ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b0:	f043 0302 	orr.w	r3, r3, #2
 800a2b4:	07d2      	lsls	r2, r2, #31
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	d405      	bmi.n	800a2c6 <setvbuf+0xea>
 800a2ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a2be:	d102      	bne.n	800a2c6 <setvbuf+0xea>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c2:	f000 fb61 	bl	800a988 <__retarget_lock_release_recursive>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	b003      	add	sp, #12
 800a2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	4b24      	ldr	r3, [pc, #144]	; (800a360 <setvbuf+0x184>)
 800a2d0:	429c      	cmp	r4, r3
 800a2d2:	d101      	bne.n	800a2d8 <setvbuf+0xfc>
 800a2d4:	68bc      	ldr	r4, [r7, #8]
 800a2d6:	e793      	b.n	800a200 <setvbuf+0x24>
 800a2d8:	4b22      	ldr	r3, [pc, #136]	; (800a364 <setvbuf+0x188>)
 800a2da:	429c      	cmp	r4, r3
 800a2dc:	bf08      	it	eq
 800a2de:	68fc      	ldreq	r4, [r7, #12]
 800a2e0:	e78e      	b.n	800a200 <setvbuf+0x24>
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	d0cd      	beq.n	800a282 <setvbuf+0xa6>
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	b913      	cbnz	r3, 800a2f0 <setvbuf+0x114>
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f000 fa50 	bl	800a790 <__sinit>
 800a2f0:	f1b8 0f01 	cmp.w	r8, #1
 800a2f4:	bf08      	it	eq
 800a2f6:	89a3      	ldrheq	r3, [r4, #12]
 800a2f8:	6026      	str	r6, [r4, #0]
 800a2fa:	bf04      	itt	eq
 800a2fc:	f043 0301 	orreq.w	r3, r3, #1
 800a300:	81a3      	strheq	r3, [r4, #12]
 800a302:	89a2      	ldrh	r2, [r4, #12]
 800a304:	f012 0308 	ands.w	r3, r2, #8
 800a308:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a30c:	d01c      	beq.n	800a348 <setvbuf+0x16c>
 800a30e:	07d3      	lsls	r3, r2, #31
 800a310:	bf41      	itttt	mi
 800a312:	2300      	movmi	r3, #0
 800a314:	426d      	negmi	r5, r5
 800a316:	60a3      	strmi	r3, [r4, #8]
 800a318:	61a5      	strmi	r5, [r4, #24]
 800a31a:	bf58      	it	pl
 800a31c:	60a5      	strpl	r5, [r4, #8]
 800a31e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a320:	f015 0501 	ands.w	r5, r5, #1
 800a324:	d115      	bne.n	800a352 <setvbuf+0x176>
 800a326:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a32a:	e7c8      	b.n	800a2be <setvbuf+0xe2>
 800a32c:	4648      	mov	r0, r9
 800a32e:	f000 fb91 	bl	800aa54 <malloc>
 800a332:	4606      	mov	r6, r0
 800a334:	2800      	cmp	r0, #0
 800a336:	d0ae      	beq.n	800a296 <setvbuf+0xba>
 800a338:	464d      	mov	r5, r9
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	e7d0      	b.n	800a2e6 <setvbuf+0x10a>
 800a344:	2500      	movs	r5, #0
 800a346:	e7a8      	b.n	800a29a <setvbuf+0xbe>
 800a348:	60a3      	str	r3, [r4, #8]
 800a34a:	e7e8      	b.n	800a31e <setvbuf+0x142>
 800a34c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a350:	e7b9      	b.n	800a2c6 <setvbuf+0xea>
 800a352:	2500      	movs	r5, #0
 800a354:	e7b7      	b.n	800a2c6 <setvbuf+0xea>
 800a356:	bf00      	nop
 800a358:	20000030 	.word	0x20000030
 800a35c:	0800b9d8 	.word	0x0800b9d8
 800a360:	0800b9f8 	.word	0x0800b9f8
 800a364:	0800b9b8 	.word	0x0800b9b8

0800a368 <strncmp>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	b17a      	cbz	r2, 800a38c <strncmp+0x24>
 800a36c:	4603      	mov	r3, r0
 800a36e:	3901      	subs	r1, #1
 800a370:	1884      	adds	r4, r0, r2
 800a372:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a376:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a37a:	4290      	cmp	r0, r2
 800a37c:	d101      	bne.n	800a382 <strncmp+0x1a>
 800a37e:	42a3      	cmp	r3, r4
 800a380:	d101      	bne.n	800a386 <strncmp+0x1e>
 800a382:	1a80      	subs	r0, r0, r2
 800a384:	bd10      	pop	{r4, pc}
 800a386:	2800      	cmp	r0, #0
 800a388:	d1f3      	bne.n	800a372 <strncmp+0xa>
 800a38a:	e7fa      	b.n	800a382 <strncmp+0x1a>
 800a38c:	4610      	mov	r0, r2
 800a38e:	e7f9      	b.n	800a384 <strncmp+0x1c>

0800a390 <strncpy>:
 800a390:	b510      	push	{r4, lr}
 800a392:	3901      	subs	r1, #1
 800a394:	4603      	mov	r3, r0
 800a396:	b132      	cbz	r2, 800a3a6 <strncpy+0x16>
 800a398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a39c:	f803 4b01 	strb.w	r4, [r3], #1
 800a3a0:	3a01      	subs	r2, #1
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	d1f7      	bne.n	800a396 <strncpy+0x6>
 800a3a6:	441a      	add	r2, r3
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d100      	bne.n	800a3b0 <strncpy+0x20>
 800a3ae:	bd10      	pop	{r4, pc}
 800a3b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a3b4:	e7f9      	b.n	800a3aa <strncpy+0x1a>
	...

0800a3b8 <__swbuf_r>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	460e      	mov	r6, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b118      	cbz	r0, 800a3ca <__swbuf_r+0x12>
 800a3c2:	6983      	ldr	r3, [r0, #24]
 800a3c4:	b90b      	cbnz	r3, 800a3ca <__swbuf_r+0x12>
 800a3c6:	f000 f9e3 	bl	800a790 <__sinit>
 800a3ca:	4b21      	ldr	r3, [pc, #132]	; (800a450 <__swbuf_r+0x98>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d12b      	bne.n	800a428 <__swbuf_r+0x70>
 800a3d0:	686c      	ldr	r4, [r5, #4]
 800a3d2:	69a3      	ldr	r3, [r4, #24]
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	071a      	lsls	r2, r3, #28
 800a3da:	d52f      	bpl.n	800a43c <__swbuf_r+0x84>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	b36b      	cbz	r3, 800a43c <__swbuf_r+0x84>
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	6820      	ldr	r0, [r4, #0]
 800a3e4:	1ac0      	subs	r0, r0, r3
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	b2f6      	uxtb	r6, r6
 800a3ea:	4283      	cmp	r3, r0
 800a3ec:	4637      	mov	r7, r6
 800a3ee:	dc04      	bgt.n	800a3fa <__swbuf_r+0x42>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 f926 	bl	800a644 <_fflush_r>
 800a3f8:	bb30      	cbnz	r0, 800a448 <__swbuf_r+0x90>
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	701e      	strb	r6, [r3, #0]
 800a408:	6963      	ldr	r3, [r4, #20]
 800a40a:	3001      	adds	r0, #1
 800a40c:	4283      	cmp	r3, r0
 800a40e:	d004      	beq.n	800a41a <__swbuf_r+0x62>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	07db      	lsls	r3, r3, #31
 800a414:	d506      	bpl.n	800a424 <__swbuf_r+0x6c>
 800a416:	2e0a      	cmp	r6, #10
 800a418:	d104      	bne.n	800a424 <__swbuf_r+0x6c>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 f911 	bl	800a644 <_fflush_r>
 800a422:	b988      	cbnz	r0, 800a448 <__swbuf_r+0x90>
 800a424:	4638      	mov	r0, r7
 800a426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <__swbuf_r+0x9c>)
 800a42a:	429c      	cmp	r4, r3
 800a42c:	d101      	bne.n	800a432 <__swbuf_r+0x7a>
 800a42e:	68ac      	ldr	r4, [r5, #8]
 800a430:	e7cf      	b.n	800a3d2 <__swbuf_r+0x1a>
 800a432:	4b09      	ldr	r3, [pc, #36]	; (800a458 <__swbuf_r+0xa0>)
 800a434:	429c      	cmp	r4, r3
 800a436:	bf08      	it	eq
 800a438:	68ec      	ldreq	r4, [r5, #12]
 800a43a:	e7ca      	b.n	800a3d2 <__swbuf_r+0x1a>
 800a43c:	4621      	mov	r1, r4
 800a43e:	4628      	mov	r0, r5
 800a440:	f000 f80c 	bl	800a45c <__swsetup_r>
 800a444:	2800      	cmp	r0, #0
 800a446:	d0cb      	beq.n	800a3e0 <__swbuf_r+0x28>
 800a448:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a44c:	e7ea      	b.n	800a424 <__swbuf_r+0x6c>
 800a44e:	bf00      	nop
 800a450:	0800b9d8 	.word	0x0800b9d8
 800a454:	0800b9f8 	.word	0x0800b9f8
 800a458:	0800b9b8 	.word	0x0800b9b8

0800a45c <__swsetup_r>:
 800a45c:	4b32      	ldr	r3, [pc, #200]	; (800a528 <__swsetup_r+0xcc>)
 800a45e:	b570      	push	{r4, r5, r6, lr}
 800a460:	681d      	ldr	r5, [r3, #0]
 800a462:	4606      	mov	r6, r0
 800a464:	460c      	mov	r4, r1
 800a466:	b125      	cbz	r5, 800a472 <__swsetup_r+0x16>
 800a468:	69ab      	ldr	r3, [r5, #24]
 800a46a:	b913      	cbnz	r3, 800a472 <__swsetup_r+0x16>
 800a46c:	4628      	mov	r0, r5
 800a46e:	f000 f98f 	bl	800a790 <__sinit>
 800a472:	4b2e      	ldr	r3, [pc, #184]	; (800a52c <__swsetup_r+0xd0>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d10f      	bne.n	800a498 <__swsetup_r+0x3c>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a480:	0719      	lsls	r1, r3, #28
 800a482:	d42c      	bmi.n	800a4de <__swsetup_r+0x82>
 800a484:	06dd      	lsls	r5, r3, #27
 800a486:	d411      	bmi.n	800a4ac <__swsetup_r+0x50>
 800a488:	2309      	movs	r3, #9
 800a48a:	6033      	str	r3, [r6, #0]
 800a48c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a496:	e03e      	b.n	800a516 <__swsetup_r+0xba>
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <__swsetup_r+0xd4>)
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d101      	bne.n	800a4a2 <__swsetup_r+0x46>
 800a49e:	68ac      	ldr	r4, [r5, #8]
 800a4a0:	e7eb      	b.n	800a47a <__swsetup_r+0x1e>
 800a4a2:	4b24      	ldr	r3, [pc, #144]	; (800a534 <__swsetup_r+0xd8>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	bf08      	it	eq
 800a4a8:	68ec      	ldreq	r4, [r5, #12]
 800a4aa:	e7e6      	b.n	800a47a <__swsetup_r+0x1e>
 800a4ac:	0758      	lsls	r0, r3, #29
 800a4ae:	d512      	bpl.n	800a4d6 <__swsetup_r+0x7a>
 800a4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4b2:	b141      	cbz	r1, 800a4c6 <__swsetup_r+0x6a>
 800a4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b8:	4299      	cmp	r1, r3
 800a4ba:	d002      	beq.n	800a4c2 <__swsetup_r+0x66>
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f000 fad1 	bl	800aa64 <_free_r>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6063      	str	r3, [r4, #4]
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	f043 0308 	orr.w	r3, r3, #8
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	6923      	ldr	r3, [r4, #16]
 800a4e0:	b94b      	cbnz	r3, 800a4f6 <__swsetup_r+0x9a>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ec:	d003      	beq.n	800a4f6 <__swsetup_r+0x9a>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f000 fa6f 	bl	800a9d4 <__smakebuf_r>
 800a4f6:	89a0      	ldrh	r0, [r4, #12]
 800a4f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4fc:	f010 0301 	ands.w	r3, r0, #1
 800a500:	d00a      	beq.n	800a518 <__swsetup_r+0xbc>
 800a502:	2300      	movs	r3, #0
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	6963      	ldr	r3, [r4, #20]
 800a508:	425b      	negs	r3, r3
 800a50a:	61a3      	str	r3, [r4, #24]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	b943      	cbnz	r3, 800a522 <__swsetup_r+0xc6>
 800a510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a514:	d1ba      	bne.n	800a48c <__swsetup_r+0x30>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	0781      	lsls	r1, r0, #30
 800a51a:	bf58      	it	pl
 800a51c:	6963      	ldrpl	r3, [r4, #20]
 800a51e:	60a3      	str	r3, [r4, #8]
 800a520:	e7f4      	b.n	800a50c <__swsetup_r+0xb0>
 800a522:	2000      	movs	r0, #0
 800a524:	e7f7      	b.n	800a516 <__swsetup_r+0xba>
 800a526:	bf00      	nop
 800a528:	20000030 	.word	0x20000030
 800a52c:	0800b9d8 	.word	0x0800b9d8
 800a530:	0800b9f8 	.word	0x0800b9f8
 800a534:	0800b9b8 	.word	0x0800b9b8

0800a538 <__sflush_r>:
 800a538:	898a      	ldrh	r2, [r1, #12]
 800a53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53e:	4605      	mov	r5, r0
 800a540:	0710      	lsls	r0, r2, #28
 800a542:	460c      	mov	r4, r1
 800a544:	d458      	bmi.n	800a5f8 <__sflush_r+0xc0>
 800a546:	684b      	ldr	r3, [r1, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	dc05      	bgt.n	800a558 <__sflush_r+0x20>
 800a54c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dc02      	bgt.n	800a558 <__sflush_r+0x20>
 800a552:	2000      	movs	r0, #0
 800a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d0f9      	beq.n	800a552 <__sflush_r+0x1a>
 800a55e:	2300      	movs	r3, #0
 800a560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a564:	682f      	ldr	r7, [r5, #0]
 800a566:	602b      	str	r3, [r5, #0]
 800a568:	d032      	beq.n	800a5d0 <__sflush_r+0x98>
 800a56a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	075a      	lsls	r2, r3, #29
 800a570:	d505      	bpl.n	800a57e <__sflush_r+0x46>
 800a572:	6863      	ldr	r3, [r4, #4]
 800a574:	1ac0      	subs	r0, r0, r3
 800a576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a578:	b10b      	cbz	r3, 800a57e <__sflush_r+0x46>
 800a57a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a57c:	1ac0      	subs	r0, r0, r3
 800a57e:	2300      	movs	r3, #0
 800a580:	4602      	mov	r2, r0
 800a582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a584:	6a21      	ldr	r1, [r4, #32]
 800a586:	4628      	mov	r0, r5
 800a588:	47b0      	blx	r6
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	d106      	bne.n	800a59e <__sflush_r+0x66>
 800a590:	6829      	ldr	r1, [r5, #0]
 800a592:	291d      	cmp	r1, #29
 800a594:	d82c      	bhi.n	800a5f0 <__sflush_r+0xb8>
 800a596:	4a2a      	ldr	r2, [pc, #168]	; (800a640 <__sflush_r+0x108>)
 800a598:	40ca      	lsrs	r2, r1
 800a59a:	07d6      	lsls	r6, r2, #31
 800a59c:	d528      	bpl.n	800a5f0 <__sflush_r+0xb8>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	6062      	str	r2, [r4, #4]
 800a5a2:	04d9      	lsls	r1, r3, #19
 800a5a4:	6922      	ldr	r2, [r4, #16]
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	d504      	bpl.n	800a5b4 <__sflush_r+0x7c>
 800a5aa:	1c42      	adds	r2, r0, #1
 800a5ac:	d101      	bne.n	800a5b2 <__sflush_r+0x7a>
 800a5ae:	682b      	ldr	r3, [r5, #0]
 800a5b0:	b903      	cbnz	r3, 800a5b4 <__sflush_r+0x7c>
 800a5b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5b6:	602f      	str	r7, [r5, #0]
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	d0ca      	beq.n	800a552 <__sflush_r+0x1a>
 800a5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	d002      	beq.n	800a5ca <__sflush_r+0x92>
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f000 fa4d 	bl	800aa64 <_free_r>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a5ce:	e7c1      	b.n	800a554 <__sflush_r+0x1c>
 800a5d0:	6a21      	ldr	r1, [r4, #32]
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	47b0      	blx	r6
 800a5d8:	1c41      	adds	r1, r0, #1
 800a5da:	d1c7      	bne.n	800a56c <__sflush_r+0x34>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0c4      	beq.n	800a56c <__sflush_r+0x34>
 800a5e2:	2b1d      	cmp	r3, #29
 800a5e4:	d001      	beq.n	800a5ea <__sflush_r+0xb2>
 800a5e6:	2b16      	cmp	r3, #22
 800a5e8:	d101      	bne.n	800a5ee <__sflush_r+0xb6>
 800a5ea:	602f      	str	r7, [r5, #0]
 800a5ec:	e7b1      	b.n	800a552 <__sflush_r+0x1a>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	e7ad      	b.n	800a554 <__sflush_r+0x1c>
 800a5f8:	690f      	ldr	r7, [r1, #16]
 800a5fa:	2f00      	cmp	r7, #0
 800a5fc:	d0a9      	beq.n	800a552 <__sflush_r+0x1a>
 800a5fe:	0793      	lsls	r3, r2, #30
 800a600:	680e      	ldr	r6, [r1, #0]
 800a602:	bf08      	it	eq
 800a604:	694b      	ldreq	r3, [r1, #20]
 800a606:	600f      	str	r7, [r1, #0]
 800a608:	bf18      	it	ne
 800a60a:	2300      	movne	r3, #0
 800a60c:	eba6 0807 	sub.w	r8, r6, r7
 800a610:	608b      	str	r3, [r1, #8]
 800a612:	f1b8 0f00 	cmp.w	r8, #0
 800a616:	dd9c      	ble.n	800a552 <__sflush_r+0x1a>
 800a618:	6a21      	ldr	r1, [r4, #32]
 800a61a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a61c:	4643      	mov	r3, r8
 800a61e:	463a      	mov	r2, r7
 800a620:	4628      	mov	r0, r5
 800a622:	47b0      	blx	r6
 800a624:	2800      	cmp	r0, #0
 800a626:	dc06      	bgt.n	800a636 <__sflush_r+0xfe>
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a634:	e78e      	b.n	800a554 <__sflush_r+0x1c>
 800a636:	4407      	add	r7, r0
 800a638:	eba8 0800 	sub.w	r8, r8, r0
 800a63c:	e7e9      	b.n	800a612 <__sflush_r+0xda>
 800a63e:	bf00      	nop
 800a640:	20400001 	.word	0x20400001

0800a644 <_fflush_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	690b      	ldr	r3, [r1, #16]
 800a648:	4605      	mov	r5, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	b913      	cbnz	r3, 800a654 <_fflush_r+0x10>
 800a64e:	2500      	movs	r5, #0
 800a650:	4628      	mov	r0, r5
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	b118      	cbz	r0, 800a65e <_fflush_r+0x1a>
 800a656:	6983      	ldr	r3, [r0, #24]
 800a658:	b90b      	cbnz	r3, 800a65e <_fflush_r+0x1a>
 800a65a:	f000 f899 	bl	800a790 <__sinit>
 800a65e:	4b14      	ldr	r3, [pc, #80]	; (800a6b0 <_fflush_r+0x6c>)
 800a660:	429c      	cmp	r4, r3
 800a662:	d11b      	bne.n	800a69c <_fflush_r+0x58>
 800a664:	686c      	ldr	r4, [r5, #4]
 800a666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0ef      	beq.n	800a64e <_fflush_r+0xa>
 800a66e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a670:	07d0      	lsls	r0, r2, #31
 800a672:	d404      	bmi.n	800a67e <_fflush_r+0x3a>
 800a674:	0599      	lsls	r1, r3, #22
 800a676:	d402      	bmi.n	800a67e <_fflush_r+0x3a>
 800a678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a67a:	f000 f984 	bl	800a986 <__retarget_lock_acquire_recursive>
 800a67e:	4628      	mov	r0, r5
 800a680:	4621      	mov	r1, r4
 800a682:	f7ff ff59 	bl	800a538 <__sflush_r>
 800a686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a688:	07da      	lsls	r2, r3, #31
 800a68a:	4605      	mov	r5, r0
 800a68c:	d4e0      	bmi.n	800a650 <_fflush_r+0xc>
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	059b      	lsls	r3, r3, #22
 800a692:	d4dd      	bmi.n	800a650 <_fflush_r+0xc>
 800a694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a696:	f000 f977 	bl	800a988 <__retarget_lock_release_recursive>
 800a69a:	e7d9      	b.n	800a650 <_fflush_r+0xc>
 800a69c:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <_fflush_r+0x70>)
 800a69e:	429c      	cmp	r4, r3
 800a6a0:	d101      	bne.n	800a6a6 <_fflush_r+0x62>
 800a6a2:	68ac      	ldr	r4, [r5, #8]
 800a6a4:	e7df      	b.n	800a666 <_fflush_r+0x22>
 800a6a6:	4b04      	ldr	r3, [pc, #16]	; (800a6b8 <_fflush_r+0x74>)
 800a6a8:	429c      	cmp	r4, r3
 800a6aa:	bf08      	it	eq
 800a6ac:	68ec      	ldreq	r4, [r5, #12]
 800a6ae:	e7da      	b.n	800a666 <_fflush_r+0x22>
 800a6b0:	0800b9d8 	.word	0x0800b9d8
 800a6b4:	0800b9f8 	.word	0x0800b9f8
 800a6b8:	0800b9b8 	.word	0x0800b9b8

0800a6bc <fflush>:
 800a6bc:	4601      	mov	r1, r0
 800a6be:	b920      	cbnz	r0, 800a6ca <fflush+0xe>
 800a6c0:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <fflush+0x18>)
 800a6c2:	4905      	ldr	r1, [pc, #20]	; (800a6d8 <fflush+0x1c>)
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f000 b8fe 	b.w	800a8c6 <_fwalk_reent>
 800a6ca:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <fflush+0x20>)
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f7ff bfb9 	b.w	800a644 <_fflush_r>
 800a6d2:	bf00      	nop
 800a6d4:	0800b9b4 	.word	0x0800b9b4
 800a6d8:	0800a645 	.word	0x0800a645
 800a6dc:	20000030 	.word	0x20000030

0800a6e0 <std>:
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ee:	6083      	str	r3, [r0, #8]
 800a6f0:	8181      	strh	r1, [r0, #12]
 800a6f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a6f4:	81c2      	strh	r2, [r0, #14]
 800a6f6:	6183      	str	r3, [r0, #24]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	305c      	adds	r0, #92	; 0x5c
 800a6fe:	f7ff fcc1 	bl	800a084 <memset>
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <std+0x38>)
 800a704:	6263      	str	r3, [r4, #36]	; 0x24
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <std+0x3c>)
 800a708:	62a3      	str	r3, [r4, #40]	; 0x28
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <std+0x40>)
 800a70c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <std+0x44>)
 800a710:	6224      	str	r4, [r4, #32]
 800a712:	6323      	str	r3, [r4, #48]	; 0x30
 800a714:	bd10      	pop	{r4, pc}
 800a716:	bf00      	nop
 800a718:	0800b309 	.word	0x0800b309
 800a71c:	0800b32b 	.word	0x0800b32b
 800a720:	0800b363 	.word	0x0800b363
 800a724:	0800b387 	.word	0x0800b387

0800a728 <_cleanup_r>:
 800a728:	4901      	ldr	r1, [pc, #4]	; (800a730 <_cleanup_r+0x8>)
 800a72a:	f000 b8cc 	b.w	800a8c6 <_fwalk_reent>
 800a72e:	bf00      	nop
 800a730:	0800a645 	.word	0x0800a645

0800a734 <__sfmoreglue>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	2268      	movs	r2, #104	; 0x68
 800a738:	1e4d      	subs	r5, r1, #1
 800a73a:	4355      	muls	r5, r2
 800a73c:	460e      	mov	r6, r1
 800a73e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a742:	f000 f9fb 	bl	800ab3c <_malloc_r>
 800a746:	4604      	mov	r4, r0
 800a748:	b140      	cbz	r0, 800a75c <__sfmoreglue+0x28>
 800a74a:	2100      	movs	r1, #0
 800a74c:	e9c0 1600 	strd	r1, r6, [r0]
 800a750:	300c      	adds	r0, #12
 800a752:	60a0      	str	r0, [r4, #8]
 800a754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a758:	f7ff fc94 	bl	800a084 <memset>
 800a75c:	4620      	mov	r0, r4
 800a75e:	bd70      	pop	{r4, r5, r6, pc}

0800a760 <__sfp_lock_acquire>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__sfp_lock_acquire+0x8>)
 800a762:	f000 b910 	b.w	800a986 <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	20004cc5 	.word	0x20004cc5

0800a76c <__sfp_lock_release>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__sfp_lock_release+0x8>)
 800a76e:	f000 b90b 	b.w	800a988 <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	20004cc5 	.word	0x20004cc5

0800a778 <__sinit_lock_acquire>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__sinit_lock_acquire+0x8>)
 800a77a:	f000 b904 	b.w	800a986 <__retarget_lock_acquire_recursive>
 800a77e:	bf00      	nop
 800a780:	20004cc6 	.word	0x20004cc6

0800a784 <__sinit_lock_release>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__sinit_lock_release+0x8>)
 800a786:	f000 b8ff 	b.w	800a988 <__retarget_lock_release_recursive>
 800a78a:	bf00      	nop
 800a78c:	20004cc6 	.word	0x20004cc6

0800a790 <__sinit>:
 800a790:	b510      	push	{r4, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	f7ff fff0 	bl	800a778 <__sinit_lock_acquire>
 800a798:	69a3      	ldr	r3, [r4, #24]
 800a79a:	b11b      	cbz	r3, 800a7a4 <__sinit+0x14>
 800a79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a0:	f7ff bff0 	b.w	800a784 <__sinit_lock_release>
 800a7a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a7aa:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <__sinit+0x68>)
 800a7ac:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <__sinit+0x6c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	bf04      	itt	eq
 800a7b6:	2301      	moveq	r3, #1
 800a7b8:	61a3      	streq	r3, [r4, #24]
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 f820 	bl	800a800 <__sfp>
 800a7c0:	6060      	str	r0, [r4, #4]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f81c 	bl	800a800 <__sfp>
 800a7c8:	60a0      	str	r0, [r4, #8]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f818 	bl	800a800 <__sfp>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	60e0      	str	r0, [r4, #12]
 800a7d4:	2104      	movs	r1, #4
 800a7d6:	6860      	ldr	r0, [r4, #4]
 800a7d8:	f7ff ff82 	bl	800a6e0 <std>
 800a7dc:	68a0      	ldr	r0, [r4, #8]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	2109      	movs	r1, #9
 800a7e2:	f7ff ff7d 	bl	800a6e0 <std>
 800a7e6:	68e0      	ldr	r0, [r4, #12]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	2112      	movs	r1, #18
 800a7ec:	f7ff ff78 	bl	800a6e0 <std>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	61a3      	str	r3, [r4, #24]
 800a7f4:	e7d2      	b.n	800a79c <__sinit+0xc>
 800a7f6:	bf00      	nop
 800a7f8:	0800b9b4 	.word	0x0800b9b4
 800a7fc:	0800a729 	.word	0x0800a729

0800a800 <__sfp>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	4607      	mov	r7, r0
 800a804:	f7ff ffac 	bl	800a760 <__sfp_lock_acquire>
 800a808:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <__sfp+0x84>)
 800a80a:	681e      	ldr	r6, [r3, #0]
 800a80c:	69b3      	ldr	r3, [r6, #24]
 800a80e:	b913      	cbnz	r3, 800a816 <__sfp+0x16>
 800a810:	4630      	mov	r0, r6
 800a812:	f7ff ffbd 	bl	800a790 <__sinit>
 800a816:	3648      	adds	r6, #72	; 0x48
 800a818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	d503      	bpl.n	800a828 <__sfp+0x28>
 800a820:	6833      	ldr	r3, [r6, #0]
 800a822:	b30b      	cbz	r3, 800a868 <__sfp+0x68>
 800a824:	6836      	ldr	r6, [r6, #0]
 800a826:	e7f7      	b.n	800a818 <__sfp+0x18>
 800a828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a82c:	b9d5      	cbnz	r5, 800a864 <__sfp+0x64>
 800a82e:	4b16      	ldr	r3, [pc, #88]	; (800a888 <__sfp+0x88>)
 800a830:	60e3      	str	r3, [r4, #12]
 800a832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a836:	6665      	str	r5, [r4, #100]	; 0x64
 800a838:	f000 f8a4 	bl	800a984 <__retarget_lock_init_recursive>
 800a83c:	f7ff ff96 	bl	800a76c <__sfp_lock_release>
 800a840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a848:	6025      	str	r5, [r4, #0]
 800a84a:	61a5      	str	r5, [r4, #24]
 800a84c:	2208      	movs	r2, #8
 800a84e:	4629      	mov	r1, r5
 800a850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a854:	f7ff fc16 	bl	800a084 <memset>
 800a858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a85c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a860:	4620      	mov	r0, r4
 800a862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a864:	3468      	adds	r4, #104	; 0x68
 800a866:	e7d9      	b.n	800a81c <__sfp+0x1c>
 800a868:	2104      	movs	r1, #4
 800a86a:	4638      	mov	r0, r7
 800a86c:	f7ff ff62 	bl	800a734 <__sfmoreglue>
 800a870:	4604      	mov	r4, r0
 800a872:	6030      	str	r0, [r6, #0]
 800a874:	2800      	cmp	r0, #0
 800a876:	d1d5      	bne.n	800a824 <__sfp+0x24>
 800a878:	f7ff ff78 	bl	800a76c <__sfp_lock_release>
 800a87c:	230c      	movs	r3, #12
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	e7ee      	b.n	800a860 <__sfp+0x60>
 800a882:	bf00      	nop
 800a884:	0800b9b4 	.word	0x0800b9b4
 800a888:	ffff0001 	.word	0xffff0001

0800a88c <_fwalk>:
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	460f      	mov	r7, r1
 800a892:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a896:	2600      	movs	r6, #0
 800a898:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800a89c:	f1b8 0801 	subs.w	r8, r8, #1
 800a8a0:	d505      	bpl.n	800a8ae <_fwalk+0x22>
 800a8a2:	6824      	ldr	r4, [r4, #0]
 800a8a4:	2c00      	cmp	r4, #0
 800a8a6:	d1f7      	bne.n	800a898 <_fwalk+0xc>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d906      	bls.n	800a8c2 <_fwalk+0x36>
 800a8b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	d002      	beq.n	800a8c2 <_fwalk+0x36>
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	4306      	orrs	r6, r0
 800a8c2:	3568      	adds	r5, #104	; 0x68
 800a8c4:	e7ea      	b.n	800a89c <_fwalk+0x10>

0800a8c6 <_fwalk_reent>:
 800a8c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	4688      	mov	r8, r1
 800a8ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8d2:	2700      	movs	r7, #0
 800a8d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8d8:	f1b9 0901 	subs.w	r9, r9, #1
 800a8dc:	d505      	bpl.n	800a8ea <_fwalk_reent+0x24>
 800a8de:	6824      	ldr	r4, [r4, #0]
 800a8e0:	2c00      	cmp	r4, #0
 800a8e2:	d1f7      	bne.n	800a8d4 <_fwalk_reent+0xe>
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d907      	bls.n	800a900 <_fwalk_reent+0x3a>
 800a8f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	d003      	beq.n	800a900 <_fwalk_reent+0x3a>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	47c0      	blx	r8
 800a8fe:	4307      	orrs	r7, r0
 800a900:	3568      	adds	r5, #104	; 0x68
 800a902:	e7e9      	b.n	800a8d8 <_fwalk_reent+0x12>

0800a904 <_getc_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	4605      	mov	r5, r0
 800a90a:	b118      	cbz	r0, 800a914 <_getc_r+0x10>
 800a90c:	6983      	ldr	r3, [r0, #24]
 800a90e:	b90b      	cbnz	r3, 800a914 <_getc_r+0x10>
 800a910:	f7ff ff3e 	bl	800a790 <__sinit>
 800a914:	4b18      	ldr	r3, [pc, #96]	; (800a978 <_getc_r+0x74>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d11e      	bne.n	800a958 <_getc_r+0x54>
 800a91a:	686c      	ldr	r4, [r5, #4]
 800a91c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a91e:	07d8      	lsls	r0, r3, #31
 800a920:	d405      	bmi.n	800a92e <_getc_r+0x2a>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	0599      	lsls	r1, r3, #22
 800a926:	d402      	bmi.n	800a92e <_getc_r+0x2a>
 800a928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a92a:	f000 f82c 	bl	800a986 <__retarget_lock_acquire_recursive>
 800a92e:	6863      	ldr	r3, [r4, #4]
 800a930:	3b01      	subs	r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	6063      	str	r3, [r4, #4]
 800a936:	da19      	bge.n	800a96c <_getc_r+0x68>
 800a938:	4628      	mov	r0, r5
 800a93a:	4621      	mov	r1, r4
 800a93c:	f000 fca8 	bl	800b290 <__srget_r>
 800a940:	4605      	mov	r5, r0
 800a942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a944:	07da      	lsls	r2, r3, #31
 800a946:	d405      	bmi.n	800a954 <_getc_r+0x50>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	059b      	lsls	r3, r3, #22
 800a94c:	d402      	bmi.n	800a954 <_getc_r+0x50>
 800a94e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a950:	f000 f81a 	bl	800a988 <__retarget_lock_release_recursive>
 800a954:	4628      	mov	r0, r5
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	4b08      	ldr	r3, [pc, #32]	; (800a97c <_getc_r+0x78>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d101      	bne.n	800a962 <_getc_r+0x5e>
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	e7dc      	b.n	800a91c <_getc_r+0x18>
 800a962:	4b07      	ldr	r3, [pc, #28]	; (800a980 <_getc_r+0x7c>)
 800a964:	429c      	cmp	r4, r3
 800a966:	bf08      	it	eq
 800a968:	68ec      	ldreq	r4, [r5, #12]
 800a96a:	e7d7      	b.n	800a91c <_getc_r+0x18>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	6022      	str	r2, [r4, #0]
 800a972:	781d      	ldrb	r5, [r3, #0]
 800a974:	e7e5      	b.n	800a942 <_getc_r+0x3e>
 800a976:	bf00      	nop
 800a978:	0800b9d8 	.word	0x0800b9d8
 800a97c:	0800b9f8 	.word	0x0800b9f8
 800a980:	0800b9b8 	.word	0x0800b9b8

0800a984 <__retarget_lock_init_recursive>:
 800a984:	4770      	bx	lr

0800a986 <__retarget_lock_acquire_recursive>:
 800a986:	4770      	bx	lr

0800a988 <__retarget_lock_release_recursive>:
 800a988:	4770      	bx	lr

0800a98a <__swhatbuf_r>:
 800a98a:	b570      	push	{r4, r5, r6, lr}
 800a98c:	460e      	mov	r6, r1
 800a98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a992:	2900      	cmp	r1, #0
 800a994:	b096      	sub	sp, #88	; 0x58
 800a996:	4614      	mov	r4, r2
 800a998:	461d      	mov	r5, r3
 800a99a:	da08      	bge.n	800a9ae <__swhatbuf_r+0x24>
 800a99c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	602a      	str	r2, [r5, #0]
 800a9a4:	061a      	lsls	r2, r3, #24
 800a9a6:	d410      	bmi.n	800a9ca <__swhatbuf_r+0x40>
 800a9a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ac:	e00e      	b.n	800a9cc <__swhatbuf_r+0x42>
 800a9ae:	466a      	mov	r2, sp
 800a9b0:	f000 fd10 	bl	800b3d4 <_fstat_r>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	dbf1      	blt.n	800a99c <__swhatbuf_r+0x12>
 800a9b8:	9a01      	ldr	r2, [sp, #4]
 800a9ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9c2:	425a      	negs	r2, r3
 800a9c4:	415a      	adcs	r2, r3
 800a9c6:	602a      	str	r2, [r5, #0]
 800a9c8:	e7ee      	b.n	800a9a8 <__swhatbuf_r+0x1e>
 800a9ca:	2340      	movs	r3, #64	; 0x40
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	6023      	str	r3, [r4, #0]
 800a9d0:	b016      	add	sp, #88	; 0x58
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}

0800a9d4 <__smakebuf_r>:
 800a9d4:	898b      	ldrh	r3, [r1, #12]
 800a9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9d8:	079d      	lsls	r5, r3, #30
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	d507      	bpl.n	800a9f0 <__smakebuf_r+0x1c>
 800a9e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	6123      	str	r3, [r4, #16]
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	6163      	str	r3, [r4, #20]
 800a9ec:	b002      	add	sp, #8
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	ab01      	add	r3, sp, #4
 800a9f2:	466a      	mov	r2, sp
 800a9f4:	f7ff ffc9 	bl	800a98a <__swhatbuf_r>
 800a9f8:	9900      	ldr	r1, [sp, #0]
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f89d 	bl	800ab3c <_malloc_r>
 800aa02:	b948      	cbnz	r0, 800aa18 <__smakebuf_r+0x44>
 800aa04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa08:	059a      	lsls	r2, r3, #22
 800aa0a:	d4ef      	bmi.n	800a9ec <__smakebuf_r+0x18>
 800aa0c:	f023 0303 	bic.w	r3, r3, #3
 800aa10:	f043 0302 	orr.w	r3, r3, #2
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	e7e3      	b.n	800a9e0 <__smakebuf_r+0xc>
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <__smakebuf_r+0x7c>)
 800aa1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	6020      	str	r0, [r4, #0]
 800aa20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	6163      	str	r3, [r4, #20]
 800aa2a:	9b01      	ldr	r3, [sp, #4]
 800aa2c:	6120      	str	r0, [r4, #16]
 800aa2e:	b15b      	cbz	r3, 800aa48 <__smakebuf_r+0x74>
 800aa30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 fcdf 	bl	800b3f8 <_isatty_r>
 800aa3a:	b128      	cbz	r0, 800aa48 <__smakebuf_r+0x74>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	89a0      	ldrh	r0, [r4, #12]
 800aa4a:	4305      	orrs	r5, r0
 800aa4c:	81a5      	strh	r5, [r4, #12]
 800aa4e:	e7cd      	b.n	800a9ec <__smakebuf_r+0x18>
 800aa50:	0800a729 	.word	0x0800a729

0800aa54 <malloc>:
 800aa54:	4b02      	ldr	r3, [pc, #8]	; (800aa60 <malloc+0xc>)
 800aa56:	4601      	mov	r1, r0
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	f000 b86f 	b.w	800ab3c <_malloc_r>
 800aa5e:	bf00      	nop
 800aa60:	20000030 	.word	0x20000030

0800aa64 <_free_r>:
 800aa64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa66:	2900      	cmp	r1, #0
 800aa68:	d044      	beq.n	800aaf4 <_free_r+0x90>
 800aa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f1a1 0404 	sub.w	r4, r1, #4
 800aa76:	bfb8      	it	lt
 800aa78:	18e4      	addlt	r4, r4, r3
 800aa7a:	f000 fcdf 	bl	800b43c <__malloc_lock>
 800aa7e:	4a1e      	ldr	r2, [pc, #120]	; (800aaf8 <_free_r+0x94>)
 800aa80:	9801      	ldr	r0, [sp, #4]
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	b933      	cbnz	r3, 800aa94 <_free_r+0x30>
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	6014      	str	r4, [r2, #0]
 800aa8a:	b003      	add	sp, #12
 800aa8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa90:	f000 bcda 	b.w	800b448 <__malloc_unlock>
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d908      	bls.n	800aaaa <_free_r+0x46>
 800aa98:	6825      	ldr	r5, [r4, #0]
 800aa9a:	1961      	adds	r1, r4, r5
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	bf01      	itttt	eq
 800aaa0:	6819      	ldreq	r1, [r3, #0]
 800aaa2:	685b      	ldreq	r3, [r3, #4]
 800aaa4:	1949      	addeq	r1, r1, r5
 800aaa6:	6021      	streq	r1, [r4, #0]
 800aaa8:	e7ed      	b.n	800aa86 <_free_r+0x22>
 800aaaa:	461a      	mov	r2, r3
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	b10b      	cbz	r3, 800aab4 <_free_r+0x50>
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d9fa      	bls.n	800aaaa <_free_r+0x46>
 800aab4:	6811      	ldr	r1, [r2, #0]
 800aab6:	1855      	adds	r5, r2, r1
 800aab8:	42a5      	cmp	r5, r4
 800aaba:	d10b      	bne.n	800aad4 <_free_r+0x70>
 800aabc:	6824      	ldr	r4, [r4, #0]
 800aabe:	4421      	add	r1, r4
 800aac0:	1854      	adds	r4, r2, r1
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	6011      	str	r1, [r2, #0]
 800aac6:	d1e0      	bne.n	800aa8a <_free_r+0x26>
 800aac8:	681c      	ldr	r4, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	6053      	str	r3, [r2, #4]
 800aace:	4421      	add	r1, r4
 800aad0:	6011      	str	r1, [r2, #0]
 800aad2:	e7da      	b.n	800aa8a <_free_r+0x26>
 800aad4:	d902      	bls.n	800aadc <_free_r+0x78>
 800aad6:	230c      	movs	r3, #12
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	e7d6      	b.n	800aa8a <_free_r+0x26>
 800aadc:	6825      	ldr	r5, [r4, #0]
 800aade:	1961      	adds	r1, r4, r5
 800aae0:	428b      	cmp	r3, r1
 800aae2:	bf04      	itt	eq
 800aae4:	6819      	ldreq	r1, [r3, #0]
 800aae6:	685b      	ldreq	r3, [r3, #4]
 800aae8:	6063      	str	r3, [r4, #4]
 800aaea:	bf04      	itt	eq
 800aaec:	1949      	addeq	r1, r1, r5
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	6054      	str	r4, [r2, #4]
 800aaf2:	e7ca      	b.n	800aa8a <_free_r+0x26>
 800aaf4:	b003      	add	sp, #12
 800aaf6:	bd30      	pop	{r4, r5, pc}
 800aaf8:	20004cc8 	.word	0x20004cc8

0800aafc <sbrk_aligned>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4e0e      	ldr	r6, [pc, #56]	; (800ab38 <sbrk_aligned+0x3c>)
 800ab00:	460c      	mov	r4, r1
 800ab02:	6831      	ldr	r1, [r6, #0]
 800ab04:	4605      	mov	r5, r0
 800ab06:	b911      	cbnz	r1, 800ab0e <sbrk_aligned+0x12>
 800ab08:	f000 fbee 	bl	800b2e8 <_sbrk_r>
 800ab0c:	6030      	str	r0, [r6, #0]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4628      	mov	r0, r5
 800ab12:	f000 fbe9 	bl	800b2e8 <_sbrk_r>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d00a      	beq.n	800ab30 <sbrk_aligned+0x34>
 800ab1a:	1cc4      	adds	r4, r0, #3
 800ab1c:	f024 0403 	bic.w	r4, r4, #3
 800ab20:	42a0      	cmp	r0, r4
 800ab22:	d007      	beq.n	800ab34 <sbrk_aligned+0x38>
 800ab24:	1a21      	subs	r1, r4, r0
 800ab26:	4628      	mov	r0, r5
 800ab28:	f000 fbde 	bl	800b2e8 <_sbrk_r>
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d101      	bne.n	800ab34 <sbrk_aligned+0x38>
 800ab30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab34:	4620      	mov	r0, r4
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	20004ccc 	.word	0x20004ccc

0800ab3c <_malloc_r>:
 800ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab40:	1ccd      	adds	r5, r1, #3
 800ab42:	f025 0503 	bic.w	r5, r5, #3
 800ab46:	3508      	adds	r5, #8
 800ab48:	2d0c      	cmp	r5, #12
 800ab4a:	bf38      	it	cc
 800ab4c:	250c      	movcc	r5, #12
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	4607      	mov	r7, r0
 800ab52:	db01      	blt.n	800ab58 <_malloc_r+0x1c>
 800ab54:	42a9      	cmp	r1, r5
 800ab56:	d905      	bls.n	800ab64 <_malloc_r+0x28>
 800ab58:	230c      	movs	r3, #12
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	2600      	movs	r6, #0
 800ab5e:	4630      	mov	r0, r6
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	4e2e      	ldr	r6, [pc, #184]	; (800ac20 <_malloc_r+0xe4>)
 800ab66:	f000 fc69 	bl	800b43c <__malloc_lock>
 800ab6a:	6833      	ldr	r3, [r6, #0]
 800ab6c:	461c      	mov	r4, r3
 800ab6e:	bb34      	cbnz	r4, 800abbe <_malloc_r+0x82>
 800ab70:	4629      	mov	r1, r5
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7ff ffc2 	bl	800aafc <sbrk_aligned>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	d14d      	bne.n	800ac1a <_malloc_r+0xde>
 800ab7e:	6834      	ldr	r4, [r6, #0]
 800ab80:	4626      	mov	r6, r4
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	d140      	bne.n	800ac08 <_malloc_r+0xcc>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	eb04 0803 	add.w	r8, r4, r3
 800ab90:	f000 fbaa 	bl	800b2e8 <_sbrk_r>
 800ab94:	4580      	cmp	r8, r0
 800ab96:	d13a      	bne.n	800ac0e <_malloc_r+0xd2>
 800ab98:	6821      	ldr	r1, [r4, #0]
 800ab9a:	3503      	adds	r5, #3
 800ab9c:	1a6d      	subs	r5, r5, r1
 800ab9e:	f025 0503 	bic.w	r5, r5, #3
 800aba2:	3508      	adds	r5, #8
 800aba4:	2d0c      	cmp	r5, #12
 800aba6:	bf38      	it	cc
 800aba8:	250c      	movcc	r5, #12
 800abaa:	4629      	mov	r1, r5
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff ffa5 	bl	800aafc <sbrk_aligned>
 800abb2:	3001      	adds	r0, #1
 800abb4:	d02b      	beq.n	800ac0e <_malloc_r+0xd2>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	442b      	add	r3, r5
 800abba:	6023      	str	r3, [r4, #0]
 800abbc:	e00e      	b.n	800abdc <_malloc_r+0xa0>
 800abbe:	6822      	ldr	r2, [r4, #0]
 800abc0:	1b52      	subs	r2, r2, r5
 800abc2:	d41e      	bmi.n	800ac02 <_malloc_r+0xc6>
 800abc4:	2a0b      	cmp	r2, #11
 800abc6:	d916      	bls.n	800abf6 <_malloc_r+0xba>
 800abc8:	1961      	adds	r1, r4, r5
 800abca:	42a3      	cmp	r3, r4
 800abcc:	6025      	str	r5, [r4, #0]
 800abce:	bf18      	it	ne
 800abd0:	6059      	strne	r1, [r3, #4]
 800abd2:	6863      	ldr	r3, [r4, #4]
 800abd4:	bf08      	it	eq
 800abd6:	6031      	streq	r1, [r6, #0]
 800abd8:	5162      	str	r2, [r4, r5]
 800abda:	604b      	str	r3, [r1, #4]
 800abdc:	4638      	mov	r0, r7
 800abde:	f104 060b 	add.w	r6, r4, #11
 800abe2:	f000 fc31 	bl	800b448 <__malloc_unlock>
 800abe6:	f026 0607 	bic.w	r6, r6, #7
 800abea:	1d23      	adds	r3, r4, #4
 800abec:	1af2      	subs	r2, r6, r3
 800abee:	d0b6      	beq.n	800ab5e <_malloc_r+0x22>
 800abf0:	1b9b      	subs	r3, r3, r6
 800abf2:	50a3      	str	r3, [r4, r2]
 800abf4:	e7b3      	b.n	800ab5e <_malloc_r+0x22>
 800abf6:	6862      	ldr	r2, [r4, #4]
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	bf0c      	ite	eq
 800abfc:	6032      	streq	r2, [r6, #0]
 800abfe:	605a      	strne	r2, [r3, #4]
 800ac00:	e7ec      	b.n	800abdc <_malloc_r+0xa0>
 800ac02:	4623      	mov	r3, r4
 800ac04:	6864      	ldr	r4, [r4, #4]
 800ac06:	e7b2      	b.n	800ab6e <_malloc_r+0x32>
 800ac08:	4634      	mov	r4, r6
 800ac0a:	6876      	ldr	r6, [r6, #4]
 800ac0c:	e7b9      	b.n	800ab82 <_malloc_r+0x46>
 800ac0e:	230c      	movs	r3, #12
 800ac10:	603b      	str	r3, [r7, #0]
 800ac12:	4638      	mov	r0, r7
 800ac14:	f000 fc18 	bl	800b448 <__malloc_unlock>
 800ac18:	e7a1      	b.n	800ab5e <_malloc_r+0x22>
 800ac1a:	6025      	str	r5, [r4, #0]
 800ac1c:	e7de      	b.n	800abdc <_malloc_r+0xa0>
 800ac1e:	bf00      	nop
 800ac20:	20004cc8 	.word	0x20004cc8

0800ac24 <__sfputc_r>:
 800ac24:	6893      	ldr	r3, [r2, #8]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	b410      	push	{r4}
 800ac2c:	6093      	str	r3, [r2, #8]
 800ac2e:	da08      	bge.n	800ac42 <__sfputc_r+0x1e>
 800ac30:	6994      	ldr	r4, [r2, #24]
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	db01      	blt.n	800ac3a <__sfputc_r+0x16>
 800ac36:	290a      	cmp	r1, #10
 800ac38:	d103      	bne.n	800ac42 <__sfputc_r+0x1e>
 800ac3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac3e:	f7ff bbbb 	b.w	800a3b8 <__swbuf_r>
 800ac42:	6813      	ldr	r3, [r2, #0]
 800ac44:	1c58      	adds	r0, r3, #1
 800ac46:	6010      	str	r0, [r2, #0]
 800ac48:	7019      	strb	r1, [r3, #0]
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <__sfputs_r>:
 800ac52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac54:	4606      	mov	r6, r0
 800ac56:	460f      	mov	r7, r1
 800ac58:	4614      	mov	r4, r2
 800ac5a:	18d5      	adds	r5, r2, r3
 800ac5c:	42ac      	cmp	r4, r5
 800ac5e:	d101      	bne.n	800ac64 <__sfputs_r+0x12>
 800ac60:	2000      	movs	r0, #0
 800ac62:	e007      	b.n	800ac74 <__sfputs_r+0x22>
 800ac64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac68:	463a      	mov	r2, r7
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ffda 	bl	800ac24 <__sfputc_r>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	d1f3      	bne.n	800ac5c <__sfputs_r+0xa>
 800ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac78 <_vfiprintf_r>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	460d      	mov	r5, r1
 800ac7e:	b09d      	sub	sp, #116	; 0x74
 800ac80:	4614      	mov	r4, r2
 800ac82:	4698      	mov	r8, r3
 800ac84:	4606      	mov	r6, r0
 800ac86:	b118      	cbz	r0, 800ac90 <_vfiprintf_r+0x18>
 800ac88:	6983      	ldr	r3, [r0, #24]
 800ac8a:	b90b      	cbnz	r3, 800ac90 <_vfiprintf_r+0x18>
 800ac8c:	f7ff fd80 	bl	800a790 <__sinit>
 800ac90:	4b89      	ldr	r3, [pc, #548]	; (800aeb8 <_vfiprintf_r+0x240>)
 800ac92:	429d      	cmp	r5, r3
 800ac94:	d11b      	bne.n	800acce <_vfiprintf_r+0x56>
 800ac96:	6875      	ldr	r5, [r6, #4]
 800ac98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac9a:	07d9      	lsls	r1, r3, #31
 800ac9c:	d405      	bmi.n	800acaa <_vfiprintf_r+0x32>
 800ac9e:	89ab      	ldrh	r3, [r5, #12]
 800aca0:	059a      	lsls	r2, r3, #22
 800aca2:	d402      	bmi.n	800acaa <_vfiprintf_r+0x32>
 800aca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aca6:	f7ff fe6e 	bl	800a986 <__retarget_lock_acquire_recursive>
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	071b      	lsls	r3, r3, #28
 800acae:	d501      	bpl.n	800acb4 <_vfiprintf_r+0x3c>
 800acb0:	692b      	ldr	r3, [r5, #16]
 800acb2:	b9eb      	cbnz	r3, 800acf0 <_vfiprintf_r+0x78>
 800acb4:	4629      	mov	r1, r5
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff fbd0 	bl	800a45c <__swsetup_r>
 800acbc:	b1c0      	cbz	r0, 800acf0 <_vfiprintf_r+0x78>
 800acbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acc0:	07dc      	lsls	r4, r3, #31
 800acc2:	d50e      	bpl.n	800ace2 <_vfiprintf_r+0x6a>
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acc8:	b01d      	add	sp, #116	; 0x74
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	4b7b      	ldr	r3, [pc, #492]	; (800aebc <_vfiprintf_r+0x244>)
 800acd0:	429d      	cmp	r5, r3
 800acd2:	d101      	bne.n	800acd8 <_vfiprintf_r+0x60>
 800acd4:	68b5      	ldr	r5, [r6, #8]
 800acd6:	e7df      	b.n	800ac98 <_vfiprintf_r+0x20>
 800acd8:	4b79      	ldr	r3, [pc, #484]	; (800aec0 <_vfiprintf_r+0x248>)
 800acda:	429d      	cmp	r5, r3
 800acdc:	bf08      	it	eq
 800acde:	68f5      	ldreq	r5, [r6, #12]
 800ace0:	e7da      	b.n	800ac98 <_vfiprintf_r+0x20>
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	0598      	lsls	r0, r3, #22
 800ace6:	d4ed      	bmi.n	800acc4 <_vfiprintf_r+0x4c>
 800ace8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acea:	f7ff fe4d 	bl	800a988 <__retarget_lock_release_recursive>
 800acee:	e7e9      	b.n	800acc4 <_vfiprintf_r+0x4c>
 800acf0:	2300      	movs	r3, #0
 800acf2:	9309      	str	r3, [sp, #36]	; 0x24
 800acf4:	2320      	movs	r3, #32
 800acf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800acfe:	2330      	movs	r3, #48	; 0x30
 800ad00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aec4 <_vfiprintf_r+0x24c>
 800ad04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad08:	f04f 0901 	mov.w	r9, #1
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	469a      	mov	sl, r3
 800ad10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad14:	b10a      	cbz	r2, 800ad1a <_vfiprintf_r+0xa2>
 800ad16:	2a25      	cmp	r2, #37	; 0x25
 800ad18:	d1f9      	bne.n	800ad0e <_vfiprintf_r+0x96>
 800ad1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad1e:	d00b      	beq.n	800ad38 <_vfiprintf_r+0xc0>
 800ad20:	465b      	mov	r3, fp
 800ad22:	4622      	mov	r2, r4
 800ad24:	4629      	mov	r1, r5
 800ad26:	4630      	mov	r0, r6
 800ad28:	f7ff ff93 	bl	800ac52 <__sfputs_r>
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f000 80aa 	beq.w	800ae86 <_vfiprintf_r+0x20e>
 800ad32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad34:	445a      	add	r2, fp
 800ad36:	9209      	str	r2, [sp, #36]	; 0x24
 800ad38:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 80a2 	beq.w	800ae86 <_vfiprintf_r+0x20e>
 800ad42:	2300      	movs	r3, #0
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad4c:	f10a 0a01 	add.w	sl, sl, #1
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	9307      	str	r3, [sp, #28]
 800ad54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad58:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5a:	4654      	mov	r4, sl
 800ad5c:	2205      	movs	r2, #5
 800ad5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad62:	4858      	ldr	r0, [pc, #352]	; (800aec4 <_vfiprintf_r+0x24c>)
 800ad64:	f7f5 fa5c 	bl	8000220 <memchr>
 800ad68:	9a04      	ldr	r2, [sp, #16]
 800ad6a:	b9d8      	cbnz	r0, 800ada4 <_vfiprintf_r+0x12c>
 800ad6c:	06d1      	lsls	r1, r2, #27
 800ad6e:	bf44      	itt	mi
 800ad70:	2320      	movmi	r3, #32
 800ad72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad76:	0713      	lsls	r3, r2, #28
 800ad78:	bf44      	itt	mi
 800ad7a:	232b      	movmi	r3, #43	; 0x2b
 800ad7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad80:	f89a 3000 	ldrb.w	r3, [sl]
 800ad84:	2b2a      	cmp	r3, #42	; 0x2a
 800ad86:	d015      	beq.n	800adb4 <_vfiprintf_r+0x13c>
 800ad88:	9a07      	ldr	r2, [sp, #28]
 800ad8a:	4654      	mov	r4, sl
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f04f 0c0a 	mov.w	ip, #10
 800ad92:	4621      	mov	r1, r4
 800ad94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad98:	3b30      	subs	r3, #48	; 0x30
 800ad9a:	2b09      	cmp	r3, #9
 800ad9c:	d94e      	bls.n	800ae3c <_vfiprintf_r+0x1c4>
 800ad9e:	b1b0      	cbz	r0, 800adce <_vfiprintf_r+0x156>
 800ada0:	9207      	str	r2, [sp, #28]
 800ada2:	e014      	b.n	800adce <_vfiprintf_r+0x156>
 800ada4:	eba0 0308 	sub.w	r3, r0, r8
 800ada8:	fa09 f303 	lsl.w	r3, r9, r3
 800adac:	4313      	orrs	r3, r2
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	46a2      	mov	sl, r4
 800adb2:	e7d2      	b.n	800ad5a <_vfiprintf_r+0xe2>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	1d19      	adds	r1, r3, #4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	9103      	str	r1, [sp, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bfbb      	ittet	lt
 800adc0:	425b      	neglt	r3, r3
 800adc2:	f042 0202 	orrlt.w	r2, r2, #2
 800adc6:	9307      	strge	r3, [sp, #28]
 800adc8:	9307      	strlt	r3, [sp, #28]
 800adca:	bfb8      	it	lt
 800adcc:	9204      	strlt	r2, [sp, #16]
 800adce:	7823      	ldrb	r3, [r4, #0]
 800add0:	2b2e      	cmp	r3, #46	; 0x2e
 800add2:	d10c      	bne.n	800adee <_vfiprintf_r+0x176>
 800add4:	7863      	ldrb	r3, [r4, #1]
 800add6:	2b2a      	cmp	r3, #42	; 0x2a
 800add8:	d135      	bne.n	800ae46 <_vfiprintf_r+0x1ce>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	1d1a      	adds	r2, r3, #4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	9203      	str	r2, [sp, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfb8      	it	lt
 800ade6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800adea:	3402      	adds	r4, #2
 800adec:	9305      	str	r3, [sp, #20]
 800adee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aed4 <_vfiprintf_r+0x25c>
 800adf2:	7821      	ldrb	r1, [r4, #0]
 800adf4:	2203      	movs	r2, #3
 800adf6:	4650      	mov	r0, sl
 800adf8:	f7f5 fa12 	bl	8000220 <memchr>
 800adfc:	b140      	cbz	r0, 800ae10 <_vfiprintf_r+0x198>
 800adfe:	2340      	movs	r3, #64	; 0x40
 800ae00:	eba0 000a 	sub.w	r0, r0, sl
 800ae04:	fa03 f000 	lsl.w	r0, r3, r0
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	4303      	orrs	r3, r0
 800ae0c:	3401      	adds	r4, #1
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae14:	482c      	ldr	r0, [pc, #176]	; (800aec8 <_vfiprintf_r+0x250>)
 800ae16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae1a:	2206      	movs	r2, #6
 800ae1c:	f7f5 fa00 	bl	8000220 <memchr>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d03f      	beq.n	800aea4 <_vfiprintf_r+0x22c>
 800ae24:	4b29      	ldr	r3, [pc, #164]	; (800aecc <_vfiprintf_r+0x254>)
 800ae26:	bb1b      	cbnz	r3, 800ae70 <_vfiprintf_r+0x1f8>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	3307      	adds	r3, #7
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	3308      	adds	r3, #8
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae36:	443b      	add	r3, r7
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3a:	e767      	b.n	800ad0c <_vfiprintf_r+0x94>
 800ae3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae40:	460c      	mov	r4, r1
 800ae42:	2001      	movs	r0, #1
 800ae44:	e7a5      	b.n	800ad92 <_vfiprintf_r+0x11a>
 800ae46:	2300      	movs	r3, #0
 800ae48:	3401      	adds	r4, #1
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	f04f 0c0a 	mov.w	ip, #10
 800ae52:	4620      	mov	r0, r4
 800ae54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae58:	3a30      	subs	r2, #48	; 0x30
 800ae5a:	2a09      	cmp	r2, #9
 800ae5c:	d903      	bls.n	800ae66 <_vfiprintf_r+0x1ee>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0c5      	beq.n	800adee <_vfiprintf_r+0x176>
 800ae62:	9105      	str	r1, [sp, #20]
 800ae64:	e7c3      	b.n	800adee <_vfiprintf_r+0x176>
 800ae66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e7f0      	b.n	800ae52 <_vfiprintf_r+0x1da>
 800ae70:	ab03      	add	r3, sp, #12
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	462a      	mov	r2, r5
 800ae76:	4b16      	ldr	r3, [pc, #88]	; (800aed0 <_vfiprintf_r+0x258>)
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f3af 8000 	nop.w
 800ae80:	4607      	mov	r7, r0
 800ae82:	1c78      	adds	r0, r7, #1
 800ae84:	d1d6      	bne.n	800ae34 <_vfiprintf_r+0x1bc>
 800ae86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae88:	07d9      	lsls	r1, r3, #31
 800ae8a:	d405      	bmi.n	800ae98 <_vfiprintf_r+0x220>
 800ae8c:	89ab      	ldrh	r3, [r5, #12]
 800ae8e:	059a      	lsls	r2, r3, #22
 800ae90:	d402      	bmi.n	800ae98 <_vfiprintf_r+0x220>
 800ae92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae94:	f7ff fd78 	bl	800a988 <__retarget_lock_release_recursive>
 800ae98:	89ab      	ldrh	r3, [r5, #12]
 800ae9a:	065b      	lsls	r3, r3, #25
 800ae9c:	f53f af12 	bmi.w	800acc4 <_vfiprintf_r+0x4c>
 800aea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea2:	e711      	b.n	800acc8 <_vfiprintf_r+0x50>
 800aea4:	ab03      	add	r3, sp, #12
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	462a      	mov	r2, r5
 800aeaa:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <_vfiprintf_r+0x258>)
 800aeac:	a904      	add	r1, sp, #16
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f000 f880 	bl	800afb4 <_printf_i>
 800aeb4:	e7e4      	b.n	800ae80 <_vfiprintf_r+0x208>
 800aeb6:	bf00      	nop
 800aeb8:	0800b9d8 	.word	0x0800b9d8
 800aebc:	0800b9f8 	.word	0x0800b9f8
 800aec0:	0800b9b8 	.word	0x0800b9b8
 800aec4:	0800ba18 	.word	0x0800ba18
 800aec8:	0800ba22 	.word	0x0800ba22
 800aecc:	00000000 	.word	0x00000000
 800aed0:	0800ac53 	.word	0x0800ac53
 800aed4:	0800ba1e 	.word	0x0800ba1e

0800aed8 <_printf_common>:
 800aed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	4616      	mov	r6, r2
 800aede:	4699      	mov	r9, r3
 800aee0:	688a      	ldr	r2, [r1, #8]
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aee8:	4293      	cmp	r3, r2
 800aeea:	bfb8      	it	lt
 800aeec:	4613      	movlt	r3, r2
 800aeee:	6033      	str	r3, [r6, #0]
 800aef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aef4:	4607      	mov	r7, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	b10a      	cbz	r2, 800aefe <_printf_common+0x26>
 800aefa:	3301      	adds	r3, #1
 800aefc:	6033      	str	r3, [r6, #0]
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	0699      	lsls	r1, r3, #26
 800af02:	bf42      	ittt	mi
 800af04:	6833      	ldrmi	r3, [r6, #0]
 800af06:	3302      	addmi	r3, #2
 800af08:	6033      	strmi	r3, [r6, #0]
 800af0a:	6825      	ldr	r5, [r4, #0]
 800af0c:	f015 0506 	ands.w	r5, r5, #6
 800af10:	d106      	bne.n	800af20 <_printf_common+0x48>
 800af12:	f104 0a19 	add.w	sl, r4, #25
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	6832      	ldr	r2, [r6, #0]
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dc26      	bgt.n	800af6e <_printf_common+0x96>
 800af20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af24:	1e13      	subs	r3, r2, #0
 800af26:	6822      	ldr	r2, [r4, #0]
 800af28:	bf18      	it	ne
 800af2a:	2301      	movne	r3, #1
 800af2c:	0692      	lsls	r2, r2, #26
 800af2e:	d42b      	bmi.n	800af88 <_printf_common+0xb0>
 800af30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af34:	4649      	mov	r1, r9
 800af36:	4638      	mov	r0, r7
 800af38:	47c0      	blx	r8
 800af3a:	3001      	adds	r0, #1
 800af3c:	d01e      	beq.n	800af7c <_printf_common+0xa4>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	68e5      	ldr	r5, [r4, #12]
 800af42:	6832      	ldr	r2, [r6, #0]
 800af44:	f003 0306 	and.w	r3, r3, #6
 800af48:	2b04      	cmp	r3, #4
 800af4a:	bf08      	it	eq
 800af4c:	1aad      	subeq	r5, r5, r2
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	6922      	ldr	r2, [r4, #16]
 800af52:	bf0c      	ite	eq
 800af54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af58:	2500      	movne	r5, #0
 800af5a:	4293      	cmp	r3, r2
 800af5c:	bfc4      	itt	gt
 800af5e:	1a9b      	subgt	r3, r3, r2
 800af60:	18ed      	addgt	r5, r5, r3
 800af62:	2600      	movs	r6, #0
 800af64:	341a      	adds	r4, #26
 800af66:	42b5      	cmp	r5, r6
 800af68:	d11a      	bne.n	800afa0 <_printf_common+0xc8>
 800af6a:	2000      	movs	r0, #0
 800af6c:	e008      	b.n	800af80 <_printf_common+0xa8>
 800af6e:	2301      	movs	r3, #1
 800af70:	4652      	mov	r2, sl
 800af72:	4649      	mov	r1, r9
 800af74:	4638      	mov	r0, r7
 800af76:	47c0      	blx	r8
 800af78:	3001      	adds	r0, #1
 800af7a:	d103      	bne.n	800af84 <_printf_common+0xac>
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af84:	3501      	adds	r5, #1
 800af86:	e7c6      	b.n	800af16 <_printf_common+0x3e>
 800af88:	18e1      	adds	r1, r4, r3
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	2030      	movs	r0, #48	; 0x30
 800af8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af92:	4422      	add	r2, r4
 800af94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af9c:	3302      	adds	r3, #2
 800af9e:	e7c7      	b.n	800af30 <_printf_common+0x58>
 800afa0:	2301      	movs	r3, #1
 800afa2:	4622      	mov	r2, r4
 800afa4:	4649      	mov	r1, r9
 800afa6:	4638      	mov	r0, r7
 800afa8:	47c0      	blx	r8
 800afaa:	3001      	adds	r0, #1
 800afac:	d0e6      	beq.n	800af7c <_printf_common+0xa4>
 800afae:	3601      	adds	r6, #1
 800afb0:	e7d9      	b.n	800af66 <_printf_common+0x8e>
	...

0800afb4 <_printf_i>:
 800afb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afb8:	7e0f      	ldrb	r7, [r1, #24]
 800afba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afbc:	2f78      	cmp	r7, #120	; 0x78
 800afbe:	4691      	mov	r9, r2
 800afc0:	4680      	mov	r8, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	469a      	mov	sl, r3
 800afc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afca:	d807      	bhi.n	800afdc <_printf_i+0x28>
 800afcc:	2f62      	cmp	r7, #98	; 0x62
 800afce:	d80a      	bhi.n	800afe6 <_printf_i+0x32>
 800afd0:	2f00      	cmp	r7, #0
 800afd2:	f000 80d8 	beq.w	800b186 <_printf_i+0x1d2>
 800afd6:	2f58      	cmp	r7, #88	; 0x58
 800afd8:	f000 80a3 	beq.w	800b122 <_printf_i+0x16e>
 800afdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afe4:	e03a      	b.n	800b05c <_printf_i+0xa8>
 800afe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afea:	2b15      	cmp	r3, #21
 800afec:	d8f6      	bhi.n	800afdc <_printf_i+0x28>
 800afee:	a101      	add	r1, pc, #4	; (adr r1, 800aff4 <_printf_i+0x40>)
 800aff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aff4:	0800b04d 	.word	0x0800b04d
 800aff8:	0800b061 	.word	0x0800b061
 800affc:	0800afdd 	.word	0x0800afdd
 800b000:	0800afdd 	.word	0x0800afdd
 800b004:	0800afdd 	.word	0x0800afdd
 800b008:	0800afdd 	.word	0x0800afdd
 800b00c:	0800b061 	.word	0x0800b061
 800b010:	0800afdd 	.word	0x0800afdd
 800b014:	0800afdd 	.word	0x0800afdd
 800b018:	0800afdd 	.word	0x0800afdd
 800b01c:	0800afdd 	.word	0x0800afdd
 800b020:	0800b16d 	.word	0x0800b16d
 800b024:	0800b091 	.word	0x0800b091
 800b028:	0800b14f 	.word	0x0800b14f
 800b02c:	0800afdd 	.word	0x0800afdd
 800b030:	0800afdd 	.word	0x0800afdd
 800b034:	0800b18f 	.word	0x0800b18f
 800b038:	0800afdd 	.word	0x0800afdd
 800b03c:	0800b091 	.word	0x0800b091
 800b040:	0800afdd 	.word	0x0800afdd
 800b044:	0800afdd 	.word	0x0800afdd
 800b048:	0800b157 	.word	0x0800b157
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	1d1a      	adds	r2, r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	602a      	str	r2, [r5, #0]
 800b054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b05c:	2301      	movs	r3, #1
 800b05e:	e0a3      	b.n	800b1a8 <_printf_i+0x1f4>
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	6829      	ldr	r1, [r5, #0]
 800b064:	0606      	lsls	r6, r0, #24
 800b066:	f101 0304 	add.w	r3, r1, #4
 800b06a:	d50a      	bpl.n	800b082 <_printf_i+0xce>
 800b06c:	680e      	ldr	r6, [r1, #0]
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	2e00      	cmp	r6, #0
 800b072:	da03      	bge.n	800b07c <_printf_i+0xc8>
 800b074:	232d      	movs	r3, #45	; 0x2d
 800b076:	4276      	negs	r6, r6
 800b078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b07c:	485e      	ldr	r0, [pc, #376]	; (800b1f8 <_printf_i+0x244>)
 800b07e:	230a      	movs	r3, #10
 800b080:	e019      	b.n	800b0b6 <_printf_i+0x102>
 800b082:	680e      	ldr	r6, [r1, #0]
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b08a:	bf18      	it	ne
 800b08c:	b236      	sxthne	r6, r6
 800b08e:	e7ef      	b.n	800b070 <_printf_i+0xbc>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	6820      	ldr	r0, [r4, #0]
 800b094:	1d19      	adds	r1, r3, #4
 800b096:	6029      	str	r1, [r5, #0]
 800b098:	0601      	lsls	r1, r0, #24
 800b09a:	d501      	bpl.n	800b0a0 <_printf_i+0xec>
 800b09c:	681e      	ldr	r6, [r3, #0]
 800b09e:	e002      	b.n	800b0a6 <_printf_i+0xf2>
 800b0a0:	0646      	lsls	r6, r0, #25
 800b0a2:	d5fb      	bpl.n	800b09c <_printf_i+0xe8>
 800b0a4:	881e      	ldrh	r6, [r3, #0]
 800b0a6:	4854      	ldr	r0, [pc, #336]	; (800b1f8 <_printf_i+0x244>)
 800b0a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b0aa:	bf0c      	ite	eq
 800b0ac:	2308      	moveq	r3, #8
 800b0ae:	230a      	movne	r3, #10
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0b6:	6865      	ldr	r5, [r4, #4]
 800b0b8:	60a5      	str	r5, [r4, #8]
 800b0ba:	2d00      	cmp	r5, #0
 800b0bc:	bfa2      	ittt	ge
 800b0be:	6821      	ldrge	r1, [r4, #0]
 800b0c0:	f021 0104 	bicge.w	r1, r1, #4
 800b0c4:	6021      	strge	r1, [r4, #0]
 800b0c6:	b90e      	cbnz	r6, 800b0cc <_printf_i+0x118>
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	d04d      	beq.n	800b168 <_printf_i+0x1b4>
 800b0cc:	4615      	mov	r5, r2
 800b0ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0d2:	fb03 6711 	mls	r7, r3, r1, r6
 800b0d6:	5dc7      	ldrb	r7, [r0, r7]
 800b0d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0dc:	4637      	mov	r7, r6
 800b0de:	42bb      	cmp	r3, r7
 800b0e0:	460e      	mov	r6, r1
 800b0e2:	d9f4      	bls.n	800b0ce <_printf_i+0x11a>
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d10b      	bne.n	800b100 <_printf_i+0x14c>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	07de      	lsls	r6, r3, #31
 800b0ec:	d508      	bpl.n	800b100 <_printf_i+0x14c>
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	6861      	ldr	r1, [r4, #4]
 800b0f2:	4299      	cmp	r1, r3
 800b0f4:	bfde      	ittt	le
 800b0f6:	2330      	movle	r3, #48	; 0x30
 800b0f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b100:	1b52      	subs	r2, r2, r5
 800b102:	6122      	str	r2, [r4, #16]
 800b104:	f8cd a000 	str.w	sl, [sp]
 800b108:	464b      	mov	r3, r9
 800b10a:	aa03      	add	r2, sp, #12
 800b10c:	4621      	mov	r1, r4
 800b10e:	4640      	mov	r0, r8
 800b110:	f7ff fee2 	bl	800aed8 <_printf_common>
 800b114:	3001      	adds	r0, #1
 800b116:	d14c      	bne.n	800b1b2 <_printf_i+0x1fe>
 800b118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b11c:	b004      	add	sp, #16
 800b11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b122:	4835      	ldr	r0, [pc, #212]	; (800b1f8 <_printf_i+0x244>)
 800b124:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b128:	6829      	ldr	r1, [r5, #0]
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b130:	6029      	str	r1, [r5, #0]
 800b132:	061d      	lsls	r5, r3, #24
 800b134:	d514      	bpl.n	800b160 <_printf_i+0x1ac>
 800b136:	07df      	lsls	r7, r3, #31
 800b138:	bf44      	itt	mi
 800b13a:	f043 0320 	orrmi.w	r3, r3, #32
 800b13e:	6023      	strmi	r3, [r4, #0]
 800b140:	b91e      	cbnz	r6, 800b14a <_printf_i+0x196>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	f023 0320 	bic.w	r3, r3, #32
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	2310      	movs	r3, #16
 800b14c:	e7b0      	b.n	800b0b0 <_printf_i+0xfc>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	f043 0320 	orr.w	r3, r3, #32
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	2378      	movs	r3, #120	; 0x78
 800b158:	4828      	ldr	r0, [pc, #160]	; (800b1fc <_printf_i+0x248>)
 800b15a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b15e:	e7e3      	b.n	800b128 <_printf_i+0x174>
 800b160:	0659      	lsls	r1, r3, #25
 800b162:	bf48      	it	mi
 800b164:	b2b6      	uxthmi	r6, r6
 800b166:	e7e6      	b.n	800b136 <_printf_i+0x182>
 800b168:	4615      	mov	r5, r2
 800b16a:	e7bb      	b.n	800b0e4 <_printf_i+0x130>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	6826      	ldr	r6, [r4, #0]
 800b170:	6961      	ldr	r1, [r4, #20]
 800b172:	1d18      	adds	r0, r3, #4
 800b174:	6028      	str	r0, [r5, #0]
 800b176:	0635      	lsls	r5, r6, #24
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	d501      	bpl.n	800b180 <_printf_i+0x1cc>
 800b17c:	6019      	str	r1, [r3, #0]
 800b17e:	e002      	b.n	800b186 <_printf_i+0x1d2>
 800b180:	0670      	lsls	r0, r6, #25
 800b182:	d5fb      	bpl.n	800b17c <_printf_i+0x1c8>
 800b184:	8019      	strh	r1, [r3, #0]
 800b186:	2300      	movs	r3, #0
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	4615      	mov	r5, r2
 800b18c:	e7ba      	b.n	800b104 <_printf_i+0x150>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	1d1a      	adds	r2, r3, #4
 800b192:	602a      	str	r2, [r5, #0]
 800b194:	681d      	ldr	r5, [r3, #0]
 800b196:	6862      	ldr	r2, [r4, #4]
 800b198:	2100      	movs	r1, #0
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7f5 f840 	bl	8000220 <memchr>
 800b1a0:	b108      	cbz	r0, 800b1a6 <_printf_i+0x1f2>
 800b1a2:	1b40      	subs	r0, r0, r5
 800b1a4:	6060      	str	r0, [r4, #4]
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b0:	e7a8      	b.n	800b104 <_printf_i+0x150>
 800b1b2:	6923      	ldr	r3, [r4, #16]
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	47d0      	blx	sl
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d0ab      	beq.n	800b118 <_printf_i+0x164>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	079b      	lsls	r3, r3, #30
 800b1c4:	d413      	bmi.n	800b1ee <_printf_i+0x23a>
 800b1c6:	68e0      	ldr	r0, [r4, #12]
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	4298      	cmp	r0, r3
 800b1cc:	bfb8      	it	lt
 800b1ce:	4618      	movlt	r0, r3
 800b1d0:	e7a4      	b.n	800b11c <_printf_i+0x168>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4640      	mov	r0, r8
 800b1da:	47d0      	blx	sl
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d09b      	beq.n	800b118 <_printf_i+0x164>
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	9903      	ldr	r1, [sp, #12]
 800b1e6:	1a5b      	subs	r3, r3, r1
 800b1e8:	42ab      	cmp	r3, r5
 800b1ea:	dcf2      	bgt.n	800b1d2 <_printf_i+0x21e>
 800b1ec:	e7eb      	b.n	800b1c6 <_printf_i+0x212>
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	f104 0619 	add.w	r6, r4, #25
 800b1f4:	e7f5      	b.n	800b1e2 <_printf_i+0x22e>
 800b1f6:	bf00      	nop
 800b1f8:	0800ba29 	.word	0x0800ba29
 800b1fc:	0800ba3a 	.word	0x0800ba3a

0800b200 <_putc_r>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	460d      	mov	r5, r1
 800b204:	4614      	mov	r4, r2
 800b206:	4606      	mov	r6, r0
 800b208:	b118      	cbz	r0, 800b212 <_putc_r+0x12>
 800b20a:	6983      	ldr	r3, [r0, #24]
 800b20c:	b90b      	cbnz	r3, 800b212 <_putc_r+0x12>
 800b20e:	f7ff fabf 	bl	800a790 <__sinit>
 800b212:	4b1c      	ldr	r3, [pc, #112]	; (800b284 <_putc_r+0x84>)
 800b214:	429c      	cmp	r4, r3
 800b216:	d124      	bne.n	800b262 <_putc_r+0x62>
 800b218:	6874      	ldr	r4, [r6, #4]
 800b21a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b21c:	07d8      	lsls	r0, r3, #31
 800b21e:	d405      	bmi.n	800b22c <_putc_r+0x2c>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	0599      	lsls	r1, r3, #22
 800b224:	d402      	bmi.n	800b22c <_putc_r+0x2c>
 800b226:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b228:	f7ff fbad 	bl	800a986 <__retarget_lock_acquire_recursive>
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	3b01      	subs	r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	60a3      	str	r3, [r4, #8]
 800b234:	da05      	bge.n	800b242 <_putc_r+0x42>
 800b236:	69a2      	ldr	r2, [r4, #24]
 800b238:	4293      	cmp	r3, r2
 800b23a:	db1c      	blt.n	800b276 <_putc_r+0x76>
 800b23c:	b2eb      	uxtb	r3, r5
 800b23e:	2b0a      	cmp	r3, #10
 800b240:	d019      	beq.n	800b276 <_putc_r+0x76>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	6022      	str	r2, [r4, #0]
 800b248:	701d      	strb	r5, [r3, #0]
 800b24a:	b2ed      	uxtb	r5, r5
 800b24c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b24e:	07da      	lsls	r2, r3, #31
 800b250:	d405      	bmi.n	800b25e <_putc_r+0x5e>
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	059b      	lsls	r3, r3, #22
 800b256:	d402      	bmi.n	800b25e <_putc_r+0x5e>
 800b258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b25a:	f7ff fb95 	bl	800a988 <__retarget_lock_release_recursive>
 800b25e:	4628      	mov	r0, r5
 800b260:	bd70      	pop	{r4, r5, r6, pc}
 800b262:	4b09      	ldr	r3, [pc, #36]	; (800b288 <_putc_r+0x88>)
 800b264:	429c      	cmp	r4, r3
 800b266:	d101      	bne.n	800b26c <_putc_r+0x6c>
 800b268:	68b4      	ldr	r4, [r6, #8]
 800b26a:	e7d6      	b.n	800b21a <_putc_r+0x1a>
 800b26c:	4b07      	ldr	r3, [pc, #28]	; (800b28c <_putc_r+0x8c>)
 800b26e:	429c      	cmp	r4, r3
 800b270:	bf08      	it	eq
 800b272:	68f4      	ldreq	r4, [r6, #12]
 800b274:	e7d1      	b.n	800b21a <_putc_r+0x1a>
 800b276:	4629      	mov	r1, r5
 800b278:	4622      	mov	r2, r4
 800b27a:	4630      	mov	r0, r6
 800b27c:	f7ff f89c 	bl	800a3b8 <__swbuf_r>
 800b280:	4605      	mov	r5, r0
 800b282:	e7e3      	b.n	800b24c <_putc_r+0x4c>
 800b284:	0800b9d8 	.word	0x0800b9d8
 800b288:	0800b9f8 	.word	0x0800b9f8
 800b28c:	0800b9b8 	.word	0x0800b9b8

0800b290 <__srget_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	460c      	mov	r4, r1
 800b294:	4605      	mov	r5, r0
 800b296:	b118      	cbz	r0, 800b2a0 <__srget_r+0x10>
 800b298:	6983      	ldr	r3, [r0, #24]
 800b29a:	b90b      	cbnz	r3, 800b2a0 <__srget_r+0x10>
 800b29c:	f7ff fa78 	bl	800a790 <__sinit>
 800b2a0:	4b0e      	ldr	r3, [pc, #56]	; (800b2dc <__srget_r+0x4c>)
 800b2a2:	429c      	cmp	r4, r3
 800b2a4:	d10d      	bne.n	800b2c2 <__srget_r+0x32>
 800b2a6:	686c      	ldr	r4, [r5, #4]
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f000 f8ee 	bl	800b48c <__srefill_r>
 800b2b0:	b988      	cbnz	r0, 800b2d6 <__srget_r+0x46>
 800b2b2:	6863      	ldr	r3, [r4, #4]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	6063      	str	r3, [r4, #4]
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	6022      	str	r2, [r4, #0]
 800b2be:	7818      	ldrb	r0, [r3, #0]
 800b2c0:	bd38      	pop	{r3, r4, r5, pc}
 800b2c2:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <__srget_r+0x50>)
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	d101      	bne.n	800b2cc <__srget_r+0x3c>
 800b2c8:	68ac      	ldr	r4, [r5, #8]
 800b2ca:	e7ed      	b.n	800b2a8 <__srget_r+0x18>
 800b2cc:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <__srget_r+0x54>)
 800b2ce:	429c      	cmp	r4, r3
 800b2d0:	bf08      	it	eq
 800b2d2:	68ec      	ldreq	r4, [r5, #12]
 800b2d4:	e7e8      	b.n	800b2a8 <__srget_r+0x18>
 800b2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2da:	e7f1      	b.n	800b2c0 <__srget_r+0x30>
 800b2dc:	0800b9d8 	.word	0x0800b9d8
 800b2e0:	0800b9f8 	.word	0x0800b9f8
 800b2e4:	0800b9b8 	.word	0x0800b9b8

0800b2e8 <_sbrk_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d06      	ldr	r5, [pc, #24]	; (800b304 <_sbrk_r+0x1c>)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	f7f5 fe6c 	bl	8000fd0 <_sbrk>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d102      	bne.n	800b302 <_sbrk_r+0x1a>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	b103      	cbz	r3, 800b302 <_sbrk_r+0x1a>
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	20004cd0 	.word	0x20004cd0

0800b308 <__sread>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	460c      	mov	r4, r1
 800b30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b310:	f000 f8a0 	bl	800b454 <_read_r>
 800b314:	2800      	cmp	r0, #0
 800b316:	bfab      	itete	ge
 800b318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b31a:	89a3      	ldrhlt	r3, [r4, #12]
 800b31c:	181b      	addge	r3, r3, r0
 800b31e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b322:	bfac      	ite	ge
 800b324:	6563      	strge	r3, [r4, #84]	; 0x54
 800b326:	81a3      	strhlt	r3, [r4, #12]
 800b328:	bd10      	pop	{r4, pc}

0800b32a <__swrite>:
 800b32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b32e:	461f      	mov	r7, r3
 800b330:	898b      	ldrh	r3, [r1, #12]
 800b332:	05db      	lsls	r3, r3, #23
 800b334:	4605      	mov	r5, r0
 800b336:	460c      	mov	r4, r1
 800b338:	4616      	mov	r6, r2
 800b33a:	d505      	bpl.n	800b348 <__swrite+0x1e>
 800b33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b340:	2302      	movs	r3, #2
 800b342:	2200      	movs	r2, #0
 800b344:	f000 f868 	bl	800b418 <_lseek_r>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b352:	81a3      	strh	r3, [r4, #12]
 800b354:	4632      	mov	r2, r6
 800b356:	463b      	mov	r3, r7
 800b358:	4628      	mov	r0, r5
 800b35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b35e:	f000 b817 	b.w	800b390 <_write_r>

0800b362 <__sseek>:
 800b362:	b510      	push	{r4, lr}
 800b364:	460c      	mov	r4, r1
 800b366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36a:	f000 f855 	bl	800b418 <_lseek_r>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	bf15      	itete	ne
 800b374:	6560      	strne	r0, [r4, #84]	; 0x54
 800b376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b37a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b37e:	81a3      	strheq	r3, [r4, #12]
 800b380:	bf18      	it	ne
 800b382:	81a3      	strhne	r3, [r4, #12]
 800b384:	bd10      	pop	{r4, pc}

0800b386 <__sclose>:
 800b386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38a:	f000 b813 	b.w	800b3b4 <_close_r>
	...

0800b390 <_write_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_write_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f5 fdc5 	bl	8000f2e <_write>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_write_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_write_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20004cd0 	.word	0x20004cd0

0800b3b4 <_close_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_close_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f5 fdd1 	bl	8000f66 <_close>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_close_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_close_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	20004cd0 	.word	0x20004cd0

0800b3d4 <_fstat_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d07      	ldr	r5, [pc, #28]	; (800b3f4 <_fstat_r+0x20>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	f7f5 fdcc 	bl	8000f7e <_fstat>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d102      	bne.n	800b3f0 <_fstat_r+0x1c>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	b103      	cbz	r3, 800b3f0 <_fstat_r+0x1c>
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	bd38      	pop	{r3, r4, r5, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20004cd0 	.word	0x20004cd0

0800b3f8 <_isatty_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d06      	ldr	r5, [pc, #24]	; (800b414 <_isatty_r+0x1c>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	602b      	str	r3, [r5, #0]
 800b404:	f7f5 fdcb 	bl	8000f9e <_isatty>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_isatty_r+0x1a>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_isatty_r+0x1a>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	20004cd0 	.word	0x20004cd0

0800b418 <_lseek_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	; (800b438 <_lseek_r+0x20>)
 800b41c:	4604      	mov	r4, r0
 800b41e:	4608      	mov	r0, r1
 800b420:	4611      	mov	r1, r2
 800b422:	2200      	movs	r2, #0
 800b424:	602a      	str	r2, [r5, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f7f5 fdc4 	bl	8000fb4 <_lseek>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_lseek_r+0x1e>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_lseek_r+0x1e>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20004cd0 	.word	0x20004cd0

0800b43c <__malloc_lock>:
 800b43c:	4801      	ldr	r0, [pc, #4]	; (800b444 <__malloc_lock+0x8>)
 800b43e:	f7ff baa2 	b.w	800a986 <__retarget_lock_acquire_recursive>
 800b442:	bf00      	nop
 800b444:	20004cc4 	.word	0x20004cc4

0800b448 <__malloc_unlock>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__malloc_unlock+0x8>)
 800b44a:	f7ff ba9d 	b.w	800a988 <__retarget_lock_release_recursive>
 800b44e:	bf00      	nop
 800b450:	20004cc4 	.word	0x20004cc4

0800b454 <_read_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	; (800b474 <_read_r+0x20>)
 800b458:	4604      	mov	r4, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	602a      	str	r2, [r5, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f5 fd46 	bl	8000ef4 <_read>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_read_r+0x1e>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_read_r+0x1e>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20004cd0 	.word	0x20004cd0

0800b478 <lflush>:
 800b478:	8983      	ldrh	r3, [r0, #12]
 800b47a:	f003 0309 	and.w	r3, r3, #9
 800b47e:	2b09      	cmp	r3, #9
 800b480:	d101      	bne.n	800b486 <lflush+0xe>
 800b482:	f7ff b91b 	b.w	800a6bc <fflush>
 800b486:	2000      	movs	r0, #0
 800b488:	4770      	bx	lr
	...

0800b48c <__srefill_r>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	460c      	mov	r4, r1
 800b490:	4605      	mov	r5, r0
 800b492:	b118      	cbz	r0, 800b49c <__srefill_r+0x10>
 800b494:	6983      	ldr	r3, [r0, #24]
 800b496:	b90b      	cbnz	r3, 800b49c <__srefill_r+0x10>
 800b498:	f7ff f97a 	bl	800a790 <__sinit>
 800b49c:	4b3b      	ldr	r3, [pc, #236]	; (800b58c <__srefill_r+0x100>)
 800b49e:	429c      	cmp	r4, r3
 800b4a0:	d10a      	bne.n	800b4b8 <__srefill_r+0x2c>
 800b4a2:	686c      	ldr	r4, [r5, #4]
 800b4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	6063      	str	r3, [r4, #4]
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	069e      	lsls	r6, r3, #26
 800b4b0:	d50c      	bpl.n	800b4cc <__srefill_r+0x40>
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4b6:	e066      	b.n	800b586 <__srefill_r+0xfa>
 800b4b8:	4b35      	ldr	r3, [pc, #212]	; (800b590 <__srefill_r+0x104>)
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	d101      	bne.n	800b4c2 <__srefill_r+0x36>
 800b4be:	68ac      	ldr	r4, [r5, #8]
 800b4c0:	e7f0      	b.n	800b4a4 <__srefill_r+0x18>
 800b4c2:	4b34      	ldr	r3, [pc, #208]	; (800b594 <__srefill_r+0x108>)
 800b4c4:	429c      	cmp	r4, r3
 800b4c6:	bf08      	it	eq
 800b4c8:	68ec      	ldreq	r4, [r5, #12]
 800b4ca:	e7eb      	b.n	800b4a4 <__srefill_r+0x18>
 800b4cc:	0758      	lsls	r0, r3, #29
 800b4ce:	d448      	bmi.n	800b562 <__srefill_r+0xd6>
 800b4d0:	06d9      	lsls	r1, r3, #27
 800b4d2:	d405      	bmi.n	800b4e0 <__srefill_r+0x54>
 800b4d4:	2309      	movs	r3, #9
 800b4d6:	602b      	str	r3, [r5, #0]
 800b4d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	e7e8      	b.n	800b4b2 <__srefill_r+0x26>
 800b4e0:	071a      	lsls	r2, r3, #28
 800b4e2:	d50b      	bpl.n	800b4fc <__srefill_r+0x70>
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f7ff f8ac 	bl	800a644 <_fflush_r>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d1e0      	bne.n	800b4b2 <__srefill_r+0x26>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	60a0      	str	r0, [r4, #8]
 800b4f4:	f023 0308 	bic.w	r3, r3, #8
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	61a0      	str	r0, [r4, #24]
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f043 0304 	orr.w	r3, r3, #4
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	b91b      	cbnz	r3, 800b510 <__srefill_r+0x84>
 800b508:	4621      	mov	r1, r4
 800b50a:	4628      	mov	r0, r5
 800b50c:	f7ff fa62 	bl	800a9d4 <__smakebuf_r>
 800b510:	89a6      	ldrh	r6, [r4, #12]
 800b512:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b516:	07b3      	lsls	r3, r6, #30
 800b518:	d00f      	beq.n	800b53a <__srefill_r+0xae>
 800b51a:	2301      	movs	r3, #1
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	4b1e      	ldr	r3, [pc, #120]	; (800b598 <__srefill_r+0x10c>)
 800b520:	491e      	ldr	r1, [pc, #120]	; (800b59c <__srefill_r+0x110>)
 800b522:	6818      	ldr	r0, [r3, #0]
 800b524:	f006 0609 	and.w	r6, r6, #9
 800b528:	f7ff f9b0 	bl	800a88c <_fwalk>
 800b52c:	2e09      	cmp	r6, #9
 800b52e:	81a7      	strh	r7, [r4, #12]
 800b530:	d103      	bne.n	800b53a <__srefill_r+0xae>
 800b532:	4621      	mov	r1, r4
 800b534:	4628      	mov	r0, r5
 800b536:	f7fe ffff 	bl	800a538 <__sflush_r>
 800b53a:	6922      	ldr	r2, [r4, #16]
 800b53c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b53e:	6963      	ldr	r3, [r4, #20]
 800b540:	6a21      	ldr	r1, [r4, #32]
 800b542:	6022      	str	r2, [r4, #0]
 800b544:	4628      	mov	r0, r5
 800b546:	47b0      	blx	r6
 800b548:	2800      	cmp	r0, #0
 800b54a:	6060      	str	r0, [r4, #4]
 800b54c:	dc1c      	bgt.n	800b588 <__srefill_r+0xfc>
 800b54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b552:	bf17      	itett	ne
 800b554:	2200      	movne	r2, #0
 800b556:	f043 0320 	orreq.w	r3, r3, #32
 800b55a:	6062      	strne	r2, [r4, #4]
 800b55c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b560:	e7bc      	b.n	800b4dc <__srefill_r+0x50>
 800b562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b564:	2900      	cmp	r1, #0
 800b566:	d0cd      	beq.n	800b504 <__srefill_r+0x78>
 800b568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b56c:	4299      	cmp	r1, r3
 800b56e:	d002      	beq.n	800b576 <__srefill_r+0xea>
 800b570:	4628      	mov	r0, r5
 800b572:	f7ff fa77 	bl	800aa64 <_free_r>
 800b576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b578:	6063      	str	r3, [r4, #4]
 800b57a:	2000      	movs	r0, #0
 800b57c:	6360      	str	r0, [r4, #52]	; 0x34
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0c0      	beq.n	800b504 <__srefill_r+0x78>
 800b582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b588:	2000      	movs	r0, #0
 800b58a:	e7fc      	b.n	800b586 <__srefill_r+0xfa>
 800b58c:	0800b9d8 	.word	0x0800b9d8
 800b590:	0800b9f8 	.word	0x0800b9f8
 800b594:	0800b9b8 	.word	0x0800b9b8
 800b598:	0800b9b4 	.word	0x0800b9b4
 800b59c:	0800b479 	.word	0x0800b479

0800b5a0 <_init>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	bf00      	nop
 800b5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a6:	bc08      	pop	{r3}
 800b5a8:	469e      	mov	lr, r3
 800b5aa:	4770      	bx	lr

0800b5ac <_fini>:
 800b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ae:	bf00      	nop
 800b5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b2:	bc08      	pop	{r3}
 800b5b4:	469e      	mov	lr, r3
 800b5b6:	4770      	bx	lr
