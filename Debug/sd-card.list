
sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a24  08004a24  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a2c  08004a2c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000084  08004ab8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004ab8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbf6  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e62  00000000  00000000  0002bcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c3c  00000000  00000000  0002eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df77  00000000  00000000  00051afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc0b1  00000000  00000000  0005fa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bb24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  0012bb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004854 	.word	0x08004854

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08004854 	.word	0x08004854

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <send_SD_cmd>:
uint8_t getCRC(uint8_t message[], int length);
uint8_t fixedPointLog2(uint8_t val);

//Really should be error type
//Should also take read buffer? write buffer?
uint8_t send_SD_cmd(SD_cmd_t cmd, uint32_t cmd_arg){
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	b097      	sub	sp, #92	; 0x5c
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]

	//should assert that resp!=NULL
	if( (cmd==ACMD41)||(cmd==ACMD23)){
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b29      	cmp	r3, #41	; 0x29
 80005c4:	d002      	beq.n	80005cc <send_SD_cmd+0x18>
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b57      	cmp	r3, #87	; 0x57
 80005ca:	d10c      	bne.n	80005e6 <send_SD_cmd+0x32>
		uint8_t acmd_resp = send_SD_cmd(CMD55,0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2037      	movs	r0, #55	; 0x37
 80005d0:	f7ff fff0 	bl	80005b4 <send_SD_cmd>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(acmd_resp == 0xFF){
 80005da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80005de:	2bff      	cmp	r3, #255	; 0xff
 80005e0:	d101      	bne.n	80005e6 <send_SD_cmd+0x32>
			return 0xFF;
 80005e2:	23ff      	movs	r3, #255	; 0xff
 80005e4:	e0a9      	b.n	800073a <send_SD_cmd+0x186>
		}
	}


	uint8_t tx_high = 0xFF;
 80005e6:	23ff      	movs	r3, #255	; 0xff
 80005e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t MSG[35] = {'\0'};
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	221f      	movs	r2, #31
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 f91f 	bl	800383c <memset>
	uint8_t spi_rx = 0xFF;
 80005fe:	23ff      	movs	r3, #255	; 0xff
 8000600:	74fb      	strb	r3, [r7, #19]
	uint8_t rec_res = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("cmd:%u\r\n",cmd);
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4619      	mov	r1, r3
 800060c:	484d      	ldr	r0, [pc, #308]	; (8000744 <send_SD_cmd+0x190>)
 800060e:	f003 f91d 	bl	800384c <iprintf>
    HAL_SPI_Transmit(&hspi2, &tx_high , 1, 50);
 8000612:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8000616:	2332      	movs	r3, #50	; 0x32
 8000618:	2201      	movs	r2, #1
 800061a:	484b      	ldr	r0, [pc, #300]	; (8000748 <send_SD_cmd+0x194>)
 800061c:	f002 f8b3 	bl	8002786 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, &tx_high , 1, 50);
 8000620:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8000624:	2332      	movs	r3, #50	; 0x32
 8000626:	2201      	movs	r2, #1
 8000628:	4847      	ldr	r0, [pc, #284]	; (8000748 <send_SD_cmd+0x194>)
 800062a:	f002 f8ac 	bl	8002786 <HAL_SPI_Transmit>


	HAL_StatusTypeDef status;
	uint8_t spi_tx_bf[6] = {0};
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	2300      	movs	r3, #0
 8000634:	823b      	strh	r3, [r7, #16]

	spi_tx_bf[0] = (0x40)| cmd;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	b2db      	uxtb	r3, r3
 800063e:	733b      	strb	r3, [r7, #12]

	spi_tx_bf[4] =  cmd_arg & 0x000000FF;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	743b      	strb	r3, [r7, #16]
	spi_tx_bf[3] = (cmd_arg & 0x0000FF00) >> 8;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	b2db      	uxtb	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
	spi_tx_bf[2] = (cmd_arg & 0x00FF0000) >> 16;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	0c1b      	lsrs	r3, r3, #16
 8000652:	b2db      	uxtb	r3, r3
 8000654:	73bb      	strb	r3, [r7, #14]
	spi_tx_bf[1] = (cmd_arg & 0xFF000000) >> 24;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	0e1b      	lsrs	r3, r3, #24
 800065a:	b2db      	uxtb	r3, r3
 800065c:	737b      	strb	r3, [r7, #13]

	spi_tx_bf[5] = (getCRC(spi_tx_bf,5)<<1)  + 1;
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fd0b 	bl	8001080 <getCRC>
 800066a:	4603      	mov	r3, r0
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3301      	adds	r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	747b      	strb	r3, [r7, #17]

	printf(MSG, "cmd:%u %u %u %u %u %u\r\n",spi_tx_bf[0],spi_tx_bf[1],spi_tx_bf[2],spi_tx_bf[3],spi_tx_bf[4],spi_tx_bf[5]);
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	461d      	mov	r5, r3
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	461e      	mov	r6, r3
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	7c39      	ldrb	r1, [r7, #16]
 8000684:	7c78      	ldrb	r0, [r7, #17]
 8000686:	4604      	mov	r4, r0
 8000688:	f107 0014 	add.w	r0, r7, #20
 800068c:	9403      	str	r4, [sp, #12]
 800068e:	9102      	str	r1, [sp, #8]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4633      	mov	r3, r6
 8000696:	462a      	mov	r2, r5
 8000698:	492c      	ldr	r1, [pc, #176]	; (800074c <send_SD_cmd+0x198>)
 800069a:	f003 f8d7 	bl	800384c <iprintf>

    HAL_SPI_Transmit(&hspi2, spi_tx_bf , 6, 50);
 800069e:	f107 010c 	add.w	r1, r7, #12
 80006a2:	2332      	movs	r3, #50	; 0x32
 80006a4:	2206      	movs	r2, #6
 80006a6:	4828      	ldr	r0, [pc, #160]	; (8000748 <send_SD_cmd+0x194>)
 80006a8:	f002 f86d 	bl	8002786 <HAL_SPI_Transmit>

	int count = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40


	while( count<N_CS && !rec_res  ){
 80006b0:	e018      	b.n	80006e4 <send_SD_cmd+0x130>
		HAL_SPI_TransmitReceive(&hspi2, &tx_high, &spi_rx , 1, 50);
 80006b2:	f107 0213 	add.w	r2, r7, #19
 80006b6:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80006ba:	2332      	movs	r3, #50	; 0x32
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <send_SD_cmd+0x194>)
 80006c2:	f002 f99c 	bl	80029fe <HAL_SPI_TransmitReceive>
		if( (spi_rx&0x80) == 0){
 80006c6:	7cfb      	ldrb	r3, [r7, #19]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db02      	blt.n	80006d4 <send_SD_cmd+0x120>
			rec_res = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
		printf("resp:%u\r\n",spi_rx);
 80006d4:	7cfb      	ldrb	r3, [r7, #19]
 80006d6:	4619      	mov	r1, r3
 80006d8:	481d      	ldr	r0, [pc, #116]	; (8000750 <send_SD_cmd+0x19c>)
 80006da:	f003 f8b7 	bl	800384c <iprintf>

		count++;
 80006de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006e0:	3301      	adds	r3, #1
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
	while( count<N_CS && !rec_res  ){
 80006e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	dc03      	bgt.n	80006f2 <send_SD_cmd+0x13e>
 80006ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0df      	beq.n	80006b2 <send_SD_cmd+0xfe>
	}


	if(cmd!=CMD58 && cmd!=CMD8 && spi_rx!=0xFF){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b3a      	cmp	r3, #58	; 0x3a
 80006f6:	d01f      	beq.n	8000738 <send_SD_cmd+0x184>
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b08      	cmp	r3, #8
 80006fc:	d01c      	beq.n	8000738 <send_SD_cmd+0x184>
 80006fe:	7cfb      	ldrb	r3, [r7, #19]
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d019      	beq.n	8000738 <send_SD_cmd+0x184>
		uint8_t spi_rx_clear = 0x0;
 8000704:	2300      	movs	r3, #0
 8000706:	72fb      	strb	r3, [r7, #11]

		for(int ii=0; ii<8; ii++){
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800070c:	e00f      	b.n	800072e <send_SD_cmd+0x17a>
			HAL_SPI_TransmitReceive(&hspi2, &tx_high, &spi_rx_clear , 1, 50);
 800070e:	f107 020b 	add.w	r2, r7, #11
 8000712:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8000716:	2332      	movs	r3, #50	; 0x32
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <send_SD_cmd+0x194>)
 800071e:	f002 f96e 	bl	80029fe <HAL_SPI_TransmitReceive>
			//printf("clr return:%u\r\n",spi_rx_clear);
			if(spi_rx_clear==0xFF){
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	2bff      	cmp	r3, #255	; 0xff
 8000726:	d006      	beq.n	8000736 <send_SD_cmd+0x182>
		for(int ii=0; ii<8; ii++){
 8000728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072a:	3301      	adds	r3, #1
 800072c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800072e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000730:	2b07      	cmp	r3, #7
 8000732:	ddec      	ble.n	800070e <send_SD_cmd+0x15a>
 8000734:	e000      	b.n	8000738 <send_SD_cmd+0x184>
				break;
 8000736:	bf00      	nop
			}
		}
	}

	return spi_rx;
 8000738:	7cfb      	ldrb	r3, [r7, #19]
}
 800073a:	4618      	mov	r0, r3
 800073c:	374c      	adds	r7, #76	; 0x4c
 800073e:	46bd      	mov	sp, r7
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000742:	bf00      	nop
 8000744:	0800486c 	.word	0x0800486c
 8000748:	200000a0 	.word	0x200000a0
 800074c:	08004878 	.word	0x08004878
 8000750:	08004890 	.word	0x08004890

08000754 <get_trail>:

void get_trail(uint8_t* ocr){
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	    uint8_t tx_high = 0xFF;
 800075c:	23ff      	movs	r3, #255	; 0xff
 800075e:	75fb      	strb	r3, [r7, #23]
		uint8_t rx_buff[4] = {0};
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
		HAL_SPI_TransmitReceive(&hspi2, &tx_high, ocr, 1, 50);
 8000764:	f107 0117 	add.w	r1, r7, #23
 8000768:	2332      	movs	r3, #50	; 0x32
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4824      	ldr	r0, [pc, #144]	; (8000804 <get_trail+0xb0>)
 8000772:	f002 f944 	bl	80029fe <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi2, &tx_high, ocr+1, 1, 50);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	f107 0117 	add.w	r1, r7, #23
 800077e:	2332      	movs	r3, #50	; 0x32
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	481f      	ldr	r0, [pc, #124]	; (8000804 <get_trail+0xb0>)
 8000786:	f002 f93a 	bl	80029fe <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi2, &tx_high, ocr+2, 1, 50);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1c9a      	adds	r2, r3, #2
 800078e:	f107 0117 	add.w	r1, r7, #23
 8000792:	2332      	movs	r3, #50	; 0x32
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	481a      	ldr	r0, [pc, #104]	; (8000804 <get_trail+0xb0>)
 800079a:	f002 f930 	bl	80029fe <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi2, &tx_high, ocr+3, 1, 50);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	1cda      	adds	r2, r3, #3
 80007a2:	f107 0117 	add.w	r1, r7, #23
 80007a6:	2332      	movs	r3, #50	; 0x32
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	4815      	ldr	r0, [pc, #84]	; (8000804 <get_trail+0xb0>)
 80007ae:	f002 f926 	bl	80029fe <HAL_SPI_TransmitReceive>


		//sprintf(MSG, "trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
		//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
		printf("trail:%u %u %u %u\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3302      	adds	r3, #2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3303      	adds	r3, #3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4603      	mov	r3, r0
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <get_trail+0xb4>)
 80007d4:	f003 f83a 	bl	800384c <iprintf>
		uint8_t spi_rx_clear = 0x0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
		while(spi_rx_clear!=0xFF){
 80007dc:	e009      	b.n	80007f2 <get_trail+0x9e>
			HAL_SPI_TransmitReceive(&hspi2, &tx_high, &spi_rx_clear , 1, 50);
 80007de:	f107 020f 	add.w	r2, r7, #15
 80007e2:	f107 0117 	add.w	r1, r7, #23
 80007e6:	2332      	movs	r3, #50	; 0x32
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <get_trail+0xb0>)
 80007ee:	f002 f906 	bl	80029fe <HAL_SPI_TransmitReceive>
		while(spi_rx_clear!=0xFF){
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	2bff      	cmp	r3, #255	; 0xff
 80007f6:	d1f2      	bne.n	80007de <get_trail+0x8a>
		}
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000a0 	.word	0x200000a0
 8000808:	0800489c 	.word	0x0800489c

0800080c <sd_init>:


void sd_init(){
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

	  uint8_t spi_tx = 0xFF;
 8000812:	23ff      	movs	r3, #255	; 0xff
 8000814:	71fb      	strb	r3, [r7, #7]
	  uint8_t spi_rx = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]


		SD_CS_HIGH();
 800081a:	2201      	movs	r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	4844      	ldr	r0, [pc, #272]	; (8000930 <sd_init+0x124>)
 8000820:	f001 f926 	bl	8001a70 <HAL_GPIO_WritePin>

		HAL_Delay(50); //delay at least 1 ms
 8000824:	2032      	movs	r0, #50	; 0x32
 8000826:	f000 fe85 	bl	8001534 <HAL_Delay>

		  //only need 72, do a bunch more
		for(int ii = 0; ii<10; ii++){
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e008      	b.n	8000842 <sd_init+0x36>
			HAL_SPI_Transmit(&hspi2, &spi_tx , 1, 0);
 8000830:	1df9      	adds	r1, r7, #7
 8000832:	2300      	movs	r3, #0
 8000834:	2201      	movs	r2, #1
 8000836:	483f      	ldr	r0, [pc, #252]	; (8000934 <sd_init+0x128>)
 8000838:	f001 ffa5 	bl	8002786 <HAL_SPI_Transmit>
		for(int ii = 0; ii<10; ii++){
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	3301      	adds	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b09      	cmp	r3, #9
 8000846:	ddf3      	ble.n	8000830 <sd_init+0x24>
		}

		uint8_t R1_resp = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	73bb      	strb	r3, [r7, #14]
		uint8_t ocr[4] = {0};
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]


		SD_CS_LOW();
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	4836      	ldr	r0, [pc, #216]	; (8000930 <sd_init+0x124>)
 8000856:	f001 f90b 	bl	8001a70 <HAL_GPIO_WritePin>

		//online comments indicate this makes things more consistent
		for(int ii = 0; ii<2; ii++){
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	e008      	b.n	8000872 <sd_init+0x66>
			HAL_SPI_Transmit(&hspi2, &spi_tx , 1, 0);
 8000860:	1df9      	adds	r1, r7, #7
 8000862:	2300      	movs	r3, #0
 8000864:	2201      	movs	r2, #1
 8000866:	4833      	ldr	r0, [pc, #204]	; (8000934 <sd_init+0x128>)
 8000868:	f001 ff8d 	bl	8002786 <HAL_SPI_Transmit>
		for(int ii = 0; ii<2; ii++){
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	3301      	adds	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	2b01      	cmp	r3, #1
 8000876:	ddf3      	ble.n	8000860 <sd_init+0x54>
		}

		R1_resp = send_SD_cmd(CMD0,0);
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fe9a 	bl	80005b4 <send_SD_cmd>
 8000880:	4603      	mov	r3, r0
 8000882:	73bb      	strb	r3, [r7, #14]

		uint8_t SD_valid = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	737b      	strb	r3, [r7, #13]

		if(R1_resp == 0x01){
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d14b      	bne.n	8000926 <sd_init+0x11a>


			R1_resp = send_SD_cmd(CMD8,0x01AA);
 800088e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000892:	2008      	movs	r0, #8
 8000894:	f7ff fe8e 	bl	80005b4 <send_SD_cmd>
 8000898:	4603      	mov	r3, r0
 800089a:	73bb      	strb	r3, [r7, #14]
		    get_trail(ocr);
 800089c:	463b      	mov	r3, r7
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff58 	bl	8000754 <get_trail>


		    if( (R1_resp!=0x01)){ //if error or no response, SD1 or MMC
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d13d      	bne.n	8000926 <sd_init+0x11a>
		    	//printf("SD 1.0 or MMC\r\n");

		    }
		    else if( (ocr[2] == 0x01)&&(ocr[3] == 0xAA)  ){ //SD v2
 80008aa:	78bb      	ldrb	r3, [r7, #2]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d13a      	bne.n	8000926 <sd_init+0x11a>
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2baa      	cmp	r3, #170	; 0xaa
 80008b4:	d137      	bne.n	8000926 <sd_init+0x11a>
		    	//printf("SD 2.0+\r\n");



		    	uint32_t t_init = HAL_GetTick();
 80008b6:	f000 fe31 	bl	800151c <HAL_GetTick>
 80008ba:	60b8      	str	r0, [r7, #8]
		    	while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 80008bc:	e00c      	b.n	80008d8 <sd_init+0xcc>


		    		R1_resp = send_SD_cmd(ACMD41,0x40000000);
 80008be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008c2:	2029      	movs	r0, #41	; 0x29
 80008c4:	f7ff fe76 	bl	80005b4 <send_SD_cmd>
 80008c8:	4603      	mov	r3, r0
 80008ca:	73bb      	strb	r3, [r7, #14]

		    		printf("returned\r\n");
 80008cc:	481a      	ldr	r0, [pc, #104]	; (8000938 <sd_init+0x12c>)
 80008ce:	f003 f843 	bl	8003958 <puts>
		    		if(R1_resp==0x00){
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d008      	beq.n	80008ea <sd_init+0xde>
		    	while( (HAL_GetTick()-t_init) < 2000){ //really should be 1000ms, being extra safe
 80008d8:	f000 fe20 	bl	800151c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008e6:	d3ea      	bcc.n	80008be <sd_init+0xb2>
 80008e8:	e000      	b.n	80008ec <sd_init+0xe0>
		    			break;
 80008ea:	bf00      	nop
		    	}




		    	R1_resp = send_SD_cmd(CMD58,0x00000000);
 80008ec:	2100      	movs	r1, #0
 80008ee:	203a      	movs	r0, #58	; 0x3a
 80008f0:	f7ff fe60 	bl	80005b4 <send_SD_cmd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73bb      	strb	r3, [r7, #14]
		    	get_trail(ocr);
 80008f8:	463b      	mov	r3, r7
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff2a 	bl	8000754 <get_trail>

	    	    printf("OCR status:\r\n");
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <sd_init+0x130>)
 8000902:	f003 f829 	bl	8003958 <puts>
	    	    printf("\tCCS(0=bytes,1=blocks):%u\r\n", (ocr[0]>>6)&0x01 );
 8000906:	783b      	ldrb	r3, [r7, #0]
 8000908:	099b      	lsrs	r3, r3, #6
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <sd_init+0x134>)
 8000914:	f002 ff9a 	bl	800384c <iprintf>

	    	    //force 512 byte blocks
			    R1_resp = send_SD_cmd(CMD16,0x00000200);
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff fe49 	bl	80005b4 <send_SD_cmd>
 8000922:	4603      	mov	r3, r0
 8000924:	73bb      	strb	r3, [r7, #14]
		}
		else{
			//printf("error, CMD0 response:%u\r\n",R1_resp);
		}

}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020400 	.word	0x40020400
 8000934:	200000a0 	.word	0x200000a0
 8000938:	080048b0 	.word	0x080048b0
 800093c:	080048bc 	.word	0x080048bc
 8000940:	080048cc 	.word	0x080048cc

08000944 <read_multiple_blocks>:
    }


}

void read_multiple_blocks(uint32_t address, uint32_t N_blocks, uint8_t* buffer){
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af02      	add	r7, sp, #8
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	//Assumes not an MMC device, otherwise would send CMD23
	uint8_t R1_resp = send_SD_cmd(CMD18,address);
 8000950:	68f9      	ldr	r1, [r7, #12]
 8000952:	2012      	movs	r0, #18
 8000954:	f7ff fe2e 	bl	80005b4 <send_SD_cmd>
 8000958:	4603      	mov	r3, r0
 800095a:	75fb      	strb	r3, [r7, #23]

	uint8_t spi_tx = 0xFF;
 800095c:	23ff      	movs	r3, #255	; 0xff
 800095e:	75bb      	strb	r3, [r7, #22]
	uint8_t spi_rx = 0xFF;
 8000960:	23ff      	movs	r3, #255	; 0xff
 8000962:	757b      	strb	r3, [r7, #21]


	for(int jj=0; jj<N_blocks; jj++){
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
 8000968:	e046      	b.n	80009f8 <read_multiple_blocks+0xb4>

		int ii = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
		spi_rx = 0xFF;
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	757b      	strb	r3, [r7, #21]
		while( (spi_rx == 0xFF)&&(ii<100) ){
 8000972:	e00c      	b.n	800098e <read_multiple_blocks+0x4a>
			ii++;
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	3301      	adds	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
			HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx , 1, 50);
 800097a:	f107 0215 	add.w	r2, r7, #21
 800097e:	f107 0116 	add.w	r1, r7, #22
 8000982:	2332      	movs	r3, #50	; 0x32
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2301      	movs	r3, #1
 8000988:	4831      	ldr	r0, [pc, #196]	; (8000a50 <read_multiple_blocks+0x10c>)
 800098a:	f002 f838 	bl	80029fe <HAL_SPI_TransmitReceive>
		while( (spi_rx == 0xFF)&&(ii<100) ){
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	2bff      	cmp	r3, #255	; 0xff
 8000992:	d102      	bne.n	800099a <read_multiple_blocks+0x56>
 8000994:	6a3b      	ldr	r3, [r7, #32]
 8000996:	2b63      	cmp	r3, #99	; 0x63
 8000998:	ddec      	ble.n	8000974 <read_multiple_blocks+0x30>
		}

		//capture data
		for(ii=0;ii<512;ii++){
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
 800099e:	e011      	b.n	80009c4 <read_multiple_blocks+0x80>
			HAL_SPI_TransmitReceive(&hspi2, &spi_tx, buffer+ii+(jj*512) , 1, 50);
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	025b      	lsls	r3, r3, #9
 80009a4:	461a      	mov	r2, r3
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	4413      	add	r3, r2
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	441a      	add	r2, r3
 80009ae:	f107 0116 	add.w	r1, r7, #22
 80009b2:	2332      	movs	r3, #50	; 0x32
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2301      	movs	r3, #1
 80009b8:	4825      	ldr	r0, [pc, #148]	; (8000a50 <read_multiple_blocks+0x10c>)
 80009ba:	f002 f820 	bl	80029fe <HAL_SPI_TransmitReceive>
		for(ii=0;ii<512;ii++){
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	3301      	adds	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ca:	dbe9      	blt.n	80009a0 <read_multiple_blocks+0x5c>

		}

		//read CRC - don't use for now
		for(ii=0;ii<2;ii++){
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
 80009d0:	e00c      	b.n	80009ec <read_multiple_blocks+0xa8>
			HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 80009d2:	f107 0215 	add.w	r2, r7, #21
 80009d6:	f107 0116 	add.w	r1, r7, #22
 80009da:	2332      	movs	r3, #50	; 0x32
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	481b      	ldr	r0, [pc, #108]	; (8000a50 <read_multiple_blocks+0x10c>)
 80009e2:	f002 f80c 	bl	80029fe <HAL_SPI_TransmitReceive>
		for(ii=0;ii<2;ii++){
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	3301      	adds	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	ddef      	ble.n	80009d2 <read_multiple_blocks+0x8e>
	for(int jj=0; jj<N_blocks; jj++){
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3301      	adds	r3, #1
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8b4      	bhi.n	800096a <read_multiple_blocks+0x26>

		}
	}


	R1_resp = send_SD_cmd(CMD12,address);
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	200c      	movs	r0, #12
 8000a04:	f7ff fdd6 	bl	80005b4 <send_SD_cmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	75fb      	strb	r3, [r7, #23]

	int busy = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
	int counter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
	while(busy&&(counter<1000) ){
 8000a14:	e011      	b.n	8000a3a <read_multiple_blocks+0xf6>
		HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 8000a16:	f107 0215 	add.w	r2, r7, #21
 8000a1a:	f107 0116 	add.w	r1, r7, #22
 8000a1e:	2332      	movs	r3, #50	; 0x32
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <read_multiple_blocks+0x10c>)
 8000a26:	f001 ffea 	bl	80029fe <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 8000a2a:	7d7b      	ldrb	r3, [r7, #21]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <read_multiple_blocks+0xf0>
			busy = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
		}
		counter++;
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	3301      	adds	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
	while(busy&&(counter<1000) ){
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <read_multiple_blocks+0x104>
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a46:	dbe6      	blt.n	8000a16 <read_multiple_blocks+0xd2>
	}


}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000a0 	.word	0x200000a0

08000a54 <write_multiple_blocks>:


void write_multiple_blocks(uint32_t address, uint32_t N_blocks, uint8_t* buffer){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	uint8_t R1_resp = send_SD_cmd(CMD25,address);
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	2019      	movs	r0, #25
 8000a64:	f7ff fda6 	bl	80005b4 <send_SD_cmd>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	74fb      	strb	r3, [r7, #19]

	uint8_t spi_tx = 0xFF;
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	74bb      	strb	r3, [r7, #18]
	uint8_t spi_rx = 0xFF;
 8000a70:	23ff      	movs	r3, #255	; 0xff
 8000a72:	747b      	strb	r3, [r7, #17]

	//one buffer of nothing
	HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 8000a74:	f107 0211 	add.w	r2, r7, #17
 8000a78:	f107 0112 	add.w	r1, r7, #18
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2301      	movs	r3, #1
 8000a82:	485b      	ldr	r0, [pc, #364]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000a84:	f001 ffbb 	bl	80029fe <HAL_SPI_TransmitReceive>


	for(int jj=0; jj<N_blocks; jj++){
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a8c:	e071      	b.n	8000b72 <write_multiple_blocks+0x11e>


		//send data packet
		spi_tx = 0xFC;
 8000a8e:	23fc      	movs	r3, #252	; 0xfc
 8000a90:	74bb      	strb	r3, [r7, #18]
		HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx , 1, 50);
 8000a92:	f107 0211 	add.w	r2, r7, #17
 8000a96:	f107 0112 	add.w	r1, r7, #18
 8000a9a:	2332      	movs	r3, #50	; 0x32
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	4853      	ldr	r0, [pc, #332]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000aa2:	f001 ffac 	bl	80029fe <HAL_SPI_TransmitReceive>

		//send data
		//spi_tx = 0xAC;
		for(int ii=0;ii<512;ii++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e011      	b.n	8000ad0 <write_multiple_blocks+0x7c>
//			HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
			HAL_SPI_TransmitReceive(&hspi2, buffer+ii+(512*jj), &spi_rx, 1, 50);
 8000aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aae:	025b      	lsls	r3, r3, #9
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	4413      	add	r3, r2
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	18d1      	adds	r1, r2, r3
 8000aba:	f107 0211 	add.w	r2, r7, #17
 8000abe:	2332      	movs	r3, #50	; 0x32
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	484a      	ldr	r0, [pc, #296]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000ac6:	f001 ff9a 	bl	80029fe <HAL_SPI_TransmitReceive>
		for(int ii=0;ii<512;ii++){
 8000aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000acc:	3301      	adds	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ad6:	dbe9      	blt.n	8000aac <write_multiple_blocks+0x58>
		}

		spi_tx = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	74bb      	strb	r3, [r7, #18]
		//crc, dummy packets
		for(int ii=0;ii<2;ii++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae0:	e00c      	b.n	8000afc <write_multiple_blocks+0xa8>
			HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 8000ae2:	f107 0211 	add.w	r2, r7, #17
 8000ae6:	f107 0112 	add.w	r1, r7, #18
 8000aea:	2332      	movs	r3, #50	; 0x32
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	483f      	ldr	r0, [pc, #252]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000af2:	f001 ff84 	bl	80029fe <HAL_SPI_TransmitReceive>
		for(int ii=0;ii<2;ii++){
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	3301      	adds	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	ddef      	ble.n	8000ae2 <write_multiple_blocks+0x8e>
		}

		//get data response, fail if not data accepted
		spi_tx = 0xFF;
 8000b02:	23ff      	movs	r3, #255	; 0xff
 8000b04:	74bb      	strb	r3, [r7, #18]
		HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 8000b06:	f107 0211 	add.w	r2, r7, #17
 8000b0a:	f107 0112 	add.w	r1, r7, #18
 8000b0e:	2332      	movs	r3, #50	; 0x32
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	4836      	ldr	r0, [pc, #216]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000b16:	f001 ff72 	bl	80029fe <HAL_SPI_TransmitReceive>
		printf("\tWrite response (status):%u\r\n", (spi_rx >> 1) & 0x7 );
 8000b1a:	7c7b      	ldrb	r3, [r7, #17]
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4833      	ldr	r0, [pc, #204]	; (8000bf4 <write_multiple_blocks+0x1a0>)
 8000b28:	f002 fe90 	bl	800384c <iprintf>

		int busy = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
		int counter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
		spi_tx = 0xFF;
 8000b34:	23ff      	movs	r3, #255	; 0xff
 8000b36:	74bb      	strb	r3, [r7, #18]

		while(busy&&(counter<1000) ){
 8000b38:	e011      	b.n	8000b5e <write_multiple_blocks+0x10a>
			HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 8000b3a:	f107 0211 	add.w	r2, r7, #17
 8000b3e:	f107 0112 	add.w	r1, r7, #18
 8000b42:	2332      	movs	r3, #50	; 0x32
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2301      	movs	r3, #1
 8000b48:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000b4a:	f001 ff58 	bl	80029fe <HAL_SPI_TransmitReceive>
			if(spi_rx!=0){
 8000b4e:	7c7b      	ldrb	r3, [r7, #17]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <write_multiple_blocks+0x104>
				busy = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
			}
			counter++;
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
		while(busy&&(counter<1000) ){
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <write_multiple_blocks+0x118>
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b6a:	dbe6      	blt.n	8000b3a <write_multiple_blocks+0xe6>
	for(int jj=0; jj<N_blocks; jj++){
 8000b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d889      	bhi.n	8000a8e <write_multiple_blocks+0x3a>
		}

	}

	//send stop token
	spi_tx = 0xFD;
 8000b7a:	23fd      	movs	r3, #253	; 0xfd
 8000b7c:	74bb      	strb	r3, [r7, #18]
	HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx , 1, 50);
 8000b7e:	f107 0211 	add.w	r2, r7, #17
 8000b82:	f107 0112 	add.w	r1, r7, #18
 8000b86:	2332      	movs	r3, #50	; 0x32
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000b8e:	f001 ff36 	bl	80029fe <HAL_SPI_TransmitReceive>

	//
	spi_tx = 0xFF;
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	74bb      	strb	r3, [r7, #18]
	HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx , 1, 50);
 8000b96:	f107 0211 	add.w	r2, r7, #17
 8000b9a:	f107 0112 	add.w	r1, r7, #18
 8000b9e:	2332      	movs	r3, #50	; 0x32
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000ba6:	f001 ff2a 	bl	80029fe <HAL_SPI_TransmitReceive>


	int busy = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
	int counter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
	while(busy&&(counter<1000) ){
 8000bb2:	e011      	b.n	8000bd8 <write_multiple_blocks+0x184>
		HAL_SPI_TransmitReceive(&hspi2, &spi_tx, &spi_rx, 1, 50);
 8000bb4:	f107 0211 	add.w	r2, r7, #17
 8000bb8:	f107 0112 	add.w	r1, r7, #18
 8000bbc:	2332      	movs	r3, #50	; 0x32
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <write_multiple_blocks+0x19c>)
 8000bc4:	f001 ff1b 	bl	80029fe <HAL_SPI_TransmitReceive>
		if(spi_rx!=0){
 8000bc8:	7c7b      	ldrb	r3, [r7, #17]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <write_multiple_blocks+0x17e>
			busy = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
		}
		else{
		}
		counter++;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
	while(busy&&(counter<1000) ){
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <write_multiple_blocks+0x192>
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be4:	dbe6      	blt.n	8000bb4 <write_multiple_blocks+0x160>
	}

}
 8000be6:	bf00      	nop
 8000be8:	3730      	adds	r7, #48	; 0x30
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000a0 	.word	0x200000a0
 8000bf4:	080048e8 	.word	0x080048e8

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fc26 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f886 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 f952 	bl	8000eb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c0c:	f000 f926 	bl	8000e5c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c10:	f000 f8ee 	bl	8000df0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000c14:	f002 fd22 	bl	800365c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  GenerateCRCTable();
 8000c18:	f000 f9ca 	bl	8000fb0 <GenerateCRCTable>

  printf("\r\n-------------\r\n-------------\r\n  Starting...\r\n-------------\r\n-------------\r\n\r\n\r\n");
 8000c1c:	4839      	ldr	r0, [pc, #228]	; (8000d04 <main+0x10c>)
 8000c1e:	f002 fe9b 	bl	8003958 <puts>
  sd_init();
 8000c22:	f7ff fdf3 	bl	800080c <sd_init>

  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c26:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <main+0x110>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	61da      	str	r2, [r3, #28]

  uint8_t buff[1024] = {0};
 8000c2c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000c30:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fdfb 	bl	800383c <memset>
  uint8_t buff2[1024] = {0};
 8000c46:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000c4a:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	3304      	adds	r3, #4
 8000c54:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fdee 	bl	800383c <memset>

  for(int ii=0; ii<1024; ii++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000c66:	e010      	b.n	8000c8a <main+0x92>
	  buff2[ii] = ii&0xFF;
 8000c68:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000c6c:	b2d9      	uxtb	r1, r3
 8000c6e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000c72:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8000c76:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000c7a:	4413      	add	r3, r2
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
  for(int ii=0; ii<1024; ii++){
 8000c80:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000c8a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c92:	dbe9      	blt.n	8000c68 <main+0x70>
  }

  write_multiple_blocks(0x0,2,buff2);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	461a      	mov	r2, r3
 8000c98:	2102      	movs	r1, #2
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff feda 	bl	8000a54 <write_multiple_blocks>
//  }

  //write_block(0x0,buff2);
  //write_block(0x1,buff2);

  read_multiple_blocks(0x0,2,buff);
 8000ca0:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fe4b 	bl	8000944 <read_multiple_blocks>

//  read_block(0x0,buff);
//  read_block(0x1,buff);

  //Debug - print out block
  for(int ii=0; ii<1024; ii++){
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8000cb4:	e012      	b.n	8000cdc <main+0xe4>
	  printf("(%i,%i)\r\n",ii,buff[ii]);
 8000cb6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000cba:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8000cbe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <main+0x114>)
 8000cce:	f002 fdbd 	bl	800384c <iprintf>
  for(int ii=0; ii<1024; ii++){
 8000cd2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8000cdc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	dbe7      	blt.n	8000cb6 <main+0xbe>

  while (1)
  {
    /* USER CODE END WHILE */

	  int x = HAL_GetTick();
 8000ce6:	f000 fc19 	bl	800151c <HAL_GetTick>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	  printf("Tick:%i\r\n",x);
 8000cf0:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <main+0x118>)
 8000cf6:	f002 fda9 	bl	800384c <iprintf>
	  HAL_Delay(50000);
 8000cfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cfe:	f000 fc19 	bl	8001534 <HAL_Delay>
  {
 8000d02:	e7f0      	b.n	8000ce6 <main+0xee>
 8000d04:	08004908 	.word	0x08004908
 8000d08:	200000a0 	.word	0x200000a0
 8000d0c:	0800495c 	.word	0x0800495c
 8000d10:	08004968 	.word	0x08004968

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2234      	movs	r2, #52	; 0x34
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fd8a 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <SystemClock_Config+0xd4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <SystemClock_Config+0xd4>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <SystemClock_Config+0xd4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <SystemClock_Config+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d60:	4a22      	ldr	r2, [pc, #136]	; (8000dec <SystemClock_Config+0xd8>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <SystemClock_Config+0xd8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d92:	2304      	movs	r3, #4
 8000d94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 f9c8 	bl	8002138 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000dae:	f000 f988 	bl	80010c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fe68 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dda:	f000 f972 	bl	80010c2 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3750      	adds	r7, #80	; 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <MX_SPI2_Init+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e24:	2230      	movs	r2, #48	; 0x30
 8000e26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e3c:	220a      	movs	r2, #10
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_SPI2_Init+0x64>)
 8000e42:	f001 fc17 	bl	8002674 <HAL_SPI_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e4c:	f000 f939 	bl	80010c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000a0 	.word	0x200000a0
 8000e58:	40003800 	.word	0x40003800

08000e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART2_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f002 f820 	bl	8002ed8 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f910 	bl	80010c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000f8 	.word	0x200000f8
 8000eac:	40004400 	.word	0x40004400

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a2c      	ldr	r2, [pc, #176]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f3c:	f000 fd98 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0xd8>)
 8000f58:	f000 fbf6 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f74:	f000 fbe8 	bl	8001748 <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800

08000f8c <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f94:	1d39      	adds	r1, r7, #4
 8000f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <__io_putchar+0x20>)
 8000f9e:	f001 ffe8 	bl	8002f72 <HAL_UART_Transmit>

  return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000f8 	.word	0x200000f8

08000fb0 <GenerateCRCTable>:

void GenerateCRCTable()
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
  int i, j;
  uint8_t CRCPoly = 0x89;  // the value of our CRC-7 polynomial
 8000fb6:	2389      	movs	r3, #137	; 0x89
 8000fb8:	71fb      	strb	r3, [r7, #7]

  // generate a table value for all 256 possible byte values
  for (i = 0; i < 256; ++i) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e03c      	b.n	800103a <GenerateCRCTable+0x8a>
    CRCTable[i] = (i & 0x80) ? i ^ CRCPoly : i;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <GenerateCRCTable+0x2a>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	e001      	b.n	8000fde <GenerateCRCTable+0x2e>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	491c      	ldr	r1, [pc, #112]	; (8001050 <GenerateCRCTable+0xa0>)
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	440a      	add	r2, r1
 8000fe4:	7013      	strb	r3, [r2, #0]
    for (j = 1; j < 8; ++j) {
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	e020      	b.n	800102e <GenerateCRCTable+0x7e>
        CRCTable[i] <<= 1;
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <GenerateCRCTable+0xa0>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b2d9      	uxtb	r1, r3
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <GenerateCRCTable+0xa0>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	460a      	mov	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
        if (CRCTable[i] & 0x80){
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <GenerateCRCTable+0xa0>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b25b      	sxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	da0b      	bge.n	8001028 <GenerateCRCTable+0x78>
            CRCTable[i] ^= CRCPoly;
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <GenerateCRCTable+0xa0>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4053      	eors	r3, r2
 800101c:	b2d9      	uxtb	r1, r3
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <GenerateCRCTable+0xa0>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	460a      	mov	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
    for (j = 1; j < 8; ++j) {
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b07      	cmp	r3, #7
 8001032:	dddb      	ble.n	8000fec <GenerateCRCTable+0x3c>
  for (i = 0; i < 256; ++i) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2bff      	cmp	r3, #255	; 0xff
 800103e:	ddbf      	ble.n	8000fc0 <GenerateCRCTable+0x10>
        }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000013c 	.word	0x2000013c

08001054 <CRCAdd>:
uint8_t CRCAdd(uint8_t CRC, uint8_t message_byte)
{
	return 0;
 //   return CRCTable[(CRC << 1) ^ message_byte];
}*/
uint8_t CRCAdd(uint8_t CRC_val , uint8_t message_byte){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
	 return CRCTable[(CRC_val << 1) ^ message_byte];
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	005a      	lsls	r2, r3, #1
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	4053      	eors	r3, r2
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <CRCAdd+0x28>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	2000013c 	.word	0x2000013c

08001080 <getCRC>:


// returns the CRC-7 for a message of "length" bytes
uint8_t getCRC(uint8_t message[], int length)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]

  int i;
  uint8_t CRC_val = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	72fb      	strb	r3, [r7, #11]

  for (i = 0; i < length; ++i){
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e00d      	b.n	80010b0 <getCRC+0x30>
	  CRC_val = CRCAdd(CRC_val, message[i]);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	7afb      	ldrb	r3, [r7, #11]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffd7 	bl	8001054 <CRCAdd>
 80010a6:	4603      	mov	r3, r0
 80010a8:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length; ++i){
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbed      	blt.n	8001094 <getCRC+0x14>
  }

  return CRC_val;
 80010b8:	7afb      	ldrb	r3, [r7, #11]

}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c6:	b672      	cpsid	i
}
 80010c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ca:	e7fe      	b.n	80010ca <Error_Handler+0x8>

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800110a:	2007      	movs	r0, #7
 800110c:	f000 fae8 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001176:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001188:	2305      	movs	r3, #5
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001194:	f000 fad8 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40003800 	.word	0x40003800
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_UART_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12b      	bne.n	8001226 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_UART_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x88>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_UART_MspInit+0x88>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_UART_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <HAL_UART_MspInit+0x8c>)
 8001222:	f000 fa91 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f934 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e00a      	b.n	80012b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a2:	f3af 8000 	nop.w
 80012a6:	4601      	mov	r1, r0
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	60ba      	str	r2, [r7, #8]
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbf0      	blt.n	80012a2 <_read+0x12>
  }

  return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e009      	b.n	80012f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	60ba      	str	r2, [r7, #8]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe51 	bl	8000f8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf1      	blt.n	80012dc <_write+0x12>
  }
  return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_close>:

int _close(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132a:	605a      	str	r2, [r3, #4]
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_isatty>:

int _isatty(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f002 fa24 	bl	80037e8 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20020000 	.word	0x20020000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	2000023c 	.word	0x2000023c
 80013d4:	20000268 	.word	0x20000268

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd7 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 f9e3 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff fbe3 	bl	8000bf8 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001440:	08004a34 	.word	0x08004a34
  ldr r2, =_sbss
 8001444:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001448:	20000268 	.word	0x20000268

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f931 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe22 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f93b 	bl	800172e <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d0:	f000 f911 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	20000240 	.word	0x20000240

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000240 	.word	0x20000240

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff47 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff5c 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb0 	bl	800169c <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e165      	b.n	8001a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8154 	bne.w	8001a2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80ae 	beq.w	8001a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a5c      	ldr	r2, [pc, #368]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b5a      	ldr	r3, [pc, #360]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <HAL_GPIO_Init+0x304>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <HAL_GPIO_Init+0x308>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x21a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4e      	ldr	r2, [pc, #312]	; (8001a54 <HAL_GPIO_Init+0x30c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x216>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4d      	ldr	r2, [pc, #308]	; (8001a58 <HAL_GPIO_Init+0x310>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x212>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_GPIO_Init+0x314>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_GPIO_Init+0x318>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x20a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_GPIO_Init+0x31c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x206>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_GPIO_Init+0x320>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x202>
 8001946:	2306      	movs	r3, #6
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 800194a:	2307      	movs	r3, #7
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x21c>
 8001962:	2300      	movs	r3, #0
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001974:	4935      	ldr	r1, [pc, #212]	; (8001a4c <HAL_GPIO_Init+0x304>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_GPIO_Init+0x324>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d0:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_GPIO_Init+0x324>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_GPIO_Init+0x324>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <HAL_GPIO_Init+0x324>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	f67f ae96 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40013c00 	.word	0x40013c00

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cc      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e067      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4934      	ldr	r1, [pc, #208]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff fcc2 	bl	800151c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff fcbe 	bl	800151c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20c      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f855 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fc22 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08004974 	.word	0x08004974
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a9b      	lsrs	r3, r3, #10
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08004984 	.word	0x08004984

08001cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb4:	f7ff ffdc 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0b5b      	lsrs	r3, r3, #13
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08004984 	.word	0x08004984

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cdc:	b0ae      	sub	sp, #184	; 0xb8
 8001cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfe:	4bcb      	ldr	r3, [pc, #812]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	f200 8206 	bhi.w	8002118 <HAL_RCC_GetSysClockFreq+0x440>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d49 	.word	0x08001d49
 8001d18:	08002119 	.word	0x08002119
 8001d1c:	08002119 	.word	0x08002119
 8001d20:	08002119 	.word	0x08002119
 8001d24:	08001d51 	.word	0x08001d51
 8001d28:	08002119 	.word	0x08002119
 8001d2c:	08002119 	.word	0x08002119
 8001d30:	08002119 	.word	0x08002119
 8001d34:	08001d59 	.word	0x08001d59
 8001d38:	08002119 	.word	0x08002119
 8001d3c:	08002119 	.word	0x08002119
 8001d40:	08002119 	.word	0x08002119
 8001d44:	08001f49 	.word	0x08001f49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4bb9      	ldr	r3, [pc, #740]	; (8002030 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d4e:	e1e7      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4bb8      	ldr	r3, [pc, #736]	; (8002034 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d56:	e1e3      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4bb4      	ldr	r3, [pc, #720]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d64:	4bb1      	ldr	r3, [pc, #708]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d071      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4bae      	ldr	r3, [pc, #696]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d7c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d96:	4622      	mov	r2, r4
 8001d98:	462b      	mov	r3, r5
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0159      	lsls	r1, r3, #5
 8001da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da8:	0150      	lsls	r0, r2, #5
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4621      	mov	r1, r4
 8001db0:	1a51      	subs	r1, r2, r1
 8001db2:	6439      	str	r1, [r7, #64]	; 0x40
 8001db4:	4629      	mov	r1, r5
 8001db6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001dc8:	4649      	mov	r1, r9
 8001dca:	018b      	lsls	r3, r1, #6
 8001dcc:	4641      	mov	r1, r8
 8001dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	018a      	lsls	r2, r1, #6
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	1a51      	subs	r1, r2, r1
 8001dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ddc:	4649      	mov	r1, r9
 8001dde:	eb63 0301 	sbc.w	r3, r3, r1
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001df0:	4649      	mov	r1, r9
 8001df2:	00cb      	lsls	r3, r1, #3
 8001df4:	4641      	mov	r1, r8
 8001df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	00ca      	lsls	r2, r1, #3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	4622      	mov	r2, r4
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0a:	462b      	mov	r3, r5
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	eb42 0303 	adc.w	r3, r2, r3
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e20:	4629      	mov	r1, r5
 8001e22:	024b      	lsls	r3, r1, #9
 8001e24:	4621      	mov	r1, r4
 8001e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	024a      	lsls	r2, r1, #9
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e44:	f7fe fa34 	bl	80002b0 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e52:	e067      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e6e:	2300      	movs	r3, #0
 8001e70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e76:	4622      	mov	r2, r4
 8001e78:	462b      	mov	r3, r5
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	0159      	lsls	r1, r3, #5
 8001e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e88:	0150      	lsls	r0, r2, #5
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4621      	mov	r1, r4
 8001e90:	1a51      	subs	r1, r2, r1
 8001e92:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e94:	4629      	mov	r1, r5
 8001e96:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	018b      	lsls	r3, r1, #6
 8001eac:	4641      	mov	r1, r8
 8001eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb2:	4641      	mov	r1, r8
 8001eb4:	018a      	lsls	r2, r1, #6
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ece:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ed6:	4692      	mov	sl, r2
 8001ed8:	469b      	mov	fp, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	eb1a 0303 	adds.w	r3, sl, r3
 8001ee0:	623b      	str	r3, [r7, #32]
 8001ee2:	462b      	mov	r3, r5
 8001ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	028b      	lsls	r3, r1, #10
 8001efa:	4621      	mov	r1, r4
 8001efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f00:	4621      	mov	r1, r4
 8001f02:	028a      	lsls	r2, r1, #10
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8001f10:	677a      	str	r2, [r7, #116]	; 0x74
 8001f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f16:	f7fe f9cb 	bl	80002b0 <__aeabi_uldivmod>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4613      	mov	r3, r2
 8001f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f46:	e0eb      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d06b      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	2200      	movs	r2, #0
 8001f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	663b      	str	r3, [r7, #96]	; 0x60
 8001f74:	2300      	movs	r3, #0
 8001f76:	667b      	str	r3, [r7, #100]	; 0x64
 8001f78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	462b      	mov	r3, r5
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0159      	lsls	r1, r3, #5
 8001f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f8e:	0150      	lsls	r0, r2, #5
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4621      	mov	r1, r4
 8001f96:	1a51      	subs	r1, r2, r1
 8001f98:	61b9      	str	r1, [r7, #24]
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001fae:	4659      	mov	r1, fp
 8001fb0:	018b      	lsls	r3, r1, #6
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fb8:	4651      	mov	r1, sl
 8001fba:	018a      	lsls	r2, r1, #6
 8001fbc:	4651      	mov	r1, sl
 8001fbe:	ebb2 0801 	subs.w	r8, r2, r1
 8001fc2:	4659      	mov	r1, fp
 8001fc4:	eb63 0901 	sbc.w	r9, r3, r1
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	4623      	mov	r3, r4
 8001fe2:	eb18 0303 	adds.w	r3, r8, r3
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	462b      	mov	r3, r5
 8001fea:	eb49 0303 	adc.w	r3, r9, r3
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	024b      	lsls	r3, r1, #9
 8002000:	4621      	mov	r1, r4
 8002002:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002006:	4621      	mov	r1, r4
 8002008:	024a      	lsls	r2, r1, #9
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002012:	2200      	movs	r2, #0
 8002014:	65bb      	str	r3, [r7, #88]	; 0x58
 8002016:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002018:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800201c:	f7fe f948 	bl	80002b0 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800202a:	e065      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x420>
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_GetSysClockFreq+0x458>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	2200      	movs	r2, #0
 8002040:	4618      	mov	r0, r3
 8002042:	4611      	mov	r1, r2
 8002044:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002048:	653b      	str	r3, [r7, #80]	; 0x50
 800204a:	2300      	movs	r3, #0
 800204c:	657b      	str	r3, [r7, #84]	; 0x54
 800204e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002052:	4642      	mov	r2, r8
 8002054:	464b      	mov	r3, r9
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	0159      	lsls	r1, r3, #5
 8002060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002064:	0150      	lsls	r0, r2, #5
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4641      	mov	r1, r8
 800206c:	1a51      	subs	r1, r2, r1
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	4649      	mov	r1, r9
 8002072:	eb63 0301 	sbc.w	r3, r3, r1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002084:	4659      	mov	r1, fp
 8002086:	018b      	lsls	r3, r1, #6
 8002088:	4651      	mov	r1, sl
 800208a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800208e:	4651      	mov	r1, sl
 8002090:	018a      	lsls	r2, r1, #6
 8002092:	4651      	mov	r1, sl
 8002094:	1a54      	subs	r4, r2, r1
 8002096:	4659      	mov	r1, fp
 8002098:	eb63 0501 	sbc.w	r5, r3, r1
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	00eb      	lsls	r3, r5, #3
 80020a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	18e3      	adds	r3, r4, r3
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e0:	2200      	movs	r2, #0
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020ea:	f7fe f8e1 	bl	80002b0 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4613      	mov	r3, r2
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_GetSysClockFreq+0x458>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	0f1b      	lsrs	r3, r3, #28
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800210a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002116:	e003      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetSysClockFreq+0x45c>)
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800211e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002124:	4618      	mov	r0, r3
 8002126:	37b8      	adds	r7, #184	; 0xb8
 8002128:	46bd      	mov	sp, r7
 800212a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	00f42400 	.word	0x00f42400

08002138 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e28d      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8083 	beq.w	800225e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b04      	cmp	r3, #4
 8002162:	d019      	beq.n	8002198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002164:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800216c:	2b08      	cmp	r3, #8
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002170:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217c:	d00c      	beq.n	8002198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d05b      	beq.n	800225c <HAL_RCC_OscConfig+0x124>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e25a      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x90>
 80021ba:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7b      	ldr	r2, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xcc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0xb4>
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b73      	ldr	r3, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a72      	ldr	r2, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xcc>
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6b      	ldr	r2, [pc, #428]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f986 	bl	800151c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff f982 	bl	800151c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e21f      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xdc>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff f972 	bl	800151c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff f96e 	bl	800151c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e20b      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x104>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d06f      	beq.n	800234a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d017      	beq.n	80022a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002276:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800227e:	2b08      	cmp	r3, #8
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x186>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1d3      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4937      	ldr	r1, [pc, #220]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_OscConfig+0x278>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7ff f91b 	bl	800151c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ea:	f7ff f917 	bl	800151c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1b4      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4925      	ldr	r1, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x278>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff f8fa 	bl	800151c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232c:	f7ff f8f6 	bl	800151c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e193      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d036      	beq.n	80023c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCC_OscConfig+0x27c>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff f8da 	bl	800151c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff f8d6 	bl	800151c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e173      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x234>
 800238a:	e01b      	b.n	80023c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_OscConfig+0x27c>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7ff f8c3 	bl	800151c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	e00e      	b.n	80023b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239a:	f7ff f8bf 	bl	800151c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d907      	bls.n	80023b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e15c      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470000 	.word	0x42470000
 80023b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b8a      	ldr	r3, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ea      	bne.n	800239a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8097 	beq.w	8002500 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b83      	ldr	r3, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a7e      	ldr	r2, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b7c      	ldr	r3, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a75      	ldr	r2, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7ff f87f 	bl	800151c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7ff f87b 	bl	800151c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e118      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x31e>
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x358>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x340>
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x358>
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a59      	ldr	r2, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7ff f840 	bl	800151c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7ff f83c 	bl	800151c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0d7      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0ee      	beq.n	80024a0 <HAL_RCC_OscConfig+0x368>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7ff f82a 	bl	800151c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7ff f826 	bl	800151c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0c1      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ee      	bne.n	80024cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80ad 	beq.w	8002664 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d060      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d145      	bne.n	80025aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x4b4>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fffa 	bl	800151c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fff6 	bl	800151c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e093      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4b4>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe ffcb 	bl	800151c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe ffc7 	bl	800151c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e064      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x452>
 80025a8:	e05c      	b.n	8002664 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x4b4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe ffb4 	bl	800151c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe ffb0 	bl	800151c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04d      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x480>
 80025d6:	e045      	b.n	8002664 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e040      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x538>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d129      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d122      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d119      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d10f      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07b      	b.n	800277e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002696:	d009      	beq.n	80026ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
 800269e:	e005      	b.n	80026ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fd28 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	ea42 0103 	orr.w	r1, r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0104 	and.w	r1, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f003 0210 	and.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_SPI_Transmit+0x22>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e126      	b.n	80029f6 <HAL_SPI_Transmit+0x270>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b0:	f7fe feb4 	bl	800151c <HAL_GetTick>
 80027b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027ca:	e10b      	b.n	80029e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_Transmit+0x52>
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027dc:	e102      	b.n	80029e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002824:	d10f      	bne.n	8002846 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d007      	beq.n	8002864 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800286c:	d14b      	bne.n	8002906 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_SPI_Transmit+0xf6>
 8002876:	8afb      	ldrh	r3, [r7, #22]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d13e      	bne.n	80028fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028a0:	e02b      	b.n	80028fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d112      	bne.n	80028d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	1c9a      	adds	r2, r3, #2
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80028d4:	e011      	b.n	80028fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028d6:	f7fe fe21 	bl	800151c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d803      	bhi.n	80028ee <HAL_SPI_Transmit+0x168>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ec:	d102      	bne.n	80028f4 <HAL_SPI_Transmit+0x16e>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028f8:	e074      	b.n	80029e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ce      	bne.n	80028a2 <HAL_SPI_Transmit+0x11c>
 8002904:	e04c      	b.n	80029a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_SPI_Transmit+0x18e>
 800290e:	8afb      	ldrh	r3, [r7, #22]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d140      	bne.n	8002996 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800293a:	e02c      	b.n	8002996 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	d113      	bne.n	8002972 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002970:	e011      	b.n	8002996 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002972:	f7fe fdd3 	bl	800151c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d803      	bhi.n	800298a <HAL_SPI_Transmit+0x204>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Transmit+0x20a>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002994:	e026      	b.n	80029e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1cd      	bne.n	800293c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fa55 	bl	8002e54 <SPI_EndRxTxTransaction>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e000      	b.n	80029e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80029e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08c      	sub	sp, #48	; 0x30
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x26>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e18a      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x33c>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2c:	f7fe fd76 	bl	800151c <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d00f      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x70>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a54:	d107      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x68>
 8002a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a6c:	e15b      	b.n	8002d26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x82>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x82>
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a86:	e14e      	b.n	8002d26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d003      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2205      	movs	r2, #5
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	887a      	ldrh	r2, [r7, #2]
 8002ab2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d007      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af8:	d178      	bne.n	8002bec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x10a>
 8002b02:	8b7b      	ldrh	r3, [r7, #26]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d166      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2c:	e053      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d11b      	bne.n	8002b74 <HAL_SPI_TransmitReceive+0x176>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x176>
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d113      	bne.n	8002b74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d119      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x1b8>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d014      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	b292      	uxth	r2, r2
 8002b98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bb6:	f7fe fcb1 	bl	800151c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d807      	bhi.n	8002bd6 <HAL_SPI_TransmitReceive+0x1d8>
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bcc:	d003      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bd4:	e0a7      	b.n	8002d26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1a6      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x130>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1a1      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x130>
 8002bea:	e07c      	b.n	8002ce6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x1fc>
 8002bf4:	8b7b      	ldrh	r3, [r7, #26]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d16b      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c20:	e057      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11c      	bne.n	8002c6a <HAL_SPI_TransmitReceive+0x26c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d017      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x26c>
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d114      	bne.n	8002c6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d119      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x2ae>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d014      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cac:	f7fe fc36 	bl	800151c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d803      	bhi.n	8002cc4 <HAL_SPI_TransmitReceive+0x2c6>
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc2:	d102      	bne.n	8002cca <HAL_SPI_TransmitReceive+0x2cc>
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cd0:	e029      	b.n	8002d26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1a2      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x224>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d19d      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8b2 	bl	8002e54 <SPI_EndRxTxTransaction>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d02:	e010      	b.n	8002d26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	e000      	b.n	8002d26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3730      	adds	r7, #48	; 0x30
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d54:	f7fe fbe2 	bl	800151c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d64:	f7fe fbda 	bl	800151c <HAL_GetTick>
 8002d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	0d1b      	lsrs	r3, r3, #20
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7a:	e054      	b.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d82:	d050      	beq.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d84:	f7fe fbca 	bl	800151c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d902      	bls.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13d      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db2:	d111      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dbc:	d004      	beq.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d107      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d10f      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e017      	b.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d19b      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000000 	.word	0x20000000

08002e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <SPI_EndRxTxTransaction+0x7c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <SPI_EndRxTxTransaction+0x80>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0d5b      	lsrs	r3, r3, #21
 8002e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7e:	d112      	bne.n	8002ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ff5a 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e00f      	b.n	8002ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d0f2      	beq.n	8002ea6 <SPI_EndRxTxTransaction+0x52>
 8002ec0:	e000      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ec2:	bf00      	nop
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	165e9f81 	.word	0x165e9f81

08002ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e03f      	b.n	8002f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f954 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f929 	bl	8003174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08a      	sub	sp, #40	; 0x28
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d17c      	bne.n	800308c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_Transmit+0x2c>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e075      	b.n	800308e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x3e>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e06e      	b.n	800308e <HAL_UART_Transmit+0x11c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc6:	f7fe faa9 	bl	800151c <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d108      	bne.n	8002ff4 <HAL_UART_Transmit+0x82>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e003      	b.n	8002ffc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003004:	e02a      	b.n	800305c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f840 	bl	8003096 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e036      	b.n	800308e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	3302      	adds	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e007      	b.n	800304e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1cf      	bne.n	8003006 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f810 	bl	8003096 <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e006      	b.n	800308e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b090      	sub	sp, #64	; 0x40
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a6:	e050      	b.n	800314a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ae:	d04c      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b6:	f7fe fa31 	bl	800151c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d241      	bcs.n	800314a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e6:	637a      	str	r2, [r7, #52]	; 0x34
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e5      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	613b      	str	r3, [r7, #16]
   return(result);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800311a:	623a      	str	r2, [r7, #32]
 800311c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	69f9      	ldr	r1, [r7, #28]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	61bb      	str	r3, [r7, #24]
   return(result);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e00f      	b.n	800316a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d09f      	beq.n	80030a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3740      	adds	r7, #64	; 0x40
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003178:	b0c0      	sub	sp, #256	; 0x100
 800317a:	af00      	add	r7, sp, #0
 800317c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	ea40 0301 	orr.w	r3, r0, r1
 800319c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031cc:	f021 010c 	bic.w	r1, r1, #12
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031da:	430b      	orrs	r3, r1
 80031dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ee:	6999      	ldr	r1, [r3, #24]
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	ea40 0301 	orr.w	r3, r0, r1
 80031fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b8f      	ldr	r3, [pc, #572]	; (8003440 <UART_SetConfig+0x2cc>)
 8003204:	429a      	cmp	r2, r3
 8003206:	d005      	beq.n	8003214 <UART_SetConfig+0xa0>
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b8d      	ldr	r3, [pc, #564]	; (8003444 <UART_SetConfig+0x2d0>)
 8003210:	429a      	cmp	r2, r3
 8003212:	d104      	bne.n	800321e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe fd4c 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
 8003218:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800321c:	e003      	b.n	8003226 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800321e:	f7fe fd33 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8003222:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003230:	f040 810c 	bne.w	800344c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003238:	2200      	movs	r2, #0
 800323a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800323e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003242:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003246:	4622      	mov	r2, r4
 8003248:	462b      	mov	r3, r5
 800324a:	1891      	adds	r1, r2, r2
 800324c:	65b9      	str	r1, [r7, #88]	; 0x58
 800324e:	415b      	adcs	r3, r3
 8003250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003252:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003256:	4621      	mov	r1, r4
 8003258:	eb12 0801 	adds.w	r8, r2, r1
 800325c:	4629      	mov	r1, r5
 800325e:	eb43 0901 	adc.w	r9, r3, r1
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800326e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003272:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003276:	4690      	mov	r8, r2
 8003278:	4699      	mov	r9, r3
 800327a:	4623      	mov	r3, r4
 800327c:	eb18 0303 	adds.w	r3, r8, r3
 8003280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003284:	462b      	mov	r3, r5
 8003286:	eb49 0303 	adc.w	r3, r9, r3
 800328a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800329a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800329e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032a2:	460b      	mov	r3, r1
 80032a4:	18db      	adds	r3, r3, r3
 80032a6:	653b      	str	r3, [r7, #80]	; 0x50
 80032a8:	4613      	mov	r3, r2
 80032aa:	eb42 0303 	adc.w	r3, r2, r3
 80032ae:	657b      	str	r3, [r7, #84]	; 0x54
 80032b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032b8:	f7fc fffa 	bl	80002b0 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4b61      	ldr	r3, [pc, #388]	; (8003448 <UART_SetConfig+0x2d4>)
 80032c2:	fba3 2302 	umull	r2, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	011c      	lsls	r4, r3, #4
 80032ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032dc:	4642      	mov	r2, r8
 80032de:	464b      	mov	r3, r9
 80032e0:	1891      	adds	r1, r2, r2
 80032e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032e4:	415b      	adcs	r3, r3
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032ec:	4641      	mov	r1, r8
 80032ee:	eb12 0a01 	adds.w	sl, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb43 0b01 	adc.w	fp, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003304:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800330c:	4692      	mov	sl, r2
 800330e:	469b      	mov	fp, r3
 8003310:	4643      	mov	r3, r8
 8003312:	eb1a 0303 	adds.w	r3, sl, r3
 8003316:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800331a:	464b      	mov	r3, r9
 800331c:	eb4b 0303 	adc.w	r3, fp, r3
 8003320:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003330:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003334:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003338:	460b      	mov	r3, r1
 800333a:	18db      	adds	r3, r3, r3
 800333c:	643b      	str	r3, [r7, #64]	; 0x40
 800333e:	4613      	mov	r3, r2
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	647b      	str	r3, [r7, #68]	; 0x44
 8003346:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800334a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800334e:	f7fc ffaf 	bl	80002b0 <__aeabi_uldivmod>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4611      	mov	r1, r2
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <UART_SetConfig+0x2d4>)
 800335a:	fba3 2301 	umull	r2, r3, r3, r1
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	1acb      	subs	r3, r1, r3
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <UART_SetConfig+0x2d4>)
 8003370:	fba3 2302 	umull	r2, r3, r3, r2
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800337c:	441c      	add	r4, r3
 800337e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003388:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800338c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	1891      	adds	r1, r2, r2
 8003396:	63b9      	str	r1, [r7, #56]	; 0x38
 8003398:	415b      	adcs	r3, r3
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033a0:	4641      	mov	r1, r8
 80033a2:	1851      	adds	r1, r2, r1
 80033a4:	6339      	str	r1, [r7, #48]	; 0x30
 80033a6:	4649      	mov	r1, r9
 80033a8:	414b      	adcs	r3, r1
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033b8:	4659      	mov	r1, fp
 80033ba:	00cb      	lsls	r3, r1, #3
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c2:	4651      	mov	r1, sl
 80033c4:	00ca      	lsls	r2, r1, #3
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	4642      	mov	r2, r8
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d4:	464b      	mov	r3, r9
 80033d6:	460a      	mov	r2, r1
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033f4:	460b      	mov	r3, r1
 80033f6:	18db      	adds	r3, r3, r3
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	4613      	mov	r3, r2
 80033fc:	eb42 0303 	adc.w	r3, r2, r3
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003406:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800340a:	f7fc ff51 	bl	80002b0 <__aeabi_uldivmod>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <UART_SetConfig+0x2d4>)
 8003414:	fba3 1302 	umull	r1, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	2164      	movs	r1, #100	; 0x64
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	3332      	adds	r3, #50	; 0x32
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <UART_SetConfig+0x2d4>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	f003 0207 	and.w	r2, r3, #7
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4422      	add	r2, r4
 800343a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800343c:	e105      	b.n	800364a <UART_SetConfig+0x4d6>
 800343e:	bf00      	nop
 8003440:	40011000 	.word	0x40011000
 8003444:	40011400 	.word	0x40011400
 8003448:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800344c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003450:	2200      	movs	r2, #0
 8003452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003456:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800345a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800345e:	4642      	mov	r2, r8
 8003460:	464b      	mov	r3, r9
 8003462:	1891      	adds	r1, r2, r2
 8003464:	6239      	str	r1, [r7, #32]
 8003466:	415b      	adcs	r3, r3
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800346e:	4641      	mov	r1, r8
 8003470:	1854      	adds	r4, r2, r1
 8003472:	4649      	mov	r1, r9
 8003474:	eb43 0501 	adc.w	r5, r3, r1
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	00eb      	lsls	r3, r5, #3
 8003482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003486:	00e2      	lsls	r2, r4, #3
 8003488:	4614      	mov	r4, r2
 800348a:	461d      	mov	r5, r3
 800348c:	4643      	mov	r3, r8
 800348e:	18e3      	adds	r3, r4, r3
 8003490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003494:	464b      	mov	r3, r9
 8003496:	eb45 0303 	adc.w	r3, r5, r3
 800349a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034ba:	4629      	mov	r1, r5
 80034bc:	008b      	lsls	r3, r1, #2
 80034be:	4621      	mov	r1, r4
 80034c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c4:	4621      	mov	r1, r4
 80034c6:	008a      	lsls	r2, r1, #2
 80034c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034cc:	f7fc fef0 	bl	80002b0 <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4b60      	ldr	r3, [pc, #384]	; (8003658 <UART_SetConfig+0x4e4>)
 80034d6:	fba3 2302 	umull	r2, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	011c      	lsls	r4, r3, #4
 80034de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034f0:	4642      	mov	r2, r8
 80034f2:	464b      	mov	r3, r9
 80034f4:	1891      	adds	r1, r2, r2
 80034f6:	61b9      	str	r1, [r7, #24]
 80034f8:	415b      	adcs	r3, r3
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003500:	4641      	mov	r1, r8
 8003502:	1851      	adds	r1, r2, r1
 8003504:	6139      	str	r1, [r7, #16]
 8003506:	4649      	mov	r1, r9
 8003508:	414b      	adcs	r3, r1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003518:	4659      	mov	r1, fp
 800351a:	00cb      	lsls	r3, r1, #3
 800351c:	4651      	mov	r1, sl
 800351e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003522:	4651      	mov	r1, sl
 8003524:	00ca      	lsls	r2, r1, #3
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	4603      	mov	r3, r0
 800352c:	4642      	mov	r2, r8
 800352e:	189b      	adds	r3, r3, r2
 8003530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003534:	464b      	mov	r3, r9
 8003536:	460a      	mov	r2, r1
 8003538:	eb42 0303 	adc.w	r3, r2, r3
 800353c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	67bb      	str	r3, [r7, #120]	; 0x78
 800354a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003558:	4649      	mov	r1, r9
 800355a:	008b      	lsls	r3, r1, #2
 800355c:	4641      	mov	r1, r8
 800355e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003562:	4641      	mov	r1, r8
 8003564:	008a      	lsls	r2, r1, #2
 8003566:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800356a:	f7fc fea1 	bl	80002b0 <__aeabi_uldivmod>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <UART_SetConfig+0x4e4>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a34      	ldr	r2, [pc, #208]	; (8003658 <UART_SetConfig+0x4e4>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	441c      	add	r4, r3
 8003594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003598:	2200      	movs	r2, #0
 800359a:	673b      	str	r3, [r7, #112]	; 0x70
 800359c:	677a      	str	r2, [r7, #116]	; 0x74
 800359e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035a2:	4642      	mov	r2, r8
 80035a4:	464b      	mov	r3, r9
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	415b      	adcs	r3, r3
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b2:	4641      	mov	r1, r8
 80035b4:	1851      	adds	r1, r2, r1
 80035b6:	6039      	str	r1, [r7, #0]
 80035b8:	4649      	mov	r1, r9
 80035ba:	414b      	adcs	r3, r1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035ca:	4659      	mov	r1, fp
 80035cc:	00cb      	lsls	r3, r1, #3
 80035ce:	4651      	mov	r1, sl
 80035d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d4:	4651      	mov	r1, sl
 80035d6:	00ca      	lsls	r2, r1, #3
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	4603      	mov	r3, r0
 80035de:	4642      	mov	r2, r8
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e4:	464b      	mov	r3, r9
 80035e6:	460a      	mov	r2, r1
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	663b      	str	r3, [r7, #96]	; 0x60
 80035f8:	667a      	str	r2, [r7, #100]	; 0x64
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003606:	4649      	mov	r1, r9
 8003608:	008b      	lsls	r3, r1, #2
 800360a:	4641      	mov	r1, r8
 800360c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003610:	4641      	mov	r1, r8
 8003612:	008a      	lsls	r2, r1, #2
 8003614:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003618:	f7fc fe4a 	bl	80002b0 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <UART_SetConfig+0x4e4>)
 8003622:	fba3 1302 	umull	r1, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2164      	movs	r1, #100	; 0x64
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	3332      	adds	r3, #50	; 0x32
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <UART_SetConfig+0x4e4>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4422      	add	r2, r4
 8003648:	609a      	str	r2, [r3, #8]
}
 800364a:	bf00      	nop
 800364c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	51eb851f 	.word	0x51eb851f

0800365c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003660:	4904      	ldr	r1, [pc, #16]	; (8003674 <MX_FATFS_Init+0x18>)
 8003662:	4805      	ldr	r0, [pc, #20]	; (8003678 <MX_FATFS_Init+0x1c>)
 8003664:	f000 f8b0 	bl	80037c8 <FATFS_LinkDriver>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <MX_FATFS_Init+0x20>)
 800366e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000248 	.word	0x20000248
 8003678:	2000000c 	.word	0x2000000c
 800367c:	20000244 	.word	0x20000244

08003680 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <USER_initialize+0x24>)
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <USER_initialize+0x24>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000009 	.word	0x20000009

080036a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <USER_status+0x24>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <USER_status+0x24>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000009 	.word	0x20000009

080036d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80036e0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80036fe:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	603a      	str	r2, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
 8003718:	460b      	mov	r3, r1
 800371a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
    return res;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003746:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003748:	7a5b      	ldrb	r3, [r3, #9]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d131      	bne.n	80037b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003752:	7a5b      	ldrb	r3, [r3, #9]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800375e:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003760:	7a5b      	ldrb	r3, [r3, #9]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003770:	7a5b      	ldrb	r3, [r3, #9]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003778:	4413      	add	r3, r2
 800377a:	79fa      	ldrb	r2, [r7, #7]
 800377c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 8003780:	7a5b      	ldrb	r3, [r3, #9]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	b2d1      	uxtb	r1, r2
 8003788:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <FATFS_LinkDriverEx+0x94>)
 800378a:	7251      	strb	r1, [r2, #9]
 800378c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800378e:	7dbb      	ldrb	r3, [r7, #22]
 8003790:	3330      	adds	r3, #48	; 0x30
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	223a      	movs	r2, #58	; 0x3a
 800379e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3302      	adds	r3, #2
 80037a4:	222f      	movs	r2, #47	; 0x2f
 80037a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3303      	adds	r3, #3
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	2000024c 	.word	0x2000024c

080037c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	6839      	ldr	r1, [r7, #0]
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffaa 	bl	8003730 <FATFS_LinkDriverEx>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <__errno>:
 80037e8:	4b01      	ldr	r3, [pc, #4]	; (80037f0 <__errno+0x8>)
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000020 	.word	0x20000020

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4d0d      	ldr	r5, [pc, #52]	; (800382c <__libc_init_array+0x38>)
 80037f8:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <__libc_init_array+0x3c>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	2600      	movs	r6, #0
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	4d0b      	ldr	r5, [pc, #44]	; (8003834 <__libc_init_array+0x40>)
 8003806:	4c0c      	ldr	r4, [pc, #48]	; (8003838 <__libc_init_array+0x44>)
 8003808:	f001 f824 	bl	8004854 <_init>
 800380c:	1b64      	subs	r4, r4, r5
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	2600      	movs	r6, #0
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f855 3b04 	ldr.w	r3, [r5], #4
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f855 3b04 	ldr.w	r3, [r5], #4
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	08004a2c 	.word	0x08004a2c
 8003830:	08004a2c 	.word	0x08004a2c
 8003834:	08004a2c 	.word	0x08004a2c
 8003838:	08004a30 	.word	0x08004a30

0800383c <memset>:
 800383c:	4402      	add	r2, r0
 800383e:	4603      	mov	r3, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <iprintf>:
 800384c:	b40f      	push	{r0, r1, r2, r3}
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <iprintf+0x2c>)
 8003850:	b513      	push	{r0, r1, r4, lr}
 8003852:	681c      	ldr	r4, [r3, #0]
 8003854:	b124      	cbz	r4, 8003860 <iprintf+0x14>
 8003856:	69a3      	ldr	r3, [r4, #24]
 8003858:	b913      	cbnz	r3, 8003860 <iprintf+0x14>
 800385a:	4620      	mov	r0, r4
 800385c:	f000 fa5e 	bl	8003d1c <__sinit>
 8003860:	ab05      	add	r3, sp, #20
 8003862:	9a04      	ldr	r2, [sp, #16]
 8003864:	68a1      	ldr	r1, [r4, #8]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	4620      	mov	r0, r4
 800386a:	f000 fc67 	bl	800413c <_vfiprintf_r>
 800386e:	b002      	add	sp, #8
 8003870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003874:	b004      	add	sp, #16
 8003876:	4770      	bx	lr
 8003878:	20000020 	.word	0x20000020

0800387c <_puts_r>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	460e      	mov	r6, r1
 8003880:	4605      	mov	r5, r0
 8003882:	b118      	cbz	r0, 800388c <_puts_r+0x10>
 8003884:	6983      	ldr	r3, [r0, #24]
 8003886:	b90b      	cbnz	r3, 800388c <_puts_r+0x10>
 8003888:	f000 fa48 	bl	8003d1c <__sinit>
 800388c:	69ab      	ldr	r3, [r5, #24]
 800388e:	68ac      	ldr	r4, [r5, #8]
 8003890:	b913      	cbnz	r3, 8003898 <_puts_r+0x1c>
 8003892:	4628      	mov	r0, r5
 8003894:	f000 fa42 	bl	8003d1c <__sinit>
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <_puts_r+0xd0>)
 800389a:	429c      	cmp	r4, r3
 800389c:	d120      	bne.n	80038e0 <_puts_r+0x64>
 800389e:	686c      	ldr	r4, [r5, #4]
 80038a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038a2:	07db      	lsls	r3, r3, #31
 80038a4:	d405      	bmi.n	80038b2 <_puts_r+0x36>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	0598      	lsls	r0, r3, #22
 80038aa:	d402      	bmi.n	80038b2 <_puts_r+0x36>
 80038ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ae:	f000 fad3 	bl	8003e58 <__retarget_lock_acquire_recursive>
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	0719      	lsls	r1, r3, #28
 80038b6:	d51d      	bpl.n	80038f4 <_puts_r+0x78>
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	b1db      	cbz	r3, 80038f4 <_puts_r+0x78>
 80038bc:	3e01      	subs	r6, #1
 80038be:	68a3      	ldr	r3, [r4, #8]
 80038c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60a3      	str	r3, [r4, #8]
 80038c8:	bb39      	cbnz	r1, 800391a <_puts_r+0x9e>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da38      	bge.n	8003940 <_puts_r+0xc4>
 80038ce:	4622      	mov	r2, r4
 80038d0:	210a      	movs	r1, #10
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 f848 	bl	8003968 <__swbuf_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d011      	beq.n	8003900 <_puts_r+0x84>
 80038dc:	250a      	movs	r5, #10
 80038de:	e011      	b.n	8003904 <_puts_r+0x88>
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <_puts_r+0xd4>)
 80038e2:	429c      	cmp	r4, r3
 80038e4:	d101      	bne.n	80038ea <_puts_r+0x6e>
 80038e6:	68ac      	ldr	r4, [r5, #8]
 80038e8:	e7da      	b.n	80038a0 <_puts_r+0x24>
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <_puts_r+0xd8>)
 80038ec:	429c      	cmp	r4, r3
 80038ee:	bf08      	it	eq
 80038f0:	68ec      	ldreq	r4, [r5, #12]
 80038f2:	e7d5      	b.n	80038a0 <_puts_r+0x24>
 80038f4:	4621      	mov	r1, r4
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 f888 	bl	8003a0c <__swsetup_r>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d0dd      	beq.n	80038bc <_puts_r+0x40>
 8003900:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003906:	07da      	lsls	r2, r3, #31
 8003908:	d405      	bmi.n	8003916 <_puts_r+0x9a>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	059b      	lsls	r3, r3, #22
 800390e:	d402      	bmi.n	8003916 <_puts_r+0x9a>
 8003910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003912:	f000 faa2 	bl	8003e5a <__retarget_lock_release_recursive>
 8003916:	4628      	mov	r0, r5
 8003918:	bd70      	pop	{r4, r5, r6, pc}
 800391a:	2b00      	cmp	r3, #0
 800391c:	da04      	bge.n	8003928 <_puts_r+0xac>
 800391e:	69a2      	ldr	r2, [r4, #24]
 8003920:	429a      	cmp	r2, r3
 8003922:	dc06      	bgt.n	8003932 <_puts_r+0xb6>
 8003924:	290a      	cmp	r1, #10
 8003926:	d004      	beq.n	8003932 <_puts_r+0xb6>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	6022      	str	r2, [r4, #0]
 800392e:	7019      	strb	r1, [r3, #0]
 8003930:	e7c5      	b.n	80038be <_puts_r+0x42>
 8003932:	4622      	mov	r2, r4
 8003934:	4628      	mov	r0, r5
 8003936:	f000 f817 	bl	8003968 <__swbuf_r>
 800393a:	3001      	adds	r0, #1
 800393c:	d1bf      	bne.n	80038be <_puts_r+0x42>
 800393e:	e7df      	b.n	8003900 <_puts_r+0x84>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	250a      	movs	r5, #10
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	6022      	str	r2, [r4, #0]
 8003948:	701d      	strb	r5, [r3, #0]
 800394a:	e7db      	b.n	8003904 <_puts_r+0x88>
 800394c:	080049b0 	.word	0x080049b0
 8003950:	080049d0 	.word	0x080049d0
 8003954:	08004990 	.word	0x08004990

08003958 <puts>:
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <puts+0xc>)
 800395a:	4601      	mov	r1, r0
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f7ff bf8d 	b.w	800387c <_puts_r>
 8003962:	bf00      	nop
 8003964:	20000020 	.word	0x20000020

08003968 <__swbuf_r>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	460e      	mov	r6, r1
 800396c:	4614      	mov	r4, r2
 800396e:	4605      	mov	r5, r0
 8003970:	b118      	cbz	r0, 800397a <__swbuf_r+0x12>
 8003972:	6983      	ldr	r3, [r0, #24]
 8003974:	b90b      	cbnz	r3, 800397a <__swbuf_r+0x12>
 8003976:	f000 f9d1 	bl	8003d1c <__sinit>
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <__swbuf_r+0x98>)
 800397c:	429c      	cmp	r4, r3
 800397e:	d12b      	bne.n	80039d8 <__swbuf_r+0x70>
 8003980:	686c      	ldr	r4, [r5, #4]
 8003982:	69a3      	ldr	r3, [r4, #24]
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	071a      	lsls	r2, r3, #28
 800398a:	d52f      	bpl.n	80039ec <__swbuf_r+0x84>
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	b36b      	cbz	r3, 80039ec <__swbuf_r+0x84>
 8003990:	6923      	ldr	r3, [r4, #16]
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	1ac0      	subs	r0, r0, r3
 8003996:	6963      	ldr	r3, [r4, #20]
 8003998:	b2f6      	uxtb	r6, r6
 800399a:	4283      	cmp	r3, r0
 800399c:	4637      	mov	r7, r6
 800399e:	dc04      	bgt.n	80039aa <__swbuf_r+0x42>
 80039a0:	4621      	mov	r1, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 f926 	bl	8003bf4 <_fflush_r>
 80039a8:	bb30      	cbnz	r0, 80039f8 <__swbuf_r+0x90>
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60a3      	str	r3, [r4, #8]
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	701e      	strb	r6, [r3, #0]
 80039b8:	6963      	ldr	r3, [r4, #20]
 80039ba:	3001      	adds	r0, #1
 80039bc:	4283      	cmp	r3, r0
 80039be:	d004      	beq.n	80039ca <__swbuf_r+0x62>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	07db      	lsls	r3, r3, #31
 80039c4:	d506      	bpl.n	80039d4 <__swbuf_r+0x6c>
 80039c6:	2e0a      	cmp	r6, #10
 80039c8:	d104      	bne.n	80039d4 <__swbuf_r+0x6c>
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	f000 f911 	bl	8003bf4 <_fflush_r>
 80039d2:	b988      	cbnz	r0, 80039f8 <__swbuf_r+0x90>
 80039d4:	4638      	mov	r0, r7
 80039d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <__swbuf_r+0x9c>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	d101      	bne.n	80039e2 <__swbuf_r+0x7a>
 80039de:	68ac      	ldr	r4, [r5, #8]
 80039e0:	e7cf      	b.n	8003982 <__swbuf_r+0x1a>
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <__swbuf_r+0xa0>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	bf08      	it	eq
 80039e8:	68ec      	ldreq	r4, [r5, #12]
 80039ea:	e7ca      	b.n	8003982 <__swbuf_r+0x1a>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 f80c 	bl	8003a0c <__swsetup_r>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d0cb      	beq.n	8003990 <__swbuf_r+0x28>
 80039f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80039fc:	e7ea      	b.n	80039d4 <__swbuf_r+0x6c>
 80039fe:	bf00      	nop
 8003a00:	080049b0 	.word	0x080049b0
 8003a04:	080049d0 	.word	0x080049d0
 8003a08:	08004990 	.word	0x08004990

08003a0c <__swsetup_r>:
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <__swsetup_r+0xcc>)
 8003a0e:	b570      	push	{r4, r5, r6, lr}
 8003a10:	681d      	ldr	r5, [r3, #0]
 8003a12:	4606      	mov	r6, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	b125      	cbz	r5, 8003a22 <__swsetup_r+0x16>
 8003a18:	69ab      	ldr	r3, [r5, #24]
 8003a1a:	b913      	cbnz	r3, 8003a22 <__swsetup_r+0x16>
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 f97d 	bl	8003d1c <__sinit>
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <__swsetup_r+0xd0>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d10f      	bne.n	8003a48 <__swsetup_r+0x3c>
 8003a28:	686c      	ldr	r4, [r5, #4]
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a30:	0719      	lsls	r1, r3, #28
 8003a32:	d42c      	bmi.n	8003a8e <__swsetup_r+0x82>
 8003a34:	06dd      	lsls	r5, r3, #27
 8003a36:	d411      	bmi.n	8003a5c <__swsetup_r+0x50>
 8003a38:	2309      	movs	r3, #9
 8003a3a:	6033      	str	r3, [r6, #0]
 8003a3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a46:	e03e      	b.n	8003ac6 <__swsetup_r+0xba>
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <__swsetup_r+0xd4>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	d101      	bne.n	8003a52 <__swsetup_r+0x46>
 8003a4e:	68ac      	ldr	r4, [r5, #8]
 8003a50:	e7eb      	b.n	8003a2a <__swsetup_r+0x1e>
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <__swsetup_r+0xd8>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	bf08      	it	eq
 8003a58:	68ec      	ldreq	r4, [r5, #12]
 8003a5a:	e7e6      	b.n	8003a2a <__swsetup_r+0x1e>
 8003a5c:	0758      	lsls	r0, r3, #29
 8003a5e:	d512      	bpl.n	8003a86 <__swsetup_r+0x7a>
 8003a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a62:	b141      	cbz	r1, 8003a76 <__swsetup_r+0x6a>
 8003a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__swsetup_r+0x66>
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 fa5b 	bl	8003f28 <_free_r>
 8003a72:	2300      	movs	r3, #0
 8003a74:	6363      	str	r3, [r4, #52]	; 0x34
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	b94b      	cbnz	r3, 8003aa6 <__swsetup_r+0x9a>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d003      	beq.n	8003aa6 <__swsetup_r+0x9a>
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f000 fa01 	bl	8003ea8 <__smakebuf_r>
 8003aa6:	89a0      	ldrh	r0, [r4, #12]
 8003aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003aac:	f010 0301 	ands.w	r3, r0, #1
 8003ab0:	d00a      	beq.n	8003ac8 <__swsetup_r+0xbc>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60a3      	str	r3, [r4, #8]
 8003ab6:	6963      	ldr	r3, [r4, #20]
 8003ab8:	425b      	negs	r3, r3
 8003aba:	61a3      	str	r3, [r4, #24]
 8003abc:	6923      	ldr	r3, [r4, #16]
 8003abe:	b943      	cbnz	r3, 8003ad2 <__swsetup_r+0xc6>
 8003ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ac4:	d1ba      	bne.n	8003a3c <__swsetup_r+0x30>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	0781      	lsls	r1, r0, #30
 8003aca:	bf58      	it	pl
 8003acc:	6963      	ldrpl	r3, [r4, #20]
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	e7f4      	b.n	8003abc <__swsetup_r+0xb0>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e7f7      	b.n	8003ac6 <__swsetup_r+0xba>
 8003ad6:	bf00      	nop
 8003ad8:	20000020 	.word	0x20000020
 8003adc:	080049b0 	.word	0x080049b0
 8003ae0:	080049d0 	.word	0x080049d0
 8003ae4:	08004990 	.word	0x08004990

08003ae8 <__sflush_r>:
 8003ae8:	898a      	ldrh	r2, [r1, #12]
 8003aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aee:	4605      	mov	r5, r0
 8003af0:	0710      	lsls	r0, r2, #28
 8003af2:	460c      	mov	r4, r1
 8003af4:	d458      	bmi.n	8003ba8 <__sflush_r+0xc0>
 8003af6:	684b      	ldr	r3, [r1, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dc05      	bgt.n	8003b08 <__sflush_r+0x20>
 8003afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dc02      	bgt.n	8003b08 <__sflush_r+0x20>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	d0f9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b14:	682f      	ldr	r7, [r5, #0]
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	d032      	beq.n	8003b80 <__sflush_r+0x98>
 8003b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	075a      	lsls	r2, r3, #29
 8003b20:	d505      	bpl.n	8003b2e <__sflush_r+0x46>
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	1ac0      	subs	r0, r0, r3
 8003b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b28:	b10b      	cbz	r3, 8003b2e <__sflush_r+0x46>
 8003b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b2c:	1ac0      	subs	r0, r0, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4602      	mov	r2, r0
 8003b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b34:	6a21      	ldr	r1, [r4, #32]
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b0      	blx	r6
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	d106      	bne.n	8003b4e <__sflush_r+0x66>
 8003b40:	6829      	ldr	r1, [r5, #0]
 8003b42:	291d      	cmp	r1, #29
 8003b44:	d82c      	bhi.n	8003ba0 <__sflush_r+0xb8>
 8003b46:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <__sflush_r+0x108>)
 8003b48:	40ca      	lsrs	r2, r1
 8003b4a:	07d6      	lsls	r6, r2, #31
 8003b4c:	d528      	bpl.n	8003ba0 <__sflush_r+0xb8>
 8003b4e:	2200      	movs	r2, #0
 8003b50:	6062      	str	r2, [r4, #4]
 8003b52:	04d9      	lsls	r1, r3, #19
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	6022      	str	r2, [r4, #0]
 8003b58:	d504      	bpl.n	8003b64 <__sflush_r+0x7c>
 8003b5a:	1c42      	adds	r2, r0, #1
 8003b5c:	d101      	bne.n	8003b62 <__sflush_r+0x7a>
 8003b5e:	682b      	ldr	r3, [r5, #0]
 8003b60:	b903      	cbnz	r3, 8003b64 <__sflush_r+0x7c>
 8003b62:	6560      	str	r0, [r4, #84]	; 0x54
 8003b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b66:	602f      	str	r7, [r5, #0]
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d0ca      	beq.n	8003b02 <__sflush_r+0x1a>
 8003b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d002      	beq.n	8003b7a <__sflush_r+0x92>
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 f9d7 	bl	8003f28 <_free_r>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8003b7e:	e7c1      	b.n	8003b04 <__sflush_r+0x1c>
 8003b80:	6a21      	ldr	r1, [r4, #32]
 8003b82:	2301      	movs	r3, #1
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b0      	blx	r6
 8003b88:	1c41      	adds	r1, r0, #1
 8003b8a:	d1c7      	bne.n	8003b1c <__sflush_r+0x34>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0c4      	beq.n	8003b1c <__sflush_r+0x34>
 8003b92:	2b1d      	cmp	r3, #29
 8003b94:	d001      	beq.n	8003b9a <__sflush_r+0xb2>
 8003b96:	2b16      	cmp	r3, #22
 8003b98:	d101      	bne.n	8003b9e <__sflush_r+0xb6>
 8003b9a:	602f      	str	r7, [r5, #0]
 8003b9c:	e7b1      	b.n	8003b02 <__sflush_r+0x1a>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	e7ad      	b.n	8003b04 <__sflush_r+0x1c>
 8003ba8:	690f      	ldr	r7, [r1, #16]
 8003baa:	2f00      	cmp	r7, #0
 8003bac:	d0a9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003bae:	0793      	lsls	r3, r2, #30
 8003bb0:	680e      	ldr	r6, [r1, #0]
 8003bb2:	bf08      	it	eq
 8003bb4:	694b      	ldreq	r3, [r1, #20]
 8003bb6:	600f      	str	r7, [r1, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	2300      	movne	r3, #0
 8003bbc:	eba6 0807 	sub.w	r8, r6, r7
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	f1b8 0f00 	cmp.w	r8, #0
 8003bc6:	dd9c      	ble.n	8003b02 <__sflush_r+0x1a>
 8003bc8:	6a21      	ldr	r1, [r4, #32]
 8003bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bcc:	4643      	mov	r3, r8
 8003bce:	463a      	mov	r2, r7
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	47b0      	blx	r6
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	dc06      	bgt.n	8003be6 <__sflush_r+0xfe>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be4:	e78e      	b.n	8003b04 <__sflush_r+0x1c>
 8003be6:	4407      	add	r7, r0
 8003be8:	eba8 0800 	sub.w	r8, r8, r0
 8003bec:	e7e9      	b.n	8003bc2 <__sflush_r+0xda>
 8003bee:	bf00      	nop
 8003bf0:	20400001 	.word	0x20400001

08003bf4 <_fflush_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	b913      	cbnz	r3, 8003c04 <_fflush_r+0x10>
 8003bfe:	2500      	movs	r5, #0
 8003c00:	4628      	mov	r0, r5
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	b118      	cbz	r0, 8003c0e <_fflush_r+0x1a>
 8003c06:	6983      	ldr	r3, [r0, #24]
 8003c08:	b90b      	cbnz	r3, 8003c0e <_fflush_r+0x1a>
 8003c0a:	f000 f887 	bl	8003d1c <__sinit>
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <_fflush_r+0x6c>)
 8003c10:	429c      	cmp	r4, r3
 8003c12:	d11b      	bne.n	8003c4c <_fflush_r+0x58>
 8003c14:	686c      	ldr	r4, [r5, #4]
 8003c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ef      	beq.n	8003bfe <_fflush_r+0xa>
 8003c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c20:	07d0      	lsls	r0, r2, #31
 8003c22:	d404      	bmi.n	8003c2e <_fflush_r+0x3a>
 8003c24:	0599      	lsls	r1, r3, #22
 8003c26:	d402      	bmi.n	8003c2e <_fflush_r+0x3a>
 8003c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c2a:	f000 f915 	bl	8003e58 <__retarget_lock_acquire_recursive>
 8003c2e:	4628      	mov	r0, r5
 8003c30:	4621      	mov	r1, r4
 8003c32:	f7ff ff59 	bl	8003ae8 <__sflush_r>
 8003c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c38:	07da      	lsls	r2, r3, #31
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	d4e0      	bmi.n	8003c00 <_fflush_r+0xc>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	059b      	lsls	r3, r3, #22
 8003c42:	d4dd      	bmi.n	8003c00 <_fflush_r+0xc>
 8003c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c46:	f000 f908 	bl	8003e5a <__retarget_lock_release_recursive>
 8003c4a:	e7d9      	b.n	8003c00 <_fflush_r+0xc>
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <_fflush_r+0x70>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d101      	bne.n	8003c56 <_fflush_r+0x62>
 8003c52:	68ac      	ldr	r4, [r5, #8]
 8003c54:	e7df      	b.n	8003c16 <_fflush_r+0x22>
 8003c56:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <_fflush_r+0x74>)
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf08      	it	eq
 8003c5c:	68ec      	ldreq	r4, [r5, #12]
 8003c5e:	e7da      	b.n	8003c16 <_fflush_r+0x22>
 8003c60:	080049b0 	.word	0x080049b0
 8003c64:	080049d0 	.word	0x080049d0
 8003c68:	08004990 	.word	0x08004990

08003c6c <std>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
 8003c72:	e9c0 3300 	strd	r3, r3, [r0]
 8003c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c7a:	6083      	str	r3, [r0, #8]
 8003c7c:	8181      	strh	r1, [r0, #12]
 8003c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c80:	81c2      	strh	r2, [r0, #14]
 8003c82:	6183      	str	r3, [r0, #24]
 8003c84:	4619      	mov	r1, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	305c      	adds	r0, #92	; 0x5c
 8003c8a:	f7ff fdd7 	bl	800383c <memset>
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <std+0x38>)
 8003c90:	6263      	str	r3, [r4, #36]	; 0x24
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <std+0x3c>)
 8003c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <std+0x40>)
 8003c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <std+0x44>)
 8003c9c:	6224      	str	r4, [r4, #32]
 8003c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	bf00      	nop
 8003ca4:	080046e5 	.word	0x080046e5
 8003ca8:	08004707 	.word	0x08004707
 8003cac:	0800473f 	.word	0x0800473f
 8003cb0:	08004763 	.word	0x08004763

08003cb4 <_cleanup_r>:
 8003cb4:	4901      	ldr	r1, [pc, #4]	; (8003cbc <_cleanup_r+0x8>)
 8003cb6:	f000 b8af 	b.w	8003e18 <_fwalk_reent>
 8003cba:	bf00      	nop
 8003cbc:	08003bf5 	.word	0x08003bf5

08003cc0 <__sfmoreglue>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	2268      	movs	r2, #104	; 0x68
 8003cc4:	1e4d      	subs	r5, r1, #1
 8003cc6:	4355      	muls	r5, r2
 8003cc8:	460e      	mov	r6, r1
 8003cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cce:	f000 f997 	bl	8004000 <_malloc_r>
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	b140      	cbz	r0, 8003ce8 <__sfmoreglue+0x28>
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8003cdc:	300c      	adds	r0, #12
 8003cde:	60a0      	str	r0, [r4, #8]
 8003ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ce4:	f7ff fdaa 	bl	800383c <memset>
 8003ce8:	4620      	mov	r0, r4
 8003cea:	bd70      	pop	{r4, r5, r6, pc}

08003cec <__sfp_lock_acquire>:
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <__sfp_lock_acquire+0x8>)
 8003cee:	f000 b8b3 	b.w	8003e58 <__retarget_lock_acquire_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	20000259 	.word	0x20000259

08003cf8 <__sfp_lock_release>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <__sfp_lock_release+0x8>)
 8003cfa:	f000 b8ae 	b.w	8003e5a <__retarget_lock_release_recursive>
 8003cfe:	bf00      	nop
 8003d00:	20000259 	.word	0x20000259

08003d04 <__sinit_lock_acquire>:
 8003d04:	4801      	ldr	r0, [pc, #4]	; (8003d0c <__sinit_lock_acquire+0x8>)
 8003d06:	f000 b8a7 	b.w	8003e58 <__retarget_lock_acquire_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	2000025a 	.word	0x2000025a

08003d10 <__sinit_lock_release>:
 8003d10:	4801      	ldr	r0, [pc, #4]	; (8003d18 <__sinit_lock_release+0x8>)
 8003d12:	f000 b8a2 	b.w	8003e5a <__retarget_lock_release_recursive>
 8003d16:	bf00      	nop
 8003d18:	2000025a 	.word	0x2000025a

08003d1c <__sinit>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	4604      	mov	r4, r0
 8003d20:	f7ff fff0 	bl	8003d04 <__sinit_lock_acquire>
 8003d24:	69a3      	ldr	r3, [r4, #24]
 8003d26:	b11b      	cbz	r3, 8003d30 <__sinit+0x14>
 8003d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2c:	f7ff bff0 	b.w	8003d10 <__sinit_lock_release>
 8003d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d34:	6523      	str	r3, [r4, #80]	; 0x50
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <__sinit+0x68>)
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <__sinit+0x6c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	bf04      	itt	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	61a3      	streq	r3, [r4, #24]
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 f820 	bl	8003d8c <__sfp>
 8003d4c:	6060      	str	r0, [r4, #4]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f000 f81c 	bl	8003d8c <__sfp>
 8003d54:	60a0      	str	r0, [r4, #8]
 8003d56:	4620      	mov	r0, r4
 8003d58:	f000 f818 	bl	8003d8c <__sfp>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	60e0      	str	r0, [r4, #12]
 8003d60:	2104      	movs	r1, #4
 8003d62:	6860      	ldr	r0, [r4, #4]
 8003d64:	f7ff ff82 	bl	8003c6c <std>
 8003d68:	68a0      	ldr	r0, [r4, #8]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2109      	movs	r1, #9
 8003d6e:	f7ff ff7d 	bl	8003c6c <std>
 8003d72:	68e0      	ldr	r0, [r4, #12]
 8003d74:	2202      	movs	r2, #2
 8003d76:	2112      	movs	r1, #18
 8003d78:	f7ff ff78 	bl	8003c6c <std>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	61a3      	str	r3, [r4, #24]
 8003d80:	e7d2      	b.n	8003d28 <__sinit+0xc>
 8003d82:	bf00      	nop
 8003d84:	0800498c 	.word	0x0800498c
 8003d88:	08003cb5 	.word	0x08003cb5

08003d8c <__sfp>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	4607      	mov	r7, r0
 8003d90:	f7ff ffac 	bl	8003cec <__sfp_lock_acquire>
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <__sfp+0x84>)
 8003d96:	681e      	ldr	r6, [r3, #0]
 8003d98:	69b3      	ldr	r3, [r6, #24]
 8003d9a:	b913      	cbnz	r3, 8003da2 <__sfp+0x16>
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f7ff ffbd 	bl	8003d1c <__sinit>
 8003da2:	3648      	adds	r6, #72	; 0x48
 8003da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	d503      	bpl.n	8003db4 <__sfp+0x28>
 8003dac:	6833      	ldr	r3, [r6, #0]
 8003dae:	b30b      	cbz	r3, 8003df4 <__sfp+0x68>
 8003db0:	6836      	ldr	r6, [r6, #0]
 8003db2:	e7f7      	b.n	8003da4 <__sfp+0x18>
 8003db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003db8:	b9d5      	cbnz	r5, 8003df0 <__sfp+0x64>
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <__sfp+0x88>)
 8003dbc:	60e3      	str	r3, [r4, #12]
 8003dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8003dc4:	f000 f847 	bl	8003e56 <__retarget_lock_init_recursive>
 8003dc8:	f7ff ff96 	bl	8003cf8 <__sfp_lock_release>
 8003dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dd4:	6025      	str	r5, [r4, #0]
 8003dd6:	61a5      	str	r5, [r4, #24]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4629      	mov	r1, r5
 8003ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003de0:	f7ff fd2c 	bl	800383c <memset>
 8003de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003dec:	4620      	mov	r0, r4
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df0:	3468      	adds	r4, #104	; 0x68
 8003df2:	e7d9      	b.n	8003da8 <__sfp+0x1c>
 8003df4:	2104      	movs	r1, #4
 8003df6:	4638      	mov	r0, r7
 8003df8:	f7ff ff62 	bl	8003cc0 <__sfmoreglue>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	6030      	str	r0, [r6, #0]
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1d5      	bne.n	8003db0 <__sfp+0x24>
 8003e04:	f7ff ff78 	bl	8003cf8 <__sfp_lock_release>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	e7ee      	b.n	8003dec <__sfp+0x60>
 8003e0e:	bf00      	nop
 8003e10:	0800498c 	.word	0x0800498c
 8003e14:	ffff0001 	.word	0xffff0001

08003e18 <_fwalk_reent>:
 8003e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	4688      	mov	r8, r1
 8003e20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e24:	2700      	movs	r7, #0
 8003e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8003e2e:	d505      	bpl.n	8003e3c <_fwalk_reent+0x24>
 8003e30:	6824      	ldr	r4, [r4, #0]
 8003e32:	2c00      	cmp	r4, #0
 8003e34:	d1f7      	bne.n	8003e26 <_fwalk_reent+0xe>
 8003e36:	4638      	mov	r0, r7
 8003e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3c:	89ab      	ldrh	r3, [r5, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d907      	bls.n	8003e52 <_fwalk_reent+0x3a>
 8003e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e46:	3301      	adds	r3, #1
 8003e48:	d003      	beq.n	8003e52 <_fwalk_reent+0x3a>
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	47c0      	blx	r8
 8003e50:	4307      	orrs	r7, r0
 8003e52:	3568      	adds	r5, #104	; 0x68
 8003e54:	e7e9      	b.n	8003e2a <_fwalk_reent+0x12>

08003e56 <__retarget_lock_init_recursive>:
 8003e56:	4770      	bx	lr

08003e58 <__retarget_lock_acquire_recursive>:
 8003e58:	4770      	bx	lr

08003e5a <__retarget_lock_release_recursive>:
 8003e5a:	4770      	bx	lr

08003e5c <__swhatbuf_r>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	460e      	mov	r6, r1
 8003e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e64:	2900      	cmp	r1, #0
 8003e66:	b096      	sub	sp, #88	; 0x58
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	da08      	bge.n	8003e80 <__swhatbuf_r+0x24>
 8003e6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	602a      	str	r2, [r5, #0]
 8003e76:	061a      	lsls	r2, r3, #24
 8003e78:	d410      	bmi.n	8003e9c <__swhatbuf_r+0x40>
 8003e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e7e:	e00e      	b.n	8003e9e <__swhatbuf_r+0x42>
 8003e80:	466a      	mov	r2, sp
 8003e82:	f000 fc95 	bl	80047b0 <_fstat_r>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	dbf1      	blt.n	8003e6e <__swhatbuf_r+0x12>
 8003e8a:	9a01      	ldr	r2, [sp, #4]
 8003e8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e94:	425a      	negs	r2, r3
 8003e96:	415a      	adcs	r2, r3
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	e7ee      	b.n	8003e7a <__swhatbuf_r+0x1e>
 8003e9c:	2340      	movs	r3, #64	; 0x40
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	b016      	add	sp, #88	; 0x58
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea8 <__smakebuf_r>:
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eac:	079d      	lsls	r5, r3, #30
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	d507      	bpl.n	8003ec4 <__smakebuf_r+0x1c>
 8003eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	6163      	str	r3, [r4, #20]
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	ab01      	add	r3, sp, #4
 8003ec6:	466a      	mov	r2, sp
 8003ec8:	f7ff ffc8 	bl	8003e5c <__swhatbuf_r>
 8003ecc:	9900      	ldr	r1, [sp, #0]
 8003ece:	4605      	mov	r5, r0
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 f895 	bl	8004000 <_malloc_r>
 8003ed6:	b948      	cbnz	r0, 8003eec <__smakebuf_r+0x44>
 8003ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003edc:	059a      	lsls	r2, r3, #22
 8003ede:	d4ef      	bmi.n	8003ec0 <__smakebuf_r+0x18>
 8003ee0:	f023 0303 	bic.w	r3, r3, #3
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	81a3      	strh	r3, [r4, #12]
 8003eea:	e7e3      	b.n	8003eb4 <__smakebuf_r+0xc>
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <__smakebuf_r+0x7c>)
 8003eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	6020      	str	r0, [r4, #0]
 8003ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef8:	81a3      	strh	r3, [r4, #12]
 8003efa:	9b00      	ldr	r3, [sp, #0]
 8003efc:	6163      	str	r3, [r4, #20]
 8003efe:	9b01      	ldr	r3, [sp, #4]
 8003f00:	6120      	str	r0, [r4, #16]
 8003f02:	b15b      	cbz	r3, 8003f1c <__smakebuf_r+0x74>
 8003f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 fc63 	bl	80047d4 <_isatty_r>
 8003f0e:	b128      	cbz	r0, 8003f1c <__smakebuf_r+0x74>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	89a0      	ldrh	r0, [r4, #12]
 8003f1e:	4305      	orrs	r5, r0
 8003f20:	81a5      	strh	r5, [r4, #12]
 8003f22:	e7cd      	b.n	8003ec0 <__smakebuf_r+0x18>
 8003f24:	08003cb5 	.word	0x08003cb5

08003f28 <_free_r>:
 8003f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f2a:	2900      	cmp	r1, #0
 8003f2c:	d044      	beq.n	8003fb8 <_free_r+0x90>
 8003f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f32:	9001      	str	r0, [sp, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f1a1 0404 	sub.w	r4, r1, #4
 8003f3a:	bfb8      	it	lt
 8003f3c:	18e4      	addlt	r4, r4, r3
 8003f3e:	f000 fc6b 	bl	8004818 <__malloc_lock>
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <_free_r+0x94>)
 8003f44:	9801      	ldr	r0, [sp, #4]
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	b933      	cbnz	r3, 8003f58 <_free_r+0x30>
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	6014      	str	r4, [r2, #0]
 8003f4e:	b003      	add	sp, #12
 8003f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f54:	f000 bc66 	b.w	8004824 <__malloc_unlock>
 8003f58:	42a3      	cmp	r3, r4
 8003f5a:	d908      	bls.n	8003f6e <_free_r+0x46>
 8003f5c:	6825      	ldr	r5, [r4, #0]
 8003f5e:	1961      	adds	r1, r4, r5
 8003f60:	428b      	cmp	r3, r1
 8003f62:	bf01      	itttt	eq
 8003f64:	6819      	ldreq	r1, [r3, #0]
 8003f66:	685b      	ldreq	r3, [r3, #4]
 8003f68:	1949      	addeq	r1, r1, r5
 8003f6a:	6021      	streq	r1, [r4, #0]
 8003f6c:	e7ed      	b.n	8003f4a <_free_r+0x22>
 8003f6e:	461a      	mov	r2, r3
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b10b      	cbz	r3, 8003f78 <_free_r+0x50>
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	d9fa      	bls.n	8003f6e <_free_r+0x46>
 8003f78:	6811      	ldr	r1, [r2, #0]
 8003f7a:	1855      	adds	r5, r2, r1
 8003f7c:	42a5      	cmp	r5, r4
 8003f7e:	d10b      	bne.n	8003f98 <_free_r+0x70>
 8003f80:	6824      	ldr	r4, [r4, #0]
 8003f82:	4421      	add	r1, r4
 8003f84:	1854      	adds	r4, r2, r1
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	d1e0      	bne.n	8003f4e <_free_r+0x26>
 8003f8c:	681c      	ldr	r4, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	6053      	str	r3, [r2, #4]
 8003f92:	4421      	add	r1, r4
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	e7da      	b.n	8003f4e <_free_r+0x26>
 8003f98:	d902      	bls.n	8003fa0 <_free_r+0x78>
 8003f9a:	230c      	movs	r3, #12
 8003f9c:	6003      	str	r3, [r0, #0]
 8003f9e:	e7d6      	b.n	8003f4e <_free_r+0x26>
 8003fa0:	6825      	ldr	r5, [r4, #0]
 8003fa2:	1961      	adds	r1, r4, r5
 8003fa4:	428b      	cmp	r3, r1
 8003fa6:	bf04      	itt	eq
 8003fa8:	6819      	ldreq	r1, [r3, #0]
 8003faa:	685b      	ldreq	r3, [r3, #4]
 8003fac:	6063      	str	r3, [r4, #4]
 8003fae:	bf04      	itt	eq
 8003fb0:	1949      	addeq	r1, r1, r5
 8003fb2:	6021      	streq	r1, [r4, #0]
 8003fb4:	6054      	str	r4, [r2, #4]
 8003fb6:	e7ca      	b.n	8003f4e <_free_r+0x26>
 8003fb8:	b003      	add	sp, #12
 8003fba:	bd30      	pop	{r4, r5, pc}
 8003fbc:	2000025c 	.word	0x2000025c

08003fc0 <sbrk_aligned>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4e0e      	ldr	r6, [pc, #56]	; (8003ffc <sbrk_aligned+0x3c>)
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	6831      	ldr	r1, [r6, #0]
 8003fc8:	4605      	mov	r5, r0
 8003fca:	b911      	cbnz	r1, 8003fd2 <sbrk_aligned+0x12>
 8003fcc:	f000 fb7a 	bl	80046c4 <_sbrk_r>
 8003fd0:	6030      	str	r0, [r6, #0]
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f000 fb75 	bl	80046c4 <_sbrk_r>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d00a      	beq.n	8003ff4 <sbrk_aligned+0x34>
 8003fde:	1cc4      	adds	r4, r0, #3
 8003fe0:	f024 0403 	bic.w	r4, r4, #3
 8003fe4:	42a0      	cmp	r0, r4
 8003fe6:	d007      	beq.n	8003ff8 <sbrk_aligned+0x38>
 8003fe8:	1a21      	subs	r1, r4, r0
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 fb6a 	bl	80046c4 <_sbrk_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d101      	bne.n	8003ff8 <sbrk_aligned+0x38>
 8003ff4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	20000260 	.word	0x20000260

08004000 <_malloc_r>:
 8004000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004004:	1ccd      	adds	r5, r1, #3
 8004006:	f025 0503 	bic.w	r5, r5, #3
 800400a:	3508      	adds	r5, #8
 800400c:	2d0c      	cmp	r5, #12
 800400e:	bf38      	it	cc
 8004010:	250c      	movcc	r5, #12
 8004012:	2d00      	cmp	r5, #0
 8004014:	4607      	mov	r7, r0
 8004016:	db01      	blt.n	800401c <_malloc_r+0x1c>
 8004018:	42a9      	cmp	r1, r5
 800401a:	d905      	bls.n	8004028 <_malloc_r+0x28>
 800401c:	230c      	movs	r3, #12
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	2600      	movs	r6, #0
 8004022:	4630      	mov	r0, r6
 8004024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004028:	4e2e      	ldr	r6, [pc, #184]	; (80040e4 <_malloc_r+0xe4>)
 800402a:	f000 fbf5 	bl	8004818 <__malloc_lock>
 800402e:	6833      	ldr	r3, [r6, #0]
 8004030:	461c      	mov	r4, r3
 8004032:	bb34      	cbnz	r4, 8004082 <_malloc_r+0x82>
 8004034:	4629      	mov	r1, r5
 8004036:	4638      	mov	r0, r7
 8004038:	f7ff ffc2 	bl	8003fc0 <sbrk_aligned>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	4604      	mov	r4, r0
 8004040:	d14d      	bne.n	80040de <_malloc_r+0xde>
 8004042:	6834      	ldr	r4, [r6, #0]
 8004044:	4626      	mov	r6, r4
 8004046:	2e00      	cmp	r6, #0
 8004048:	d140      	bne.n	80040cc <_malloc_r+0xcc>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	4631      	mov	r1, r6
 800404e:	4638      	mov	r0, r7
 8004050:	eb04 0803 	add.w	r8, r4, r3
 8004054:	f000 fb36 	bl	80046c4 <_sbrk_r>
 8004058:	4580      	cmp	r8, r0
 800405a:	d13a      	bne.n	80040d2 <_malloc_r+0xd2>
 800405c:	6821      	ldr	r1, [r4, #0]
 800405e:	3503      	adds	r5, #3
 8004060:	1a6d      	subs	r5, r5, r1
 8004062:	f025 0503 	bic.w	r5, r5, #3
 8004066:	3508      	adds	r5, #8
 8004068:	2d0c      	cmp	r5, #12
 800406a:	bf38      	it	cc
 800406c:	250c      	movcc	r5, #12
 800406e:	4629      	mov	r1, r5
 8004070:	4638      	mov	r0, r7
 8004072:	f7ff ffa5 	bl	8003fc0 <sbrk_aligned>
 8004076:	3001      	adds	r0, #1
 8004078:	d02b      	beq.n	80040d2 <_malloc_r+0xd2>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	442b      	add	r3, r5
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	e00e      	b.n	80040a0 <_malloc_r+0xa0>
 8004082:	6822      	ldr	r2, [r4, #0]
 8004084:	1b52      	subs	r2, r2, r5
 8004086:	d41e      	bmi.n	80040c6 <_malloc_r+0xc6>
 8004088:	2a0b      	cmp	r2, #11
 800408a:	d916      	bls.n	80040ba <_malloc_r+0xba>
 800408c:	1961      	adds	r1, r4, r5
 800408e:	42a3      	cmp	r3, r4
 8004090:	6025      	str	r5, [r4, #0]
 8004092:	bf18      	it	ne
 8004094:	6059      	strne	r1, [r3, #4]
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	bf08      	it	eq
 800409a:	6031      	streq	r1, [r6, #0]
 800409c:	5162      	str	r2, [r4, r5]
 800409e:	604b      	str	r3, [r1, #4]
 80040a0:	4638      	mov	r0, r7
 80040a2:	f104 060b 	add.w	r6, r4, #11
 80040a6:	f000 fbbd 	bl	8004824 <__malloc_unlock>
 80040aa:	f026 0607 	bic.w	r6, r6, #7
 80040ae:	1d23      	adds	r3, r4, #4
 80040b0:	1af2      	subs	r2, r6, r3
 80040b2:	d0b6      	beq.n	8004022 <_malloc_r+0x22>
 80040b4:	1b9b      	subs	r3, r3, r6
 80040b6:	50a3      	str	r3, [r4, r2]
 80040b8:	e7b3      	b.n	8004022 <_malloc_r+0x22>
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	42a3      	cmp	r3, r4
 80040be:	bf0c      	ite	eq
 80040c0:	6032      	streq	r2, [r6, #0]
 80040c2:	605a      	strne	r2, [r3, #4]
 80040c4:	e7ec      	b.n	80040a0 <_malloc_r+0xa0>
 80040c6:	4623      	mov	r3, r4
 80040c8:	6864      	ldr	r4, [r4, #4]
 80040ca:	e7b2      	b.n	8004032 <_malloc_r+0x32>
 80040cc:	4634      	mov	r4, r6
 80040ce:	6876      	ldr	r6, [r6, #4]
 80040d0:	e7b9      	b.n	8004046 <_malloc_r+0x46>
 80040d2:	230c      	movs	r3, #12
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4638      	mov	r0, r7
 80040d8:	f000 fba4 	bl	8004824 <__malloc_unlock>
 80040dc:	e7a1      	b.n	8004022 <_malloc_r+0x22>
 80040de:	6025      	str	r5, [r4, #0]
 80040e0:	e7de      	b.n	80040a0 <_malloc_r+0xa0>
 80040e2:	bf00      	nop
 80040e4:	2000025c 	.word	0x2000025c

080040e8 <__sfputc_r>:
 80040e8:	6893      	ldr	r3, [r2, #8]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	b410      	push	{r4}
 80040f0:	6093      	str	r3, [r2, #8]
 80040f2:	da08      	bge.n	8004106 <__sfputc_r+0x1e>
 80040f4:	6994      	ldr	r4, [r2, #24]
 80040f6:	42a3      	cmp	r3, r4
 80040f8:	db01      	blt.n	80040fe <__sfputc_r+0x16>
 80040fa:	290a      	cmp	r1, #10
 80040fc:	d103      	bne.n	8004106 <__sfputc_r+0x1e>
 80040fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004102:	f7ff bc31 	b.w	8003968 <__swbuf_r>
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	1c58      	adds	r0, r3, #1
 800410a:	6010      	str	r0, [r2, #0]
 800410c:	7019      	strb	r1, [r3, #0]
 800410e:	4608      	mov	r0, r1
 8004110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004114:	4770      	bx	lr

08004116 <__sfputs_r>:
 8004116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004118:	4606      	mov	r6, r0
 800411a:	460f      	mov	r7, r1
 800411c:	4614      	mov	r4, r2
 800411e:	18d5      	adds	r5, r2, r3
 8004120:	42ac      	cmp	r4, r5
 8004122:	d101      	bne.n	8004128 <__sfputs_r+0x12>
 8004124:	2000      	movs	r0, #0
 8004126:	e007      	b.n	8004138 <__sfputs_r+0x22>
 8004128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412c:	463a      	mov	r2, r7
 800412e:	4630      	mov	r0, r6
 8004130:	f7ff ffda 	bl	80040e8 <__sfputc_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d1f3      	bne.n	8004120 <__sfputs_r+0xa>
 8004138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800413c <_vfiprintf_r>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	460d      	mov	r5, r1
 8004142:	b09d      	sub	sp, #116	; 0x74
 8004144:	4614      	mov	r4, r2
 8004146:	4698      	mov	r8, r3
 8004148:	4606      	mov	r6, r0
 800414a:	b118      	cbz	r0, 8004154 <_vfiprintf_r+0x18>
 800414c:	6983      	ldr	r3, [r0, #24]
 800414e:	b90b      	cbnz	r3, 8004154 <_vfiprintf_r+0x18>
 8004150:	f7ff fde4 	bl	8003d1c <__sinit>
 8004154:	4b89      	ldr	r3, [pc, #548]	; (800437c <_vfiprintf_r+0x240>)
 8004156:	429d      	cmp	r5, r3
 8004158:	d11b      	bne.n	8004192 <_vfiprintf_r+0x56>
 800415a:	6875      	ldr	r5, [r6, #4]
 800415c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415e:	07d9      	lsls	r1, r3, #31
 8004160:	d405      	bmi.n	800416e <_vfiprintf_r+0x32>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	059a      	lsls	r2, r3, #22
 8004166:	d402      	bmi.n	800416e <_vfiprintf_r+0x32>
 8004168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800416a:	f7ff fe75 	bl	8003e58 <__retarget_lock_acquire_recursive>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	d501      	bpl.n	8004178 <_vfiprintf_r+0x3c>
 8004174:	692b      	ldr	r3, [r5, #16]
 8004176:	b9eb      	cbnz	r3, 80041b4 <_vfiprintf_r+0x78>
 8004178:	4629      	mov	r1, r5
 800417a:	4630      	mov	r0, r6
 800417c:	f7ff fc46 	bl	8003a0c <__swsetup_r>
 8004180:	b1c0      	cbz	r0, 80041b4 <_vfiprintf_r+0x78>
 8004182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004184:	07dc      	lsls	r4, r3, #31
 8004186:	d50e      	bpl.n	80041a6 <_vfiprintf_r+0x6a>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418c:	b01d      	add	sp, #116	; 0x74
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <_vfiprintf_r+0x244>)
 8004194:	429d      	cmp	r5, r3
 8004196:	d101      	bne.n	800419c <_vfiprintf_r+0x60>
 8004198:	68b5      	ldr	r5, [r6, #8]
 800419a:	e7df      	b.n	800415c <_vfiprintf_r+0x20>
 800419c:	4b79      	ldr	r3, [pc, #484]	; (8004384 <_vfiprintf_r+0x248>)
 800419e:	429d      	cmp	r5, r3
 80041a0:	bf08      	it	eq
 80041a2:	68f5      	ldreq	r5, [r6, #12]
 80041a4:	e7da      	b.n	800415c <_vfiprintf_r+0x20>
 80041a6:	89ab      	ldrh	r3, [r5, #12]
 80041a8:	0598      	lsls	r0, r3, #22
 80041aa:	d4ed      	bmi.n	8004188 <_vfiprintf_r+0x4c>
 80041ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ae:	f7ff fe54 	bl	8003e5a <__retarget_lock_release_recursive>
 80041b2:	e7e9      	b.n	8004188 <_vfiprintf_r+0x4c>
 80041b4:	2300      	movs	r3, #0
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	2320      	movs	r3, #32
 80041ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041be:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c2:	2330      	movs	r3, #48	; 0x30
 80041c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004388 <_vfiprintf_r+0x24c>
 80041c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041cc:	f04f 0901 	mov.w	r9, #1
 80041d0:	4623      	mov	r3, r4
 80041d2:	469a      	mov	sl, r3
 80041d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d8:	b10a      	cbz	r2, 80041de <_vfiprintf_r+0xa2>
 80041da:	2a25      	cmp	r2, #37	; 0x25
 80041dc:	d1f9      	bne.n	80041d2 <_vfiprintf_r+0x96>
 80041de:	ebba 0b04 	subs.w	fp, sl, r4
 80041e2:	d00b      	beq.n	80041fc <_vfiprintf_r+0xc0>
 80041e4:	465b      	mov	r3, fp
 80041e6:	4622      	mov	r2, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff ff93 	bl	8004116 <__sfputs_r>
 80041f0:	3001      	adds	r0, #1
 80041f2:	f000 80aa 	beq.w	800434a <_vfiprintf_r+0x20e>
 80041f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f8:	445a      	add	r2, fp
 80041fa:	9209      	str	r2, [sp, #36]	; 0x24
 80041fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80a2 	beq.w	800434a <_vfiprintf_r+0x20e>
 8004206:	2300      	movs	r3, #0
 8004208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800420c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004210:	f10a 0a01 	add.w	sl, sl, #1
 8004214:	9304      	str	r3, [sp, #16]
 8004216:	9307      	str	r3, [sp, #28]
 8004218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800421c:	931a      	str	r3, [sp, #104]	; 0x68
 800421e:	4654      	mov	r4, sl
 8004220:	2205      	movs	r2, #5
 8004222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004226:	4858      	ldr	r0, [pc, #352]	; (8004388 <_vfiprintf_r+0x24c>)
 8004228:	f7fb fff2 	bl	8000210 <memchr>
 800422c:	9a04      	ldr	r2, [sp, #16]
 800422e:	b9d8      	cbnz	r0, 8004268 <_vfiprintf_r+0x12c>
 8004230:	06d1      	lsls	r1, r2, #27
 8004232:	bf44      	itt	mi
 8004234:	2320      	movmi	r3, #32
 8004236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800423a:	0713      	lsls	r3, r2, #28
 800423c:	bf44      	itt	mi
 800423e:	232b      	movmi	r3, #43	; 0x2b
 8004240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004244:	f89a 3000 	ldrb.w	r3, [sl]
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	d015      	beq.n	8004278 <_vfiprintf_r+0x13c>
 800424c:	9a07      	ldr	r2, [sp, #28]
 800424e:	4654      	mov	r4, sl
 8004250:	2000      	movs	r0, #0
 8004252:	f04f 0c0a 	mov.w	ip, #10
 8004256:	4621      	mov	r1, r4
 8004258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800425c:	3b30      	subs	r3, #48	; 0x30
 800425e:	2b09      	cmp	r3, #9
 8004260:	d94e      	bls.n	8004300 <_vfiprintf_r+0x1c4>
 8004262:	b1b0      	cbz	r0, 8004292 <_vfiprintf_r+0x156>
 8004264:	9207      	str	r2, [sp, #28]
 8004266:	e014      	b.n	8004292 <_vfiprintf_r+0x156>
 8004268:	eba0 0308 	sub.w	r3, r0, r8
 800426c:	fa09 f303 	lsl.w	r3, r9, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	46a2      	mov	sl, r4
 8004276:	e7d2      	b.n	800421e <_vfiprintf_r+0xe2>
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	1d19      	adds	r1, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	9103      	str	r1, [sp, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	bfbb      	ittet	lt
 8004284:	425b      	neglt	r3, r3
 8004286:	f042 0202 	orrlt.w	r2, r2, #2
 800428a:	9307      	strge	r3, [sp, #28]
 800428c:	9307      	strlt	r3, [sp, #28]
 800428e:	bfb8      	it	lt
 8004290:	9204      	strlt	r2, [sp, #16]
 8004292:	7823      	ldrb	r3, [r4, #0]
 8004294:	2b2e      	cmp	r3, #46	; 0x2e
 8004296:	d10c      	bne.n	80042b2 <_vfiprintf_r+0x176>
 8004298:	7863      	ldrb	r3, [r4, #1]
 800429a:	2b2a      	cmp	r3, #42	; 0x2a
 800429c:	d135      	bne.n	800430a <_vfiprintf_r+0x1ce>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9203      	str	r2, [sp, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfb8      	it	lt
 80042aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80042ae:	3402      	adds	r4, #2
 80042b0:	9305      	str	r3, [sp, #20]
 80042b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004398 <_vfiprintf_r+0x25c>
 80042b6:	7821      	ldrb	r1, [r4, #0]
 80042b8:	2203      	movs	r2, #3
 80042ba:	4650      	mov	r0, sl
 80042bc:	f7fb ffa8 	bl	8000210 <memchr>
 80042c0:	b140      	cbz	r0, 80042d4 <_vfiprintf_r+0x198>
 80042c2:	2340      	movs	r3, #64	; 0x40
 80042c4:	eba0 000a 	sub.w	r0, r0, sl
 80042c8:	fa03 f000 	lsl.w	r0, r3, r0
 80042cc:	9b04      	ldr	r3, [sp, #16]
 80042ce:	4303      	orrs	r3, r0
 80042d0:	3401      	adds	r4, #1
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d8:	482c      	ldr	r0, [pc, #176]	; (800438c <_vfiprintf_r+0x250>)
 80042da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042de:	2206      	movs	r2, #6
 80042e0:	f7fb ff96 	bl	8000210 <memchr>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d03f      	beq.n	8004368 <_vfiprintf_r+0x22c>
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <_vfiprintf_r+0x254>)
 80042ea:	bb1b      	cbnz	r3, 8004334 <_vfiprintf_r+0x1f8>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	3307      	adds	r3, #7
 80042f0:	f023 0307 	bic.w	r3, r3, #7
 80042f4:	3308      	adds	r3, #8
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fa:	443b      	add	r3, r7
 80042fc:	9309      	str	r3, [sp, #36]	; 0x24
 80042fe:	e767      	b.n	80041d0 <_vfiprintf_r+0x94>
 8004300:	fb0c 3202 	mla	r2, ip, r2, r3
 8004304:	460c      	mov	r4, r1
 8004306:	2001      	movs	r0, #1
 8004308:	e7a5      	b.n	8004256 <_vfiprintf_r+0x11a>
 800430a:	2300      	movs	r3, #0
 800430c:	3401      	adds	r4, #1
 800430e:	9305      	str	r3, [sp, #20]
 8004310:	4619      	mov	r1, r3
 8004312:	f04f 0c0a 	mov.w	ip, #10
 8004316:	4620      	mov	r0, r4
 8004318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800431c:	3a30      	subs	r2, #48	; 0x30
 800431e:	2a09      	cmp	r2, #9
 8004320:	d903      	bls.n	800432a <_vfiprintf_r+0x1ee>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0c5      	beq.n	80042b2 <_vfiprintf_r+0x176>
 8004326:	9105      	str	r1, [sp, #20]
 8004328:	e7c3      	b.n	80042b2 <_vfiprintf_r+0x176>
 800432a:	fb0c 2101 	mla	r1, ip, r1, r2
 800432e:	4604      	mov	r4, r0
 8004330:	2301      	movs	r3, #1
 8004332:	e7f0      	b.n	8004316 <_vfiprintf_r+0x1da>
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	462a      	mov	r2, r5
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <_vfiprintf_r+0x258>)
 800433c:	a904      	add	r1, sp, #16
 800433e:	4630      	mov	r0, r6
 8004340:	f3af 8000 	nop.w
 8004344:	4607      	mov	r7, r0
 8004346:	1c78      	adds	r0, r7, #1
 8004348:	d1d6      	bne.n	80042f8 <_vfiprintf_r+0x1bc>
 800434a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800434c:	07d9      	lsls	r1, r3, #31
 800434e:	d405      	bmi.n	800435c <_vfiprintf_r+0x220>
 8004350:	89ab      	ldrh	r3, [r5, #12]
 8004352:	059a      	lsls	r2, r3, #22
 8004354:	d402      	bmi.n	800435c <_vfiprintf_r+0x220>
 8004356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004358:	f7ff fd7f 	bl	8003e5a <__retarget_lock_release_recursive>
 800435c:	89ab      	ldrh	r3, [r5, #12]
 800435e:	065b      	lsls	r3, r3, #25
 8004360:	f53f af12 	bmi.w	8004188 <_vfiprintf_r+0x4c>
 8004364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004366:	e711      	b.n	800418c <_vfiprintf_r+0x50>
 8004368:	ab03      	add	r3, sp, #12
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	462a      	mov	r2, r5
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <_vfiprintf_r+0x258>)
 8004370:	a904      	add	r1, sp, #16
 8004372:	4630      	mov	r0, r6
 8004374:	f000 f880 	bl	8004478 <_printf_i>
 8004378:	e7e4      	b.n	8004344 <_vfiprintf_r+0x208>
 800437a:	bf00      	nop
 800437c:	080049b0 	.word	0x080049b0
 8004380:	080049d0 	.word	0x080049d0
 8004384:	08004990 	.word	0x08004990
 8004388:	080049f0 	.word	0x080049f0
 800438c:	080049fa 	.word	0x080049fa
 8004390:	00000000 	.word	0x00000000
 8004394:	08004117 	.word	0x08004117
 8004398:	080049f6 	.word	0x080049f6

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bfb8      	it	lt
 80043b0:	4613      	movlt	r3, r2
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043b8:	4607      	mov	r7, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc26      	bgt.n	8004432 <_printf_common+0x96>
 80043e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043e8:	1e13      	subs	r3, r2, #0
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d42b      	bmi.n	800444c <_printf_common+0xb0>
 80043f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043f8:	4649      	mov	r1, r9
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d01e      	beq.n	8004440 <_printf_common+0xa4>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	68e5      	ldr	r5, [r4, #12]
 8004406:	6832      	ldr	r2, [r6, #0]
 8004408:	f003 0306 	and.w	r3, r3, #6
 800440c:	2b04      	cmp	r3, #4
 800440e:	bf08      	it	eq
 8004410:	1aad      	subeq	r5, r5, r2
 8004412:	68a3      	ldr	r3, [r4, #8]
 8004414:	6922      	ldr	r2, [r4, #16]
 8004416:	bf0c      	ite	eq
 8004418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800441c:	2500      	movne	r5, #0
 800441e:	4293      	cmp	r3, r2
 8004420:	bfc4      	itt	gt
 8004422:	1a9b      	subgt	r3, r3, r2
 8004424:	18ed      	addgt	r5, r5, r3
 8004426:	2600      	movs	r6, #0
 8004428:	341a      	adds	r4, #26
 800442a:	42b5      	cmp	r5, r6
 800442c:	d11a      	bne.n	8004464 <_printf_common+0xc8>
 800442e:	2000      	movs	r0, #0
 8004430:	e008      	b.n	8004444 <_printf_common+0xa8>
 8004432:	2301      	movs	r3, #1
 8004434:	4652      	mov	r2, sl
 8004436:	4649      	mov	r1, r9
 8004438:	4638      	mov	r0, r7
 800443a:	47c0      	blx	r8
 800443c:	3001      	adds	r0, #1
 800443e:	d103      	bne.n	8004448 <_printf_common+0xac>
 8004440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004448:	3501      	adds	r5, #1
 800444a:	e7c6      	b.n	80043da <_printf_common+0x3e>
 800444c:	18e1      	adds	r1, r4, r3
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	2030      	movs	r0, #48	; 0x30
 8004452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004456:	4422      	add	r2, r4
 8004458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800445c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004460:	3302      	adds	r3, #2
 8004462:	e7c7      	b.n	80043f4 <_printf_common+0x58>
 8004464:	2301      	movs	r3, #1
 8004466:	4622      	mov	r2, r4
 8004468:	4649      	mov	r1, r9
 800446a:	4638      	mov	r0, r7
 800446c:	47c0      	blx	r8
 800446e:	3001      	adds	r0, #1
 8004470:	d0e6      	beq.n	8004440 <_printf_common+0xa4>
 8004472:	3601      	adds	r6, #1
 8004474:	e7d9      	b.n	800442a <_printf_common+0x8e>
	...

08004478 <_printf_i>:
 8004478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	7e0f      	ldrb	r7, [r1, #24]
 800447e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004480:	2f78      	cmp	r7, #120	; 0x78
 8004482:	4691      	mov	r9, r2
 8004484:	4680      	mov	r8, r0
 8004486:	460c      	mov	r4, r1
 8004488:	469a      	mov	sl, r3
 800448a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800448e:	d807      	bhi.n	80044a0 <_printf_i+0x28>
 8004490:	2f62      	cmp	r7, #98	; 0x62
 8004492:	d80a      	bhi.n	80044aa <_printf_i+0x32>
 8004494:	2f00      	cmp	r7, #0
 8004496:	f000 80d8 	beq.w	800464a <_printf_i+0x1d2>
 800449a:	2f58      	cmp	r7, #88	; 0x58
 800449c:	f000 80a3 	beq.w	80045e6 <_printf_i+0x16e>
 80044a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044a8:	e03a      	b.n	8004520 <_printf_i+0xa8>
 80044aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ae:	2b15      	cmp	r3, #21
 80044b0:	d8f6      	bhi.n	80044a0 <_printf_i+0x28>
 80044b2:	a101      	add	r1, pc, #4	; (adr r1, 80044b8 <_printf_i+0x40>)
 80044b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b8:	08004511 	.word	0x08004511
 80044bc:	08004525 	.word	0x08004525
 80044c0:	080044a1 	.word	0x080044a1
 80044c4:	080044a1 	.word	0x080044a1
 80044c8:	080044a1 	.word	0x080044a1
 80044cc:	080044a1 	.word	0x080044a1
 80044d0:	08004525 	.word	0x08004525
 80044d4:	080044a1 	.word	0x080044a1
 80044d8:	080044a1 	.word	0x080044a1
 80044dc:	080044a1 	.word	0x080044a1
 80044e0:	080044a1 	.word	0x080044a1
 80044e4:	08004631 	.word	0x08004631
 80044e8:	08004555 	.word	0x08004555
 80044ec:	08004613 	.word	0x08004613
 80044f0:	080044a1 	.word	0x080044a1
 80044f4:	080044a1 	.word	0x080044a1
 80044f8:	08004653 	.word	0x08004653
 80044fc:	080044a1 	.word	0x080044a1
 8004500:	08004555 	.word	0x08004555
 8004504:	080044a1 	.word	0x080044a1
 8004508:	080044a1 	.word	0x080044a1
 800450c:	0800461b 	.word	0x0800461b
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	602a      	str	r2, [r5, #0]
 8004518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800451c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004520:	2301      	movs	r3, #1
 8004522:	e0a3      	b.n	800466c <_printf_i+0x1f4>
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	6829      	ldr	r1, [r5, #0]
 8004528:	0606      	lsls	r6, r0, #24
 800452a:	f101 0304 	add.w	r3, r1, #4
 800452e:	d50a      	bpl.n	8004546 <_printf_i+0xce>
 8004530:	680e      	ldr	r6, [r1, #0]
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	2e00      	cmp	r6, #0
 8004536:	da03      	bge.n	8004540 <_printf_i+0xc8>
 8004538:	232d      	movs	r3, #45	; 0x2d
 800453a:	4276      	negs	r6, r6
 800453c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004540:	485e      	ldr	r0, [pc, #376]	; (80046bc <_printf_i+0x244>)
 8004542:	230a      	movs	r3, #10
 8004544:	e019      	b.n	800457a <_printf_i+0x102>
 8004546:	680e      	ldr	r6, [r1, #0]
 8004548:	602b      	str	r3, [r5, #0]
 800454a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800454e:	bf18      	it	ne
 8004550:	b236      	sxthne	r6, r6
 8004552:	e7ef      	b.n	8004534 <_printf_i+0xbc>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	1d19      	adds	r1, r3, #4
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	0601      	lsls	r1, r0, #24
 800455e:	d501      	bpl.n	8004564 <_printf_i+0xec>
 8004560:	681e      	ldr	r6, [r3, #0]
 8004562:	e002      	b.n	800456a <_printf_i+0xf2>
 8004564:	0646      	lsls	r6, r0, #25
 8004566:	d5fb      	bpl.n	8004560 <_printf_i+0xe8>
 8004568:	881e      	ldrh	r6, [r3, #0]
 800456a:	4854      	ldr	r0, [pc, #336]	; (80046bc <_printf_i+0x244>)
 800456c:	2f6f      	cmp	r7, #111	; 0x6f
 800456e:	bf0c      	ite	eq
 8004570:	2308      	moveq	r3, #8
 8004572:	230a      	movne	r3, #10
 8004574:	2100      	movs	r1, #0
 8004576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800457a:	6865      	ldr	r5, [r4, #4]
 800457c:	60a5      	str	r5, [r4, #8]
 800457e:	2d00      	cmp	r5, #0
 8004580:	bfa2      	ittt	ge
 8004582:	6821      	ldrge	r1, [r4, #0]
 8004584:	f021 0104 	bicge.w	r1, r1, #4
 8004588:	6021      	strge	r1, [r4, #0]
 800458a:	b90e      	cbnz	r6, 8004590 <_printf_i+0x118>
 800458c:	2d00      	cmp	r5, #0
 800458e:	d04d      	beq.n	800462c <_printf_i+0x1b4>
 8004590:	4615      	mov	r5, r2
 8004592:	fbb6 f1f3 	udiv	r1, r6, r3
 8004596:	fb03 6711 	mls	r7, r3, r1, r6
 800459a:	5dc7      	ldrb	r7, [r0, r7]
 800459c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045a0:	4637      	mov	r7, r6
 80045a2:	42bb      	cmp	r3, r7
 80045a4:	460e      	mov	r6, r1
 80045a6:	d9f4      	bls.n	8004592 <_printf_i+0x11a>
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d10b      	bne.n	80045c4 <_printf_i+0x14c>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07de      	lsls	r6, r3, #31
 80045b0:	d508      	bpl.n	80045c4 <_printf_i+0x14c>
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	6861      	ldr	r1, [r4, #4]
 80045b6:	4299      	cmp	r1, r3
 80045b8:	bfde      	ittt	le
 80045ba:	2330      	movle	r3, #48	; 0x30
 80045bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80045c4:	1b52      	subs	r2, r2, r5
 80045c6:	6122      	str	r2, [r4, #16]
 80045c8:	f8cd a000 	str.w	sl, [sp]
 80045cc:	464b      	mov	r3, r9
 80045ce:	aa03      	add	r2, sp, #12
 80045d0:	4621      	mov	r1, r4
 80045d2:	4640      	mov	r0, r8
 80045d4:	f7ff fee2 	bl	800439c <_printf_common>
 80045d8:	3001      	adds	r0, #1
 80045da:	d14c      	bne.n	8004676 <_printf_i+0x1fe>
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e0:	b004      	add	sp, #16
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e6:	4835      	ldr	r0, [pc, #212]	; (80046bc <_printf_i+0x244>)
 80045e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045ec:	6829      	ldr	r1, [r5, #0]
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80045f4:	6029      	str	r1, [r5, #0]
 80045f6:	061d      	lsls	r5, r3, #24
 80045f8:	d514      	bpl.n	8004624 <_printf_i+0x1ac>
 80045fa:	07df      	lsls	r7, r3, #31
 80045fc:	bf44      	itt	mi
 80045fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004602:	6023      	strmi	r3, [r4, #0]
 8004604:	b91e      	cbnz	r6, 800460e <_printf_i+0x196>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	f023 0320 	bic.w	r3, r3, #32
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	2310      	movs	r3, #16
 8004610:	e7b0      	b.n	8004574 <_printf_i+0xfc>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	f043 0320 	orr.w	r3, r3, #32
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	2378      	movs	r3, #120	; 0x78
 800461c:	4828      	ldr	r0, [pc, #160]	; (80046c0 <_printf_i+0x248>)
 800461e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004622:	e7e3      	b.n	80045ec <_printf_i+0x174>
 8004624:	0659      	lsls	r1, r3, #25
 8004626:	bf48      	it	mi
 8004628:	b2b6      	uxthmi	r6, r6
 800462a:	e7e6      	b.n	80045fa <_printf_i+0x182>
 800462c:	4615      	mov	r5, r2
 800462e:	e7bb      	b.n	80045a8 <_printf_i+0x130>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	6826      	ldr	r6, [r4, #0]
 8004634:	6961      	ldr	r1, [r4, #20]
 8004636:	1d18      	adds	r0, r3, #4
 8004638:	6028      	str	r0, [r5, #0]
 800463a:	0635      	lsls	r5, r6, #24
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	d501      	bpl.n	8004644 <_printf_i+0x1cc>
 8004640:	6019      	str	r1, [r3, #0]
 8004642:	e002      	b.n	800464a <_printf_i+0x1d2>
 8004644:	0670      	lsls	r0, r6, #25
 8004646:	d5fb      	bpl.n	8004640 <_printf_i+0x1c8>
 8004648:	8019      	strh	r1, [r3, #0]
 800464a:	2300      	movs	r3, #0
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	4615      	mov	r5, r2
 8004650:	e7ba      	b.n	80045c8 <_printf_i+0x150>
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	602a      	str	r2, [r5, #0]
 8004658:	681d      	ldr	r5, [r3, #0]
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	2100      	movs	r1, #0
 800465e:	4628      	mov	r0, r5
 8004660:	f7fb fdd6 	bl	8000210 <memchr>
 8004664:	b108      	cbz	r0, 800466a <_printf_i+0x1f2>
 8004666:	1b40      	subs	r0, r0, r5
 8004668:	6060      	str	r0, [r4, #4]
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	2300      	movs	r3, #0
 8004670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004674:	e7a8      	b.n	80045c8 <_printf_i+0x150>
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	462a      	mov	r2, r5
 800467a:	4649      	mov	r1, r9
 800467c:	4640      	mov	r0, r8
 800467e:	47d0      	blx	sl
 8004680:	3001      	adds	r0, #1
 8004682:	d0ab      	beq.n	80045dc <_printf_i+0x164>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	079b      	lsls	r3, r3, #30
 8004688:	d413      	bmi.n	80046b2 <_printf_i+0x23a>
 800468a:	68e0      	ldr	r0, [r4, #12]
 800468c:	9b03      	ldr	r3, [sp, #12]
 800468e:	4298      	cmp	r0, r3
 8004690:	bfb8      	it	lt
 8004692:	4618      	movlt	r0, r3
 8004694:	e7a4      	b.n	80045e0 <_printf_i+0x168>
 8004696:	2301      	movs	r3, #1
 8004698:	4632      	mov	r2, r6
 800469a:	4649      	mov	r1, r9
 800469c:	4640      	mov	r0, r8
 800469e:	47d0      	blx	sl
 80046a0:	3001      	adds	r0, #1
 80046a2:	d09b      	beq.n	80045dc <_printf_i+0x164>
 80046a4:	3501      	adds	r5, #1
 80046a6:	68e3      	ldr	r3, [r4, #12]
 80046a8:	9903      	ldr	r1, [sp, #12]
 80046aa:	1a5b      	subs	r3, r3, r1
 80046ac:	42ab      	cmp	r3, r5
 80046ae:	dcf2      	bgt.n	8004696 <_printf_i+0x21e>
 80046b0:	e7eb      	b.n	800468a <_printf_i+0x212>
 80046b2:	2500      	movs	r5, #0
 80046b4:	f104 0619 	add.w	r6, r4, #25
 80046b8:	e7f5      	b.n	80046a6 <_printf_i+0x22e>
 80046ba:	bf00      	nop
 80046bc:	08004a01 	.word	0x08004a01
 80046c0:	08004a12 	.word	0x08004a12

080046c4 <_sbrk_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d06      	ldr	r5, [pc, #24]	; (80046e0 <_sbrk_r+0x1c>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc fe4c 	bl	800136c <_sbrk>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_sbrk_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_sbrk_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000264 	.word	0x20000264

080046e4 <__sread>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ec:	f000 f8a0 	bl	8004830 <_read_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	bfab      	itete	ge
 80046f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046f6:	89a3      	ldrhlt	r3, [r4, #12]
 80046f8:	181b      	addge	r3, r3, r0
 80046fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046fe:	bfac      	ite	ge
 8004700:	6563      	strge	r3, [r4, #84]	; 0x54
 8004702:	81a3      	strhlt	r3, [r4, #12]
 8004704:	bd10      	pop	{r4, pc}

08004706 <__swrite>:
 8004706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470a:	461f      	mov	r7, r3
 800470c:	898b      	ldrh	r3, [r1, #12]
 800470e:	05db      	lsls	r3, r3, #23
 8004710:	4605      	mov	r5, r0
 8004712:	460c      	mov	r4, r1
 8004714:	4616      	mov	r6, r2
 8004716:	d505      	bpl.n	8004724 <__swrite+0x1e>
 8004718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471c:	2302      	movs	r3, #2
 800471e:	2200      	movs	r2, #0
 8004720:	f000 f868 	bl	80047f4 <_lseek_r>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800472a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	4632      	mov	r2, r6
 8004732:	463b      	mov	r3, r7
 8004734:	4628      	mov	r0, r5
 8004736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473a:	f000 b817 	b.w	800476c <_write_r>

0800473e <__sseek>:
 800473e:	b510      	push	{r4, lr}
 8004740:	460c      	mov	r4, r1
 8004742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004746:	f000 f855 	bl	80047f4 <_lseek_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	bf15      	itete	ne
 8004750:	6560      	strne	r0, [r4, #84]	; 0x54
 8004752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800475a:	81a3      	strheq	r3, [r4, #12]
 800475c:	bf18      	it	ne
 800475e:	81a3      	strhne	r3, [r4, #12]
 8004760:	bd10      	pop	{r4, pc}

08004762 <__sclose>:
 8004762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004766:	f000 b813 	b.w	8004790 <_close_r>
	...

0800476c <_write_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d07      	ldr	r5, [pc, #28]	; (800478c <_write_r+0x20>)
 8004770:	4604      	mov	r4, r0
 8004772:	4608      	mov	r0, r1
 8004774:	4611      	mov	r1, r2
 8004776:	2200      	movs	r2, #0
 8004778:	602a      	str	r2, [r5, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f7fc fda5 	bl	80012ca <_write>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_write_r+0x1e>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_write_r+0x1e>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	20000264 	.word	0x20000264

08004790 <_close_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d06      	ldr	r5, [pc, #24]	; (80047ac <_close_r+0x1c>)
 8004794:	2300      	movs	r3, #0
 8004796:	4604      	mov	r4, r0
 8004798:	4608      	mov	r0, r1
 800479a:	602b      	str	r3, [r5, #0]
 800479c:	f7fc fdb1 	bl	8001302 <_close>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_close_r+0x1a>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_close_r+0x1a>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	20000264 	.word	0x20000264

080047b0 <_fstat_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d07      	ldr	r5, [pc, #28]	; (80047d0 <_fstat_r+0x20>)
 80047b4:	2300      	movs	r3, #0
 80047b6:	4604      	mov	r4, r0
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	f7fc fdac 	bl	800131a <_fstat>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	d102      	bne.n	80047cc <_fstat_r+0x1c>
 80047c6:	682b      	ldr	r3, [r5, #0]
 80047c8:	b103      	cbz	r3, 80047cc <_fstat_r+0x1c>
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	bd38      	pop	{r3, r4, r5, pc}
 80047ce:	bf00      	nop
 80047d0:	20000264 	.word	0x20000264

080047d4 <_isatty_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d06      	ldr	r5, [pc, #24]	; (80047f0 <_isatty_r+0x1c>)
 80047d8:	2300      	movs	r3, #0
 80047da:	4604      	mov	r4, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fc fdab 	bl	800133a <_isatty>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_isatty_r+0x1a>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_isatty_r+0x1a>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000264 	.word	0x20000264

080047f4 <_lseek_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4d07      	ldr	r5, [pc, #28]	; (8004814 <_lseek_r+0x20>)
 80047f8:	4604      	mov	r4, r0
 80047fa:	4608      	mov	r0, r1
 80047fc:	4611      	mov	r1, r2
 80047fe:	2200      	movs	r2, #0
 8004800:	602a      	str	r2, [r5, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	f7fc fda4 	bl	8001350 <_lseek>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_lseek_r+0x1e>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_lseek_r+0x1e>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	20000264 	.word	0x20000264

08004818 <__malloc_lock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_lock+0x8>)
 800481a:	f7ff bb1d 	b.w	8003e58 <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	20000258 	.word	0x20000258

08004824 <__malloc_unlock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_unlock+0x8>)
 8004826:	f7ff bb18 	b.w	8003e5a <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	20000258 	.word	0x20000258

08004830 <_read_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d07      	ldr	r5, [pc, #28]	; (8004850 <_read_r+0x20>)
 8004834:	4604      	mov	r4, r0
 8004836:	4608      	mov	r0, r1
 8004838:	4611      	mov	r1, r2
 800483a:	2200      	movs	r2, #0
 800483c:	602a      	str	r2, [r5, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	f7fc fd26 	bl	8001290 <_read>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_read_r+0x1e>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_read_r+0x1e>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	20000264 	.word	0x20000264

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
